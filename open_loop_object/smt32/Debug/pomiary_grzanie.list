
pomiary_grzanie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca38  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800cc08  0800cc08  0001cc08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0f4  0800d0f4  00020330  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0f4  0800d0f4  0001d0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0fc  0800d0fc  00020330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0fc  0800d0fc  0001d0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d100  0800d100  0001d100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800d104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001f0  0800d2f4  000201f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000290  0800d394  00020290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000848  20000330  0800d434  00020330  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000b78  0800d434  00020b78  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020330  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c823  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003256  00000000  00000000  0003cb83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016e8  00000000  00000000  0003fde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000015a0  00000000  00000000  000414c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000293e9  00000000  00000000  00042a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b677  00000000  00000000  0006be51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fc7bd  00000000  00000000  000874c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00183c85  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007830  00000000  00000000  00183cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000330 	.word	0x20000330
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cbf0 	.word	0x0800cbf0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000334 	.word	0x20000334
 800020c:	0800cbf0 	.word	0x0800cbf0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9f5 	b.w	80010d4 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9aa 	b.w	80010d4 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	468e      	mov	lr, r1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d14d      	bne.n	8000eae <__udivmoddi4+0xaa>
 8000e12:	428a      	cmp	r2, r1
 8000e14:	4694      	mov	ip, r2
 8000e16:	d969      	bls.n	8000eec <__udivmoddi4+0xe8>
 8000e18:	fab2 f282 	clz	r2, r2
 8000e1c:	b152      	cbz	r2, 8000e34 <__udivmoddi4+0x30>
 8000e1e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e22:	f1c2 0120 	rsb	r1, r2, #32
 8000e26:	fa20 f101 	lsr.w	r1, r0, r1
 8000e2a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e32:	4094      	lsls	r4, r2
 8000e34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e38:	0c21      	lsrs	r1, r4, #16
 8000e3a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e3e:	fa1f f78c 	uxth.w	r7, ip
 8000e42:	fb08 e316 	mls	r3, r8, r6, lr
 8000e46:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e4a:	fb06 f107 	mul.w	r1, r6, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x64>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e5a:	f080 811f 	bcs.w	800109c <__udivmoddi4+0x298>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 811c 	bls.w	800109c <__udivmoddi4+0x298>
 8000e64:	3e02      	subs	r6, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a5b      	subs	r3, r3, r1
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e78:	fb00 f707 	mul.w	r7, r0, r7
 8000e7c:	42a7      	cmp	r7, r4
 8000e7e:	d90a      	bls.n	8000e96 <__udivmoddi4+0x92>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	f080 810a 	bcs.w	80010a0 <__udivmoddi4+0x29c>
 8000e8c:	42a7      	cmp	r7, r4
 8000e8e:	f240 8107 	bls.w	80010a0 <__udivmoddi4+0x29c>
 8000e92:	4464      	add	r4, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e9a:	1be4      	subs	r4, r4, r7
 8000e9c:	2600      	movs	r6, #0
 8000e9e:	b11d      	cbz	r5, 8000ea8 <__udivmoddi4+0xa4>
 8000ea0:	40d4      	lsrs	r4, r2
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ea8:	4631      	mov	r1, r6
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d909      	bls.n	8000ec6 <__udivmoddi4+0xc2>
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	f000 80ef 	beq.w	8001096 <__udivmoddi4+0x292>
 8000eb8:	2600      	movs	r6, #0
 8000eba:	e9c5 0100 	strd	r0, r1, [r5]
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	4631      	mov	r1, r6
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	fab3 f683 	clz	r6, r3
 8000eca:	2e00      	cmp	r6, #0
 8000ecc:	d14a      	bne.n	8000f64 <__udivmoddi4+0x160>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d302      	bcc.n	8000ed8 <__udivmoddi4+0xd4>
 8000ed2:	4282      	cmp	r2, r0
 8000ed4:	f200 80f9 	bhi.w	80010ca <__udivmoddi4+0x2c6>
 8000ed8:	1a84      	subs	r4, r0, r2
 8000eda:	eb61 0303 	sbc.w	r3, r1, r3
 8000ede:	2001      	movs	r0, #1
 8000ee0:	469e      	mov	lr, r3
 8000ee2:	2d00      	cmp	r5, #0
 8000ee4:	d0e0      	beq.n	8000ea8 <__udivmoddi4+0xa4>
 8000ee6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eea:	e7dd      	b.n	8000ea8 <__udivmoddi4+0xa4>
 8000eec:	b902      	cbnz	r2, 8000ef0 <__udivmoddi4+0xec>
 8000eee:	deff      	udf	#255	; 0xff
 8000ef0:	fab2 f282 	clz	r2, r2
 8000ef4:	2a00      	cmp	r2, #0
 8000ef6:	f040 8092 	bne.w	800101e <__udivmoddi4+0x21a>
 8000efa:	eba1 010c 	sub.w	r1, r1, ip
 8000efe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f02:	fa1f fe8c 	uxth.w	lr, ip
 8000f06:	2601      	movs	r6, #1
 8000f08:	0c20      	lsrs	r0, r4, #16
 8000f0a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f0e:	fb07 1113 	mls	r1, r7, r3, r1
 8000f12:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f16:	fb0e f003 	mul.w	r0, lr, r3
 8000f1a:	4288      	cmp	r0, r1
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x12c>
 8000f1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f22:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f26:	d202      	bcs.n	8000f2e <__udivmoddi4+0x12a>
 8000f28:	4288      	cmp	r0, r1
 8000f2a:	f200 80cb 	bhi.w	80010c4 <__udivmoddi4+0x2c0>
 8000f2e:	4643      	mov	r3, r8
 8000f30:	1a09      	subs	r1, r1, r0
 8000f32:	b2a4      	uxth	r4, r4
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1110 	mls	r1, r7, r0, r1
 8000f3c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f40:	fb0e fe00 	mul.w	lr, lr, r0
 8000f44:	45a6      	cmp	lr, r4
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x156>
 8000f48:	eb1c 0404 	adds.w	r4, ip, r4
 8000f4c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f50:	d202      	bcs.n	8000f58 <__udivmoddi4+0x154>
 8000f52:	45a6      	cmp	lr, r4
 8000f54:	f200 80bb 	bhi.w	80010ce <__udivmoddi4+0x2ca>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	eba4 040e 	sub.w	r4, r4, lr
 8000f5e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f62:	e79c      	b.n	8000e9e <__udivmoddi4+0x9a>
 8000f64:	f1c6 0720 	rsb	r7, r6, #32
 8000f68:	40b3      	lsls	r3, r6
 8000f6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f72:	fa20 f407 	lsr.w	r4, r0, r7
 8000f76:	fa01 f306 	lsl.w	r3, r1, r6
 8000f7a:	431c      	orrs	r4, r3
 8000f7c:	40f9      	lsrs	r1, r7
 8000f7e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f82:	fa00 f306 	lsl.w	r3, r0, r6
 8000f86:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f8a:	0c20      	lsrs	r0, r4, #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fb09 1118 	mls	r1, r9, r8, r1
 8000f94:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f98:	fb08 f00e 	mul.w	r0, r8, lr
 8000f9c:	4288      	cmp	r0, r1
 8000f9e:	fa02 f206 	lsl.w	r2, r2, r6
 8000fa2:	d90b      	bls.n	8000fbc <__udivmoddi4+0x1b8>
 8000fa4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fac:	f080 8088 	bcs.w	80010c0 <__udivmoddi4+0x2bc>
 8000fb0:	4288      	cmp	r0, r1
 8000fb2:	f240 8085 	bls.w	80010c0 <__udivmoddi4+0x2bc>
 8000fb6:	f1a8 0802 	sub.w	r8, r8, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1a09      	subs	r1, r1, r0
 8000fbe:	b2a4      	uxth	r4, r4
 8000fc0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fc4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fc8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fcc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fd0:	458e      	cmp	lr, r1
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x1e2>
 8000fd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fdc:	d26c      	bcs.n	80010b8 <__udivmoddi4+0x2b4>
 8000fde:	458e      	cmp	lr, r1
 8000fe0:	d96a      	bls.n	80010b8 <__udivmoddi4+0x2b4>
 8000fe2:	3802      	subs	r0, #2
 8000fe4:	4461      	add	r1, ip
 8000fe6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fea:	fba0 9402 	umull	r9, r4, r0, r2
 8000fee:	eba1 010e 	sub.w	r1, r1, lr
 8000ff2:	42a1      	cmp	r1, r4
 8000ff4:	46c8      	mov	r8, r9
 8000ff6:	46a6      	mov	lr, r4
 8000ff8:	d356      	bcc.n	80010a8 <__udivmoddi4+0x2a4>
 8000ffa:	d053      	beq.n	80010a4 <__udivmoddi4+0x2a0>
 8000ffc:	b15d      	cbz	r5, 8001016 <__udivmoddi4+0x212>
 8000ffe:	ebb3 0208 	subs.w	r2, r3, r8
 8001002:	eb61 010e 	sbc.w	r1, r1, lr
 8001006:	fa01 f707 	lsl.w	r7, r1, r7
 800100a:	fa22 f306 	lsr.w	r3, r2, r6
 800100e:	40f1      	lsrs	r1, r6
 8001010:	431f      	orrs	r7, r3
 8001012:	e9c5 7100 	strd	r7, r1, [r5]
 8001016:	2600      	movs	r6, #0
 8001018:	4631      	mov	r1, r6
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	f1c2 0320 	rsb	r3, r2, #32
 8001022:	40d8      	lsrs	r0, r3
 8001024:	fa0c fc02 	lsl.w	ip, ip, r2
 8001028:	fa21 f303 	lsr.w	r3, r1, r3
 800102c:	4091      	lsls	r1, r2
 800102e:	4301      	orrs	r1, r0
 8001030:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001034:	fa1f fe8c 	uxth.w	lr, ip
 8001038:	fbb3 f0f7 	udiv	r0, r3, r7
 800103c:	fb07 3610 	mls	r6, r7, r0, r3
 8001040:	0c0b      	lsrs	r3, r1, #16
 8001042:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001046:	fb00 f60e 	mul.w	r6, r0, lr
 800104a:	429e      	cmp	r6, r3
 800104c:	fa04 f402 	lsl.w	r4, r4, r2
 8001050:	d908      	bls.n	8001064 <__udivmoddi4+0x260>
 8001052:	eb1c 0303 	adds.w	r3, ip, r3
 8001056:	f100 38ff 	add.w	r8, r0, #4294967295
 800105a:	d22f      	bcs.n	80010bc <__udivmoddi4+0x2b8>
 800105c:	429e      	cmp	r6, r3
 800105e:	d92d      	bls.n	80010bc <__udivmoddi4+0x2b8>
 8001060:	3802      	subs	r0, #2
 8001062:	4463      	add	r3, ip
 8001064:	1b9b      	subs	r3, r3, r6
 8001066:	b289      	uxth	r1, r1
 8001068:	fbb3 f6f7 	udiv	r6, r3, r7
 800106c:	fb07 3316 	mls	r3, r7, r6, r3
 8001070:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001074:	fb06 f30e 	mul.w	r3, r6, lr
 8001078:	428b      	cmp	r3, r1
 800107a:	d908      	bls.n	800108e <__udivmoddi4+0x28a>
 800107c:	eb1c 0101 	adds.w	r1, ip, r1
 8001080:	f106 38ff 	add.w	r8, r6, #4294967295
 8001084:	d216      	bcs.n	80010b4 <__udivmoddi4+0x2b0>
 8001086:	428b      	cmp	r3, r1
 8001088:	d914      	bls.n	80010b4 <__udivmoddi4+0x2b0>
 800108a:	3e02      	subs	r6, #2
 800108c:	4461      	add	r1, ip
 800108e:	1ac9      	subs	r1, r1, r3
 8001090:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001094:	e738      	b.n	8000f08 <__udivmoddi4+0x104>
 8001096:	462e      	mov	r6, r5
 8001098:	4628      	mov	r0, r5
 800109a:	e705      	b.n	8000ea8 <__udivmoddi4+0xa4>
 800109c:	4606      	mov	r6, r0
 800109e:	e6e3      	b.n	8000e68 <__udivmoddi4+0x64>
 80010a0:	4618      	mov	r0, r3
 80010a2:	e6f8      	b.n	8000e96 <__udivmoddi4+0x92>
 80010a4:	454b      	cmp	r3, r9
 80010a6:	d2a9      	bcs.n	8000ffc <__udivmoddi4+0x1f8>
 80010a8:	ebb9 0802 	subs.w	r8, r9, r2
 80010ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010b0:	3801      	subs	r0, #1
 80010b2:	e7a3      	b.n	8000ffc <__udivmoddi4+0x1f8>
 80010b4:	4646      	mov	r6, r8
 80010b6:	e7ea      	b.n	800108e <__udivmoddi4+0x28a>
 80010b8:	4620      	mov	r0, r4
 80010ba:	e794      	b.n	8000fe6 <__udivmoddi4+0x1e2>
 80010bc:	4640      	mov	r0, r8
 80010be:	e7d1      	b.n	8001064 <__udivmoddi4+0x260>
 80010c0:	46d0      	mov	r8, sl
 80010c2:	e77b      	b.n	8000fbc <__udivmoddi4+0x1b8>
 80010c4:	3b02      	subs	r3, #2
 80010c6:	4461      	add	r1, ip
 80010c8:	e732      	b.n	8000f30 <__udivmoddi4+0x12c>
 80010ca:	4630      	mov	r0, r6
 80010cc:	e709      	b.n	8000ee2 <__udivmoddi4+0xde>
 80010ce:	4464      	add	r4, ip
 80010d0:	3802      	subs	r0, #2
 80010d2:	e742      	b.n	8000f5a <__udivmoddi4+0x156>

080010d4 <__aeabi_idiv0>:
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af04      	add	r7, sp, #16
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <BMP280_Read8+0x38>)
 80010e8:	6818      	ldr	r0, [r3, #0]
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	230a      	movs	r3, #10
 80010f0:	9302      	str	r3, [sp, #8]
 80010f2:	2301      	movs	r3, #1
 80010f4:	9301      	str	r3, [sp, #4]
 80010f6:	f107 030f 	add.w	r3, r7, #15
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2301      	movs	r3, #1
 80010fe:	21ec      	movs	r1, #236	; 0xec
 8001100:	f002 fd6c 	bl	8003bdc <HAL_I2C_Mem_Read>
  return tmp;
 8001104:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	2000034c 	.word	0x2000034c

08001114 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af04      	add	r7, sp, #16
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <BMP280_Read16+0x40>)
 8001120:	6818      	ldr	r0, [r3, #0]
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	b29a      	uxth	r2, r3
 8001126:	230a      	movs	r3, #10
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	2302      	movs	r3, #2
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2301      	movs	r3, #1
 8001136:	21ec      	movs	r1, #236	; 0xec
 8001138:	f002 fd50 	bl	8003bdc <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 800113c:	7b3b      	ldrb	r3, [r7, #12]
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	b21a      	sxth	r2, r3
 8001142:	7b7b      	ldrb	r3, [r7, #13]
 8001144:	b21b      	sxth	r3, r3
 8001146:	4313      	orrs	r3, r2
 8001148:	b21b      	sxth	r3, r3
 800114a:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2000034c 	.word	0x2000034c

08001158 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ffd5 	bl	8001114 <BMP280_Read16>
 800116a:	4603      	mov	r3, r0
 800116c:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 800116e:	89fb      	ldrh	r3, [r7, #14]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	b29b      	uxth	r3, r3
 8001174:	b21a      	sxth	r2, r3
 8001176:	89fb      	ldrh	r3, [r7, #14]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	b21b      	sxth	r3, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	b21b      	sxth	r3, r3
 8001180:	b29b      	uxth	r3, r3
}
 8001182:	4618      	mov	r0, r3
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af04      	add	r7, sp, #16
 8001192:	4603      	mov	r3, r0
 8001194:	460a      	mov	r2, r1
 8001196:	71fb      	strb	r3, [r7, #7]
 8001198:	4613      	mov	r3, r2
 800119a:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <BMP280_Write8+0x34>)
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	230a      	movs	r3, #10
 80011a6:	9302      	str	r3, [sp, #8]
 80011a8:	2301      	movs	r3, #1
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	1dbb      	adds	r3, r7, #6
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2301      	movs	r3, #1
 80011b2:	21ec      	movs	r1, #236	; 0xec
 80011b4:	f002 fbfe 	bl	80039b4 <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2000034c 	.word	0x2000034c

080011c4 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af04      	add	r7, sp, #16
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <BMP280_Read24+0x40>)
 80011d0:	6818      	ldr	r0, [r3, #0]
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	230a      	movs	r3, #10
 80011d8:	9302      	str	r3, [sp, #8]
 80011da:	2303      	movs	r3, #3
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2301      	movs	r3, #1
 80011e6:	21ec      	movs	r1, #236	; 0xec
 80011e8:	f002 fcf8 	bl	8003bdc <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 80011ec:	7b3b      	ldrb	r3, [r7, #12]
 80011ee:	041a      	lsls	r2, r3, #16
 80011f0:	7b7b      	ldrb	r3, [r7, #13]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	4313      	orrs	r3, r2
 80011f6:	7bba      	ldrb	r2, [r7, #14]
 80011f8:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000034c 	.word	0x2000034c

08001208 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	4608      	mov	r0, r1
 8001212:	4611      	mov	r1, r2
 8001214:	461a      	mov	r2, r3
 8001216:	4603      	mov	r3, r0
 8001218:	70fb      	strb	r3, [r7, #3]
 800121a:	460b      	mov	r3, r1
 800121c:	70bb      	strb	r3, [r7, #2]
 800121e:	4613      	mov	r3, r2
 8001220:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 8001222:	4a48      	ldr	r2, [pc, #288]	; (8001344 <BMP280_Init+0x13c>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 8001228:	787b      	ldrb	r3, [r7, #1]
 800122a:	2b03      	cmp	r3, #3
 800122c:	d901      	bls.n	8001232 <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 800122e:	2303      	movs	r3, #3
 8001230:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 8001232:	4a45      	ldr	r2, [pc, #276]	; (8001348 <BMP280_Init+0x140>)
 8001234:	787b      	ldrb	r3, [r7, #1]
 8001236:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 8001238:	787b      	ldrb	r3, [r7, #1]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d101      	bne.n	8001242 <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 800123e:	2300      	movs	r3, #0
 8001240:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	2b05      	cmp	r3, #5
 8001246:	d901      	bls.n	800124c <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8001248:	2305      	movs	r3, #5
 800124a:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 800124c:	4a3f      	ldr	r2, [pc, #252]	; (800134c <BMP280_Init+0x144>)
 800124e:	78fb      	ldrb	r3, [r7, #3]
 8001250:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 8001252:	78bb      	ldrb	r3, [r7, #2]
 8001254:	2b05      	cmp	r3, #5
 8001256:	d901      	bls.n	800125c <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 8001258:	2305      	movs	r3, #5
 800125a:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 800125c:	4a3c      	ldr	r2, [pc, #240]	; (8001350 <BMP280_Init+0x148>)
 800125e:	78bb      	ldrb	r3, [r7, #2]
 8001260:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 8001262:	bf00      	nop
 8001264:	20d0      	movs	r0, #208	; 0xd0
 8001266:	f7ff ff37 	bl	80010d8 <BMP280_Read8>
 800126a:	4603      	mov	r3, r0
 800126c:	2b58      	cmp	r3, #88	; 0x58
 800126e:	d1f9      	bne.n	8001264 <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8001270:	2088      	movs	r0, #136	; 0x88
 8001272:	f7ff ff71 	bl	8001158 <BMP280_Read16LE>
 8001276:	4603      	mov	r3, r0
 8001278:	461a      	mov	r2, r3
 800127a:	4b36      	ldr	r3, [pc, #216]	; (8001354 <BMP280_Init+0x14c>)
 800127c:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 800127e:	208a      	movs	r0, #138	; 0x8a
 8001280:	f7ff ff6a 	bl	8001158 <BMP280_Read16LE>
 8001284:	4603      	mov	r3, r0
 8001286:	b21a      	sxth	r2, r3
 8001288:	4b33      	ldr	r3, [pc, #204]	; (8001358 <BMP280_Init+0x150>)
 800128a:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 800128c:	208c      	movs	r0, #140	; 0x8c
 800128e:	f7ff ff63 	bl	8001158 <BMP280_Read16LE>
 8001292:	4603      	mov	r3, r0
 8001294:	b21a      	sxth	r2, r3
 8001296:	4b31      	ldr	r3, [pc, #196]	; (800135c <BMP280_Init+0x154>)
 8001298:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 800129a:	208e      	movs	r0, #142	; 0x8e
 800129c:	f7ff ff5c 	bl	8001158 <BMP280_Read16LE>
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <BMP280_Init+0x158>)
 80012a6:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 80012a8:	2090      	movs	r0, #144	; 0x90
 80012aa:	f7ff ff55 	bl	8001158 <BMP280_Read16LE>
 80012ae:	4603      	mov	r3, r0
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	4b2c      	ldr	r3, [pc, #176]	; (8001364 <BMP280_Init+0x15c>)
 80012b4:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 80012b6:	2092      	movs	r0, #146	; 0x92
 80012b8:	f7ff ff4e 	bl	8001158 <BMP280_Read16LE>
 80012bc:	4603      	mov	r3, r0
 80012be:	b21a      	sxth	r2, r3
 80012c0:	4b29      	ldr	r3, [pc, #164]	; (8001368 <BMP280_Init+0x160>)
 80012c2:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 80012c4:	2094      	movs	r0, #148	; 0x94
 80012c6:	f7ff ff47 	bl	8001158 <BMP280_Read16LE>
 80012ca:	4603      	mov	r3, r0
 80012cc:	b21a      	sxth	r2, r3
 80012ce:	4b27      	ldr	r3, [pc, #156]	; (800136c <BMP280_Init+0x164>)
 80012d0:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 80012d2:	2096      	movs	r0, #150	; 0x96
 80012d4:	f7ff ff40 	bl	8001158 <BMP280_Read16LE>
 80012d8:	4603      	mov	r3, r0
 80012da:	b21a      	sxth	r2, r3
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <BMP280_Init+0x168>)
 80012de:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 80012e0:	2098      	movs	r0, #152	; 0x98
 80012e2:	f7ff ff39 	bl	8001158 <BMP280_Read16LE>
 80012e6:	4603      	mov	r3, r0
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	4b22      	ldr	r3, [pc, #136]	; (8001374 <BMP280_Init+0x16c>)
 80012ec:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 80012ee:	209a      	movs	r0, #154	; 0x9a
 80012f0:	f7ff ff32 	bl	8001158 <BMP280_Read16LE>
 80012f4:	4603      	mov	r3, r0
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <BMP280_Init+0x170>)
 80012fa:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 80012fc:	209c      	movs	r0, #156	; 0x9c
 80012fe:	f7ff ff2b 	bl	8001158 <BMP280_Read16LE>
 8001302:	4603      	mov	r3, r0
 8001304:	b21a      	sxth	r2, r3
 8001306:	4b1d      	ldr	r3, [pc, #116]	; (800137c <BMP280_Init+0x174>)
 8001308:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 800130a:	209e      	movs	r0, #158	; 0x9e
 800130c:	f7ff ff24 	bl	8001158 <BMP280_Read16LE>
 8001310:	4603      	mov	r3, r0
 8001312:	b21a      	sxth	r2, r3
 8001314:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <BMP280_Init+0x178>)
 8001316:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	015b      	lsls	r3, r3, #5
 800131c:	b25a      	sxtb	r2, r3
 800131e:	78bb      	ldrb	r3, [r7, #2]
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	b25b      	sxtb	r3, r3
 8001324:	4313      	orrs	r3, r2
 8001326:	b25a      	sxtb	r2, r3
 8001328:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800132c:	4313      	orrs	r3, r2
 800132e:	b25b      	sxtb	r3, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	4619      	mov	r1, r3
 8001334:	20f4      	movs	r0, #244	; 0xf4
 8001336:	f7ff ff29 	bl	800118c <BMP280_Write8>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	2000034c 	.word	0x2000034c
 8001348:	20000352 	.word	0x20000352
 800134c:	20000350 	.word	0x20000350
 8001350:	20000351 	.word	0x20000351
 8001354:	20000368 	.word	0x20000368
 8001358:	20000354 	.word	0x20000354
 800135c:	20000356 	.word	0x20000356
 8001360:	2000036a 	.word	0x2000036a
 8001364:	20000358 	.word	0x20000358
 8001368:	2000035a 	.word	0x2000035a
 800136c:	2000035c 	.word	0x2000035c
 8001370:	2000035e 	.word	0x2000035e
 8001374:	20000360 	.word	0x20000360
 8001378:	20000362 	.word	0x20000362
 800137c:	20000364 	.word	0x20000364
 8001380:	20000366 	.word	0x20000366

08001384 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 800138a:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <BMP280_ReadTemperature+0xfc>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d16d      	bne.n	800146e <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 8001392:	20f4      	movs	r0, #244	; 0xf4
 8001394:	f7ff fea0 	bl	80010d8 <BMP280_Read8>
 8001398:	4603      	mov	r3, r0
 800139a:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 800139c:	7dfb      	ldrb	r3, [r7, #23]
 800139e:	f023 0303 	bic.w	r3, r3, #3
 80013a2:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 80013ac:	7dfb      	ldrb	r3, [r7, #23]
 80013ae:	4619      	mov	r1, r3
 80013b0:	20f4      	movs	r0, #244	; 0xf4
 80013b2:	f7ff feeb 	bl	800118c <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 80013b6:	20f4      	movs	r0, #244	; 0xf4
 80013b8:	f7ff fe8e 	bl	80010d8 <BMP280_Read8>
 80013bc:	4603      	mov	r3, r0
 80013be:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 80013c0:	7dbb      	ldrb	r3, [r7, #22]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 80013c8:	7dbb      	ldrb	r3, [r7, #22]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d14f      	bne.n	800146e <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 80013ce:	20f4      	movs	r0, #244	; 0xf4
 80013d0:	f7ff fe82 	bl	80010d8 <BMP280_Read8>
 80013d4:	4603      	mov	r3, r0
 80013d6:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 80013d8:	7dbb      	ldrb	r3, [r7, #22]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 80013e0:	7dbb      	ldrb	r3, [r7, #22]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d000      	beq.n	80013e8 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 80013e6:	e7f2      	b.n	80013ce <BMP280_ReadTemperature+0x4a>
				  break;
 80013e8:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 80013ea:	20fa      	movs	r0, #250	; 0xfa
 80013ec:	f7ff feea 	bl	80011c4 <BMP280_Read24>
 80013f0:	4603      	mov	r3, r0
 80013f2:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	111b      	asrs	r3, r3, #4
 80013f8:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	10da      	asrs	r2, r3, #3
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <BMP280_ReadTemperature+0x100>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 8001406:	4a20      	ldr	r2, [pc, #128]	; (8001488 <BMP280_ReadTemperature+0x104>)
 8001408:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 800140c:	fb02 f303 	mul.w	r3, r2, r3
 8001410:	12db      	asrs	r3, r3, #11
 8001412:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	111b      	asrs	r3, r3, #4
 8001418:	4a1a      	ldr	r2, [pc, #104]	; (8001484 <BMP280_ReadTemperature+0x100>)
 800141a:	8812      	ldrh	r2, [r2, #0]
 800141c:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	1112      	asrs	r2, r2, #4
 8001422:	4918      	ldr	r1, [pc, #96]	; (8001484 <BMP280_ReadTemperature+0x100>)
 8001424:	8809      	ldrh	r1, [r1, #0]
 8001426:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001428:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800142c:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 800142e:	4a17      	ldr	r2, [pc, #92]	; (800148c <BMP280_ReadTemperature+0x108>)
 8001430:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001434:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001438:	139b      	asrs	r3, r3, #14
 800143a:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	4413      	add	r3, r2
 8001442:	4a13      	ldr	r2, [pc, #76]	; (8001490 <BMP280_ReadTemperature+0x10c>)
 8001444:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <BMP280_ReadTemperature+0x10c>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	3380      	adds	r3, #128	; 0x80
 8001452:	121b      	asrs	r3, r3, #8
 8001454:	ee07 3a90 	vmov	s15, r3
 8001458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800145c:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8001460:	edd7 7a01 	vldr	s15, [r7, #4]
 8001464:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001494 <BMP280_ReadTemperature+0x110>
 8001468:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800146c:	e001      	b.n	8001472 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 800146e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001498 <BMP280_ReadTemperature+0x114>
}
 8001472:	eef0 7a47 	vmov.f32	s15, s14
 8001476:	eeb0 0a67 	vmov.f32	s0, s15
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000352 	.word	0x20000352
 8001484:	20000368 	.word	0x20000368
 8001488:	20000354 	.word	0x20000354
 800148c:	20000356 	.word	0x20000356
 8001490:	2000036c 	.word	0x2000036c
 8001494:	42c80000 	.word	0x42c80000
 8001498:	c2c60000 	.word	0xc2c60000

0800149c <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 800149c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014a0:	b0cc      	sub	sp, #304	; 0x130
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80014a8:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 80014ac:	f7ff ff6a 	bl	8001384 <BMP280_ReadTemperature>
 80014b0:	eef0 7a40 	vmov.f32	s15, s0
 80014b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014b8:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 80014bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8001794 <BMP280_ReadTemperatureAndPressure+0x2f8>
 80014c8:	eef4 7a47 	vcmp.f32	s15, s14
 80014cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d0:	d101      	bne.n	80014d6 <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 80014d2:	23ff      	movs	r3, #255	; 0xff
 80014d4:	e2bf      	b.n	8001a56 <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 80014d6:	20f7      	movs	r0, #247	; 0xf7
 80014d8:	f7ff fe74 	bl	80011c4 <BMP280_Read24>
 80014dc:	4603      	mov	r3, r0
 80014de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  adc_P >>= 4;
 80014e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014e6:	111b      	asrs	r3, r3, #4
 80014e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 80014ec:	4baa      	ldr	r3, [pc, #680]	; (8001798 <BMP280_ReadTemperatureAndPressure+0x2fc>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	17da      	asrs	r2, r3, #31
 80014f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80014f6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80014fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80014fe:	460b      	mov	r3, r1
 8001500:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8001504:	64bb      	str	r3, [r7, #72]	; 0x48
 8001506:	4613      	mov	r3, r2
 8001508:	f143 33ff 	adc.w	r3, r3, #4294967295
 800150c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800150e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001512:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 8001516:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800151a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800151e:	fb03 f102 	mul.w	r1, r3, r2
 8001522:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001526:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800152a:	fb02 f303 	mul.w	r3, r2, r3
 800152e:	18ca      	adds	r2, r1, r3
 8001530:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001534:	fba3 4503 	umull	r4, r5, r3, r3
 8001538:	1953      	adds	r3, r2, r5
 800153a:	461d      	mov	r5, r3
 800153c:	4b97      	ldr	r3, [pc, #604]	; (800179c <BMP280_ReadTemperatureAndPressure+0x300>)
 800153e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001542:	b21b      	sxth	r3, r3
 8001544:	17da      	asrs	r2, r3, #31
 8001546:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800154a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800154e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001552:	4603      	mov	r3, r0
 8001554:	fb03 f205 	mul.w	r2, r3, r5
 8001558:	460b      	mov	r3, r1
 800155a:	fb04 f303 	mul.w	r3, r4, r3
 800155e:	4413      	add	r3, r2
 8001560:	4602      	mov	r2, r0
 8001562:	fba4 8902 	umull	r8, r9, r4, r2
 8001566:	444b      	add	r3, r9
 8001568:	4699      	mov	r9, r3
 800156a:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 800156e:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 8001572:	4b8b      	ldr	r3, [pc, #556]	; (80017a0 <BMP280_ReadTemperatureAndPressure+0x304>)
 8001574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001578:	b21b      	sxth	r3, r3
 800157a:	17da      	asrs	r2, r3, #31
 800157c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001580:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001584:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001588:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800158c:	462a      	mov	r2, r5
 800158e:	fb02 f203 	mul.w	r2, r2, r3
 8001592:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001596:	4621      	mov	r1, r4
 8001598:	fb01 f303 	mul.w	r3, r1, r3
 800159c:	441a      	add	r2, r3
 800159e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015a2:	4621      	mov	r1, r4
 80015a4:	fba3 ab01 	umull	sl, fp, r3, r1
 80015a8:	eb02 030b 	add.w	r3, r2, fp
 80015ac:	469b      	mov	fp, r3
 80015ae:	f04f 0000 	mov.w	r0, #0
 80015b2:	f04f 0100 	mov.w	r1, #0
 80015b6:	ea4f 414b 	mov.w	r1, fp, lsl #17
 80015ba:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 80015be:	ea4f 404a 	mov.w	r0, sl, lsl #17
 80015c2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80015c6:	1814      	adds	r4, r2, r0
 80015c8:	643c      	str	r4, [r7, #64]	; 0x40
 80015ca:	414b      	adcs	r3, r1
 80015cc:	647b      	str	r3, [r7, #68]	; 0x44
 80015ce:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80015d2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 80015d6:	4b73      	ldr	r3, [pc, #460]	; (80017a4 <BMP280_ReadTemperatureAndPressure+0x308>)
 80015d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015dc:	b21b      	sxth	r3, r3
 80015de:	17da      	asrs	r2, r3, #31
 80015e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80015e4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80015e8:	f04f 0000 	mov.w	r0, #0
 80015ec:	f04f 0100 	mov.w	r1, #0
 80015f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80015f4:	00d9      	lsls	r1, r3, #3
 80015f6:	2000      	movs	r0, #0
 80015f8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80015fc:	1814      	adds	r4, r2, r0
 80015fe:	63bc      	str	r4, [r7, #56]	; 0x38
 8001600:	414b      	adcs	r3, r1
 8001602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001604:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001608:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 800160c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001610:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001614:	fb03 f102 	mul.w	r1, r3, r2
 8001618:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800161c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001620:	fb02 f303 	mul.w	r3, r2, r3
 8001624:	18ca      	adds	r2, r1, r3
 8001626:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800162a:	fba3 1303 	umull	r1, r3, r3, r3
 800162e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001632:	460b      	mov	r3, r1
 8001634:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800163c:	18d3      	adds	r3, r2, r3
 800163e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001642:	4b59      	ldr	r3, [pc, #356]	; (80017a8 <BMP280_ReadTemperatureAndPressure+0x30c>)
 8001644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001648:	b21b      	sxth	r3, r3
 800164a:	17da      	asrs	r2, r3, #31
 800164c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001650:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001654:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001658:	462b      	mov	r3, r5
 800165a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800165e:	4642      	mov	r2, r8
 8001660:	fb02 f203 	mul.w	r2, r2, r3
 8001664:	464b      	mov	r3, r9
 8001666:	4621      	mov	r1, r4
 8001668:	fb01 f303 	mul.w	r3, r1, r3
 800166c:	4413      	add	r3, r2
 800166e:	4622      	mov	r2, r4
 8001670:	4641      	mov	r1, r8
 8001672:	fba2 1201 	umull	r1, r2, r2, r1
 8001676:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800167a:	460a      	mov	r2, r1
 800167c:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8001680:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001684:	4413      	add	r3, r2
 8001686:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800168a:	f04f 0000 	mov.w	r0, #0
 800168e:	f04f 0100 	mov.w	r1, #0
 8001692:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001696:	4623      	mov	r3, r4
 8001698:	0a18      	lsrs	r0, r3, #8
 800169a:	462b      	mov	r3, r5
 800169c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80016a0:	462b      	mov	r3, r5
 80016a2:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 80016a4:	4b41      	ldr	r3, [pc, #260]	; (80017ac <BMP280_ReadTemperatureAndPressure+0x310>)
 80016a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	17da      	asrs	r2, r3, #31
 80016ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80016b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80016b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80016be:	464a      	mov	r2, r9
 80016c0:	fb02 f203 	mul.w	r2, r2, r3
 80016c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016c8:	4644      	mov	r4, r8
 80016ca:	fb04 f303 	mul.w	r3, r4, r3
 80016ce:	441a      	add	r2, r3
 80016d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016d4:	4644      	mov	r4, r8
 80016d6:	fba3 4304 	umull	r4, r3, r3, r4
 80016da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80016de:	4623      	mov	r3, r4
 80016e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80016e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016e8:	18d3      	adds	r3, r2, r3
 80016ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80016fa:	464c      	mov	r4, r9
 80016fc:	0323      	lsls	r3, r4, #12
 80016fe:	4644      	mov	r4, r8
 8001700:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001704:	4644      	mov	r4, r8
 8001706:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001708:	1884      	adds	r4, r0, r2
 800170a:	633c      	str	r4, [r7, #48]	; 0x30
 800170c:	eb41 0303 	adc.w	r3, r1, r3
 8001710:	637b      	str	r3, [r7, #52]	; 0x34
 8001712:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001716:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 800171a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800171e:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001722:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8001726:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800172a:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <BMP280_ReadTemperatureAndPressure+0x314>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	b29b      	uxth	r3, r3
 8001730:	2200      	movs	r2, #0
 8001732:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001736:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800173a:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800173e:	462b      	mov	r3, r5
 8001740:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8001744:	4642      	mov	r2, r8
 8001746:	fb02 f203 	mul.w	r2, r2, r3
 800174a:	464b      	mov	r3, r9
 800174c:	4621      	mov	r1, r4
 800174e:	fb01 f303 	mul.w	r3, r1, r3
 8001752:	4413      	add	r3, r2
 8001754:	4622      	mov	r2, r4
 8001756:	4641      	mov	r1, r8
 8001758:	fba2 1201 	umull	r1, r2, r2, r1
 800175c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001760:	460a      	mov	r2, r1
 8001762:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8001766:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800176a:	4413      	add	r3, r2
 800176c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800177c:	4629      	mov	r1, r5
 800177e:	104a      	asrs	r2, r1, #1
 8001780:	4629      	mov	r1, r5
 8001782:	17cb      	asrs	r3, r1, #31
 8001784:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	  if (var1 == 0) {
 8001788:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800178c:	4313      	orrs	r3, r2
 800178e:	d111      	bne.n	80017b4 <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 8001790:	2300      	movs	r3, #0
 8001792:	e160      	b.n	8001a56 <BMP280_ReadTemperatureAndPressure+0x5ba>
 8001794:	c2c60000 	.word	0xc2c60000
 8001798:	2000036c 	.word	0x2000036c
 800179c:	20000360 	.word	0x20000360
 80017a0:	2000035e 	.word	0x2000035e
 80017a4:	2000035c 	.word	0x2000035c
 80017a8:	2000035a 	.word	0x2000035a
 80017ac:	20000358 	.word	0x20000358
 80017b0:	2000036a 	.word	0x2000036a
	  }
	  p = 1048576 - adc_P;
 80017b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017b8:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80017bc:	17da      	asrs	r2, r3, #31
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
 80017c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017c2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80017c6:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 80017ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017ce:	105b      	asrs	r3, r3, #1
 80017d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80017d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017d8:	07db      	lsls	r3, r3, #31
 80017da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017de:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80017e2:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80017e6:	4621      	mov	r1, r4
 80017e8:	1a89      	subs	r1, r1, r2
 80017ea:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80017ee:	4629      	mov	r1, r5
 80017f0:	eb61 0303 	sbc.w	r3, r1, r3
 80017f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80017f8:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80017fc:	4622      	mov	r2, r4
 80017fe:	462b      	mov	r3, r5
 8001800:	1891      	adds	r1, r2, r2
 8001802:	6239      	str	r1, [r7, #32]
 8001804:	415b      	adcs	r3, r3
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
 8001808:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800180c:	4621      	mov	r1, r4
 800180e:	1851      	adds	r1, r2, r1
 8001810:	61b9      	str	r1, [r7, #24]
 8001812:	4629      	mov	r1, r5
 8001814:	414b      	adcs	r3, r1
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001824:	4649      	mov	r1, r9
 8001826:	018b      	lsls	r3, r1, #6
 8001828:	4641      	mov	r1, r8
 800182a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800182e:	4641      	mov	r1, r8
 8001830:	018a      	lsls	r2, r1, #6
 8001832:	4641      	mov	r1, r8
 8001834:	1889      	adds	r1, r1, r2
 8001836:	6139      	str	r1, [r7, #16]
 8001838:	4649      	mov	r1, r9
 800183a:	eb43 0101 	adc.w	r1, r3, r1
 800183e:	6179      	str	r1, [r7, #20]
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800184c:	4649      	mov	r1, r9
 800184e:	008b      	lsls	r3, r1, #2
 8001850:	4641      	mov	r1, r8
 8001852:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001856:	4641      	mov	r1, r8
 8001858:	008a      	lsls	r2, r1, #2
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	4603      	mov	r3, r0
 8001860:	4622      	mov	r2, r4
 8001862:	189b      	adds	r3, r3, r2
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	460b      	mov	r3, r1
 8001868:	462a      	mov	r2, r5
 800186a:	eb42 0303 	adc.w	r3, r2, r3
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800187c:	4649      	mov	r1, r9
 800187e:	008b      	lsls	r3, r1, #2
 8001880:	4641      	mov	r1, r8
 8001882:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001886:	4641      	mov	r1, r8
 8001888:	008a      	lsls	r2, r1, #2
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	4603      	mov	r3, r0
 8001890:	4622      	mov	r2, r4
 8001892:	189b      	adds	r3, r3, r2
 8001894:	67bb      	str	r3, [r7, #120]	; 0x78
 8001896:	462b      	mov	r3, r5
 8001898:	460a      	mov	r2, r1
 800189a:	eb42 0303 	adc.w	r3, r2, r3
 800189e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018a0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80018a4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80018a8:	f7ff fa0e 	bl	8000cc8 <__aeabi_ldivmod>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 80018b4:	4b6b      	ldr	r3, [pc, #428]	; (8001a64 <BMP280_ReadTemperatureAndPressure+0x5c8>)
 80018b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	17da      	asrs	r2, r3, #31
 80018be:	673b      	str	r3, [r7, #112]	; 0x70
 80018c0:	677a      	str	r2, [r7, #116]	; 0x74
 80018c2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80018c6:	f04f 0000 	mov.w	r0, #0
 80018ca:	f04f 0100 	mov.w	r1, #0
 80018ce:	0b50      	lsrs	r0, r2, #13
 80018d0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80018d4:	1359      	asrs	r1, r3, #13
 80018d6:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80018da:	462b      	mov	r3, r5
 80018dc:	fb00 f203 	mul.w	r2, r0, r3
 80018e0:	4623      	mov	r3, r4
 80018e2:	fb03 f301 	mul.w	r3, r3, r1
 80018e6:	4413      	add	r3, r2
 80018e8:	4622      	mov	r2, r4
 80018ea:	fba2 1200 	umull	r1, r2, r2, r0
 80018ee:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80018f2:	460a      	mov	r2, r1
 80018f4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80018f8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80018fc:	4413      	add	r3, r2
 80018fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001902:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001906:	f04f 0000 	mov.w	r0, #0
 800190a:	f04f 0100 	mov.w	r1, #0
 800190e:	0b50      	lsrs	r0, r2, #13
 8001910:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001914:	1359      	asrs	r1, r3, #13
 8001916:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800191a:	462b      	mov	r3, r5
 800191c:	fb00 f203 	mul.w	r2, r0, r3
 8001920:	4623      	mov	r3, r4
 8001922:	fb03 f301 	mul.w	r3, r3, r1
 8001926:	4413      	add	r3, r2
 8001928:	4622      	mov	r2, r4
 800192a:	fba2 1200 	umull	r1, r2, r2, r0
 800192e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001932:	460a      	mov	r2, r1
 8001934:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001938:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800193c:	4413      	add	r3, r2
 800193e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800194e:	4621      	mov	r1, r4
 8001950:	0e4a      	lsrs	r2, r1, #25
 8001952:	4629      	mov	r1, r5
 8001954:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001958:	4629      	mov	r1, r5
 800195a:	164b      	asrs	r3, r1, #25
 800195c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 8001960:	4b41      	ldr	r3, [pc, #260]	; (8001a68 <BMP280_ReadTemperatureAndPressure+0x5cc>)
 8001962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001966:	b21b      	sxth	r3, r3
 8001968:	17da      	asrs	r2, r3, #31
 800196a:	66bb      	str	r3, [r7, #104]	; 0x68
 800196c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800196e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001972:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001976:	462a      	mov	r2, r5
 8001978:	fb02 f203 	mul.w	r2, r2, r3
 800197c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001980:	4621      	mov	r1, r4
 8001982:	fb01 f303 	mul.w	r3, r1, r3
 8001986:	4413      	add	r3, r2
 8001988:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800198c:	4621      	mov	r1, r4
 800198e:	fba2 1201 	umull	r1, r2, r2, r1
 8001992:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001996:	460a      	mov	r2, r1
 8001998:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800199c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80019a0:	4413      	add	r3, r2
 80019a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80019b2:	4621      	mov	r1, r4
 80019b4:	0cca      	lsrs	r2, r1, #19
 80019b6:	4629      	mov	r1, r5
 80019b8:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80019bc:	4629      	mov	r1, r5
 80019be:	14cb      	asrs	r3, r1, #19
 80019c0:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 80019c4:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80019c8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80019cc:	1884      	adds	r4, r0, r2
 80019ce:	663c      	str	r4, [r7, #96]	; 0x60
 80019d0:	eb41 0303 	adc.w	r3, r1, r3
 80019d4:	667b      	str	r3, [r7, #100]	; 0x64
 80019d6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80019da:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80019de:	4621      	mov	r1, r4
 80019e0:	1889      	adds	r1, r1, r2
 80019e2:	65b9      	str	r1, [r7, #88]	; 0x58
 80019e4:	4629      	mov	r1, r5
 80019e6:	eb43 0101 	adc.w	r1, r3, r1
 80019ea:	65f9      	str	r1, [r7, #92]	; 0x5c
 80019ec:	f04f 0000 	mov.w	r0, #0
 80019f0:	f04f 0100 	mov.w	r1, #0
 80019f4:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80019f8:	4623      	mov	r3, r4
 80019fa:	0a18      	lsrs	r0, r3, #8
 80019fc:	462b      	mov	r3, r5
 80019fe:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a02:	462b      	mov	r3, r5
 8001a04:	1219      	asrs	r1, r3, #8
 8001a06:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <BMP280_ReadTemperatureAndPressure+0x5d0>)
 8001a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	17da      	asrs	r2, r3, #31
 8001a10:	653b      	str	r3, [r7, #80]	; 0x50
 8001a12:	657a      	str	r2, [r7, #84]	; 0x54
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001a20:	464c      	mov	r4, r9
 8001a22:	0123      	lsls	r3, r4, #4
 8001a24:	4644      	mov	r4, r8
 8001a26:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a2a:	4644      	mov	r4, r8
 8001a2c:	0122      	lsls	r2, r4, #4
 8001a2e:	1884      	adds	r4, r0, r2
 8001a30:	603c      	str	r4, [r7, #0]
 8001a32:	eb41 0303 	adc.w	r3, r1, r3
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a3c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  *pressure = (int32_t)p/256;
 8001a40:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	da00      	bge.n	8001a4a <BMP280_ReadTemperatureAndPressure+0x5ae>
 8001a48:	33ff      	adds	r3, #255	; 0xff
 8001a4a:	121b      	asrs	r3, r3, #8
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001a52:	601a      	str	r2, [r3, #0]

	  return 0;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a62:	bf00      	nop
 8001a64:	20000366 	.word	0x20000366
 8001a68:	20000364 	.word	0x20000364
 8001a6c:	20000362 	.word	0x20000362

08001a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a74:	f000 fffd 	bl	8002a72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a78:	f000 f82c 	bl	8001ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a7c:	f000 fa28 	bl	8001ed0 <MX_GPIO_Init>
  MX_ETH_Init();
 8001a80:	f000 f890 	bl	8001ba4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001a84:	f000 f9c6 	bl	8001e14 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001a88:	f000 f9f4 	bl	8001e74 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001a8c:	f000 f8d8 	bl	8001c40 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001a90:	f000 f964 	bl	8001d5c <MX_TIM3_Init>
  MX_TIM2_Init();
 8001a94:	f000 f914 	bl	8001cc0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_3);
 8001a98:	2108      	movs	r1, #8
 8001a9a:	4809      	ldr	r0, [pc, #36]	; (8001ac0 <main+0x50>)
 8001a9c:	f004 f824 	bl	8005ae8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001aa0:	4808      	ldr	r0, [pc, #32]	; (8001ac4 <main+0x54>)
 8001aa2:	f003 ff51 	bl	8005948 <HAL_TIM_Base_Start_IT>
  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	2101      	movs	r1, #1
 8001aac:	4806      	ldr	r0, [pc, #24]	; (8001ac8 <main+0x58>)
 8001aae:	f7ff fbab 	bl	8001208 <BMP280_Init>
  HAL_UART_Receive_IT(&huart3, key, 2);
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	4905      	ldr	r1, [pc, #20]	; (8001acc <main+0x5c>)
 8001ab6:	4806      	ldr	r0, [pc, #24]	; (8001ad0 <main+0x60>)
 8001ab8:	f005 f971 	bl	8006d9e <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <main+0x4c>
 8001abe:	bf00      	nop
 8001ac0:	200004f8 	.word	0x200004f8
 8001ac4:	200004ac 	.word	0x200004ac
 8001ac8:	20000458 	.word	0x20000458
 8001acc:	20000ad4 	.word	0x20000ad4
 8001ad0:	20000544 	.word	0x20000544

08001ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b094      	sub	sp, #80	; 0x50
 8001ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ada:	f107 0320 	add.w	r3, r7, #32
 8001ade:	2230      	movs	r2, #48	; 0x30
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f006 fe88 	bl	80087f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001af8:	f002 fe04 	bl	8004704 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001afc:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <SystemClock_Config+0xc8>)
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	4a26      	ldr	r2, [pc, #152]	; (8001b9c <SystemClock_Config+0xc8>)
 8001b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b06:	6413      	str	r3, [r2, #64]	; 0x40
 8001b08:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <SystemClock_Config+0xc8>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b14:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <SystemClock_Config+0xcc>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b1c:	4a20      	ldr	r2, [pc, #128]	; (8001ba0 <SystemClock_Config+0xcc>)
 8001b1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <SystemClock_Config+0xcc>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b30:	2301      	movs	r3, #1
 8001b32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001b34:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b44:	2304      	movs	r3, #4
 8001b46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001b48:	2348      	movs	r3, #72	; 0x48
 8001b4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b50:	2303      	movs	r3, #3
 8001b52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b54:	f107 0320 	add.w	r3, r7, #32
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f002 fde3 	bl	8004724 <HAL_RCC_OscConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b64:	f000 fb82 	bl	800226c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b68:	230f      	movs	r3, #15
 8001b6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b7e:	f107 030c 	add.w	r3, r7, #12
 8001b82:	2102      	movs	r1, #2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f003 f871 	bl	8004c6c <HAL_RCC_ClockConfig>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b90:	f000 fb6c 	bl	800226c <Error_Handler>
  }
}
 8001b94:	bf00      	nop
 8001b96:	3750      	adds	r7, #80	; 0x50
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40007000 	.word	0x40007000

08001ba4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <MX_ETH_Init+0x84>)
 8001baa:	4a20      	ldr	r2, [pc, #128]	; (8001c2c <MX_ETH_Init+0x88>)
 8001bac:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001bae:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <MX_ETH_Init+0x8c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001bb4:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <MX_ETH_Init+0x8c>)
 8001bb6:	2280      	movs	r2, #128	; 0x80
 8001bb8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001bba:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <MX_ETH_Init+0x8c>)
 8001bbc:	22e1      	movs	r2, #225	; 0xe1
 8001bbe:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <MX_ETH_Init+0x8c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <MX_ETH_Init+0x8c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <MX_ETH_Init+0x8c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <MX_ETH_Init+0x84>)
 8001bd4:	4a16      	ldr	r2, [pc, #88]	; (8001c30 <MX_ETH_Init+0x8c>)
 8001bd6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001bd8:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <MX_ETH_Init+0x84>)
 8001bda:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001bde:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <MX_ETH_Init+0x84>)
 8001be2:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <MX_ETH_Init+0x90>)
 8001be4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <MX_ETH_Init+0x84>)
 8001be8:	4a13      	ldr	r2, [pc, #76]	; (8001c38 <MX_ETH_Init+0x94>)
 8001bea:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001bec:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <MX_ETH_Init+0x84>)
 8001bee:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001bf2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001bf4:	480c      	ldr	r0, [pc, #48]	; (8001c28 <MX_ETH_Init+0x84>)
 8001bf6:	f001 f961 	bl	8002ebc <HAL_ETH_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001c00:	f000 fb34 	bl	800226c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001c04:	2238      	movs	r2, #56	; 0x38
 8001c06:	2100      	movs	r1, #0
 8001c08:	480c      	ldr	r0, [pc, #48]	; (8001c3c <MX_ETH_Init+0x98>)
 8001c0a:	f006 fdf5 	bl	80087f8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <MX_ETH_Init+0x98>)
 8001c10:	2221      	movs	r2, #33	; 0x21
 8001c12:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001c14:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <MX_ETH_Init+0x98>)
 8001c16:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001c1a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001c1c:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <MX_ETH_Init+0x98>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200003a8 	.word	0x200003a8
 8001c2c:	40028000 	.word	0x40028000
 8001c30:	20000b58 	.word	0x20000b58
 8001c34:	20000290 	.word	0x20000290
 8001c38:	200001f0 	.word	0x200001f0
 8001c3c:	20000370 	.word	0x20000370

08001c40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <MX_I2C1_Init+0x74>)
 8001c46:	4a1c      	ldr	r2, [pc, #112]	; (8001cb8 <MX_I2C1_Init+0x78>)
 8001c48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <MX_I2C1_Init+0x74>)
 8001c4c:	4a1b      	ldr	r2, [pc, #108]	; (8001cbc <MX_I2C1_Init+0x7c>)
 8001c4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c50:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <MX_I2C1_Init+0x74>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <MX_I2C1_Init+0x74>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <MX_I2C1_Init+0x74>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <MX_I2C1_Init+0x74>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <MX_I2C1_Init+0x74>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <MX_I2C1_Init+0x74>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <MX_I2C1_Init+0x74>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c7a:	480e      	ldr	r0, [pc, #56]	; (8001cb4 <MX_I2C1_Init+0x74>)
 8001c7c:	f001 fe0a 	bl	8003894 <HAL_I2C_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c86:	f000 faf1 	bl	800226c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4809      	ldr	r0, [pc, #36]	; (8001cb4 <MX_I2C1_Init+0x74>)
 8001c8e:	f002 fb59 	bl	8004344 <HAL_I2CEx_ConfigAnalogFilter>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c98:	f000 fae8 	bl	800226c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_I2C1_Init+0x74>)
 8001ca0:	f002 fb9b 	bl	80043da <HAL_I2CEx_ConfigDigitalFilter>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001caa:	f000 fadf 	bl	800226c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000458 	.word	0x20000458
 8001cb8:	40005400 	.word	0x40005400
 8001cbc:	00808cd2 	.word	0x00808cd2

08001cc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cc6:	f107 0310 	add.w	r3, r7, #16
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cde:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <MX_TIM2_Init+0x94>)
 8001ce0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ce4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <MX_TIM2_Init+0x94>)
 8001ce8:	2247      	movs	r2, #71	; 0x47
 8001cea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <MX_TIM2_Init+0x94>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8001cf2:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <MX_TIM2_Init+0x94>)
 8001cf4:	4a18      	ldr	r2, [pc, #96]	; (8001d58 <MX_TIM2_Init+0x98>)
 8001cf6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf8:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <MX_TIM2_Init+0x94>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <MX_TIM2_Init+0x94>)
 8001d00:	2280      	movs	r2, #128	; 0x80
 8001d02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d04:	4813      	ldr	r0, [pc, #76]	; (8001d54 <MX_TIM2_Init+0x94>)
 8001d06:	f003 fdc7 	bl	8005898 <HAL_TIM_Base_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d10:	f000 faac 	bl	800226c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d1a:	f107 0310 	add.w	r3, r7, #16
 8001d1e:	4619      	mov	r1, r3
 8001d20:	480c      	ldr	r0, [pc, #48]	; (8001d54 <MX_TIM2_Init+0x94>)
 8001d22:	f004 fa0f 	bl	8006144 <HAL_TIM_ConfigClockSource>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d2c:	f000 fa9e 	bl	800226c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d30:	2300      	movs	r3, #0
 8001d32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4805      	ldr	r0, [pc, #20]	; (8001d54 <MX_TIM2_Init+0x94>)
 8001d3e:	f004 feb1 	bl	8006aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d48:	f000 fa90 	bl	800226c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d4c:	bf00      	nop
 8001d4e:	3720      	adds	r7, #32
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200004ac 	.word	0x200004ac
 8001d58:	000f4240 	.word	0x000f4240

08001d5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d62:	f107 031c 	add.w	r3, r7, #28
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d6e:	463b      	mov	r3, r7
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
 8001d7c:	615a      	str	r2, [r3, #20]
 8001d7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d80:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <MX_TIM3_Init+0xb0>)
 8001d82:	4a23      	ldr	r2, [pc, #140]	; (8001e10 <MX_TIM3_Init+0xb4>)
 8001d84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001d86:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <MX_TIM3_Init+0xb0>)
 8001d88:	2247      	movs	r2, #71	; 0x47
 8001d8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <MX_TIM3_Init+0xb0>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001d92:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <MX_TIM3_Init+0xb0>)
 8001d94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <MX_TIM3_Init+0xb0>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001da0:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <MX_TIM3_Init+0xb0>)
 8001da2:	2280      	movs	r2, #128	; 0x80
 8001da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001da6:	4819      	ldr	r0, [pc, #100]	; (8001e0c <MX_TIM3_Init+0xb0>)
 8001da8:	f003 fe46 	bl	8005a38 <HAL_TIM_PWM_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001db2:	f000 fa5b 	bl	800226c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dbe:	f107 031c 	add.w	r3, r7, #28
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4811      	ldr	r0, [pc, #68]	; (8001e0c <MX_TIM3_Init+0xb0>)
 8001dc6:	f004 fe6d 	bl	8006aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001dd0:	f000 fa4c 	bl	800226c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dd4:	2360      	movs	r3, #96	; 0x60
 8001dd6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 900;
 8001dd8:	f44f 7361 	mov.w	r3, #900	; 0x384
 8001ddc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001de6:	463b      	mov	r3, r7
 8001de8:	2208      	movs	r2, #8
 8001dea:	4619      	mov	r1, r3
 8001dec:	4807      	ldr	r0, [pc, #28]	; (8001e0c <MX_TIM3_Init+0xb0>)
 8001dee:	f004 f895 	bl	8005f1c <HAL_TIM_PWM_ConfigChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001df8:	f000 fa38 	bl	800226c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001dfc:	4803      	ldr	r0, [pc, #12]	; (8001e0c <MX_TIM3_Init+0xb0>)
 8001dfe:	f000 fbdf 	bl	80025c0 <HAL_TIM_MspPostInit>

}
 8001e02:	bf00      	nop
 8001e04:	3728      	adds	r7, #40	; 0x28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200004f8 	.word	0x200004f8
 8001e10:	40000400 	.word	0x40000400

08001e14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e18:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <MX_USART3_UART_Init+0x58>)
 8001e1a:	4a15      	ldr	r2, [pc, #84]	; (8001e70 <MX_USART3_UART_Init+0x5c>)
 8001e1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e1e:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <MX_USART3_UART_Init+0x58>)
 8001e20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e26:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <MX_USART3_UART_Init+0x58>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <MX_USART3_UART_Init+0x58>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <MX_USART3_UART_Init+0x58>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e38:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <MX_USART3_UART_Init+0x58>)
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <MX_USART3_UART_Init+0x58>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <MX_USART3_UART_Init+0x58>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e4a:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <MX_USART3_UART_Init+0x58>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <MX_USART3_UART_Init+0x58>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e56:	4805      	ldr	r0, [pc, #20]	; (8001e6c <MX_USART3_UART_Init+0x58>)
 8001e58:	f004 fed0 	bl	8006bfc <HAL_UART_Init>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e62:	f000 fa03 	bl	800226c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000544 	.word	0x20000544
 8001e70:	40004800 	.word	0x40004800

08001e74 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001e7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e82:	2206      	movs	r2, #6
 8001e84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001e86:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e88:	2202      	movs	r2, #2
 8001e8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001e92:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e94:	2202      	movs	r2, #2
 8001e96:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001eaa:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001eb6:	4805      	ldr	r0, [pc, #20]	; (8001ecc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eb8:	f002 fadb 	bl	8004472 <HAL_PCD_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001ec2:	f000 f9d3 	bl	800226c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200005cc 	.word	0x200005cc

08001ed0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08c      	sub	sp, #48	; 0x30
 8001ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed6:	f107 031c 	add.w	r3, r7, #28
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
 8001ee4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee6:	4b47      	ldr	r3, [pc, #284]	; (8002004 <MX_GPIO_Init+0x134>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4a46      	ldr	r2, [pc, #280]	; (8002004 <MX_GPIO_Init+0x134>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef2:	4b44      	ldr	r3, [pc, #272]	; (8002004 <MX_GPIO_Init+0x134>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	61bb      	str	r3, [r7, #24]
 8001efc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001efe:	4b41      	ldr	r3, [pc, #260]	; (8002004 <MX_GPIO_Init+0x134>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a40      	ldr	r2, [pc, #256]	; (8002004 <MX_GPIO_Init+0x134>)
 8001f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b3e      	ldr	r3, [pc, #248]	; (8002004 <MX_GPIO_Init+0x134>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	4b3b      	ldr	r3, [pc, #236]	; (8002004 <MX_GPIO_Init+0x134>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a3a      	ldr	r2, [pc, #232]	; (8002004 <MX_GPIO_Init+0x134>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b38      	ldr	r3, [pc, #224]	; (8002004 <MX_GPIO_Init+0x134>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2e:	4b35      	ldr	r3, [pc, #212]	; (8002004 <MX_GPIO_Init+0x134>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a34      	ldr	r2, [pc, #208]	; (8002004 <MX_GPIO_Init+0x134>)
 8001f34:	f043 0302 	orr.w	r3, r3, #2
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b32      	ldr	r3, [pc, #200]	; (8002004 <MX_GPIO_Init+0x134>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f46:	4b2f      	ldr	r3, [pc, #188]	; (8002004 <MX_GPIO_Init+0x134>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a2e      	ldr	r2, [pc, #184]	; (8002004 <MX_GPIO_Init+0x134>)
 8001f4c:	f043 0308 	orr.w	r3, r3, #8
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <MX_GPIO_Init+0x134>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f5e:	4b29      	ldr	r3, [pc, #164]	; (8002004 <MX_GPIO_Init+0x134>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a28      	ldr	r2, [pc, #160]	; (8002004 <MX_GPIO_Init+0x134>)
 8001f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b26      	ldr	r3, [pc, #152]	; (8002004 <MX_GPIO_Init+0x134>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	f244 0181 	movw	r1, #16513	; 0x4081
 8001f7c:	4822      	ldr	r0, [pc, #136]	; (8002008 <MX_GPIO_Init+0x138>)
 8001f7e:	f001 fc6f 	bl	8003860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2140      	movs	r1, #64	; 0x40
 8001f86:	4821      	ldr	r0, [pc, #132]	; (800200c <MX_GPIO_Init+0x13c>)
 8001f88:	f001 fc6a 	bl	8003860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001f8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001f9c:	f107 031c 	add.w	r3, r7, #28
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	481b      	ldr	r0, [pc, #108]	; (8002010 <MX_GPIO_Init+0x140>)
 8001fa4:	f001 fab0 	bl	8003508 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001fa8:	f244 0381 	movw	r3, #16513	; 0x4081
 8001fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fba:	f107 031c 	add.w	r3, r7, #28
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4811      	ldr	r0, [pc, #68]	; (8002008 <MX_GPIO_Init+0x138>)
 8001fc2:	f001 faa1 	bl	8003508 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001fc6:	2340      	movs	r3, #64	; 0x40
 8001fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001fd6:	f107 031c 	add.w	r3, r7, #28
 8001fda:	4619      	mov	r1, r3
 8001fdc:	480b      	ldr	r0, [pc, #44]	; (800200c <MX_GPIO_Init+0x13c>)
 8001fde:	f001 fa93 	bl	8003508 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001fee:	f107 031c 	add.w	r3, r7, #28
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4805      	ldr	r0, [pc, #20]	; (800200c <MX_GPIO_Init+0x13c>)
 8001ff6:	f001 fa87 	bl	8003508 <HAL_GPIO_Init>

}
 8001ffa:	bf00      	nop
 8001ffc:	3730      	adds	r7, #48	; 0x30
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
 8002008:	40020400 	.word	0x40020400
 800200c:	40021800 	.word	0x40021800
 8002010:	40020800 	.word	0x40020800
 8002014:	00000000 	.word	0x00000000

08002018 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	  desired_temperature = 0.01 * atof(key);
 8002020:	480f      	ldr	r0, [pc, #60]	; (8002060 <HAL_UART_RxCpltCallback+0x48>)
 8002022:	f006 fbbb 	bl	800879c <atof>
 8002026:	ec51 0b10 	vmov	r0, r1, d0
 800202a:	a30b      	add	r3, pc, #44	; (adr r3, 8002058 <HAL_UART_RxCpltCallback+0x40>)
 800202c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002030:	f7fe fb02 	bl	8000638 <__aeabi_dmul>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	f7fe fdf4 	bl	8000c28 <__aeabi_d2f>
 8002040:	4603      	mov	r3, r0
 8002042:	4a08      	ldr	r2, [pc, #32]	; (8002064 <HAL_UART_RxCpltCallback+0x4c>)
 8002044:	6013      	str	r3, [r2, #0]
	  HAL_UART_Receive_IT(&huart3, key, 2);
 8002046:	2202      	movs	r2, #2
 8002048:	4905      	ldr	r1, [pc, #20]	; (8002060 <HAL_UART_RxCpltCallback+0x48>)
 800204a:	4807      	ldr	r0, [pc, #28]	; (8002068 <HAL_UART_RxCpltCallback+0x50>)
 800204c:	f004 fea7 	bl	8006d9e <HAL_UART_Receive_IT>
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	47ae147b 	.word	0x47ae147b
 800205c:	3f847ae1 	.word	0x3f847ae1
 8002060:	20000ad4 	.word	0x20000ad4
 8002064:	20000000 	.word	0x20000000
 8002068:	20000544 	.word	0x20000544

0800206c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800206c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002070:	b08e      	sub	sp, #56	; 0x38
 8002072:	af06      	add	r7, sp, #24
 8002074:	6078      	str	r0, [r7, #4]
	//declaration of temporary variables
	float uPid = 0.0, derivative, P, I, D;
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]
	//measurment of object
	BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 800207c:	496b      	ldr	r1, [pc, #428]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800207e:	486c      	ldr	r0, [pc, #432]	; (8002230 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002080:	f7ff fa0c 	bl	800149c <BMP280_ReadTemperatureAndPressure>
	//simple error calculations
	error = desired_temperature - temperature;
 8002084:	4b6b      	ldr	r3, [pc, #428]	; (8002234 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002086:	ed93 7a00 	vldr	s14, [r3]
 800208a:	4b69      	ldr	r3, [pc, #420]	; (8002230 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800208c:	edd3 7a00 	vldr	s15, [r3]
 8002090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002094:	4b68      	ldr	r3, [pc, #416]	; (8002238 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002096:	edc3 7a00 	vstr	s15, [r3]
	integralError += error;
 800209a:	4b68      	ldr	r3, [pc, #416]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800209c:	ed93 7a00 	vldr	s14, [r3]
 80020a0:	4b65      	ldr	r3, [pc, #404]	; (8002238 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80020a2:	edd3 7a00 	vldr	s15, [r3]
 80020a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020aa:	4b64      	ldr	r3, [pc, #400]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80020ac:	edc3 7a00 	vstr	s15, [r3]
	derivative = (error - previousError)/dt;
 80020b0:	4b61      	ldr	r3, [pc, #388]	; (8002238 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80020b2:	ed93 7a00 	vldr	s14, [r3]
 80020b6:	4b62      	ldr	r3, [pc, #392]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80020b8:	edd3 7a00 	vldr	s15, [r3]
 80020bc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80020c0:	4b60      	ldr	r3, [pc, #384]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80020c2:	ed93 7a00 	vldr	s14, [r3]
 80020c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ca:	edc7 7a06 	vstr	s15, [r7, #24]
	//PID calculations according to "wyklad 7"
	P = Kp * error;
 80020ce:	4b5e      	ldr	r3, [pc, #376]	; (8002248 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80020d0:	ed93 7a00 	vldr	s14, [r3]
 80020d4:	4b58      	ldr	r3, [pc, #352]	; (8002238 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020de:	edc7 7a05 	vstr	s15, [r7, #20]
	I = Ki * integralError*(dt/2.0);
 80020e2:	4b5a      	ldr	r3, [pc, #360]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80020e4:	ed93 7a00 	vldr	s14, [r3]
 80020e8:	4b54      	ldr	r3, [pc, #336]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80020ea:	edd3 7a00 	vldr	s15, [r3]
 80020ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f2:	ee17 0a90 	vmov	r0, s15
 80020f6:	f7fe fa47 	bl	8000588 <__aeabi_f2d>
 80020fa:	4604      	mov	r4, r0
 80020fc:	460d      	mov	r5, r1
 80020fe:	4b51      	ldr	r3, [pc, #324]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fa40 	bl	8000588 <__aeabi_f2d>
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002110:	f7fe fbbc 	bl	800088c <__aeabi_ddiv>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4620      	mov	r0, r4
 800211a:	4629      	mov	r1, r5
 800211c:	f7fe fa8c 	bl	8000638 <__aeabi_dmul>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4610      	mov	r0, r2
 8002126:	4619      	mov	r1, r3
 8002128:	f7fe fd7e 	bl	8000c28 <__aeabi_d2f>
 800212c:	4603      	mov	r3, r0
 800212e:	613b      	str	r3, [r7, #16]
	D = Kd * derivative;
 8002130:	4b47      	ldr	r3, [pc, #284]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002132:	edd3 7a00 	vldr	s15, [r3]
 8002136:	ed97 7a06 	vldr	s14, [r7, #24]
 800213a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213e:	edc7 7a03 	vstr	s15, [r7, #12]
	//u calculation
	uPid = P + I + D;
 8002142:	ed97 7a05 	vldr	s14, [r7, #20]
 8002146:	edd7 7a04 	vldr	s15, [r7, #16]
 800214a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800214e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002152:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002156:	edc7 7a07 	vstr	s15, [r7, #28]
	//Saturation
	if(uPid > 1.0)
 800215a:	edd7 7a07 	vldr	s15, [r7, #28]
 800215e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216a:	dd02      	ble.n	8002172 <HAL_TIM_PeriodElapsedCallback+0x106>
	{
		uPid = 1.0;
 800216c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002170:	61fb      	str	r3, [r7, #28]
//		pwm_duty = 1000;
	}
	if(uPid < 0.0)
 8002172:	edd7 7a07 	vldr	s15, [r7, #28]
 8002176:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217e:	d502      	bpl.n	8002186 <HAL_TIM_PeriodElapsedCallback+0x11a>
	{
		uPid = 0.0;
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
//		pwm_duty = 0;
	}
	//u to DUTY conversion
	float duty = uPid * 1000.0;
 8002186:	edd7 7a07 	vldr	s15, [r7, #28]
 800218a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002254 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 800218e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002192:	edc7 7a02 	vstr	s15, [r7, #8]
	pwm_duty = (int) duty;
 8002196:	edd7 7a02 	vldr	s15, [r7, #8]
 800219a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800219e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021a2:	4b2d      	ldr	r3, [pc, #180]	; (8002258 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80021a4:	edc3 7a00 	vstr	s15, [r3]
//	pwm_duty = uPid * 1000;
	//u output
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm_duty);
 80021a8:	4b2b      	ldr	r3, [pc, #172]	; (8002258 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80021aa:	edd3 7a00 	vldr	s15, [r3]
 80021ae:	4b2b      	ldr	r3, [pc, #172]	; (800225c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021b6:	ee17 2a90 	vmov	r2, s15
 80021ba:	63da      	str	r2, [r3, #60]	; 0x3c
	//logging output
	snprintf(text, sizeof(text), "{\"temperature\":%.2f,\"control\":%.2f,\"desired\":%.2f}\n", temperature, desired_temperature, pwm_duty);
 80021bc:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe f9e1 	bl	8000588 <__aeabi_f2d>
 80021c6:	4604      	mov	r4, r0
 80021c8:	460d      	mov	r5, r1
 80021ca:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe f9da 	bl	8000588 <__aeabi_f2d>
 80021d4:	4680      	mov	r8, r0
 80021d6:	4689      	mov	r9, r1
 80021d8:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe f9d3 	bl	8000588 <__aeabi_f2d>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80021ea:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80021ee:	e9cd 4500 	strd	r4, r5, [sp]
 80021f2:	4a1b      	ldr	r2, [pc, #108]	; (8002260 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80021f4:	2164      	movs	r1, #100	; 0x64
 80021f6:	481b      	ldr	r0, [pc, #108]	; (8002264 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80021f8:	f006 ff70 	bl	80090dc <sniprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)text, strlen(text), 1000);
 80021fc:	4819      	ldr	r0, [pc, #100]	; (8002264 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80021fe:	f7fe f807 	bl	8000210 <strlen>
 8002202:	4603      	mov	r3, r0
 8002204:	b29a      	uxth	r2, r3
 8002206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800220a:	4916      	ldr	r1, [pc, #88]	; (8002264 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800220c:	4816      	ldr	r0, [pc, #88]	; (8002268 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800220e:	f004 fd43 	bl	8006c98 <HAL_UART_Transmit>
	text[0] = 0;
 8002212:	4b14      	ldr	r3, [pc, #80]	; (8002264 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002214:	2200      	movs	r2, #0
 8002216:	701a      	strb	r2, [r3, #0]
	//changing last
	previousError = error;
 8002218:	4b07      	ldr	r3, [pc, #28]	; (8002238 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a08      	ldr	r2, [pc, #32]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800221e:	6013      	str	r3, [r2, #0]
}
 8002220:	bf00      	nop
 8002222:	3720      	adds	r7, #32
 8002224:	46bd      	mov	sp, r7
 8002226:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800222a:	bf00      	nop
 800222c:	20000b40 	.word	0x20000b40
 8002230:	20000b3c 	.word	0x20000b3c
 8002234:	20000000 	.word	0x20000000
 8002238:	20000b44 	.word	0x20000b44
 800223c:	20000b4c 	.word	0x20000b4c
 8002240:	20000b48 	.word	0x20000b48
 8002244:	2000000c 	.word	0x2000000c
 8002248:	20000004 	.word	0x20000004
 800224c:	20000008 	.word	0x20000008
 8002250:	20000b54 	.word	0x20000b54
 8002254:	447a0000 	.word	0x447a0000
 8002258:	20000b50 	.word	0x20000b50
 800225c:	200004f8 	.word	0x200004f8
 8002260:	0800cc08 	.word	0x0800cc08
 8002264:	20000ad8 	.word	0x20000ad8
 8002268:	20000544 	.word	0x20000544

0800226c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002270:	b672      	cpsid	i
}
 8002272:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002274:	e7fe      	b.n	8002274 <Error_Handler+0x8>
	...

08002278 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800227e:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <HAL_MspInit+0x44>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <HAL_MspInit+0x44>)
 8002284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002288:	6413      	str	r3, [r2, #64]	; 0x40
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <HAL_MspInit+0x44>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_MspInit+0x44>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	4a08      	ldr	r2, [pc, #32]	; (80022bc <HAL_MspInit+0x44>)
 800229c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022a0:	6453      	str	r3, [r2, #68]	; 0x44
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_MspInit+0x44>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022aa:	603b      	str	r3, [r7, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800

080022c0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08e      	sub	sp, #56	; 0x38
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a4e      	ldr	r2, [pc, #312]	; (8002418 <HAL_ETH_MspInit+0x158>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	f040 8096 	bne.w	8002410 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80022e4:	4b4d      	ldr	r3, [pc, #308]	; (800241c <HAL_ETH_MspInit+0x15c>)
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	4a4c      	ldr	r2, [pc, #304]	; (800241c <HAL_ETH_MspInit+0x15c>)
 80022ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022ee:	6313      	str	r3, [r2, #48]	; 0x30
 80022f0:	4b4a      	ldr	r3, [pc, #296]	; (800241c <HAL_ETH_MspInit+0x15c>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f8:	623b      	str	r3, [r7, #32]
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	4b47      	ldr	r3, [pc, #284]	; (800241c <HAL_ETH_MspInit+0x15c>)
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	4a46      	ldr	r2, [pc, #280]	; (800241c <HAL_ETH_MspInit+0x15c>)
 8002302:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002306:	6313      	str	r3, [r2, #48]	; 0x30
 8002308:	4b44      	ldr	r3, [pc, #272]	; (800241c <HAL_ETH_MspInit+0x15c>)
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	4b41      	ldr	r3, [pc, #260]	; (800241c <HAL_ETH_MspInit+0x15c>)
 8002316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002318:	4a40      	ldr	r2, [pc, #256]	; (800241c <HAL_ETH_MspInit+0x15c>)
 800231a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800231e:	6313      	str	r3, [r2, #48]	; 0x30
 8002320:	4b3e      	ldr	r3, [pc, #248]	; (800241c <HAL_ETH_MspInit+0x15c>)
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002328:	61bb      	str	r3, [r7, #24]
 800232a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800232c:	4b3b      	ldr	r3, [pc, #236]	; (800241c <HAL_ETH_MspInit+0x15c>)
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	4a3a      	ldr	r2, [pc, #232]	; (800241c <HAL_ETH_MspInit+0x15c>)
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	6313      	str	r3, [r2, #48]	; 0x30
 8002338:	4b38      	ldr	r3, [pc, #224]	; (800241c <HAL_ETH_MspInit+0x15c>)
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002344:	4b35      	ldr	r3, [pc, #212]	; (800241c <HAL_ETH_MspInit+0x15c>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	4a34      	ldr	r2, [pc, #208]	; (800241c <HAL_ETH_MspInit+0x15c>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	6313      	str	r3, [r2, #48]	; 0x30
 8002350:	4b32      	ldr	r3, [pc, #200]	; (800241c <HAL_ETH_MspInit+0x15c>)
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235c:	4b2f      	ldr	r3, [pc, #188]	; (800241c <HAL_ETH_MspInit+0x15c>)
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	4a2e      	ldr	r2, [pc, #184]	; (800241c <HAL_ETH_MspInit+0x15c>)
 8002362:	f043 0302 	orr.w	r3, r3, #2
 8002366:	6313      	str	r3, [r2, #48]	; 0x30
 8002368:	4b2c      	ldr	r3, [pc, #176]	; (800241c <HAL_ETH_MspInit+0x15c>)
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002374:	4b29      	ldr	r3, [pc, #164]	; (800241c <HAL_ETH_MspInit+0x15c>)
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	4a28      	ldr	r2, [pc, #160]	; (800241c <HAL_ETH_MspInit+0x15c>)
 800237a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800237e:	6313      	str	r3, [r2, #48]	; 0x30
 8002380:	4b26      	ldr	r3, [pc, #152]	; (800241c <HAL_ETH_MspInit+0x15c>)
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800238c:	2332      	movs	r3, #50	; 0x32
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002398:	2303      	movs	r3, #3
 800239a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800239c:	230b      	movs	r3, #11
 800239e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a4:	4619      	mov	r1, r3
 80023a6:	481e      	ldr	r0, [pc, #120]	; (8002420 <HAL_ETH_MspInit+0x160>)
 80023a8:	f001 f8ae 	bl	8003508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80023ac:	2386      	movs	r3, #134	; 0x86
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b8:	2303      	movs	r3, #3
 80023ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023bc:	230b      	movs	r3, #11
 80023be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c4:	4619      	mov	r1, r3
 80023c6:	4817      	ldr	r0, [pc, #92]	; (8002424 <HAL_ETH_MspInit+0x164>)
 80023c8:	f001 f89e 	bl	8003508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80023cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023da:	2303      	movs	r3, #3
 80023dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023de:	230b      	movs	r3, #11
 80023e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80023e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e6:	4619      	mov	r1, r3
 80023e8:	480f      	ldr	r0, [pc, #60]	; (8002428 <HAL_ETH_MspInit+0x168>)
 80023ea:	f001 f88d 	bl	8003508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80023ee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fc:	2303      	movs	r3, #3
 80023fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002400:	230b      	movs	r3, #11
 8002402:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002408:	4619      	mov	r1, r3
 800240a:	4808      	ldr	r0, [pc, #32]	; (800242c <HAL_ETH_MspInit+0x16c>)
 800240c:	f001 f87c 	bl	8003508 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002410:	bf00      	nop
 8002412:	3738      	adds	r7, #56	; 0x38
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40028000 	.word	0x40028000
 800241c:	40023800 	.word	0x40023800
 8002420:	40020800 	.word	0x40020800
 8002424:	40020000 	.word	0x40020000
 8002428:	40020400 	.word	0x40020400
 800242c:	40021800 	.word	0x40021800

08002430 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b0aa      	sub	sp, #168	; 0xa8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002448:	f107 0310 	add.w	r3, r7, #16
 800244c:	2284      	movs	r2, #132	; 0x84
 800244e:	2100      	movs	r1, #0
 8002450:	4618      	mov	r0, r3
 8002452:	f006 f9d1 	bl	80087f8 <memset>
  if(hi2c->Instance==I2C1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a22      	ldr	r2, [pc, #136]	; (80024e4 <HAL_I2C_MspInit+0xb4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d13c      	bne.n	80024da <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002460:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002464:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002466:	2300      	movs	r3, #0
 8002468:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800246a:	f107 0310 	add.w	r3, r7, #16
 800246e:	4618      	mov	r0, r3
 8002470:	f002 fe22 	bl	80050b8 <HAL_RCCEx_PeriphCLKConfig>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800247a:	f7ff fef7 	bl	800226c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <HAL_I2C_MspInit+0xb8>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	4a19      	ldr	r2, [pc, #100]	; (80024e8 <HAL_I2C_MspInit+0xb8>)
 8002484:	f043 0302 	orr.w	r3, r3, #2
 8002488:	6313      	str	r3, [r2, #48]	; 0x30
 800248a:	4b17      	ldr	r3, [pc, #92]	; (80024e8 <HAL_I2C_MspInit+0xb8>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002496:	f44f 7310 	mov.w	r3, #576	; 0x240
 800249a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800249e:	2312      	movs	r3, #18
 80024a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024aa:	2303      	movs	r3, #3
 80024ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024b0:	2304      	movs	r3, #4
 80024b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024ba:	4619      	mov	r1, r3
 80024bc:	480b      	ldr	r0, [pc, #44]	; (80024ec <HAL_I2C_MspInit+0xbc>)
 80024be:	f001 f823 	bl	8003508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <HAL_I2C_MspInit+0xb8>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a08      	ldr	r2, [pc, #32]	; (80024e8 <HAL_I2C_MspInit+0xb8>)
 80024c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_I2C_MspInit+0xb8>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80024da:	bf00      	nop
 80024dc:	37a8      	adds	r7, #168	; 0xa8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40005400 	.word	0x40005400
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40020400 	.word	0x40020400

080024f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002500:	d113      	bne.n	800252a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <HAL_TIM_Base_MspInit+0x44>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	4a0b      	ldr	r2, [pc, #44]	; (8002534 <HAL_TIM_Base_MspInit+0x44>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6413      	str	r3, [r2, #64]	; 0x40
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <HAL_TIM_Base_MspInit+0x44>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800251a:	2200      	movs	r2, #0
 800251c:	2100      	movs	r1, #0
 800251e:	201c      	movs	r0, #28
 8002520:	f000 fc03 	bl	8002d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002524:	201c      	movs	r0, #28
 8002526:	f000 fc1c 	bl	8002d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40023800 	.word	0x40023800

08002538 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08a      	sub	sp, #40	; 0x28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	f107 0314 	add.w	r3, r7, #20
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM3)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a17      	ldr	r2, [pc, #92]	; (80025b4 <HAL_TIM_PWM_MspInit+0x7c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d127      	bne.n	80025aa <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800255a:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <HAL_TIM_PWM_MspInit+0x80>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	4a16      	ldr	r2, [pc, #88]	; (80025b8 <HAL_TIM_PWM_MspInit+0x80>)
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	6413      	str	r3, [r2, #64]	; 0x40
 8002566:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <HAL_TIM_PWM_MspInit+0x80>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_TIM_PWM_MspInit+0x80>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a10      	ldr	r2, [pc, #64]	; (80025b8 <HAL_TIM_PWM_MspInit+0x80>)
 8002578:	f043 0304 	orr.w	r3, r3, #4
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <HAL_TIM_PWM_MspInit+0x80>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800258a:	2340      	movs	r3, #64	; 0x40
 800258c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002596:	2300      	movs	r3, #0
 8002598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800259a:	2302      	movs	r3, #2
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800259e:	f107 0314 	add.w	r3, r7, #20
 80025a2:	4619      	mov	r1, r3
 80025a4:	4805      	ldr	r0, [pc, #20]	; (80025bc <HAL_TIM_PWM_MspInit+0x84>)
 80025a6:	f000 ffaf 	bl	8003508 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025aa:	bf00      	nop
 80025ac:	3728      	adds	r7, #40	; 0x28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40000400 	.word	0x40000400
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40020800 	.word	0x40020800

080025c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 030c 	add.w	r3, r7, #12
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a11      	ldr	r2, [pc, #68]	; (8002624 <HAL_TIM_MspPostInit+0x64>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d11c      	bne.n	800261c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e2:	4b11      	ldr	r3, [pc, #68]	; (8002628 <HAL_TIM_MspPostInit+0x68>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	4a10      	ldr	r2, [pc, #64]	; (8002628 <HAL_TIM_MspPostInit+0x68>)
 80025e8:	f043 0304 	orr.w	r3, r3, #4
 80025ec:	6313      	str	r3, [r2, #48]	; 0x30
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <HAL_TIM_MspPostInit+0x68>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	2302      	movs	r3, #2
 8002602:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002608:	2300      	movs	r3, #0
 800260a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800260c:	2302      	movs	r3, #2
 800260e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002610:	f107 030c 	add.w	r3, r7, #12
 8002614:	4619      	mov	r1, r3
 8002616:	4805      	ldr	r0, [pc, #20]	; (800262c <HAL_TIM_MspPostInit+0x6c>)
 8002618:	f000 ff76 	bl	8003508 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800261c:	bf00      	nop
 800261e:	3720      	adds	r7, #32
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40000400 	.word	0x40000400
 8002628:	40023800 	.word	0x40023800
 800262c:	40020800 	.word	0x40020800

08002630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b0aa      	sub	sp, #168	; 0xa8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002648:	f107 0310 	add.w	r3, r7, #16
 800264c:	2284      	movs	r2, #132	; 0x84
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f006 f8d1 	bl	80087f8 <memset>
  if(huart->Instance==USART3)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a26      	ldr	r2, [pc, #152]	; (80026f4 <HAL_UART_MspInit+0xc4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d144      	bne.n	80026ea <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002660:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002664:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002666:	2300      	movs	r3, #0
 8002668:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800266a:	f107 0310 	add.w	r3, r7, #16
 800266e:	4618      	mov	r0, r3
 8002670:	f002 fd22 	bl	80050b8 <HAL_RCCEx_PeriphCLKConfig>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800267a:	f7ff fdf7 	bl	800226c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800267e:	4b1e      	ldr	r3, [pc, #120]	; (80026f8 <HAL_UART_MspInit+0xc8>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	4a1d      	ldr	r2, [pc, #116]	; (80026f8 <HAL_UART_MspInit+0xc8>)
 8002684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002688:	6413      	str	r3, [r2, #64]	; 0x40
 800268a:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <HAL_UART_MspInit+0xc8>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002696:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <HAL_UART_MspInit+0xc8>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	4a17      	ldr	r2, [pc, #92]	; (80026f8 <HAL_UART_MspInit+0xc8>)
 800269c:	f043 0308 	orr.w	r3, r3, #8
 80026a0:	6313      	str	r3, [r2, #48]	; 0x30
 80026a2:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <HAL_UART_MspInit+0xc8>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80026ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b6:	2302      	movs	r3, #2
 80026b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026bc:	2301      	movs	r3, #1
 80026be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c2:	2303      	movs	r3, #3
 80026c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026c8:	2307      	movs	r3, #7
 80026ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026ce:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80026d2:	4619      	mov	r1, r3
 80026d4:	4809      	ldr	r0, [pc, #36]	; (80026fc <HAL_UART_MspInit+0xcc>)
 80026d6:	f000 ff17 	bl	8003508 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	2100      	movs	r1, #0
 80026de:	2027      	movs	r0, #39	; 0x27
 80026e0:	f000 fb23 	bl	8002d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80026e4:	2027      	movs	r0, #39	; 0x27
 80026e6:	f000 fb3c 	bl	8002d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80026ea:	bf00      	nop
 80026ec:	37a8      	adds	r7, #168	; 0xa8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40004800 	.word	0x40004800
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40020c00 	.word	0x40020c00

08002700 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b0ac      	sub	sp, #176	; 0xb0
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002718:	f107 0318 	add.w	r3, r7, #24
 800271c:	2284      	movs	r2, #132	; 0x84
 800271e:	2100      	movs	r1, #0
 8002720:	4618      	mov	r0, r3
 8002722:	f006 f869 	bl	80087f8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800272e:	d159      	bne.n	80027e4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002730:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002734:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002736:	2300      	movs	r3, #0
 8002738:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800273c:	f107 0318 	add.w	r3, r7, #24
 8002740:	4618      	mov	r0, r3
 8002742:	f002 fcb9 	bl	80050b8 <HAL_RCCEx_PeriphCLKConfig>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800274c:	f7ff fd8e 	bl	800226c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002750:	4b26      	ldr	r3, [pc, #152]	; (80027ec <HAL_PCD_MspInit+0xec>)
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002754:	4a25      	ldr	r2, [pc, #148]	; (80027ec <HAL_PCD_MspInit+0xec>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6313      	str	r3, [r2, #48]	; 0x30
 800275c:	4b23      	ldr	r3, [pc, #140]	; (80027ec <HAL_PCD_MspInit+0xec>)
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002768:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800276c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002770:	2302      	movs	r3, #2
 8002772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277c:	2303      	movs	r3, #3
 800277e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002782:	230a      	movs	r3, #10
 8002784:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002788:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800278c:	4619      	mov	r1, r3
 800278e:	4818      	ldr	r0, [pc, #96]	; (80027f0 <HAL_PCD_MspInit+0xf0>)
 8002790:	f000 feba 	bl	8003508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002794:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002798:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800279c:	2300      	movs	r3, #0
 800279e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80027a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027ac:	4619      	mov	r1, r3
 80027ae:	4810      	ldr	r0, [pc, #64]	; (80027f0 <HAL_PCD_MspInit+0xf0>)
 80027b0:	f000 feaa 	bl	8003508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80027b4:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <HAL_PCD_MspInit+0xec>)
 80027b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b8:	4a0c      	ldr	r2, [pc, #48]	; (80027ec <HAL_PCD_MspInit+0xec>)
 80027ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027be:	6353      	str	r3, [r2, #52]	; 0x34
 80027c0:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <HAL_PCD_MspInit+0xec>)
 80027c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4b07      	ldr	r3, [pc, #28]	; (80027ec <HAL_PCD_MspInit+0xec>)
 80027ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d0:	4a06      	ldr	r2, [pc, #24]	; (80027ec <HAL_PCD_MspInit+0xec>)
 80027d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d6:	6453      	str	r3, [r2, #68]	; 0x44
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <HAL_PCD_MspInit+0xec>)
 80027da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80027e4:	bf00      	nop
 80027e6:	37b0      	adds	r7, #176	; 0xb0
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40023800 	.word	0x40023800
 80027f0:	40020000 	.word	0x40020000

080027f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027f8:	e7fe      	b.n	80027f8 <NMI_Handler+0x4>

080027fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027fe:	e7fe      	b.n	80027fe <HardFault_Handler+0x4>

08002800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002804:	e7fe      	b.n	8002804 <MemManage_Handler+0x4>

08002806 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800280a:	e7fe      	b.n	800280a <BusFault_Handler+0x4>

0800280c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002810:	e7fe      	b.n	8002810 <UsageFault_Handler+0x4>

08002812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002812:	b480      	push	{r7}
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800282e:	b480      	push	{r7}
 8002830:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002840:	f000 f954 	bl	8002aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002844:	bf00      	nop
 8002846:	bd80      	pop	{r7, pc}

08002848 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800284c:	4802      	ldr	r0, [pc, #8]	; (8002858 <TIM2_IRQHandler+0x10>)
 800284e:	f003 fa45 	bl	8005cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	200004ac 	.word	0x200004ac

0800285c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002860:	4802      	ldr	r0, [pc, #8]	; (800286c <USART3_IRQHandler+0x10>)
 8002862:	f004 fae1 	bl	8006e28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000544 	.word	0x20000544

08002870 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return 1;
 8002874:	2301      	movs	r3, #1
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <_kill>:

int _kill(int pid, int sig)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800288a:	f005 ff8b 	bl	80087a4 <__errno>
 800288e:	4603      	mov	r3, r0
 8002890:	2216      	movs	r2, #22
 8002892:	601a      	str	r2, [r3, #0]
  return -1;
 8002894:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002898:	4618      	mov	r0, r3
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <_exit>:

void _exit (int status)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028a8:	f04f 31ff 	mov.w	r1, #4294967295
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff ffe7 	bl	8002880 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028b2:	e7fe      	b.n	80028b2 <_exit+0x12>

080028b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	e00a      	b.n	80028dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028c6:	f3af 8000 	nop.w
 80028ca:	4601      	mov	r1, r0
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	60ba      	str	r2, [r7, #8]
 80028d2:	b2ca      	uxtb	r2, r1
 80028d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	3301      	adds	r3, #1
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	dbf0      	blt.n	80028c6 <_read+0x12>
  }

  return len;
 80028e4:	687b      	ldr	r3, [r7, #4]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b086      	sub	sp, #24
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	e009      	b.n	8002914 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	60ba      	str	r2, [r7, #8]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	3301      	adds	r3, #1
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	429a      	cmp	r2, r3
 800291a:	dbf1      	blt.n	8002900 <_write+0x12>
  }
  return len;
 800291c:	687b      	ldr	r3, [r7, #4]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <_close>:

int _close(int file)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800292e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800294e:	605a      	str	r2, [r3, #4]
  return 0;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <_isatty>:

int _isatty(int file)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002966:	2301      	movs	r3, #1
}
 8002968:	4618      	mov	r0, r3
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002998:	4a14      	ldr	r2, [pc, #80]	; (80029ec <_sbrk+0x5c>)
 800299a:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <_sbrk+0x60>)
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029a4:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <_sbrk+0x64>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <_sbrk+0x64>)
 80029ae:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <_sbrk+0x68>)
 80029b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029b2:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <_sbrk+0x64>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d207      	bcs.n	80029d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029c0:	f005 fef0 	bl	80087a4 <__errno>
 80029c4:	4603      	mov	r3, r0
 80029c6:	220c      	movs	r2, #12
 80029c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ca:	f04f 33ff 	mov.w	r3, #4294967295
 80029ce:	e009      	b.n	80029e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029d0:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <_sbrk+0x64>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029d6:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <_sbrk+0x64>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	4a05      	ldr	r2, [pc, #20]	; (80029f4 <_sbrk+0x64>)
 80029e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029e2:	68fb      	ldr	r3, [r7, #12]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20050000 	.word	0x20050000
 80029f0:	00000400 	.word	0x00000400
 80029f4:	20000b60 	.word	0x20000b60
 80029f8:	20000b78 	.word	0x20000b78

080029fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <SystemInit+0x20>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a06:	4a05      	ldr	r2, [pc, #20]	; (8002a1c <SystemInit+0x20>)
 8002a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a24:	480d      	ldr	r0, [pc, #52]	; (8002a5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a26:	490e      	ldr	r1, [pc, #56]	; (8002a60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a28:	4a0e      	ldr	r2, [pc, #56]	; (8002a64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a2c:	e002      	b.n	8002a34 <LoopCopyDataInit>

08002a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a32:	3304      	adds	r3, #4

08002a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a38:	d3f9      	bcc.n	8002a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a3a:	4a0b      	ldr	r2, [pc, #44]	; (8002a68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a3c:	4c0b      	ldr	r4, [pc, #44]	; (8002a6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a40:	e001      	b.n	8002a46 <LoopFillZerobss>

08002a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a44:	3204      	adds	r2, #4

08002a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a48:	d3fb      	bcc.n	8002a42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a4a:	f7ff ffd7 	bl	80029fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a4e:	f005 feaf 	bl	80087b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a52:	f7ff f80d 	bl	8001a70 <main>
  bx  lr    
 8002a56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a58:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a60:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002a64:	0800d104 	.word	0x0800d104
  ldr r2, =_sbss
 8002a68:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 8002a6c:	20000b78 	.word	0x20000b78

08002a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a70:	e7fe      	b.n	8002a70 <ADC_IRQHandler>

08002a72 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a76:	2003      	movs	r0, #3
 8002a78:	f000 f94c 	bl	8002d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f000 f805 	bl	8002a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a82:	f7ff fbf9 	bl	8002278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a94:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_InitTick+0x54>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <HAL_InitTick+0x58>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f967 	bl	8002d7e <HAL_SYSTICK_Config>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e00e      	b.n	8002ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b0f      	cmp	r3, #15
 8002abe:	d80a      	bhi.n	8002ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac8:	f000 f92f 	bl	8002d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002acc:	4a06      	ldr	r2, [pc, #24]	; (8002ae8 <HAL_InitTick+0x5c>)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e000      	b.n	8002ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20000010 	.word	0x20000010
 8002ae4:	20000018 	.word	0x20000018
 8002ae8:	20000014 	.word	0x20000014

08002aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <HAL_IncTick+0x20>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_IncTick+0x24>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4413      	add	r3, r2
 8002afc:	4a04      	ldr	r2, [pc, #16]	; (8002b10 <HAL_IncTick+0x24>)
 8002afe:	6013      	str	r3, [r2, #0]
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	20000018 	.word	0x20000018
 8002b10:	20000b64 	.word	0x20000b64

08002b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  return uwTick;
 8002b18:	4b03      	ldr	r3, [pc, #12]	; (8002b28 <HAL_GetTick+0x14>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	20000b64 	.word	0x20000b64

08002b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b34:	f7ff ffee 	bl	8002b14 <HAL_GetTick>
 8002b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b44:	d005      	beq.n	8002b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b46:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <HAL_Delay+0x44>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4413      	add	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b52:	bf00      	nop
 8002b54:	f7ff ffde 	bl	8002b14 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d8f7      	bhi.n	8002b54 <HAL_Delay+0x28>
  {
  }
}
 8002b64:	bf00      	nop
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000018 	.word	0x20000018

08002b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <__NVIC_SetPriorityGrouping+0x40>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b90:	4013      	ands	r3, r2
 8002b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ba2:	4a04      	ldr	r2, [pc, #16]	; (8002bb4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	60d3      	str	r3, [r2, #12]
}
 8002ba8:	bf00      	nop
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	e000ed00 	.word	0xe000ed00
 8002bb8:	05fa0000 	.word	0x05fa0000

08002bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc0:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	0a1b      	lsrs	r3, r3, #8
 8002bc6:	f003 0307 	and.w	r3, r3, #7
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	db0b      	blt.n	8002c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	f003 021f 	and.w	r2, r3, #31
 8002bf0:	4907      	ldr	r1, [pc, #28]	; (8002c10 <__NVIC_EnableIRQ+0x38>)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	e000e100 	.word	0xe000e100

08002c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	6039      	str	r1, [r7, #0]
 8002c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	db0a      	blt.n	8002c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	490c      	ldr	r1, [pc, #48]	; (8002c60 <__NVIC_SetPriority+0x4c>)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	0112      	lsls	r2, r2, #4
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	440b      	add	r3, r1
 8002c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c3c:	e00a      	b.n	8002c54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	4908      	ldr	r1, [pc, #32]	; (8002c64 <__NVIC_SetPriority+0x50>)
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	3b04      	subs	r3, #4
 8002c4c:	0112      	lsls	r2, r2, #4
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	440b      	add	r3, r1
 8002c52:	761a      	strb	r2, [r3, #24]
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000e100 	.word	0xe000e100
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b089      	sub	sp, #36	; 0x24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f1c3 0307 	rsb	r3, r3, #7
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	bf28      	it	cs
 8002c86:	2304      	movcs	r3, #4
 8002c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	2b06      	cmp	r3, #6
 8002c90:	d902      	bls.n	8002c98 <NVIC_EncodePriority+0x30>
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3b03      	subs	r3, #3
 8002c96:	e000      	b.n	8002c9a <NVIC_EncodePriority+0x32>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	401a      	ands	r2, r3
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cba:	43d9      	mvns	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc0:	4313      	orrs	r3, r2
         );
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3724      	adds	r7, #36	; 0x24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ce0:	d301      	bcc.n	8002ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e00f      	b.n	8002d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <SysTick_Config+0x40>)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cee:	210f      	movs	r1, #15
 8002cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf4:	f7ff ff8e 	bl	8002c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <SysTick_Config+0x40>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cfe:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <SysTick_Config+0x40>)
 8002d00:	2207      	movs	r2, #7
 8002d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	e000e010 	.word	0xe000e010

08002d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff ff29 	bl	8002b74 <__NVIC_SetPriorityGrouping>
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b086      	sub	sp, #24
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	4603      	mov	r3, r0
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d3c:	f7ff ff3e 	bl	8002bbc <__NVIC_GetPriorityGrouping>
 8002d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	6978      	ldr	r0, [r7, #20]
 8002d48:	f7ff ff8e 	bl	8002c68 <NVIC_EncodePriority>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ff5d 	bl	8002c14 <__NVIC_SetPriority>
}
 8002d5a:	bf00      	nop
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	4603      	mov	r3, r0
 8002d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ff31 	bl	8002bd8 <__NVIC_EnableIRQ>
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff ffa2 	bl	8002cd0 <SysTick_Config>
 8002d8c:	4603      	mov	r3, r0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002da4:	f7ff feb6 	bl	8002b14 <HAL_GetTick>
 8002da8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d008      	beq.n	8002dc8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2280      	movs	r2, #128	; 0x80
 8002dba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e052      	b.n	8002e6e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0216 	bic.w	r2, r2, #22
 8002dd6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002de6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d103      	bne.n	8002df8 <HAL_DMA_Abort+0x62>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d007      	beq.n	8002e08 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0208 	bic.w	r2, r2, #8
 8002e06:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0201 	bic.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e18:	e013      	b.n	8002e42 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e1a:	f7ff fe7b 	bl	8002b14 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b05      	cmp	r3, #5
 8002e26:	d90c      	bls.n	8002e42 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2203      	movs	r2, #3
 8002e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e015      	b.n	8002e6e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1e4      	bne.n	8002e1a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e54:	223f      	movs	r2, #63	; 0x3f
 8002e56:	409a      	lsls	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d004      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2280      	movs	r2, #128	; 0x80
 8002e8e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e00c      	b.n	8002eae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2205      	movs	r2, #5
 8002e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0201 	bic.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e06a      	b.n	8002fa4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d106      	bne.n	8002ee6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2223      	movs	r2, #35	; 0x23
 8002edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff f9ed 	bl	80022c0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ee6:	4b31      	ldr	r3, [pc, #196]	; (8002fac <HAL_ETH_Init+0xf0>)
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	4a30      	ldr	r2, [pc, #192]	; (8002fac <HAL_ETH_Init+0xf0>)
 8002eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ef2:	4b2e      	ldr	r3, [pc, #184]	; (8002fac <HAL_ETH_Init+0xf0>)
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002efa:	60bb      	str	r3, [r7, #8]
 8002efc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002efe:	4b2c      	ldr	r3, [pc, #176]	; (8002fb0 <HAL_ETH_Init+0xf4>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	4a2b      	ldr	r2, [pc, #172]	; (8002fb0 <HAL_ETH_Init+0xf4>)
 8002f04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f08:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002f0a:	4b29      	ldr	r3, [pc, #164]	; (8002fb0 <HAL_ETH_Init+0xf4>)
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	4927      	ldr	r1, [pc, #156]	; (8002fb0 <HAL_ETH_Init+0xf4>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002f18:	4b25      	ldr	r3, [pc, #148]	; (8002fb0 <HAL_ETH_Init+0xf4>)
 8002f1a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6812      	ldr	r2, [r2, #0]
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f32:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f34:	f7ff fdee 	bl	8002b14 <HAL_GetTick>
 8002f38:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002f3a:	e011      	b.n	8002f60 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002f3c:	f7ff fdea 	bl	8002b14 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f4a:	d909      	bls.n	8002f60 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2204      	movs	r2, #4
 8002f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	22e0      	movs	r2, #224	; 0xe0
 8002f58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e021      	b.n	8002fa4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1e4      	bne.n	8002f3c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f958 	bl	8003228 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f9ff 	bl	800337c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fa55 	bl	800342e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f9bd 	bl	800330c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2210      	movs	r2, #16
 8002f9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	40013800 	.word	0x40013800

08002fb4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4b51      	ldr	r3, [pc, #324]	; (8003110 <ETH_SetMACConfig+0x15c>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	7c1b      	ldrb	r3, [r3, #16]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d102      	bne.n	8002fdc <ETH_SetMACConfig+0x28>
 8002fd6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002fda:	e000      	b.n	8002fde <ETH_SetMACConfig+0x2a>
 8002fdc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	7c5b      	ldrb	r3, [r3, #17]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d102      	bne.n	8002fec <ETH_SetMACConfig+0x38>
 8002fe6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fea:	e000      	b.n	8002fee <ETH_SetMACConfig+0x3a>
 8002fec:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002fee:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ff4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	7fdb      	ldrb	r3, [r3, #31]
 8002ffa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002ffc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003002:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	7f92      	ldrb	r2, [r2, #30]
 8003008:	2a00      	cmp	r2, #0
 800300a:	d102      	bne.n	8003012 <ETH_SetMACConfig+0x5e>
 800300c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003010:	e000      	b.n	8003014 <ETH_SetMACConfig+0x60>
 8003012:	2200      	movs	r2, #0
                        macconf->Speed |
 8003014:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	7f1b      	ldrb	r3, [r3, #28]
 800301a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800301c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003022:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	791b      	ldrb	r3, [r3, #4]
 8003028:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800302a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003032:	2a00      	cmp	r2, #0
 8003034:	d102      	bne.n	800303c <ETH_SetMACConfig+0x88>
 8003036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800303a:	e000      	b.n	800303e <ETH_SetMACConfig+0x8a>
 800303c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800303e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	7bdb      	ldrb	r3, [r3, #15]
 8003044:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003046:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800304c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003054:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003056:	4313      	orrs	r3, r2
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800306e:	2001      	movs	r0, #1
 8003070:	f7ff fd5c 	bl	8002b2c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	f64f 7341 	movw	r3, #65345	; 0xff41
 800308a:	4013      	ands	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003092:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800309a:	2a00      	cmp	r2, #0
 800309c:	d101      	bne.n	80030a2 <ETH_SetMACConfig+0xee>
 800309e:	2280      	movs	r2, #128	; 0x80
 80030a0:	e000      	b.n	80030a4 <ETH_SetMACConfig+0xf0>
 80030a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80030a4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80030aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80030b2:	2a01      	cmp	r2, #1
 80030b4:	d101      	bne.n	80030ba <ETH_SetMACConfig+0x106>
 80030b6:	2208      	movs	r2, #8
 80030b8:	e000      	b.n	80030bc <ETH_SetMACConfig+0x108>
 80030ba:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80030bc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80030c4:	2a01      	cmp	r2, #1
 80030c6:	d101      	bne.n	80030cc <ETH_SetMACConfig+0x118>
 80030c8:	2204      	movs	r2, #4
 80030ca:	e000      	b.n	80030ce <ETH_SetMACConfig+0x11a>
 80030cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80030ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80030d6:	2a01      	cmp	r2, #1
 80030d8:	d101      	bne.n	80030de <ETH_SetMACConfig+0x12a>
 80030da:	2202      	movs	r2, #2
 80030dc:	e000      	b.n	80030e0 <ETH_SetMACConfig+0x12c>
 80030de:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80030e0:	4313      	orrs	r3, r2
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030f8:	2001      	movs	r0, #1
 80030fa:	f7ff fd17 	bl	8002b2c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	619a      	str	r2, [r3, #24]
}
 8003106:	bf00      	nop
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	ff20810f 	.word	0xff20810f

08003114 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4b3d      	ldr	r3, [pc, #244]	; (8003224 <ETH_SetDMAConfig+0x110>)
 800312e:	4013      	ands	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	7b1b      	ldrb	r3, [r3, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d102      	bne.n	8003140 <ETH_SetDMAConfig+0x2c>
 800313a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800313e:	e000      	b.n	8003142 <ETH_SetDMAConfig+0x2e>
 8003140:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	7b5b      	ldrb	r3, [r3, #13]
 8003146:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003148:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	7f52      	ldrb	r2, [r2, #29]
 800314e:	2a00      	cmp	r2, #0
 8003150:	d102      	bne.n	8003158 <ETH_SetDMAConfig+0x44>
 8003152:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003156:	e000      	b.n	800315a <ETH_SetDMAConfig+0x46>
 8003158:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800315a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	7b9b      	ldrb	r3, [r3, #14]
 8003160:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003162:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003168:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	7f1b      	ldrb	r3, [r3, #28]
 800316e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003170:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	7f9b      	ldrb	r3, [r3, #30]
 8003176:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003178:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800317e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003186:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003188:	4313      	orrs	r3, r2
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4313      	orrs	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003198:	461a      	mov	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031aa:	2001      	movs	r0, #1
 80031ac:	f7ff fcbe 	bl	8002b2c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031b8:	461a      	mov	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	791b      	ldrb	r3, [r3, #4]
 80031c2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80031c8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80031ce:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80031d4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031dc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80031de:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80031e6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80031ec:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80031fa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003208:	2001      	movs	r0, #1
 800320a:	f7ff fc8f 	bl	8002b2c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003216:	461a      	mov	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6013      	str	r3, [r2, #0]
}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	f8de3f23 	.word	0xf8de3f23

08003228 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b0a6      	sub	sp, #152	; 0x98
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003230:	2301      	movs	r3, #1
 8003232:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003236:	2301      	movs	r3, #1
 8003238:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800323c:	2300      	movs	r3, #0
 800323e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003240:	2300      	movs	r3, #0
 8003242:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003246:	2301      	movs	r3, #1
 8003248:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800324c:	2300      	movs	r3, #0
 800324e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003252:	2301      	movs	r3, #1
 8003254:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003258:	2300      	movs	r3, #0
 800325a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800325e:	2300      	movs	r3, #0
 8003260:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003264:	2300      	movs	r3, #0
 8003266:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003268:	2300      	movs	r3, #0
 800326a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800326e:	2300      	movs	r3, #0
 8003270:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003272:	2300      	movs	r3, #0
 8003274:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003278:	2300      	movs	r3, #0
 800327a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800327e:	2300      	movs	r3, #0
 8003280:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003284:	2300      	movs	r3, #0
 8003286:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800328a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800328e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003290:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003294:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003296:	2300      	movs	r3, #0
 8003298:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800329c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032a0:	4619      	mov	r1, r3
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff fe86 	bl	8002fb4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80032a8:	2301      	movs	r3, #1
 80032aa:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80032ac:	2301      	movs	r3, #1
 80032ae:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80032b0:	2301      	movs	r3, #1
 80032b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80032b6:	2301      	movs	r3, #1
 80032b8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80032be:	2300      	movs	r3, #0
 80032c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80032c4:	2300      	movs	r3, #0
 80032c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80032ca:	2300      	movs	r3, #0
 80032cc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80032ce:	2301      	movs	r3, #1
 80032d0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80032d4:	2301      	movs	r3, #1
 80032d6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80032d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032dc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80032de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032e2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80032e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032e8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80032ea:	2301      	movs	r3, #1
 80032ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80032f4:	2300      	movs	r3, #0
 80032f6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80032f8:	f107 0308 	add.w	r3, r7, #8
 80032fc:	4619      	mov	r1, r3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff ff08 	bl	8003114 <ETH_SetDMAConfig>
}
 8003304:	bf00      	nop
 8003306:	3798      	adds	r7, #152	; 0x98
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3305      	adds	r3, #5
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	021b      	lsls	r3, r3, #8
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	3204      	adds	r2, #4
 8003324:	7812      	ldrb	r2, [r2, #0]
 8003326:	4313      	orrs	r3, r2
 8003328:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	4b11      	ldr	r3, [pc, #68]	; (8003374 <ETH_MACAddressConfig+0x68>)
 800332e:	4413      	add	r3, r2
 8003330:	461a      	mov	r2, r3
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3303      	adds	r3, #3
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	061a      	lsls	r2, r3, #24
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3302      	adds	r3, #2
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	041b      	lsls	r3, r3, #16
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3301      	adds	r3, #1
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	021b      	lsls	r3, r3, #8
 8003350:	4313      	orrs	r3, r2
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	7812      	ldrb	r2, [r2, #0]
 8003356:	4313      	orrs	r3, r2
 8003358:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <ETH_MACAddressConfig+0x6c>)
 800335e:	4413      	add	r3, r2
 8003360:	461a      	mov	r2, r3
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	6013      	str	r3, [r2, #0]
}
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40028040 	.word	0x40028040
 8003378:	40028044 	.word	0x40028044

0800337c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	e03e      	b.n	8003408 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68d9      	ldr	r1, [r3, #12]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	440b      	add	r3, r1
 800339a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2200      	movs	r2, #0
 80033a6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2200      	movs	r2, #0
 80033ac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2200      	movs	r2, #0
 80033b2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	3206      	adds	r2, #6
 80033bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d80c      	bhi.n	80033ec <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68d9      	ldr	r1, [r3, #12]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	4613      	mov	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	440b      	add	r3, r1
 80033e4:	461a      	mov	r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	e004      	b.n	80033f6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	461a      	mov	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3301      	adds	r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b03      	cmp	r3, #3
 800340c:	d9bd      	bls.n	800338a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003420:	611a      	str	r2, [r3, #16]
}
 8003422:	bf00      	nop
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800342e:	b480      	push	{r7}
 8003430:	b085      	sub	sp, #20
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	e046      	b.n	80034ca <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6919      	ldr	r1, [r3, #16]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	440b      	add	r3, r1
 800344c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2200      	movs	r2, #0
 8003458:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2200      	movs	r2, #0
 800345e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2200      	movs	r2, #0
 8003464:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2200      	movs	r2, #0
 800346a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2200      	movs	r2, #0
 8003470:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003478:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003480:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800348e:	68b9      	ldr	r1, [r7, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	3212      	adds	r2, #18
 8003496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2b02      	cmp	r3, #2
 800349e:	d80c      	bhi.n	80034ba <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6919      	ldr	r1, [r3, #16]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	440b      	add	r3, r1
 80034b2:	461a      	mov	r2, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	60da      	str	r2, [r3, #12]
 80034b8:	e004      	b.n	80034c4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	461a      	mov	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	3301      	adds	r3, #1
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d9b5      	bls.n	800343c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691a      	ldr	r2, [r3, #16]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034fa:	60da      	str	r2, [r3, #12]
}
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003508:	b480      	push	{r7}
 800350a:	b089      	sub	sp, #36	; 0x24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800351a:	2300      	movs	r3, #0
 800351c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800351e:	2300      	movs	r3, #0
 8003520:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
 8003526:	e175      	b.n	8003814 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003528:	2201      	movs	r2, #1
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4013      	ands	r3, r2
 800353a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	429a      	cmp	r2, r3
 8003542:	f040 8164 	bne.w	800380e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	2b01      	cmp	r3, #1
 8003550:	d005      	beq.n	800355e <HAL_GPIO_Init+0x56>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d130      	bne.n	80035c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	2203      	movs	r2, #3
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43db      	mvns	r3, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4013      	ands	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4313      	orrs	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003594:	2201      	movs	r2, #1
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4013      	ands	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	f003 0201 	and.w	r2, r3, #1
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d017      	beq.n	80035fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	2203      	movs	r2, #3
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4013      	ands	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d123      	bne.n	8003650 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	08da      	lsrs	r2, r3, #3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3208      	adds	r2, #8
 8003610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	220f      	movs	r2, #15
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	691a      	ldr	r2, [r3, #16]
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	08da      	lsrs	r2, r3, #3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3208      	adds	r2, #8
 800364a:	69b9      	ldr	r1, [r7, #24]
 800364c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	2203      	movs	r2, #3
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	43db      	mvns	r3, r3
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4013      	ands	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f003 0203 	and.w	r2, r3, #3
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 80be 	beq.w	800380e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003692:	4b66      	ldr	r3, [pc, #408]	; (800382c <HAL_GPIO_Init+0x324>)
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	4a65      	ldr	r2, [pc, #404]	; (800382c <HAL_GPIO_Init+0x324>)
 8003698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800369c:	6453      	str	r3, [r2, #68]	; 0x44
 800369e:	4b63      	ldr	r3, [pc, #396]	; (800382c <HAL_GPIO_Init+0x324>)
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80036aa:	4a61      	ldr	r2, [pc, #388]	; (8003830 <HAL_GPIO_Init+0x328>)
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	089b      	lsrs	r3, r3, #2
 80036b0:	3302      	adds	r3, #2
 80036b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	220f      	movs	r2, #15
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43db      	mvns	r3, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4013      	ands	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a58      	ldr	r2, [pc, #352]	; (8003834 <HAL_GPIO_Init+0x32c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d037      	beq.n	8003746 <HAL_GPIO_Init+0x23e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a57      	ldr	r2, [pc, #348]	; (8003838 <HAL_GPIO_Init+0x330>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d031      	beq.n	8003742 <HAL_GPIO_Init+0x23a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a56      	ldr	r2, [pc, #344]	; (800383c <HAL_GPIO_Init+0x334>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d02b      	beq.n	800373e <HAL_GPIO_Init+0x236>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a55      	ldr	r2, [pc, #340]	; (8003840 <HAL_GPIO_Init+0x338>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d025      	beq.n	800373a <HAL_GPIO_Init+0x232>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a54      	ldr	r2, [pc, #336]	; (8003844 <HAL_GPIO_Init+0x33c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d01f      	beq.n	8003736 <HAL_GPIO_Init+0x22e>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a53      	ldr	r2, [pc, #332]	; (8003848 <HAL_GPIO_Init+0x340>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d019      	beq.n	8003732 <HAL_GPIO_Init+0x22a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a52      	ldr	r2, [pc, #328]	; (800384c <HAL_GPIO_Init+0x344>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d013      	beq.n	800372e <HAL_GPIO_Init+0x226>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a51      	ldr	r2, [pc, #324]	; (8003850 <HAL_GPIO_Init+0x348>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00d      	beq.n	800372a <HAL_GPIO_Init+0x222>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a50      	ldr	r2, [pc, #320]	; (8003854 <HAL_GPIO_Init+0x34c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d007      	beq.n	8003726 <HAL_GPIO_Init+0x21e>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a4f      	ldr	r2, [pc, #316]	; (8003858 <HAL_GPIO_Init+0x350>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d101      	bne.n	8003722 <HAL_GPIO_Init+0x21a>
 800371e:	2309      	movs	r3, #9
 8003720:	e012      	b.n	8003748 <HAL_GPIO_Init+0x240>
 8003722:	230a      	movs	r3, #10
 8003724:	e010      	b.n	8003748 <HAL_GPIO_Init+0x240>
 8003726:	2308      	movs	r3, #8
 8003728:	e00e      	b.n	8003748 <HAL_GPIO_Init+0x240>
 800372a:	2307      	movs	r3, #7
 800372c:	e00c      	b.n	8003748 <HAL_GPIO_Init+0x240>
 800372e:	2306      	movs	r3, #6
 8003730:	e00a      	b.n	8003748 <HAL_GPIO_Init+0x240>
 8003732:	2305      	movs	r3, #5
 8003734:	e008      	b.n	8003748 <HAL_GPIO_Init+0x240>
 8003736:	2304      	movs	r3, #4
 8003738:	e006      	b.n	8003748 <HAL_GPIO_Init+0x240>
 800373a:	2303      	movs	r3, #3
 800373c:	e004      	b.n	8003748 <HAL_GPIO_Init+0x240>
 800373e:	2302      	movs	r3, #2
 8003740:	e002      	b.n	8003748 <HAL_GPIO_Init+0x240>
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <HAL_GPIO_Init+0x240>
 8003746:	2300      	movs	r3, #0
 8003748:	69fa      	ldr	r2, [r7, #28]
 800374a:	f002 0203 	and.w	r2, r2, #3
 800374e:	0092      	lsls	r2, r2, #2
 8003750:	4093      	lsls	r3, r2
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4313      	orrs	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003758:	4935      	ldr	r1, [pc, #212]	; (8003830 <HAL_GPIO_Init+0x328>)
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	089b      	lsrs	r3, r3, #2
 800375e:	3302      	adds	r3, #2
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003766:	4b3d      	ldr	r3, [pc, #244]	; (800385c <HAL_GPIO_Init+0x354>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	43db      	mvns	r3, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800378a:	4a34      	ldr	r2, [pc, #208]	; (800385c <HAL_GPIO_Init+0x354>)
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003790:	4b32      	ldr	r3, [pc, #200]	; (800385c <HAL_GPIO_Init+0x354>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	43db      	mvns	r3, r3
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	4013      	ands	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037b4:	4a29      	ldr	r2, [pc, #164]	; (800385c <HAL_GPIO_Init+0x354>)
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037ba:	4b28      	ldr	r3, [pc, #160]	; (800385c <HAL_GPIO_Init+0x354>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	43db      	mvns	r3, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4013      	ands	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037de:	4a1f      	ldr	r2, [pc, #124]	; (800385c <HAL_GPIO_Init+0x354>)
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037e4:	4b1d      	ldr	r3, [pc, #116]	; (800385c <HAL_GPIO_Init+0x354>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	43db      	mvns	r3, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003808:	4a14      	ldr	r2, [pc, #80]	; (800385c <HAL_GPIO_Init+0x354>)
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	3301      	adds	r3, #1
 8003812:	61fb      	str	r3, [r7, #28]
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	2b0f      	cmp	r3, #15
 8003818:	f67f ae86 	bls.w	8003528 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800381c:	bf00      	nop
 800381e:	bf00      	nop
 8003820:	3724      	adds	r7, #36	; 0x24
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800
 8003830:	40013800 	.word	0x40013800
 8003834:	40020000 	.word	0x40020000
 8003838:	40020400 	.word	0x40020400
 800383c:	40020800 	.word	0x40020800
 8003840:	40020c00 	.word	0x40020c00
 8003844:	40021000 	.word	0x40021000
 8003848:	40021400 	.word	0x40021400
 800384c:	40021800 	.word	0x40021800
 8003850:	40021c00 	.word	0x40021c00
 8003854:	40022000 	.word	0x40022000
 8003858:	40022400 	.word	0x40022400
 800385c:	40013c00 	.word	0x40013c00

08003860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	807b      	strh	r3, [r7, #2]
 800386c:	4613      	mov	r3, r2
 800386e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003870:	787b      	ldrb	r3, [r7, #1]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003876:	887a      	ldrh	r2, [r7, #2]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800387c:	e003      	b.n	8003886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800387e:	887b      	ldrh	r3, [r7, #2]
 8003880:	041a      	lsls	r2, r3, #16
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	619a      	str	r2, [r3, #24]
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
	...

08003894 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e07f      	b.n	80039a6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d106      	bne.n	80038c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fe fdb8 	bl	8002430 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2224      	movs	r2, #36	; 0x24
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0201 	bic.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d107      	bne.n	800390e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	e006      	b.n	800391c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800391a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d104      	bne.n	800392e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800392c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6859      	ldr	r1, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	4b1d      	ldr	r3, [pc, #116]	; (80039b0 <HAL_I2C_Init+0x11c>)
 800393a:	430b      	orrs	r3, r1
 800393c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800394c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691a      	ldr	r2, [r3, #16]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	69d9      	ldr	r1, [r3, #28]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1a      	ldr	r2, [r3, #32]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	02008000 	.word	0x02008000

080039b4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	4608      	mov	r0, r1
 80039be:	4611      	mov	r1, r2
 80039c0:	461a      	mov	r2, r3
 80039c2:	4603      	mov	r3, r0
 80039c4:	817b      	strh	r3, [r7, #10]
 80039c6:	460b      	mov	r3, r1
 80039c8:	813b      	strh	r3, [r7, #8]
 80039ca:	4613      	mov	r3, r2
 80039cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	f040 80f9 	bne.w	8003bce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <HAL_I2C_Mem_Write+0x34>
 80039e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d105      	bne.n	80039f4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0ed      	b.n	8003bd0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_I2C_Mem_Write+0x4e>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e0e6      	b.n	8003bd0 <HAL_I2C_Mem_Write+0x21c>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a0a:	f7ff f883 	bl	8002b14 <HAL_GetTick>
 8003a0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	2319      	movs	r3, #25
 8003a16:	2201      	movs	r2, #1
 8003a18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 fac3 	bl	8003fa8 <I2C_WaitOnFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0d1      	b.n	8003bd0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2221      	movs	r2, #33	; 0x21
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2240      	movs	r2, #64	; 0x40
 8003a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a3a      	ldr	r2, [r7, #32]
 8003a46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a54:	88f8      	ldrh	r0, [r7, #6]
 8003a56:	893a      	ldrh	r2, [r7, #8]
 8003a58:	8979      	ldrh	r1, [r7, #10]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	9301      	str	r3, [sp, #4]
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	4603      	mov	r3, r0
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 f9d3 	bl	8003e10 <I2C_RequestMemoryWrite>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0a9      	b.n	8003bd0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2bff      	cmp	r3, #255	; 0xff
 8003a84:	d90e      	bls.n	8003aa4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	22ff      	movs	r2, #255	; 0xff
 8003a8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	8979      	ldrh	r1, [r7, #10]
 8003a94:	2300      	movs	r3, #0
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 fc1f 	bl	80042e0 <I2C_TransferConfig>
 8003aa2:	e00f      	b.n	8003ac4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	8979      	ldrh	r1, [r7, #10]
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 fc0e 	bl	80042e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 faad 	bl	8004028 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e07b      	b.n	8003bd0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	781a      	ldrb	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d034      	beq.n	8003b7c <HAL_I2C_Mem_Write+0x1c8>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d130      	bne.n	8003b7c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b20:	2200      	movs	r2, #0
 8003b22:	2180      	movs	r1, #128	; 0x80
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 fa3f 	bl	8003fa8 <I2C_WaitOnFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e04d      	b.n	8003bd0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2bff      	cmp	r3, #255	; 0xff
 8003b3c:	d90e      	bls.n	8003b5c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	22ff      	movs	r2, #255	; 0xff
 8003b42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	8979      	ldrh	r1, [r7, #10]
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 fbc3 	bl	80042e0 <I2C_TransferConfig>
 8003b5a:	e00f      	b.n	8003b7c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	8979      	ldrh	r1, [r7, #10]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 fbb2 	bl	80042e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d19e      	bne.n	8003ac4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fa8c 	bl	80040a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e01a      	b.n	8003bd0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6859      	ldr	r1, [r3, #4]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <HAL_I2C_Mem_Write+0x224>)
 8003bae:	400b      	ands	r3, r1
 8003bb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	e000      	b.n	8003bd0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003bce:	2302      	movs	r3, #2
  }
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	fe00e800 	.word	0xfe00e800

08003bdc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	4608      	mov	r0, r1
 8003be6:	4611      	mov	r1, r2
 8003be8:	461a      	mov	r2, r3
 8003bea:	4603      	mov	r3, r0
 8003bec:	817b      	strh	r3, [r7, #10]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	813b      	strh	r3, [r7, #8]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	f040 80fd 	bne.w	8003dfe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <HAL_I2C_Mem_Read+0x34>
 8003c0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d105      	bne.n	8003c1c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c16:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0f1      	b.n	8003e00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_I2C_Mem_Read+0x4e>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e0ea      	b.n	8003e00 <HAL_I2C_Mem_Read+0x224>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c32:	f7fe ff6f 	bl	8002b14 <HAL_GetTick>
 8003c36:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	2319      	movs	r3, #25
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f9af 	bl	8003fa8 <I2C_WaitOnFlagUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e0d5      	b.n	8003e00 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2222      	movs	r2, #34	; 0x22
 8003c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2240      	movs	r2, #64	; 0x40
 8003c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a3a      	ldr	r2, [r7, #32]
 8003c6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c7c:	88f8      	ldrh	r0, [r7, #6]
 8003c7e:	893a      	ldrh	r2, [r7, #8]
 8003c80:	8979      	ldrh	r1, [r7, #10]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	9301      	str	r3, [sp, #4]
 8003c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 f913 	bl	8003eb8 <I2C_RequestMemoryRead>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0ad      	b.n	8003e00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2bff      	cmp	r3, #255	; 0xff
 8003cac:	d90e      	bls.n	8003ccc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	22ff      	movs	r2, #255	; 0xff
 8003cb2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	8979      	ldrh	r1, [r7, #10]
 8003cbc:	4b52      	ldr	r3, [pc, #328]	; (8003e08 <HAL_I2C_Mem_Read+0x22c>)
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 fb0b 	bl	80042e0 <I2C_TransferConfig>
 8003cca:	e00f      	b.n	8003cec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	8979      	ldrh	r1, [r7, #10]
 8003cde:	4b4a      	ldr	r3, [pc, #296]	; (8003e08 <HAL_I2C_Mem_Read+0x22c>)
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fafa 	bl	80042e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	2104      	movs	r1, #4
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 f956 	bl	8003fa8 <I2C_WaitOnFlagUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e07c      	b.n	8003e00 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d034      	beq.n	8003dac <HAL_I2C_Mem_Read+0x1d0>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d130      	bne.n	8003dac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d50:	2200      	movs	r2, #0
 8003d52:	2180      	movs	r1, #128	; 0x80
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 f927 	bl	8003fa8 <I2C_WaitOnFlagUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e04d      	b.n	8003e00 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2bff      	cmp	r3, #255	; 0xff
 8003d6c:	d90e      	bls.n	8003d8c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	22ff      	movs	r2, #255	; 0xff
 8003d72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	8979      	ldrh	r1, [r7, #10]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 faab 	bl	80042e0 <I2C_TransferConfig>
 8003d8a:	e00f      	b.n	8003dac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	8979      	ldrh	r1, [r7, #10]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 fa9a 	bl	80042e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d19a      	bne.n	8003cec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f974 	bl	80040a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e01a      	b.n	8003e00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6859      	ldr	r1, [r3, #4]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <HAL_I2C_Mem_Read+0x230>)
 8003dde:	400b      	ands	r3, r1
 8003de0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e000      	b.n	8003e00 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003dfe:	2302      	movs	r3, #2
  }
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	80002400 	.word	0x80002400
 8003e0c:	fe00e800 	.word	0xfe00e800

08003e10 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af02      	add	r7, sp, #8
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	4608      	mov	r0, r1
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4603      	mov	r3, r0
 8003e20:	817b      	strh	r3, [r7, #10]
 8003e22:	460b      	mov	r3, r1
 8003e24:	813b      	strh	r3, [r7, #8]
 8003e26:	4613      	mov	r3, r2
 8003e28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003e2a:	88fb      	ldrh	r3, [r7, #6]
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	8979      	ldrh	r1, [r7, #10]
 8003e30:	4b20      	ldr	r3, [pc, #128]	; (8003eb4 <I2C_RequestMemoryWrite+0xa4>)
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 fa51 	bl	80042e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e3e:	69fa      	ldr	r2, [r7, #28]
 8003e40:	69b9      	ldr	r1, [r7, #24]
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 f8f0 	bl	8004028 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e02c      	b.n	8003eac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e52:	88fb      	ldrh	r3, [r7, #6]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d105      	bne.n	8003e64 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e58:	893b      	ldrh	r3, [r7, #8]
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	629a      	str	r2, [r3, #40]	; 0x28
 8003e62:	e015      	b.n	8003e90 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e64:	893b      	ldrh	r3, [r7, #8]
 8003e66:	0a1b      	lsrs	r3, r3, #8
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e72:	69fa      	ldr	r2, [r7, #28]
 8003e74:	69b9      	ldr	r1, [r7, #24]
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 f8d6 	bl	8004028 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e012      	b.n	8003eac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e86:	893b      	ldrh	r3, [r7, #8]
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	2200      	movs	r2, #0
 8003e98:	2180      	movs	r1, #128	; 0x80
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f884 	bl	8003fa8 <I2C_WaitOnFlagUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	80002000 	.word	0x80002000

08003eb8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af02      	add	r7, sp, #8
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	4608      	mov	r0, r1
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	817b      	strh	r3, [r7, #10]
 8003eca:	460b      	mov	r3, r1
 8003ecc:	813b      	strh	r3, [r7, #8]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	8979      	ldrh	r1, [r7, #10]
 8003ed8:	4b20      	ldr	r3, [pc, #128]	; (8003f5c <I2C_RequestMemoryRead+0xa4>)
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	2300      	movs	r3, #0
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 f9fe 	bl	80042e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	69b9      	ldr	r1, [r7, #24]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f89d 	bl	8004028 <I2C_WaitOnTXISFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e02c      	b.n	8003f52 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ef8:	88fb      	ldrh	r3, [r7, #6]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d105      	bne.n	8003f0a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003efe:	893b      	ldrh	r3, [r7, #8]
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	629a      	str	r2, [r3, #40]	; 0x28
 8003f08:	e015      	b.n	8003f36 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f0a:	893b      	ldrh	r3, [r7, #8]
 8003f0c:	0a1b      	lsrs	r3, r3, #8
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f18:	69fa      	ldr	r2, [r7, #28]
 8003f1a:	69b9      	ldr	r1, [r7, #24]
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 f883 	bl	8004028 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e012      	b.n	8003f52 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f2c:	893b      	ldrh	r3, [r7, #8]
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2140      	movs	r1, #64	; 0x40
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 f831 	bl	8003fa8 <I2C_WaitOnFlagUntilTimeout>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e000      	b.n	8003f52 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	80002000 	.word	0x80002000

08003f60 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d103      	bne.n	8003f7e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d007      	beq.n	8003f9c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699a      	ldr	r2, [r3, #24]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	619a      	str	r2, [r3, #24]
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fb8:	e022      	b.n	8004000 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc0:	d01e      	beq.n	8004000 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc2:	f7fe fda7 	bl	8002b14 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d302      	bcc.n	8003fd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d113      	bne.n	8004000 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fdc:	f043 0220 	orr.w	r2, r3, #32
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e00f      	b.n	8004020 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699a      	ldr	r2, [r3, #24]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	4013      	ands	r3, r2
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	429a      	cmp	r2, r3
 800400e:	bf0c      	ite	eq
 8004010:	2301      	moveq	r3, #1
 8004012:	2300      	movne	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	429a      	cmp	r2, r3
 800401c:	d0cd      	beq.n	8003fba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004034:	e02c      	b.n	8004090 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	68b9      	ldr	r1, [r7, #8]
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 f870 	bl	8004120 <I2C_IsErrorOccurred>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e02a      	b.n	80040a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004050:	d01e      	beq.n	8004090 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004052:	f7fe fd5f 	bl	8002b14 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	429a      	cmp	r2, r3
 8004060:	d302      	bcc.n	8004068 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d113      	bne.n	8004090 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406c:	f043 0220 	orr.w	r2, r3, #32
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e007      	b.n	80040a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b02      	cmp	r3, #2
 800409c:	d1cb      	bne.n	8004036 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040b4:	e028      	b.n	8004108 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 f830 	bl	8004120 <I2C_IsErrorOccurred>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e026      	b.n	8004118 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ca:	f7fe fd23 	bl	8002b14 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d302      	bcc.n	80040e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d113      	bne.n	8004108 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e4:	f043 0220 	orr.w	r2, r3, #32
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e007      	b.n	8004118 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f003 0320 	and.w	r3, r3, #32
 8004112:	2b20      	cmp	r3, #32
 8004114:	d1cf      	bne.n	80040b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08a      	sub	sp, #40	; 0x28
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800412c:	2300      	movs	r3, #0
 800412e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800413a:	2300      	movs	r3, #0
 800413c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	f003 0310 	and.w	r3, r3, #16
 8004148:	2b00      	cmp	r3, #0
 800414a:	d068      	beq.n	800421e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2210      	movs	r2, #16
 8004152:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004154:	e049      	b.n	80041ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415c:	d045      	beq.n	80041ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800415e:	f7fe fcd9 	bl	8002b14 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	429a      	cmp	r2, r3
 800416c:	d302      	bcc.n	8004174 <I2C_IsErrorOccurred+0x54>
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d13a      	bne.n	80041ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800417e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004186:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004196:	d121      	bne.n	80041dc <I2C_IsErrorOccurred+0xbc>
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800419e:	d01d      	beq.n	80041dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	2b20      	cmp	r3, #32
 80041a4:	d01a      	beq.n	80041dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80041b6:	f7fe fcad 	bl	8002b14 <HAL_GetTick>
 80041ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041bc:	e00e      	b.n	80041dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80041be:	f7fe fca9 	bl	8002b14 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b19      	cmp	r3, #25
 80041ca:	d907      	bls.n	80041dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	f043 0320 	orr.w	r3, r3, #32
 80041d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80041da:	e006      	b.n	80041ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d1e9      	bne.n	80041be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d003      	beq.n	8004200 <I2C_IsErrorOccurred+0xe0>
 80041f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0aa      	beq.n	8004156 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004204:	2b00      	cmp	r3, #0
 8004206:	d103      	bne.n	8004210 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2220      	movs	r2, #32
 800420e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	f043 0304 	orr.w	r3, r3, #4
 8004216:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00b      	beq.n	8004248 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004240:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00b      	beq.n	800426a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	f043 0308 	orr.w	r3, r3, #8
 8004258:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004262:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00b      	beq.n	800428c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	f043 0302 	orr.w	r3, r3, #2
 800427a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004284:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800428c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004290:	2b00      	cmp	r3, #0
 8004292:	d01c      	beq.n	80042ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f7ff fe63 	bl	8003f60 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6859      	ldr	r1, [r3, #4]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	4b0d      	ldr	r3, [pc, #52]	; (80042dc <I2C_IsErrorOccurred+0x1bc>)
 80042a6:	400b      	ands	r3, r1
 80042a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	431a      	orrs	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80042ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3728      	adds	r7, #40	; 0x28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	fe00e800 	.word	0xfe00e800

080042e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	607b      	str	r3, [r7, #4]
 80042ea:	460b      	mov	r3, r1
 80042ec:	817b      	strh	r3, [r7, #10]
 80042ee:	4613      	mov	r3, r2
 80042f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042f2:	897b      	ldrh	r3, [r7, #10]
 80042f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80042f8:	7a7b      	ldrb	r3, [r7, #9]
 80042fa:	041b      	lsls	r3, r3, #16
 80042fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004300:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004306:	6a3b      	ldr	r3, [r7, #32]
 8004308:	4313      	orrs	r3, r2
 800430a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800430e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	0d5b      	lsrs	r3, r3, #21
 800431a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800431e:	4b08      	ldr	r3, [pc, #32]	; (8004340 <I2C_TransferConfig+0x60>)
 8004320:	430b      	orrs	r3, r1
 8004322:	43db      	mvns	r3, r3
 8004324:	ea02 0103 	and.w	r1, r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	430a      	orrs	r2, r1
 8004330:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004332:	bf00      	nop
 8004334:	371c      	adds	r7, #28
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	03ff63ff 	.word	0x03ff63ff

08004344 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b20      	cmp	r3, #32
 8004358:	d138      	bne.n	80043cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004364:	2302      	movs	r3, #2
 8004366:	e032      	b.n	80043ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2224      	movs	r2, #36	; 0x24
 8004374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0201 	bic.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004396:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6819      	ldr	r1, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0201 	orr.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	e000      	b.n	80043ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043cc:	2302      	movs	r3, #2
  }
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043da:	b480      	push	{r7}
 80043dc:	b085      	sub	sp, #20
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	d139      	bne.n	8004464 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d101      	bne.n	80043fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80043fa:	2302      	movs	r3, #2
 80043fc:	e033      	b.n	8004466 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2224      	movs	r2, #36	; 0x24
 800440a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0201 	bic.w	r2, r2, #1
 800441c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800442c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	021b      	lsls	r3, r3, #8
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0201 	orr.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004460:	2300      	movs	r3, #0
 8004462:	e000      	b.n	8004466 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004464:	2302      	movs	r3, #2
  }
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004472:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004474:	b08f      	sub	sp, #60	; 0x3c
 8004476:	af0a      	add	r7, sp, #40	; 0x28
 8004478:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e116      	b.n	80046b2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fe f92e 	bl	8002700 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2203      	movs	r2, #3
 80044a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d102      	bne.n	80044be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f003 fece 	bl	8008264 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	603b      	str	r3, [r7, #0]
 80044ce:	687e      	ldr	r6, [r7, #4]
 80044d0:	466d      	mov	r5, sp
 80044d2:	f106 0410 	add.w	r4, r6, #16
 80044d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80044e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80044e6:	1d33      	adds	r3, r6, #4
 80044e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044ea:	6838      	ldr	r0, [r7, #0]
 80044ec:	f003 fe62 	bl	80081b4 <USB_CoreInit>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2202      	movs	r2, #2
 80044fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e0d7      	b.n	80046b2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2100      	movs	r1, #0
 8004508:	4618      	mov	r0, r3
 800450a:	f003 febc 	bl	8008286 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800450e:	2300      	movs	r3, #0
 8004510:	73fb      	strb	r3, [r7, #15]
 8004512:	e04a      	b.n	80045aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004514:	7bfa      	ldrb	r2, [r7, #15]
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	4613      	mov	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	4413      	add	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	333d      	adds	r3, #61	; 0x3d
 8004524:	2201      	movs	r2, #1
 8004526:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004528:	7bfa      	ldrb	r2, [r7, #15]
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	4613      	mov	r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	4413      	add	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	440b      	add	r3, r1
 8004536:	333c      	adds	r3, #60	; 0x3c
 8004538:	7bfa      	ldrb	r2, [r7, #15]
 800453a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800453c:	7bfa      	ldrb	r2, [r7, #15]
 800453e:	7bfb      	ldrb	r3, [r7, #15]
 8004540:	b298      	uxth	r0, r3
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	3344      	adds	r3, #68	; 0x44
 8004550:	4602      	mov	r2, r0
 8004552:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004554:	7bfa      	ldrb	r2, [r7, #15]
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	4613      	mov	r3, r2
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	4413      	add	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	3340      	adds	r3, #64	; 0x40
 8004564:	2200      	movs	r2, #0
 8004566:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004568:	7bfa      	ldrb	r2, [r7, #15]
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	4613      	mov	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	4413      	add	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	3348      	adds	r3, #72	; 0x48
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800457c:	7bfa      	ldrb	r2, [r7, #15]
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	4613      	mov	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	4413      	add	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	334c      	adds	r3, #76	; 0x4c
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004590:	7bfa      	ldrb	r2, [r7, #15]
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	4613      	mov	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	4413      	add	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	3354      	adds	r3, #84	; 0x54
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
 80045a6:	3301      	adds	r3, #1
 80045a8:	73fb      	strb	r3, [r7, #15]
 80045aa:	7bfa      	ldrb	r2, [r7, #15]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d3af      	bcc.n	8004514 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045b4:	2300      	movs	r3, #0
 80045b6:	73fb      	strb	r3, [r7, #15]
 80045b8:	e044      	b.n	8004644 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045ba:	7bfa      	ldrb	r2, [r7, #15]
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	4413      	add	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80045cc:	2200      	movs	r2, #0
 80045ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045d0:	7bfa      	ldrb	r2, [r7, #15]
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80045e2:	7bfa      	ldrb	r2, [r7, #15]
 80045e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045e6:	7bfa      	ldrb	r2, [r7, #15]
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	4413      	add	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80045f8:	2200      	movs	r2, #0
 80045fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045fc:	7bfa      	ldrb	r2, [r7, #15]
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	4613      	mov	r3, r2
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	4413      	add	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800460e:	2200      	movs	r2, #0
 8004610:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004612:	7bfa      	ldrb	r2, [r7, #15]
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	4613      	mov	r3, r2
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	440b      	add	r3, r1
 8004620:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004628:	7bfa      	ldrb	r2, [r7, #15]
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	4413      	add	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800463e:	7bfb      	ldrb	r3, [r7, #15]
 8004640:	3301      	adds	r3, #1
 8004642:	73fb      	strb	r3, [r7, #15]
 8004644:	7bfa      	ldrb	r2, [r7, #15]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	429a      	cmp	r2, r3
 800464c:	d3b5      	bcc.n	80045ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	687e      	ldr	r6, [r7, #4]
 8004656:	466d      	mov	r5, sp
 8004658:	f106 0410 	add.w	r4, r6, #16
 800465c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800465e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004662:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004664:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004668:	e885 0003 	stmia.w	r5, {r0, r1}
 800466c:	1d33      	adds	r3, r6, #4
 800466e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004670:	6838      	ldr	r0, [r7, #0]
 8004672:	f003 fe55 	bl	8008320 <USB_DevInit>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d005      	beq.n	8004688 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e014      	b.n	80046b2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	2b01      	cmp	r3, #1
 800469e:	d102      	bne.n	80046a6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f80b 	bl	80046bc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f004 f813 	bl	80086d6 <USB_DevDisconnect>

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080046bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046ea:	4b05      	ldr	r3, [pc, #20]	; (8004700 <HAL_PCDEx_ActivateLPM+0x44>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	10000003 	.word	0x10000003

08004704 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004708:	4b05      	ldr	r3, [pc, #20]	; (8004720 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a04      	ldr	r2, [pc, #16]	; (8004720 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800470e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004712:	6013      	str	r3, [r2, #0]
}
 8004714:	bf00      	nop
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	40007000 	.word	0x40007000

08004724 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800472c:	2300      	movs	r3, #0
 800472e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e291      	b.n	8004c5e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 8087 	beq.w	8004856 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004748:	4b96      	ldr	r3, [pc, #600]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 030c 	and.w	r3, r3, #12
 8004750:	2b04      	cmp	r3, #4
 8004752:	d00c      	beq.n	800476e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004754:	4b93      	ldr	r3, [pc, #588]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 030c 	and.w	r3, r3, #12
 800475c:	2b08      	cmp	r3, #8
 800475e:	d112      	bne.n	8004786 <HAL_RCC_OscConfig+0x62>
 8004760:	4b90      	ldr	r3, [pc, #576]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004768:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800476c:	d10b      	bne.n	8004786 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800476e:	4b8d      	ldr	r3, [pc, #564]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d06c      	beq.n	8004854 <HAL_RCC_OscConfig+0x130>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d168      	bne.n	8004854 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e26b      	b.n	8004c5e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800478e:	d106      	bne.n	800479e <HAL_RCC_OscConfig+0x7a>
 8004790:	4b84      	ldr	r3, [pc, #528]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a83      	ldr	r2, [pc, #524]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	e02e      	b.n	80047fc <HAL_RCC_OscConfig+0xd8>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10c      	bne.n	80047c0 <HAL_RCC_OscConfig+0x9c>
 80047a6:	4b7f      	ldr	r3, [pc, #508]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a7e      	ldr	r2, [pc, #504]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80047ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	4b7c      	ldr	r3, [pc, #496]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a7b      	ldr	r2, [pc, #492]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80047b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	e01d      	b.n	80047fc <HAL_RCC_OscConfig+0xd8>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047c8:	d10c      	bne.n	80047e4 <HAL_RCC_OscConfig+0xc0>
 80047ca:	4b76      	ldr	r3, [pc, #472]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a75      	ldr	r2, [pc, #468]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80047d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	4b73      	ldr	r3, [pc, #460]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a72      	ldr	r2, [pc, #456]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80047dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	e00b      	b.n	80047fc <HAL_RCC_OscConfig+0xd8>
 80047e4:	4b6f      	ldr	r3, [pc, #444]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a6e      	ldr	r2, [pc, #440]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80047ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	4b6c      	ldr	r3, [pc, #432]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a6b      	ldr	r2, [pc, #428]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80047f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d013      	beq.n	800482c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fe f986 	bl	8002b14 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800480c:	f7fe f982 	bl	8002b14 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b64      	cmp	r3, #100	; 0x64
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e21f      	b.n	8004c5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481e:	4b61      	ldr	r3, [pc, #388]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f0      	beq.n	800480c <HAL_RCC_OscConfig+0xe8>
 800482a:	e014      	b.n	8004856 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482c:	f7fe f972 	bl	8002b14 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004834:	f7fe f96e 	bl	8002b14 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b64      	cmp	r3, #100	; 0x64
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e20b      	b.n	8004c5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004846:	4b57      	ldr	r3, [pc, #348]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f0      	bne.n	8004834 <HAL_RCC_OscConfig+0x110>
 8004852:	e000      	b.n	8004856 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d069      	beq.n	8004936 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004862:	4b50      	ldr	r3, [pc, #320]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 030c 	and.w	r3, r3, #12
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00b      	beq.n	8004886 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800486e:	4b4d      	ldr	r3, [pc, #308]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 030c 	and.w	r3, r3, #12
 8004876:	2b08      	cmp	r3, #8
 8004878:	d11c      	bne.n	80048b4 <HAL_RCC_OscConfig+0x190>
 800487a:	4b4a      	ldr	r3, [pc, #296]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d116      	bne.n	80048b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004886:	4b47      	ldr	r3, [pc, #284]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d005      	beq.n	800489e <HAL_RCC_OscConfig+0x17a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d001      	beq.n	800489e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e1df      	b.n	8004c5e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800489e:	4b41      	ldr	r3, [pc, #260]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	493d      	ldr	r1, [pc, #244]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048b2:	e040      	b.n	8004936 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d023      	beq.n	8004904 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048bc:	4b39      	ldr	r3, [pc, #228]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a38      	ldr	r2, [pc, #224]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80048c2:	f043 0301 	orr.w	r3, r3, #1
 80048c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c8:	f7fe f924 	bl	8002b14 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048d0:	f7fe f920 	bl	8002b14 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e1bd      	b.n	8004c5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e2:	4b30      	ldr	r3, [pc, #192]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0f0      	beq.n	80048d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ee:	4b2d      	ldr	r3, [pc, #180]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	4929      	ldr	r1, [pc, #164]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	600b      	str	r3, [r1, #0]
 8004902:	e018      	b.n	8004936 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004904:	4b27      	ldr	r3, [pc, #156]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a26      	ldr	r2, [pc, #152]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 800490a:	f023 0301 	bic.w	r3, r3, #1
 800490e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004910:	f7fe f900 	bl	8002b14 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004918:	f7fe f8fc 	bl	8002b14 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e199      	b.n	8004c5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800492a:	4b1e      	ldr	r3, [pc, #120]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d038      	beq.n	80049b4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d019      	beq.n	800497e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800494a:	4b16      	ldr	r3, [pc, #88]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 800494c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800494e:	4a15      	ldr	r2, [pc, #84]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004950:	f043 0301 	orr.w	r3, r3, #1
 8004954:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004956:	f7fe f8dd 	bl	8002b14 <HAL_GetTick>
 800495a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800495c:	e008      	b.n	8004970 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800495e:	f7fe f8d9 	bl	8002b14 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d901      	bls.n	8004970 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e176      	b.n	8004c5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004970:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0f0      	beq.n	800495e <HAL_RCC_OscConfig+0x23a>
 800497c:	e01a      	b.n	80049b4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800497e:	4b09      	ldr	r3, [pc, #36]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004982:	4a08      	ldr	r2, [pc, #32]	; (80049a4 <HAL_RCC_OscConfig+0x280>)
 8004984:	f023 0301 	bic.w	r3, r3, #1
 8004988:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498a:	f7fe f8c3 	bl	8002b14 <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004990:	e00a      	b.n	80049a8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004992:	f7fe f8bf 	bl	8002b14 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d903      	bls.n	80049a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e15c      	b.n	8004c5e <HAL_RCC_OscConfig+0x53a>
 80049a4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a8:	4b91      	ldr	r3, [pc, #580]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 80049aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1ee      	bne.n	8004992 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 80a4 	beq.w	8004b0a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049c2:	4b8b      	ldr	r3, [pc, #556]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10d      	bne.n	80049ea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ce:	4b88      	ldr	r3, [pc, #544]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	4a87      	ldr	r2, [pc, #540]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 80049d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d8:	6413      	str	r3, [r2, #64]	; 0x40
 80049da:	4b85      	ldr	r3, [pc, #532]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e2:	60bb      	str	r3, [r7, #8]
 80049e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049e6:	2301      	movs	r3, #1
 80049e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ea:	4b82      	ldr	r3, [pc, #520]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d118      	bne.n	8004a28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80049f6:	4b7f      	ldr	r3, [pc, #508]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a7e      	ldr	r2, [pc, #504]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 80049fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a02:	f7fe f887 	bl	8002b14 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a0a:	f7fe f883 	bl	8002b14 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b64      	cmp	r3, #100	; 0x64
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e120      	b.n	8004c5e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a1c:	4b75      	ldr	r3, [pc, #468]	; (8004bf4 <HAL_RCC_OscConfig+0x4d0>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0f0      	beq.n	8004a0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d106      	bne.n	8004a3e <HAL_RCC_OscConfig+0x31a>
 8004a30:	4b6f      	ldr	r3, [pc, #444]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a34:	4a6e      	ldr	r2, [pc, #440]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a3c:	e02d      	b.n	8004a9a <HAL_RCC_OscConfig+0x376>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10c      	bne.n	8004a60 <HAL_RCC_OscConfig+0x33c>
 8004a46:	4b6a      	ldr	r3, [pc, #424]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4a:	4a69      	ldr	r2, [pc, #420]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004a4c:	f023 0301 	bic.w	r3, r3, #1
 8004a50:	6713      	str	r3, [r2, #112]	; 0x70
 8004a52:	4b67      	ldr	r3, [pc, #412]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a56:	4a66      	ldr	r2, [pc, #408]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004a58:	f023 0304 	bic.w	r3, r3, #4
 8004a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a5e:	e01c      	b.n	8004a9a <HAL_RCC_OscConfig+0x376>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	2b05      	cmp	r3, #5
 8004a66:	d10c      	bne.n	8004a82 <HAL_RCC_OscConfig+0x35e>
 8004a68:	4b61      	ldr	r3, [pc, #388]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6c:	4a60      	ldr	r2, [pc, #384]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004a6e:	f043 0304 	orr.w	r3, r3, #4
 8004a72:	6713      	str	r3, [r2, #112]	; 0x70
 8004a74:	4b5e      	ldr	r3, [pc, #376]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a78:	4a5d      	ldr	r2, [pc, #372]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004a7a:	f043 0301 	orr.w	r3, r3, #1
 8004a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a80:	e00b      	b.n	8004a9a <HAL_RCC_OscConfig+0x376>
 8004a82:	4b5b      	ldr	r3, [pc, #364]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a86:	4a5a      	ldr	r2, [pc, #360]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004a88:	f023 0301 	bic.w	r3, r3, #1
 8004a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a8e:	4b58      	ldr	r3, [pc, #352]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a92:	4a57      	ldr	r2, [pc, #348]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004a94:	f023 0304 	bic.w	r3, r3, #4
 8004a98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d015      	beq.n	8004ace <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa2:	f7fe f837 	bl	8002b14 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa8:	e00a      	b.n	8004ac0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aaa:	f7fe f833 	bl	8002b14 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e0ce      	b.n	8004c5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac0:	4b4b      	ldr	r3, [pc, #300]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0ee      	beq.n	8004aaa <HAL_RCC_OscConfig+0x386>
 8004acc:	e014      	b.n	8004af8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ace:	f7fe f821 	bl	8002b14 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ad4:	e00a      	b.n	8004aec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad6:	f7fe f81d 	bl	8002b14 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e0b8      	b.n	8004c5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aec:	4b40      	ldr	r3, [pc, #256]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1ee      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004af8:	7dfb      	ldrb	r3, [r7, #23]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d105      	bne.n	8004b0a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004afe:	4b3c      	ldr	r3, [pc, #240]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	4a3b      	ldr	r2, [pc, #236]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 80a4 	beq.w	8004c5c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b14:	4b36      	ldr	r3, [pc, #216]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 030c 	and.w	r3, r3, #12
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d06b      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d149      	bne.n	8004bbc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b28:	4b31      	ldr	r3, [pc, #196]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a30      	ldr	r2, [pc, #192]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b34:	f7fd ffee 	bl	8002b14 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b3c:	f7fd ffea 	bl	8002b14 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e087      	b.n	8004c5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b4e:	4b28      	ldr	r3, [pc, #160]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1f0      	bne.n	8004b3c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69da      	ldr	r2, [r3, #28]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	019b      	lsls	r3, r3, #6
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	085b      	lsrs	r3, r3, #1
 8004b72:	3b01      	subs	r3, #1
 8004b74:	041b      	lsls	r3, r3, #16
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	061b      	lsls	r3, r3, #24
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	4a1b      	ldr	r2, [pc, #108]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b86:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b88:	4b19      	ldr	r3, [pc, #100]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a18      	ldr	r2, [pc, #96]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b94:	f7fd ffbe 	bl	8002b14 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b9c:	f7fd ffba 	bl	8002b14 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e057      	b.n	8004c5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bae:	4b10      	ldr	r3, [pc, #64]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0f0      	beq.n	8004b9c <HAL_RCC_OscConfig+0x478>
 8004bba:	e04f      	b.n	8004c5c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a0b      	ldr	r2, [pc, #44]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc8:	f7fd ffa4 	bl	8002b14 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd0:	f7fd ffa0 	bl	8002b14 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e03d      	b.n	8004c5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be2:	4b03      	ldr	r3, [pc, #12]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f0      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x4ac>
 8004bee:	e035      	b.n	8004c5c <HAL_RCC_OscConfig+0x538>
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004bf8:	4b1b      	ldr	r3, [pc, #108]	; (8004c68 <HAL_RCC_OscConfig+0x544>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d028      	beq.n	8004c58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d121      	bne.n	8004c58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d11a      	bne.n	8004c58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c28:	4013      	ands	r3, r2
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d111      	bne.n	8004c58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3e:	085b      	lsrs	r3, r3, #1
 8004c40:	3b01      	subs	r3, #1
 8004c42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d107      	bne.n	8004c58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d001      	beq.n	8004c5c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e000      	b.n	8004c5e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40023800 	.word	0x40023800

08004c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0d0      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c84:	4b6a      	ldr	r3, [pc, #424]	; (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 030f 	and.w	r3, r3, #15
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d910      	bls.n	8004cb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c92:	4b67      	ldr	r3, [pc, #412]	; (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f023 020f 	bic.w	r2, r3, #15
 8004c9a:	4965      	ldr	r1, [pc, #404]	; (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca2:	4b63      	ldr	r3, [pc, #396]	; (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 030f 	and.w	r3, r3, #15
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d001      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0b8      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d020      	beq.n	8004d02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d005      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ccc:	4b59      	ldr	r3, [pc, #356]	; (8004e34 <HAL_RCC_ClockConfig+0x1c8>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	4a58      	ldr	r2, [pc, #352]	; (8004e34 <HAL_RCC_ClockConfig+0x1c8>)
 8004cd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ce4:	4b53      	ldr	r3, [pc, #332]	; (8004e34 <HAL_RCC_ClockConfig+0x1c8>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	4a52      	ldr	r2, [pc, #328]	; (8004e34 <HAL_RCC_ClockConfig+0x1c8>)
 8004cea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cf0:	4b50      	ldr	r3, [pc, #320]	; (8004e34 <HAL_RCC_ClockConfig+0x1c8>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	494d      	ldr	r1, [pc, #308]	; (8004e34 <HAL_RCC_ClockConfig+0x1c8>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d040      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d107      	bne.n	8004d26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d16:	4b47      	ldr	r3, [pc, #284]	; (8004e34 <HAL_RCC_ClockConfig+0x1c8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d115      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e07f      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d107      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d2e:	4b41      	ldr	r3, [pc, #260]	; (8004e34 <HAL_RCC_ClockConfig+0x1c8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d109      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e073      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3e:	4b3d      	ldr	r3, [pc, #244]	; (8004e34 <HAL_RCC_ClockConfig+0x1c8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e06b      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d4e:	4b39      	ldr	r3, [pc, #228]	; (8004e34 <HAL_RCC_ClockConfig+0x1c8>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f023 0203 	bic.w	r2, r3, #3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	4936      	ldr	r1, [pc, #216]	; (8004e34 <HAL_RCC_ClockConfig+0x1c8>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d60:	f7fd fed8 	bl	8002b14 <HAL_GetTick>
 8004d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d66:	e00a      	b.n	8004d7e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d68:	f7fd fed4 	bl	8002b14 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e053      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7e:	4b2d      	ldr	r3, [pc, #180]	; (8004e34 <HAL_RCC_ClockConfig+0x1c8>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 020c 	and.w	r2, r3, #12
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d1eb      	bne.n	8004d68 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d90:	4b27      	ldr	r3, [pc, #156]	; (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d210      	bcs.n	8004dc0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9e:	4b24      	ldr	r3, [pc, #144]	; (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f023 020f 	bic.w	r2, r3, #15
 8004da6:	4922      	ldr	r1, [pc, #136]	; (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dae:	4b20      	ldr	r3, [pc, #128]	; (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 030f 	and.w	r3, r3, #15
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d001      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e032      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0304 	and.w	r3, r3, #4
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dcc:	4b19      	ldr	r3, [pc, #100]	; (8004e34 <HAL_RCC_ClockConfig+0x1c8>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	4916      	ldr	r1, [pc, #88]	; (8004e34 <HAL_RCC_ClockConfig+0x1c8>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d009      	beq.n	8004dfe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004dea:	4b12      	ldr	r3, [pc, #72]	; (8004e34 <HAL_RCC_ClockConfig+0x1c8>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	490e      	ldr	r1, [pc, #56]	; (8004e34 <HAL_RCC_ClockConfig+0x1c8>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dfe:	f000 f821 	bl	8004e44 <HAL_RCC_GetSysClockFreq>
 8004e02:	4602      	mov	r2, r0
 8004e04:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <HAL_RCC_ClockConfig+0x1c8>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	091b      	lsrs	r3, r3, #4
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	490a      	ldr	r1, [pc, #40]	; (8004e38 <HAL_RCC_ClockConfig+0x1cc>)
 8004e10:	5ccb      	ldrb	r3, [r1, r3]
 8004e12:	fa22 f303 	lsr.w	r3, r2, r3
 8004e16:	4a09      	ldr	r2, [pc, #36]	; (8004e3c <HAL_RCC_ClockConfig+0x1d0>)
 8004e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e1a:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <HAL_RCC_ClockConfig+0x1d4>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fd fe34 	bl	8002a8c <HAL_InitTick>

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40023c00 	.word	0x40023c00
 8004e34:	40023800 	.word	0x40023800
 8004e38:	0800cc3c 	.word	0x0800cc3c
 8004e3c:	20000010 	.word	0x20000010
 8004e40:	20000014 	.word	0x20000014

08004e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e48:	b094      	sub	sp, #80	; 0x50
 8004e4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8004e50:	2300      	movs	r3, #0
 8004e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e54:	2300      	movs	r3, #0
 8004e56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e5c:	4b79      	ldr	r3, [pc, #484]	; (8005044 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 030c 	and.w	r3, r3, #12
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d00d      	beq.n	8004e84 <HAL_RCC_GetSysClockFreq+0x40>
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	f200 80e1 	bhi.w	8005030 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <HAL_RCC_GetSysClockFreq+0x34>
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d003      	beq.n	8004e7e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e76:	e0db      	b.n	8005030 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e78:	4b73      	ldr	r3, [pc, #460]	; (8005048 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e7c:	e0db      	b.n	8005036 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e7e:	4b73      	ldr	r3, [pc, #460]	; (800504c <HAL_RCC_GetSysClockFreq+0x208>)
 8004e80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e82:	e0d8      	b.n	8005036 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e84:	4b6f      	ldr	r3, [pc, #444]	; (8005044 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e8c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004e8e:	4b6d      	ldr	r3, [pc, #436]	; (8005044 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d063      	beq.n	8004f62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e9a:	4b6a      	ldr	r3, [pc, #424]	; (8005044 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	099b      	lsrs	r3, r3, #6
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ea4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eac:	633b      	str	r3, [r7, #48]	; 0x30
 8004eae:	2300      	movs	r3, #0
 8004eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8004eb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004eb6:	4622      	mov	r2, r4
 8004eb8:	462b      	mov	r3, r5
 8004eba:	f04f 0000 	mov.w	r0, #0
 8004ebe:	f04f 0100 	mov.w	r1, #0
 8004ec2:	0159      	lsls	r1, r3, #5
 8004ec4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ec8:	0150      	lsls	r0, r2, #5
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4621      	mov	r1, r4
 8004ed0:	1a51      	subs	r1, r2, r1
 8004ed2:	6139      	str	r1, [r7, #16]
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	eb63 0301 	sbc.w	r3, r3, r1
 8004eda:	617b      	str	r3, [r7, #20]
 8004edc:	f04f 0200 	mov.w	r2, #0
 8004ee0:	f04f 0300 	mov.w	r3, #0
 8004ee4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ee8:	4659      	mov	r1, fp
 8004eea:	018b      	lsls	r3, r1, #6
 8004eec:	4651      	mov	r1, sl
 8004eee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ef2:	4651      	mov	r1, sl
 8004ef4:	018a      	lsls	r2, r1, #6
 8004ef6:	4651      	mov	r1, sl
 8004ef8:	ebb2 0801 	subs.w	r8, r2, r1
 8004efc:	4659      	mov	r1, fp
 8004efe:	eb63 0901 	sbc.w	r9, r3, r1
 8004f02:	f04f 0200 	mov.w	r2, #0
 8004f06:	f04f 0300 	mov.w	r3, #0
 8004f0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f16:	4690      	mov	r8, r2
 8004f18:	4699      	mov	r9, r3
 8004f1a:	4623      	mov	r3, r4
 8004f1c:	eb18 0303 	adds.w	r3, r8, r3
 8004f20:	60bb      	str	r3, [r7, #8]
 8004f22:	462b      	mov	r3, r5
 8004f24:	eb49 0303 	adc.w	r3, r9, r3
 8004f28:	60fb      	str	r3, [r7, #12]
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f36:	4629      	mov	r1, r5
 8004f38:	024b      	lsls	r3, r1, #9
 8004f3a:	4621      	mov	r1, r4
 8004f3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f40:	4621      	mov	r1, r4
 8004f42:	024a      	lsls	r2, r1, #9
 8004f44:	4610      	mov	r0, r2
 8004f46:	4619      	mov	r1, r3
 8004f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f54:	f7fb ff08 	bl	8000d68 <__aeabi_uldivmod>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f60:	e058      	b.n	8005014 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f62:	4b38      	ldr	r3, [pc, #224]	; (8005044 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	099b      	lsrs	r3, r3, #6
 8004f68:	2200      	movs	r2, #0
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f72:	623b      	str	r3, [r7, #32]
 8004f74:	2300      	movs	r3, #0
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
 8004f78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f7c:	4642      	mov	r2, r8
 8004f7e:	464b      	mov	r3, r9
 8004f80:	f04f 0000 	mov.w	r0, #0
 8004f84:	f04f 0100 	mov.w	r1, #0
 8004f88:	0159      	lsls	r1, r3, #5
 8004f8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f8e:	0150      	lsls	r0, r2, #5
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
 8004f94:	4641      	mov	r1, r8
 8004f96:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f9a:	4649      	mov	r1, r9
 8004f9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fa0:	f04f 0200 	mov.w	r2, #0
 8004fa4:	f04f 0300 	mov.w	r3, #0
 8004fa8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fb4:	ebb2 040a 	subs.w	r4, r2, sl
 8004fb8:	eb63 050b 	sbc.w	r5, r3, fp
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	00eb      	lsls	r3, r5, #3
 8004fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fca:	00e2      	lsls	r2, r4, #3
 8004fcc:	4614      	mov	r4, r2
 8004fce:	461d      	mov	r5, r3
 8004fd0:	4643      	mov	r3, r8
 8004fd2:	18e3      	adds	r3, r4, r3
 8004fd4:	603b      	str	r3, [r7, #0]
 8004fd6:	464b      	mov	r3, r9
 8004fd8:	eb45 0303 	adc.w	r3, r5, r3
 8004fdc:	607b      	str	r3, [r7, #4]
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fea:	4629      	mov	r1, r5
 8004fec:	028b      	lsls	r3, r1, #10
 8004fee:	4621      	mov	r1, r4
 8004ff0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ff4:	4621      	mov	r1, r4
 8004ff6:	028a      	lsls	r2, r1, #10
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ffe:	2200      	movs	r2, #0
 8005000:	61bb      	str	r3, [r7, #24]
 8005002:	61fa      	str	r2, [r7, #28]
 8005004:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005008:	f7fb feae 	bl	8000d68 <__aeabi_uldivmod>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4613      	mov	r3, r2
 8005012:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005014:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <HAL_RCC_GetSysClockFreq+0x200>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	0c1b      	lsrs	r3, r3, #16
 800501a:	f003 0303 	and.w	r3, r3, #3
 800501e:	3301      	adds	r3, #1
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005024:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005028:	fbb2 f3f3 	udiv	r3, r2, r3
 800502c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800502e:	e002      	b.n	8005036 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005030:	4b05      	ldr	r3, [pc, #20]	; (8005048 <HAL_RCC_GetSysClockFreq+0x204>)
 8005032:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005034:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005038:	4618      	mov	r0, r3
 800503a:	3750      	adds	r7, #80	; 0x50
 800503c:	46bd      	mov	sp, r7
 800503e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005042:	bf00      	nop
 8005044:	40023800 	.word	0x40023800
 8005048:	00f42400 	.word	0x00f42400
 800504c:	007a1200 	.word	0x007a1200

08005050 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005054:	4b03      	ldr	r3, [pc, #12]	; (8005064 <HAL_RCC_GetHCLKFreq+0x14>)
 8005056:	681b      	ldr	r3, [r3, #0]
}
 8005058:	4618      	mov	r0, r3
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	20000010 	.word	0x20000010

08005068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800506c:	f7ff fff0 	bl	8005050 <HAL_RCC_GetHCLKFreq>
 8005070:	4602      	mov	r2, r0
 8005072:	4b05      	ldr	r3, [pc, #20]	; (8005088 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	0a9b      	lsrs	r3, r3, #10
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	4903      	ldr	r1, [pc, #12]	; (800508c <HAL_RCC_GetPCLK1Freq+0x24>)
 800507e:	5ccb      	ldrb	r3, [r1, r3]
 8005080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005084:	4618      	mov	r0, r3
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40023800 	.word	0x40023800
 800508c:	0800cc4c 	.word	0x0800cc4c

08005090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005094:	f7ff ffdc 	bl	8005050 <HAL_RCC_GetHCLKFreq>
 8005098:	4602      	mov	r2, r0
 800509a:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	0b5b      	lsrs	r3, r3, #13
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	4903      	ldr	r1, [pc, #12]	; (80050b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050a6:	5ccb      	ldrb	r3, [r1, r3]
 80050a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	40023800 	.word	0x40023800
 80050b4:	0800cc4c 	.word	0x0800cc4c

080050b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80050c0:	2300      	movs	r3, #0
 80050c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80050c4:	2300      	movs	r3, #0
 80050c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80050cc:	2300      	movs	r3, #0
 80050ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80050d0:	2300      	movs	r3, #0
 80050d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d012      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050e0:	4b69      	ldr	r3, [pc, #420]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	4a68      	ldr	r2, [pc, #416]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80050ea:	6093      	str	r3, [r2, #8]
 80050ec:	4b66      	ldr	r3, [pc, #408]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f4:	4964      	ldr	r1, [pc, #400]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005102:	2301      	movs	r3, #1
 8005104:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d017      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005112:	4b5d      	ldr	r3, [pc, #372]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005118:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005120:	4959      	ldr	r1, [pc, #356]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005122:	4313      	orrs	r3, r2
 8005124:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005130:	d101      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005132:	2301      	movs	r3, #1
 8005134:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800513e:	2301      	movs	r3, #1
 8005140:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d017      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800514e:	4b4e      	ldr	r3, [pc, #312]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005154:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	494a      	ldr	r1, [pc, #296]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005168:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800516c:	d101      	bne.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800516e:	2301      	movs	r3, #1
 8005170:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800517a:	2301      	movs	r3, #1
 800517c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800518a:	2301      	movs	r3, #1
 800518c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0320 	and.w	r3, r3, #32
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 808b 	beq.w	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800519c:	4b3a      	ldr	r3, [pc, #232]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	4a39      	ldr	r2, [pc, #228]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a6:	6413      	str	r3, [r2, #64]	; 0x40
 80051a8:	4b37      	ldr	r3, [pc, #220]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b0:	60bb      	str	r3, [r7, #8]
 80051b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051b4:	4b35      	ldr	r3, [pc, #212]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a34      	ldr	r2, [pc, #208]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051c0:	f7fd fca8 	bl	8002b14 <HAL_GetTick>
 80051c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051c6:	e008      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051c8:	f7fd fca4 	bl	8002b14 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b64      	cmp	r3, #100	; 0x64
 80051d4:	d901      	bls.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e357      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051da:	4b2c      	ldr	r3, [pc, #176]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0f0      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051e6:	4b28      	ldr	r3, [pc, #160]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d035      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	429a      	cmp	r2, r3
 8005202:	d02e      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005204:	4b20      	ldr	r3, [pc, #128]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800520c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800520e:	4b1e      	ldr	r3, [pc, #120]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005212:	4a1d      	ldr	r2, [pc, #116]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005218:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800521a:	4b1b      	ldr	r3, [pc, #108]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800521c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521e:	4a1a      	ldr	r2, [pc, #104]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005224:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005226:	4a18      	ldr	r2, [pc, #96]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800522c:	4b16      	ldr	r3, [pc, #88]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800522e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b01      	cmp	r3, #1
 8005236:	d114      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005238:	f7fd fc6c 	bl	8002b14 <HAL_GetTick>
 800523c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800523e:	e00a      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005240:	f7fd fc68 	bl	8002b14 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	f241 3288 	movw	r2, #5000	; 0x1388
 800524e:	4293      	cmp	r3, r2
 8005250:	d901      	bls.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e319      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005256:	4b0c      	ldr	r3, [pc, #48]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0ee      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800526e:	d111      	bne.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005270:	4b05      	ldr	r3, [pc, #20]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800527c:	4b04      	ldr	r3, [pc, #16]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800527e:	400b      	ands	r3, r1
 8005280:	4901      	ldr	r1, [pc, #4]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005282:	4313      	orrs	r3, r2
 8005284:	608b      	str	r3, [r1, #8]
 8005286:	e00b      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005288:	40023800 	.word	0x40023800
 800528c:	40007000 	.word	0x40007000
 8005290:	0ffffcff 	.word	0x0ffffcff
 8005294:	4baa      	ldr	r3, [pc, #680]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	4aa9      	ldr	r2, [pc, #676]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800529a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800529e:	6093      	str	r3, [r2, #8]
 80052a0:	4ba7      	ldr	r3, [pc, #668]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ac:	49a4      	ldr	r1, [pc, #656]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0310 	and.w	r3, r3, #16
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d010      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052be:	4ba0      	ldr	r3, [pc, #640]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052c4:	4a9e      	ldr	r2, [pc, #632]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80052ce:	4b9c      	ldr	r3, [pc, #624]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d8:	4999      	ldr	r1, [pc, #612]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00a      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052ec:	4b94      	ldr	r3, [pc, #592]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052fa:	4991      	ldr	r1, [pc, #580]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00a      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800530e:	4b8c      	ldr	r3, [pc, #560]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005314:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800531c:	4988      	ldr	r1, [pc, #544]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800531e:	4313      	orrs	r3, r2
 8005320:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00a      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005330:	4b83      	ldr	r3, [pc, #524]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005336:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800533e:	4980      	ldr	r1, [pc, #512]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005340:	4313      	orrs	r3, r2
 8005342:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005352:	4b7b      	ldr	r3, [pc, #492]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005358:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005360:	4977      	ldr	r1, [pc, #476]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005362:	4313      	orrs	r3, r2
 8005364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00a      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005374:	4b72      	ldr	r3, [pc, #456]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800537a:	f023 0203 	bic.w	r2, r3, #3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005382:	496f      	ldr	r1, [pc, #444]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005384:	4313      	orrs	r3, r2
 8005386:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005396:	4b6a      	ldr	r3, [pc, #424]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800539c:	f023 020c 	bic.w	r2, r3, #12
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053a4:	4966      	ldr	r1, [pc, #408]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00a      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053b8:	4b61      	ldr	r3, [pc, #388]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053c6:	495e      	ldr	r1, [pc, #376]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053da:	4b59      	ldr	r3, [pc, #356]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e8:	4955      	ldr	r1, [pc, #340]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00a      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053fc:	4b50      	ldr	r3, [pc, #320]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005402:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540a:	494d      	ldr	r1, [pc, #308]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800541e:	4b48      	ldr	r3, [pc, #288]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005424:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542c:	4944      	ldr	r1, [pc, #272]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005440:	4b3f      	ldr	r3, [pc, #252]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005446:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800544e:	493c      	ldr	r1, [pc, #240]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005462:	4b37      	ldr	r3, [pc, #220]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005468:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005470:	4933      	ldr	r1, [pc, #204]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005484:	4b2e      	ldr	r3, [pc, #184]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800548a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005492:	492b      	ldr	r1, [pc, #172]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d011      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80054a6:	4b26      	ldr	r3, [pc, #152]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054b4:	4922      	ldr	r1, [pc, #136]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054c4:	d101      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80054c6:	2301      	movs	r3, #1
 80054c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0308 	and.w	r3, r3, #8
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80054d6:	2301      	movs	r3, #1
 80054d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054e6:	4b16      	ldr	r3, [pc, #88]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054f4:	4912      	ldr	r1, [pc, #72]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00b      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005508:	4b0d      	ldr	r3, [pc, #52]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800550a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005518:	4909      	ldr	r1, [pc, #36]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800551a:	4313      	orrs	r3, r2
 800551c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d006      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 80d9 	beq.w	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005534:	4b02      	ldr	r3, [pc, #8]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a01      	ldr	r2, [pc, #4]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800553a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800553e:	e001      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005540:	40023800 	.word	0x40023800
 8005544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005546:	f7fd fae5 	bl	8002b14 <HAL_GetTick>
 800554a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800554c:	e008      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800554e:	f7fd fae1 	bl	8002b14 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b64      	cmp	r3, #100	; 0x64
 800555a:	d901      	bls.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e194      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005560:	4b6c      	ldr	r3, [pc, #432]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1f0      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d021      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557c:	2b00      	cmp	r3, #0
 800557e:	d11d      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005580:	4b64      	ldr	r3, [pc, #400]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005586:	0c1b      	lsrs	r3, r3, #16
 8005588:	f003 0303 	and.w	r3, r3, #3
 800558c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800558e:	4b61      	ldr	r3, [pc, #388]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005594:	0e1b      	lsrs	r3, r3, #24
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	019a      	lsls	r2, r3, #6
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	041b      	lsls	r3, r3, #16
 80055a6:	431a      	orrs	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	061b      	lsls	r3, r3, #24
 80055ac:	431a      	orrs	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	071b      	lsls	r3, r3, #28
 80055b4:	4957      	ldr	r1, [pc, #348]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d004      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055d0:	d00a      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d02e      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055e6:	d129      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80055e8:	4b4a      	ldr	r3, [pc, #296]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ee:	0c1b      	lsrs	r3, r3, #16
 80055f0:	f003 0303 	and.w	r3, r3, #3
 80055f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80055f6:	4b47      	ldr	r3, [pc, #284]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055fc:	0f1b      	lsrs	r3, r3, #28
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	019a      	lsls	r2, r3, #6
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	041b      	lsls	r3, r3, #16
 800560e:	431a      	orrs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	061b      	lsls	r3, r3, #24
 8005616:	431a      	orrs	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	071b      	lsls	r3, r3, #28
 800561c:	493d      	ldr	r1, [pc, #244]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800561e:	4313      	orrs	r3, r2
 8005620:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005624:	4b3b      	ldr	r3, [pc, #236]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800562a:	f023 021f 	bic.w	r2, r3, #31
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005632:	3b01      	subs	r3, #1
 8005634:	4937      	ldr	r1, [pc, #220]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005636:	4313      	orrs	r3, r2
 8005638:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d01d      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005648:	4b32      	ldr	r3, [pc, #200]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800564a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800564e:	0e1b      	lsrs	r3, r3, #24
 8005650:	f003 030f 	and.w	r3, r3, #15
 8005654:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005656:	4b2f      	ldr	r3, [pc, #188]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800565c:	0f1b      	lsrs	r3, r3, #28
 800565e:	f003 0307 	and.w	r3, r3, #7
 8005662:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	019a      	lsls	r2, r3, #6
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	041b      	lsls	r3, r3, #16
 8005670:	431a      	orrs	r2, r3
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	061b      	lsls	r3, r3, #24
 8005676:	431a      	orrs	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	071b      	lsls	r3, r3, #28
 800567c:	4925      	ldr	r1, [pc, #148]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800567e:	4313      	orrs	r3, r2
 8005680:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d011      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	019a      	lsls	r2, r3, #6
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	041b      	lsls	r3, r3, #16
 800569c:	431a      	orrs	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	061b      	lsls	r3, r3, #24
 80056a4:	431a      	orrs	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	071b      	lsls	r3, r3, #28
 80056ac:	4919      	ldr	r1, [pc, #100]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80056b4:	4b17      	ldr	r3, [pc, #92]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a16      	ldr	r2, [pc, #88]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056c0:	f7fd fa28 	bl	8002b14 <HAL_GetTick>
 80056c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056c6:	e008      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056c8:	f7fd fa24 	bl	8002b14 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b64      	cmp	r3, #100	; 0x64
 80056d4:	d901      	bls.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e0d7      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056da:	4b0e      	ldr	r3, [pc, #56]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0f0      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	f040 80cd 	bne.w	8005888 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80056ee:	4b09      	ldr	r3, [pc, #36]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a08      	ldr	r2, [pc, #32]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056fa:	f7fd fa0b 	bl	8002b14 <HAL_GetTick>
 80056fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005700:	e00a      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005702:	f7fd fa07 	bl	8002b14 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b64      	cmp	r3, #100	; 0x64
 800570e:	d903      	bls.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e0ba      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005714:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005718:	4b5e      	ldr	r3, [pc, #376]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005724:	d0ed      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005736:	2b00      	cmp	r3, #0
 8005738:	d009      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005742:	2b00      	cmp	r3, #0
 8005744:	d02e      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	2b00      	cmp	r3, #0
 800574c:	d12a      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800574e:	4b51      	ldr	r3, [pc, #324]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005754:	0c1b      	lsrs	r3, r3, #16
 8005756:	f003 0303 	and.w	r3, r3, #3
 800575a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800575c:	4b4d      	ldr	r3, [pc, #308]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800575e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005762:	0f1b      	lsrs	r3, r3, #28
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	019a      	lsls	r2, r3, #6
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	041b      	lsls	r3, r3, #16
 8005774:	431a      	orrs	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	061b      	lsls	r3, r3, #24
 800577c:	431a      	orrs	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	071b      	lsls	r3, r3, #28
 8005782:	4944      	ldr	r1, [pc, #272]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005784:	4313      	orrs	r3, r2
 8005786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800578a:	4b42      	ldr	r3, [pc, #264]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800578c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005790:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005798:	3b01      	subs	r3, #1
 800579a:	021b      	lsls	r3, r3, #8
 800579c:	493d      	ldr	r1, [pc, #244]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d022      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057b8:	d11d      	bne.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80057ba:	4b36      	ldr	r3, [pc, #216]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c0:	0e1b      	lsrs	r3, r3, #24
 80057c2:	f003 030f 	and.w	r3, r3, #15
 80057c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057c8:	4b32      	ldr	r3, [pc, #200]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ce:	0f1b      	lsrs	r3, r3, #28
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	019a      	lsls	r2, r3, #6
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	041b      	lsls	r3, r3, #16
 80057e2:	431a      	orrs	r2, r3
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	061b      	lsls	r3, r3, #24
 80057e8:	431a      	orrs	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	071b      	lsls	r3, r3, #28
 80057ee:	4929      	ldr	r1, [pc, #164]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0308 	and.w	r3, r3, #8
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d028      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005802:	4b24      	ldr	r3, [pc, #144]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005808:	0e1b      	lsrs	r3, r3, #24
 800580a:	f003 030f 	and.w	r3, r3, #15
 800580e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005810:	4b20      	ldr	r3, [pc, #128]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005816:	0c1b      	lsrs	r3, r3, #16
 8005818:	f003 0303 	and.w	r3, r3, #3
 800581c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	019a      	lsls	r2, r3, #6
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	041b      	lsls	r3, r3, #16
 8005828:	431a      	orrs	r2, r3
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	061b      	lsls	r3, r3, #24
 800582e:	431a      	orrs	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	071b      	lsls	r3, r3, #28
 8005836:	4917      	ldr	r1, [pc, #92]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005838:	4313      	orrs	r3, r2
 800583a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800583e:	4b15      	ldr	r3, [pc, #84]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005844:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	4911      	ldr	r1, [pc, #68]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800584e:	4313      	orrs	r3, r2
 8005850:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005854:	4b0f      	ldr	r3, [pc, #60]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a0e      	ldr	r2, [pc, #56]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800585a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800585e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005860:	f7fd f958 	bl	8002b14 <HAL_GetTick>
 8005864:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005866:	e008      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005868:	f7fd f954 	bl	8002b14 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b64      	cmp	r3, #100	; 0x64
 8005874:	d901      	bls.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e007      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800587a:	4b06      	ldr	r3, [pc, #24]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005882:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005886:	d1ef      	bne.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3720      	adds	r7, #32
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	40023800 	.word	0x40023800

08005898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e049      	b.n	800593e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d106      	bne.n	80058c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7fc fe16 	bl	80024f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3304      	adds	r3, #4
 80058d4:	4619      	mov	r1, r3
 80058d6:	4610      	mov	r0, r2
 80058d8:	f000 fd26 	bl	8006328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
	...

08005948 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b01      	cmp	r3, #1
 800595a:	d001      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e054      	b.n	8005a0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0201 	orr.w	r2, r2, #1
 8005976:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a26      	ldr	r2, [pc, #152]	; (8005a18 <HAL_TIM_Base_Start_IT+0xd0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d022      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0x80>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800598a:	d01d      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0x80>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a22      	ldr	r2, [pc, #136]	; (8005a1c <HAL_TIM_Base_Start_IT+0xd4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d018      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0x80>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a21      	ldr	r2, [pc, #132]	; (8005a20 <HAL_TIM_Base_Start_IT+0xd8>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d013      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0x80>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a1f      	ldr	r2, [pc, #124]	; (8005a24 <HAL_TIM_Base_Start_IT+0xdc>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00e      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0x80>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a1e      	ldr	r2, [pc, #120]	; (8005a28 <HAL_TIM_Base_Start_IT+0xe0>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d009      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0x80>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a1c      	ldr	r2, [pc, #112]	; (8005a2c <HAL_TIM_Base_Start_IT+0xe4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d004      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0x80>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a1b      	ldr	r2, [pc, #108]	; (8005a30 <HAL_TIM_Base_Start_IT+0xe8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d115      	bne.n	80059f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	4b19      	ldr	r3, [pc, #100]	; (8005a34 <HAL_TIM_Base_Start_IT+0xec>)
 80059d0:	4013      	ands	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b06      	cmp	r3, #6
 80059d8:	d015      	beq.n	8005a06 <HAL_TIM_Base_Start_IT+0xbe>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059e0:	d011      	beq.n	8005a06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0201 	orr.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f2:	e008      	b.n	8005a06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0201 	orr.w	r2, r2, #1
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	e000      	b.n	8005a08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	40010000 	.word	0x40010000
 8005a1c:	40000400 	.word	0x40000400
 8005a20:	40000800 	.word	0x40000800
 8005a24:	40000c00 	.word	0x40000c00
 8005a28:	40010400 	.word	0x40010400
 8005a2c:	40014000 	.word	0x40014000
 8005a30:	40001800 	.word	0x40001800
 8005a34:	00010007 	.word	0x00010007

08005a38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e049      	b.n	8005ade <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d106      	bne.n	8005a64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7fc fd6a 	bl	8002538 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3304      	adds	r3, #4
 8005a74:	4619      	mov	r1, r3
 8005a76:	4610      	mov	r0, r2
 8005a78:	f000 fc56 	bl	8006328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d109      	bne.n	8005b0c <HAL_TIM_PWM_Start+0x24>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	bf14      	ite	ne
 8005b04:	2301      	movne	r3, #1
 8005b06:	2300      	moveq	r3, #0
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	e03c      	b.n	8005b86 <HAL_TIM_PWM_Start+0x9e>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d109      	bne.n	8005b26 <HAL_TIM_PWM_Start+0x3e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	bf14      	ite	ne
 8005b1e:	2301      	movne	r3, #1
 8005b20:	2300      	moveq	r3, #0
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	e02f      	b.n	8005b86 <HAL_TIM_PWM_Start+0x9e>
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	d109      	bne.n	8005b40 <HAL_TIM_PWM_Start+0x58>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	bf14      	ite	ne
 8005b38:	2301      	movne	r3, #1
 8005b3a:	2300      	moveq	r3, #0
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	e022      	b.n	8005b86 <HAL_TIM_PWM_Start+0x9e>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2b0c      	cmp	r3, #12
 8005b44:	d109      	bne.n	8005b5a <HAL_TIM_PWM_Start+0x72>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	bf14      	ite	ne
 8005b52:	2301      	movne	r3, #1
 8005b54:	2300      	moveq	r3, #0
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	e015      	b.n	8005b86 <HAL_TIM_PWM_Start+0x9e>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	d109      	bne.n	8005b74 <HAL_TIM_PWM_Start+0x8c>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	bf14      	ite	ne
 8005b6c:	2301      	movne	r3, #1
 8005b6e:	2300      	moveq	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	e008      	b.n	8005b86 <HAL_TIM_PWM_Start+0x9e>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	bf14      	ite	ne
 8005b80:	2301      	movne	r3, #1
 8005b82:	2300      	moveq	r3, #0
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e092      	b.n	8005cb4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d104      	bne.n	8005b9e <HAL_TIM_PWM_Start+0xb6>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b9c:	e023      	b.n	8005be6 <HAL_TIM_PWM_Start+0xfe>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	d104      	bne.n	8005bae <HAL_TIM_PWM_Start+0xc6>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bac:	e01b      	b.n	8005be6 <HAL_TIM_PWM_Start+0xfe>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d104      	bne.n	8005bbe <HAL_TIM_PWM_Start+0xd6>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bbc:	e013      	b.n	8005be6 <HAL_TIM_PWM_Start+0xfe>
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b0c      	cmp	r3, #12
 8005bc2:	d104      	bne.n	8005bce <HAL_TIM_PWM_Start+0xe6>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bcc:	e00b      	b.n	8005be6 <HAL_TIM_PWM_Start+0xfe>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b10      	cmp	r3, #16
 8005bd2:	d104      	bne.n	8005bde <HAL_TIM_PWM_Start+0xf6>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bdc:	e003      	b.n	8005be6 <HAL_TIM_PWM_Start+0xfe>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2202      	movs	r2, #2
 8005be2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2201      	movs	r2, #1
 8005bec:	6839      	ldr	r1, [r7, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 ff32 	bl	8006a58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a30      	ldr	r2, [pc, #192]	; (8005cbc <HAL_TIM_PWM_Start+0x1d4>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d004      	beq.n	8005c08 <HAL_TIM_PWM_Start+0x120>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a2f      	ldr	r2, [pc, #188]	; (8005cc0 <HAL_TIM_PWM_Start+0x1d8>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d101      	bne.n	8005c0c <HAL_TIM_PWM_Start+0x124>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e000      	b.n	8005c0e <HAL_TIM_PWM_Start+0x126>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d007      	beq.n	8005c22 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a25      	ldr	r2, [pc, #148]	; (8005cbc <HAL_TIM_PWM_Start+0x1d4>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d022      	beq.n	8005c72 <HAL_TIM_PWM_Start+0x18a>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c34:	d01d      	beq.n	8005c72 <HAL_TIM_PWM_Start+0x18a>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a22      	ldr	r2, [pc, #136]	; (8005cc4 <HAL_TIM_PWM_Start+0x1dc>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d018      	beq.n	8005c72 <HAL_TIM_PWM_Start+0x18a>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a20      	ldr	r2, [pc, #128]	; (8005cc8 <HAL_TIM_PWM_Start+0x1e0>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d013      	beq.n	8005c72 <HAL_TIM_PWM_Start+0x18a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a1f      	ldr	r2, [pc, #124]	; (8005ccc <HAL_TIM_PWM_Start+0x1e4>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d00e      	beq.n	8005c72 <HAL_TIM_PWM_Start+0x18a>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a19      	ldr	r2, [pc, #100]	; (8005cc0 <HAL_TIM_PWM_Start+0x1d8>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d009      	beq.n	8005c72 <HAL_TIM_PWM_Start+0x18a>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a1b      	ldr	r2, [pc, #108]	; (8005cd0 <HAL_TIM_PWM_Start+0x1e8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d004      	beq.n	8005c72 <HAL_TIM_PWM_Start+0x18a>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a19      	ldr	r2, [pc, #100]	; (8005cd4 <HAL_TIM_PWM_Start+0x1ec>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d115      	bne.n	8005c9e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	4b17      	ldr	r3, [pc, #92]	; (8005cd8 <HAL_TIM_PWM_Start+0x1f0>)
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2b06      	cmp	r3, #6
 8005c82:	d015      	beq.n	8005cb0 <HAL_TIM_PWM_Start+0x1c8>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c8a:	d011      	beq.n	8005cb0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f042 0201 	orr.w	r2, r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c9c:	e008      	b.n	8005cb0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f042 0201 	orr.w	r2, r2, #1
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	e000      	b.n	8005cb2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	40010000 	.word	0x40010000
 8005cc0:	40010400 	.word	0x40010400
 8005cc4:	40000400 	.word	0x40000400
 8005cc8:	40000800 	.word	0x40000800
 8005ccc:	40000c00 	.word	0x40000c00
 8005cd0:	40014000 	.word	0x40014000
 8005cd4:	40001800 	.word	0x40001800
 8005cd8:	00010007 	.word	0x00010007

08005cdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d122      	bne.n	8005d38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d11b      	bne.n	8005d38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f06f 0202 	mvn.w	r2, #2
 8005d08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	f003 0303 	and.w	r3, r3, #3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fae4 	bl	80062ec <HAL_TIM_IC_CaptureCallback>
 8005d24:	e005      	b.n	8005d32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fad6 	bl	80062d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fae7 	bl	8006300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	f003 0304 	and.w	r3, r3, #4
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d122      	bne.n	8005d8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f003 0304 	and.w	r3, r3, #4
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	d11b      	bne.n	8005d8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f06f 0204 	mvn.w	r2, #4
 8005d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2202      	movs	r2, #2
 8005d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 faba 	bl	80062ec <HAL_TIM_IC_CaptureCallback>
 8005d78:	e005      	b.n	8005d86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 faac 	bl	80062d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fabd 	bl	8006300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	f003 0308 	and.w	r3, r3, #8
 8005d96:	2b08      	cmp	r3, #8
 8005d98:	d122      	bne.n	8005de0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f003 0308 	and.w	r3, r3, #8
 8005da4:	2b08      	cmp	r3, #8
 8005da6:	d11b      	bne.n	8005de0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f06f 0208 	mvn.w	r2, #8
 8005db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2204      	movs	r2, #4
 8005db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	f003 0303 	and.w	r3, r3, #3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fa90 	bl	80062ec <HAL_TIM_IC_CaptureCallback>
 8005dcc:	e005      	b.n	8005dda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fa82 	bl	80062d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fa93 	bl	8006300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	f003 0310 	and.w	r3, r3, #16
 8005dea:	2b10      	cmp	r3, #16
 8005dec:	d122      	bne.n	8005e34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f003 0310 	and.w	r3, r3, #16
 8005df8:	2b10      	cmp	r3, #16
 8005dfa:	d11b      	bne.n	8005e34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f06f 0210 	mvn.w	r2, #16
 8005e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2208      	movs	r2, #8
 8005e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fa66 	bl	80062ec <HAL_TIM_IC_CaptureCallback>
 8005e20:	e005      	b.n	8005e2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fa58 	bl	80062d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 fa69 	bl	8006300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d10e      	bne.n	8005e60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d107      	bne.n	8005e60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f06f 0201 	mvn.w	r2, #1
 8005e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7fc f906 	bl	800206c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6a:	2b80      	cmp	r3, #128	; 0x80
 8005e6c:	d10e      	bne.n	8005e8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e78:	2b80      	cmp	r3, #128	; 0x80
 8005e7a:	d107      	bne.n	8005e8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fea4 	bl	8006bd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e9a:	d10e      	bne.n	8005eba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea6:	2b80      	cmp	r3, #128	; 0x80
 8005ea8:	d107      	bne.n	8005eba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fe97 	bl	8006be8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec4:	2b40      	cmp	r3, #64	; 0x40
 8005ec6:	d10e      	bne.n	8005ee6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed2:	2b40      	cmp	r3, #64	; 0x40
 8005ed4:	d107      	bne.n	8005ee6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fa17 	bl	8006314 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	f003 0320 	and.w	r3, r3, #32
 8005ef0:	2b20      	cmp	r3, #32
 8005ef2:	d10e      	bne.n	8005f12 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f003 0320 	and.w	r3, r3, #32
 8005efe:	2b20      	cmp	r3, #32
 8005f00:	d107      	bne.n	8005f12 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f06f 0220 	mvn.w	r2, #32
 8005f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fe57 	bl	8006bc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f12:	bf00      	nop
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
	...

08005f1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e0ff      	b.n	800613a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b14      	cmp	r3, #20
 8005f46:	f200 80f0 	bhi.w	800612a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f4a:	a201      	add	r2, pc, #4	; (adr r2, 8005f50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f50:	08005fa5 	.word	0x08005fa5
 8005f54:	0800612b 	.word	0x0800612b
 8005f58:	0800612b 	.word	0x0800612b
 8005f5c:	0800612b 	.word	0x0800612b
 8005f60:	08005fe5 	.word	0x08005fe5
 8005f64:	0800612b 	.word	0x0800612b
 8005f68:	0800612b 	.word	0x0800612b
 8005f6c:	0800612b 	.word	0x0800612b
 8005f70:	08006027 	.word	0x08006027
 8005f74:	0800612b 	.word	0x0800612b
 8005f78:	0800612b 	.word	0x0800612b
 8005f7c:	0800612b 	.word	0x0800612b
 8005f80:	08006067 	.word	0x08006067
 8005f84:	0800612b 	.word	0x0800612b
 8005f88:	0800612b 	.word	0x0800612b
 8005f8c:	0800612b 	.word	0x0800612b
 8005f90:	080060a9 	.word	0x080060a9
 8005f94:	0800612b 	.word	0x0800612b
 8005f98:	0800612b 	.word	0x0800612b
 8005f9c:	0800612b 	.word	0x0800612b
 8005fa0:	080060e9 	.word	0x080060e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68b9      	ldr	r1, [r7, #8]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 fa5c 	bl	8006468 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	699a      	ldr	r2, [r3, #24]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0208 	orr.w	r2, r2, #8
 8005fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699a      	ldr	r2, [r3, #24]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0204 	bic.w	r2, r2, #4
 8005fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6999      	ldr	r1, [r3, #24]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	691a      	ldr	r2, [r3, #16]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	619a      	str	r2, [r3, #24]
      break;
 8005fe2:	e0a5      	b.n	8006130 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68b9      	ldr	r1, [r7, #8]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 faae 	bl	800654c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699a      	ldr	r2, [r3, #24]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	699a      	ldr	r2, [r3, #24]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800600e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6999      	ldr	r1, [r3, #24]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	021a      	lsls	r2, r3, #8
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	430a      	orrs	r2, r1
 8006022:	619a      	str	r2, [r3, #24]
      break;
 8006024:	e084      	b.n	8006130 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68b9      	ldr	r1, [r7, #8]
 800602c:	4618      	mov	r0, r3
 800602e:	f000 fb05 	bl	800663c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	69da      	ldr	r2, [r3, #28]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f042 0208 	orr.w	r2, r2, #8
 8006040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69da      	ldr	r2, [r3, #28]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0204 	bic.w	r2, r2, #4
 8006050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69d9      	ldr	r1, [r3, #28]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	691a      	ldr	r2, [r3, #16]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	61da      	str	r2, [r3, #28]
      break;
 8006064:	e064      	b.n	8006130 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68b9      	ldr	r1, [r7, #8]
 800606c:	4618      	mov	r0, r3
 800606e:	f000 fb5b 	bl	8006728 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69da      	ldr	r2, [r3, #28]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69da      	ldr	r2, [r3, #28]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69d9      	ldr	r1, [r3, #28]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	021a      	lsls	r2, r3, #8
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	61da      	str	r2, [r3, #28]
      break;
 80060a6:	e043      	b.n	8006130 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68b9      	ldr	r1, [r7, #8]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fb92 	bl	80067d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0208 	orr.w	r2, r2, #8
 80060c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0204 	bic.w	r2, r2, #4
 80060d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	691a      	ldr	r2, [r3, #16]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060e6:	e023      	b.n	8006130 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68b9      	ldr	r1, [r7, #8]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 fbc4 	bl	800687c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006102:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006112:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	021a      	lsls	r2, r3, #8
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006128:	e002      	b.n	8006130 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	75fb      	strb	r3, [r7, #23]
      break;
 800612e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006138:	7dfb      	ldrb	r3, [r7, #23]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop

08006144 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006158:	2b01      	cmp	r3, #1
 800615a:	d101      	bne.n	8006160 <HAL_TIM_ConfigClockSource+0x1c>
 800615c:	2302      	movs	r3, #2
 800615e:	e0b4      	b.n	80062ca <HAL_TIM_ConfigClockSource+0x186>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2202      	movs	r2, #2
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	4b56      	ldr	r3, [pc, #344]	; (80062d4 <HAL_TIM_ConfigClockSource+0x190>)
 800617c:	4013      	ands	r3, r2
 800617e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006186:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006198:	d03e      	beq.n	8006218 <HAL_TIM_ConfigClockSource+0xd4>
 800619a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800619e:	f200 8087 	bhi.w	80062b0 <HAL_TIM_ConfigClockSource+0x16c>
 80061a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061a6:	f000 8086 	beq.w	80062b6 <HAL_TIM_ConfigClockSource+0x172>
 80061aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ae:	d87f      	bhi.n	80062b0 <HAL_TIM_ConfigClockSource+0x16c>
 80061b0:	2b70      	cmp	r3, #112	; 0x70
 80061b2:	d01a      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0xa6>
 80061b4:	2b70      	cmp	r3, #112	; 0x70
 80061b6:	d87b      	bhi.n	80062b0 <HAL_TIM_ConfigClockSource+0x16c>
 80061b8:	2b60      	cmp	r3, #96	; 0x60
 80061ba:	d050      	beq.n	800625e <HAL_TIM_ConfigClockSource+0x11a>
 80061bc:	2b60      	cmp	r3, #96	; 0x60
 80061be:	d877      	bhi.n	80062b0 <HAL_TIM_ConfigClockSource+0x16c>
 80061c0:	2b50      	cmp	r3, #80	; 0x50
 80061c2:	d03c      	beq.n	800623e <HAL_TIM_ConfigClockSource+0xfa>
 80061c4:	2b50      	cmp	r3, #80	; 0x50
 80061c6:	d873      	bhi.n	80062b0 <HAL_TIM_ConfigClockSource+0x16c>
 80061c8:	2b40      	cmp	r3, #64	; 0x40
 80061ca:	d058      	beq.n	800627e <HAL_TIM_ConfigClockSource+0x13a>
 80061cc:	2b40      	cmp	r3, #64	; 0x40
 80061ce:	d86f      	bhi.n	80062b0 <HAL_TIM_ConfigClockSource+0x16c>
 80061d0:	2b30      	cmp	r3, #48	; 0x30
 80061d2:	d064      	beq.n	800629e <HAL_TIM_ConfigClockSource+0x15a>
 80061d4:	2b30      	cmp	r3, #48	; 0x30
 80061d6:	d86b      	bhi.n	80062b0 <HAL_TIM_ConfigClockSource+0x16c>
 80061d8:	2b20      	cmp	r3, #32
 80061da:	d060      	beq.n	800629e <HAL_TIM_ConfigClockSource+0x15a>
 80061dc:	2b20      	cmp	r3, #32
 80061de:	d867      	bhi.n	80062b0 <HAL_TIM_ConfigClockSource+0x16c>
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d05c      	beq.n	800629e <HAL_TIM_ConfigClockSource+0x15a>
 80061e4:	2b10      	cmp	r3, #16
 80061e6:	d05a      	beq.n	800629e <HAL_TIM_ConfigClockSource+0x15a>
 80061e8:	e062      	b.n	80062b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6818      	ldr	r0, [r3, #0]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	6899      	ldr	r1, [r3, #8]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f000 fc0d 	bl	8006a18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800620c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	609a      	str	r2, [r3, #8]
      break;
 8006216:	e04f      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6818      	ldr	r0, [r3, #0]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	6899      	ldr	r1, [r3, #8]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f000 fbf6 	bl	8006a18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689a      	ldr	r2, [r3, #8]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800623a:	609a      	str	r2, [r3, #8]
      break;
 800623c:	e03c      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6818      	ldr	r0, [r3, #0]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	6859      	ldr	r1, [r3, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	461a      	mov	r2, r3
 800624c:	f000 fb6a 	bl	8006924 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2150      	movs	r1, #80	; 0x50
 8006256:	4618      	mov	r0, r3
 8006258:	f000 fbc3 	bl	80069e2 <TIM_ITRx_SetConfig>
      break;
 800625c:	e02c      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6818      	ldr	r0, [r3, #0]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	6859      	ldr	r1, [r3, #4]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	461a      	mov	r2, r3
 800626c:	f000 fb89 	bl	8006982 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2160      	movs	r1, #96	; 0x60
 8006276:	4618      	mov	r0, r3
 8006278:	f000 fbb3 	bl	80069e2 <TIM_ITRx_SetConfig>
      break;
 800627c:	e01c      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6818      	ldr	r0, [r3, #0]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	6859      	ldr	r1, [r3, #4]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	461a      	mov	r2, r3
 800628c:	f000 fb4a 	bl	8006924 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2140      	movs	r1, #64	; 0x40
 8006296:	4618      	mov	r0, r3
 8006298:	f000 fba3 	bl	80069e2 <TIM_ITRx_SetConfig>
      break;
 800629c:	e00c      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4619      	mov	r1, r3
 80062a8:	4610      	mov	r0, r2
 80062aa:	f000 fb9a 	bl	80069e2 <TIM_ITRx_SetConfig>
      break;
 80062ae:	e003      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	73fb      	strb	r3, [r7, #15]
      break;
 80062b4:	e000      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80062b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	fffeff88 	.word	0xfffeff88

080062d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a40      	ldr	r2, [pc, #256]	; (800643c <TIM_Base_SetConfig+0x114>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d013      	beq.n	8006368 <TIM_Base_SetConfig+0x40>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006346:	d00f      	beq.n	8006368 <TIM_Base_SetConfig+0x40>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a3d      	ldr	r2, [pc, #244]	; (8006440 <TIM_Base_SetConfig+0x118>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d00b      	beq.n	8006368 <TIM_Base_SetConfig+0x40>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a3c      	ldr	r2, [pc, #240]	; (8006444 <TIM_Base_SetConfig+0x11c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d007      	beq.n	8006368 <TIM_Base_SetConfig+0x40>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a3b      	ldr	r2, [pc, #236]	; (8006448 <TIM_Base_SetConfig+0x120>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d003      	beq.n	8006368 <TIM_Base_SetConfig+0x40>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a3a      	ldr	r2, [pc, #232]	; (800644c <TIM_Base_SetConfig+0x124>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d108      	bne.n	800637a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	4313      	orrs	r3, r2
 8006378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a2f      	ldr	r2, [pc, #188]	; (800643c <TIM_Base_SetConfig+0x114>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d02b      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006388:	d027      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a2c      	ldr	r2, [pc, #176]	; (8006440 <TIM_Base_SetConfig+0x118>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d023      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a2b      	ldr	r2, [pc, #172]	; (8006444 <TIM_Base_SetConfig+0x11c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d01f      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a2a      	ldr	r2, [pc, #168]	; (8006448 <TIM_Base_SetConfig+0x120>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d01b      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a29      	ldr	r2, [pc, #164]	; (800644c <TIM_Base_SetConfig+0x124>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d017      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a28      	ldr	r2, [pc, #160]	; (8006450 <TIM_Base_SetConfig+0x128>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d013      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a27      	ldr	r2, [pc, #156]	; (8006454 <TIM_Base_SetConfig+0x12c>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00f      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a26      	ldr	r2, [pc, #152]	; (8006458 <TIM_Base_SetConfig+0x130>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d00b      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a25      	ldr	r2, [pc, #148]	; (800645c <TIM_Base_SetConfig+0x134>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d007      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a24      	ldr	r2, [pc, #144]	; (8006460 <TIM_Base_SetConfig+0x138>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d003      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a23      	ldr	r2, [pc, #140]	; (8006464 <TIM_Base_SetConfig+0x13c>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d108      	bne.n	80063ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a0a      	ldr	r2, [pc, #40]	; (800643c <TIM_Base_SetConfig+0x114>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d003      	beq.n	8006420 <TIM_Base_SetConfig+0xf8>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a0c      	ldr	r2, [pc, #48]	; (800644c <TIM_Base_SetConfig+0x124>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d103      	bne.n	8006428 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	691a      	ldr	r2, [r3, #16]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	615a      	str	r2, [r3, #20]
}
 800642e:	bf00      	nop
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	40010000 	.word	0x40010000
 8006440:	40000400 	.word	0x40000400
 8006444:	40000800 	.word	0x40000800
 8006448:	40000c00 	.word	0x40000c00
 800644c:	40010400 	.word	0x40010400
 8006450:	40014000 	.word	0x40014000
 8006454:	40014400 	.word	0x40014400
 8006458:	40014800 	.word	0x40014800
 800645c:	40001800 	.word	0x40001800
 8006460:	40001c00 	.word	0x40001c00
 8006464:	40002000 	.word	0x40002000

08006468 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006468:	b480      	push	{r7}
 800646a:	b087      	sub	sp, #28
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	f023 0201 	bic.w	r2, r3, #1
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	4b2b      	ldr	r3, [pc, #172]	; (8006540 <TIM_OC1_SetConfig+0xd8>)
 8006494:	4013      	ands	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 0303 	bic.w	r3, r3, #3
 800649e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f023 0302 	bic.w	r3, r3, #2
 80064b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a21      	ldr	r2, [pc, #132]	; (8006544 <TIM_OC1_SetConfig+0xdc>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d003      	beq.n	80064cc <TIM_OC1_SetConfig+0x64>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a20      	ldr	r2, [pc, #128]	; (8006548 <TIM_OC1_SetConfig+0xe0>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d10c      	bne.n	80064e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f023 0308 	bic.w	r3, r3, #8
 80064d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	4313      	orrs	r3, r2
 80064dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f023 0304 	bic.w	r3, r3, #4
 80064e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a16      	ldr	r2, [pc, #88]	; (8006544 <TIM_OC1_SetConfig+0xdc>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d003      	beq.n	80064f6 <TIM_OC1_SetConfig+0x8e>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a15      	ldr	r2, [pc, #84]	; (8006548 <TIM_OC1_SetConfig+0xe0>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d111      	bne.n	800651a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	4313      	orrs	r3, r2
 800650e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	4313      	orrs	r3, r2
 8006518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	621a      	str	r2, [r3, #32]
}
 8006534:	bf00      	nop
 8006536:	371c      	adds	r7, #28
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	fffeff8f 	.word	0xfffeff8f
 8006544:	40010000 	.word	0x40010000
 8006548:	40010400 	.word	0x40010400

0800654c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	f023 0210 	bic.w	r2, r3, #16
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	4b2e      	ldr	r3, [pc, #184]	; (8006630 <TIM_OC2_SetConfig+0xe4>)
 8006578:	4013      	ands	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006582:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	021b      	lsls	r3, r3, #8
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4313      	orrs	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f023 0320 	bic.w	r3, r3, #32
 8006596:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	011b      	lsls	r3, r3, #4
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a23      	ldr	r2, [pc, #140]	; (8006634 <TIM_OC2_SetConfig+0xe8>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d003      	beq.n	80065b4 <TIM_OC2_SetConfig+0x68>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a22      	ldr	r2, [pc, #136]	; (8006638 <TIM_OC2_SetConfig+0xec>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d10d      	bne.n	80065d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	011b      	lsls	r3, r3, #4
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a18      	ldr	r2, [pc, #96]	; (8006634 <TIM_OC2_SetConfig+0xe8>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d003      	beq.n	80065e0 <TIM_OC2_SetConfig+0x94>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a17      	ldr	r2, [pc, #92]	; (8006638 <TIM_OC2_SetConfig+0xec>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d113      	bne.n	8006608 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	4313      	orrs	r3, r2
 8006606:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	621a      	str	r2, [r3, #32]
}
 8006622:	bf00      	nop
 8006624:	371c      	adds	r7, #28
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	feff8fff 	.word	0xfeff8fff
 8006634:	40010000 	.word	0x40010000
 8006638:	40010400 	.word	0x40010400

0800663c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4b2d      	ldr	r3, [pc, #180]	; (800671c <TIM_OC3_SetConfig+0xe0>)
 8006668:	4013      	ands	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 0303 	bic.w	r3, r3, #3
 8006672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	4313      	orrs	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	021b      	lsls	r3, r3, #8
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	4313      	orrs	r3, r2
 8006690:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a22      	ldr	r2, [pc, #136]	; (8006720 <TIM_OC3_SetConfig+0xe4>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d003      	beq.n	80066a2 <TIM_OC3_SetConfig+0x66>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a21      	ldr	r2, [pc, #132]	; (8006724 <TIM_OC3_SetConfig+0xe8>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d10d      	bne.n	80066be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	021b      	lsls	r3, r3, #8
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a17      	ldr	r2, [pc, #92]	; (8006720 <TIM_OC3_SetConfig+0xe4>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d003      	beq.n	80066ce <TIM_OC3_SetConfig+0x92>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a16      	ldr	r2, [pc, #88]	; (8006724 <TIM_OC3_SetConfig+0xe8>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d113      	bne.n	80066f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	011b      	lsls	r3, r3, #4
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	621a      	str	r2, [r3, #32]
}
 8006710:	bf00      	nop
 8006712:	371c      	adds	r7, #28
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	fffeff8f 	.word	0xfffeff8f
 8006720:	40010000 	.word	0x40010000
 8006724:	40010400 	.word	0x40010400

08006728 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4b1e      	ldr	r3, [pc, #120]	; (80067cc <TIM_OC4_SetConfig+0xa4>)
 8006754:	4013      	ands	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800675e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	021b      	lsls	r3, r3, #8
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	4313      	orrs	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006772:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	031b      	lsls	r3, r3, #12
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	4313      	orrs	r3, r2
 800677e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a13      	ldr	r2, [pc, #76]	; (80067d0 <TIM_OC4_SetConfig+0xa8>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d003      	beq.n	8006790 <TIM_OC4_SetConfig+0x68>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a12      	ldr	r2, [pc, #72]	; (80067d4 <TIM_OC4_SetConfig+0xac>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d109      	bne.n	80067a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006796:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	019b      	lsls	r3, r3, #6
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	685a      	ldr	r2, [r3, #4]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	621a      	str	r2, [r3, #32]
}
 80067be:	bf00      	nop
 80067c0:	371c      	adds	r7, #28
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	feff8fff 	.word	0xfeff8fff
 80067d0:	40010000 	.word	0x40010000
 80067d4:	40010400 	.word	0x40010400

080067d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067d8:	b480      	push	{r7}
 80067da:	b087      	sub	sp, #28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	4b1b      	ldr	r3, [pc, #108]	; (8006870 <TIM_OC5_SetConfig+0x98>)
 8006804:	4013      	ands	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	4313      	orrs	r3, r2
 8006810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006818:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	041b      	lsls	r3, r3, #16
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	4313      	orrs	r3, r2
 8006824:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a12      	ldr	r2, [pc, #72]	; (8006874 <TIM_OC5_SetConfig+0x9c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d003      	beq.n	8006836 <TIM_OC5_SetConfig+0x5e>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a11      	ldr	r2, [pc, #68]	; (8006878 <TIM_OC5_SetConfig+0xa0>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d109      	bne.n	800684a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800683c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	021b      	lsls	r3, r3, #8
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	4313      	orrs	r3, r2
 8006848:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	621a      	str	r2, [r3, #32]
}
 8006864:	bf00      	nop
 8006866:	371c      	adds	r7, #28
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	fffeff8f 	.word	0xfffeff8f
 8006874:	40010000 	.word	0x40010000
 8006878:	40010400 	.word	0x40010400

0800687c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	4b1c      	ldr	r3, [pc, #112]	; (8006918 <TIM_OC6_SetConfig+0x9c>)
 80068a8:	4013      	ands	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	021b      	lsls	r3, r3, #8
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	051b      	lsls	r3, r3, #20
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a13      	ldr	r2, [pc, #76]	; (800691c <TIM_OC6_SetConfig+0xa0>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d003      	beq.n	80068dc <TIM_OC6_SetConfig+0x60>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a12      	ldr	r2, [pc, #72]	; (8006920 <TIM_OC6_SetConfig+0xa4>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d109      	bne.n	80068f0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	029b      	lsls	r3, r3, #10
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	621a      	str	r2, [r3, #32]
}
 800690a:	bf00      	nop
 800690c:	371c      	adds	r7, #28
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	feff8fff 	.word	0xfeff8fff
 800691c:	40010000 	.word	0x40010000
 8006920:	40010400 	.word	0x40010400

08006924 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	f023 0201 	bic.w	r2, r3, #1
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800694e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	011b      	lsls	r3, r3, #4
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	4313      	orrs	r3, r2
 8006958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f023 030a 	bic.w	r3, r3, #10
 8006960:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4313      	orrs	r3, r2
 8006968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	621a      	str	r2, [r3, #32]
}
 8006976:	bf00      	nop
 8006978:	371c      	adds	r7, #28
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006982:	b480      	push	{r7}
 8006984:	b087      	sub	sp, #28
 8006986:	af00      	add	r7, sp, #0
 8006988:	60f8      	str	r0, [r7, #12]
 800698a:	60b9      	str	r1, [r7, #8]
 800698c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	f023 0210 	bic.w	r2, r3, #16
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	031b      	lsls	r3, r3, #12
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	011b      	lsls	r3, r3, #4
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	621a      	str	r2, [r3, #32]
}
 80069d6:	bf00      	nop
 80069d8:	371c      	adds	r7, #28
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b085      	sub	sp, #20
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	f043 0307 	orr.w	r3, r3, #7
 8006a04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	609a      	str	r2, [r3, #8]
}
 8006a0c:	bf00      	nop
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	021a      	lsls	r2, r3, #8
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	609a      	str	r2, [r3, #8]
}
 8006a4c:	bf00      	nop
 8006a4e:	371c      	adds	r7, #28
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f003 031f 	and.w	r3, r3, #31
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6a1a      	ldr	r2, [r3, #32]
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	43db      	mvns	r3, r3
 8006a7a:	401a      	ands	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a1a      	ldr	r2, [r3, #32]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f003 031f 	and.w	r3, r3, #31
 8006a8a:	6879      	ldr	r1, [r7, #4]
 8006a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a90:	431a      	orrs	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	621a      	str	r2, [r3, #32]
}
 8006a96:	bf00      	nop
 8006a98:	371c      	adds	r7, #28
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
	...

08006aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d101      	bne.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e06d      	b.n	8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a30      	ldr	r2, [pc, #192]	; (8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d004      	beq.n	8006af0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a2f      	ldr	r2, [pc, #188]	; (8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d108      	bne.n	8006b02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006af6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a20      	ldr	r2, [pc, #128]	; (8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d022      	beq.n	8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2e:	d01d      	beq.n	8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a1d      	ldr	r2, [pc, #116]	; (8006bac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d018      	beq.n	8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a1c      	ldr	r2, [pc, #112]	; (8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d013      	beq.n	8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a1a      	ldr	r2, [pc, #104]	; (8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d00e      	beq.n	8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a15      	ldr	r2, [pc, #84]	; (8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d009      	beq.n	8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a16      	ldr	r2, [pc, #88]	; (8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d004      	beq.n	8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a15      	ldr	r2, [pc, #84]	; (8006bbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d10c      	bne.n	8006b86 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	40010000 	.word	0x40010000
 8006ba8:	40010400 	.word	0x40010400
 8006bac:	40000400 	.word	0x40000400
 8006bb0:	40000800 	.word	0x40000800
 8006bb4:	40000c00 	.word	0x40000c00
 8006bb8:	40014000 	.word	0x40014000
 8006bbc:	40001800 	.word	0x40001800

08006bc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e040      	b.n	8006c90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d106      	bne.n	8006c24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7fb fd06 	bl	8002630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2224      	movs	r2, #36	; 0x24
 8006c28:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 0201 	bic.w	r2, r2, #1
 8006c38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fbe6 	bl	800740c <UART_SetConfig>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d101      	bne.n	8006c4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e022      	b.n	8006c90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d002      	beq.n	8006c58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fe3e 	bl	80078d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689a      	ldr	r2, [r3, #8]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0201 	orr.w	r2, r2, #1
 8006c86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fec5 	bl	8007a18 <UART_CheckIdleState>
 8006c8e:	4603      	mov	r3, r0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3708      	adds	r7, #8
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08a      	sub	sp, #40	; 0x28
 8006c9c:	af02      	add	r7, sp, #8
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	603b      	str	r3, [r7, #0]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cac:	2b20      	cmp	r3, #32
 8006cae:	d171      	bne.n	8006d94 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d002      	beq.n	8006cbc <HAL_UART_Transmit+0x24>
 8006cb6:	88fb      	ldrh	r3, [r7, #6]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e06a      	b.n	8006d96 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2221      	movs	r2, #33	; 0x21
 8006ccc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cce:	f7fb ff21 	bl	8002b14 <HAL_GetTick>
 8006cd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	88fa      	ldrh	r2, [r7, #6]
 8006cd8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	88fa      	ldrh	r2, [r7, #6]
 8006ce0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cec:	d108      	bne.n	8006d00 <HAL_UART_Transmit+0x68>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d104      	bne.n	8006d00 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	61bb      	str	r3, [r7, #24]
 8006cfe:	e003      	b.n	8006d08 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d04:	2300      	movs	r3, #0
 8006d06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d08:	e02c      	b.n	8006d64 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	2200      	movs	r2, #0
 8006d12:	2180      	movs	r1, #128	; 0x80
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 feb6 	bl	8007a86 <UART_WaitOnFlagUntilTimeout>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d001      	beq.n	8006d24 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e038      	b.n	8006d96 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10b      	bne.n	8006d42 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	3302      	adds	r3, #2
 8006d3e:	61bb      	str	r3, [r7, #24]
 8006d40:	e007      	b.n	8006d52 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	781a      	ldrb	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1cc      	bne.n	8006d0a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	2200      	movs	r2, #0
 8006d78:	2140      	movs	r1, #64	; 0x40
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f000 fe83 	bl	8007a86 <UART_WaitOnFlagUntilTimeout>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e005      	b.n	8006d96 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2220      	movs	r2, #32
 8006d8e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006d90:	2300      	movs	r3, #0
 8006d92:	e000      	b.n	8006d96 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006d94:	2302      	movs	r3, #2
  }
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3720      	adds	r7, #32
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b08a      	sub	sp, #40	; 0x28
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	60f8      	str	r0, [r7, #12]
 8006da6:	60b9      	str	r1, [r7, #8]
 8006da8:	4613      	mov	r3, r2
 8006daa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006db2:	2b20      	cmp	r3, #32
 8006db4:	d132      	bne.n	8006e1c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <HAL_UART_Receive_IT+0x24>
 8006dbc:	88fb      	ldrh	r3, [r7, #6]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e02b      	b.n	8006e1e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d018      	beq.n	8006e0c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	e853 3f00 	ldrex	r3, [r3]
 8006de6:	613b      	str	r3, [r7, #16]
   return(result);
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006dee:	627b      	str	r3, [r7, #36]	; 0x24
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	461a      	mov	r2, r3
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	623b      	str	r3, [r7, #32]
 8006dfa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfc:	69f9      	ldr	r1, [r7, #28]
 8006dfe:	6a3a      	ldr	r2, [r7, #32]
 8006e00:	e841 2300 	strex	r3, r2, [r1]
 8006e04:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1e6      	bne.n	8006dda <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e0c:	88fb      	ldrh	r3, [r7, #6]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	68b9      	ldr	r1, [r7, #8]
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f000 fefe 	bl	8007c14 <UART_Start_Receive_IT>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	e000      	b.n	8006e1e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006e1c:	2302      	movs	r3, #2
  }
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3728      	adds	r7, #40	; 0x28
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b0ba      	sub	sp, #232	; 0xe8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	69db      	ldr	r3, [r3, #28]
 8006e36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006e52:	f640 030f 	movw	r3, #2063	; 0x80f
 8006e56:	4013      	ands	r3, r2
 8006e58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006e5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d115      	bne.n	8006e90 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e68:	f003 0320 	and.w	r3, r3, #32
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00f      	beq.n	8006e90 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e74:	f003 0320 	and.w	r3, r3, #32
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d009      	beq.n	8006e90 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f000 8297 	beq.w	80073b4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	4798      	blx	r3
      }
      return;
 8006e8e:	e291      	b.n	80073b4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 8117 	beq.w	80070c8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d106      	bne.n	8006eb4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006ea6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006eaa:	4b85      	ldr	r3, [pc, #532]	; (80070c0 <HAL_UART_IRQHandler+0x298>)
 8006eac:	4013      	ands	r3, r2
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 810a 	beq.w	80070c8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d011      	beq.n	8006ee4 <HAL_UART_IRQHandler+0xbc>
 8006ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00b      	beq.n	8006ee4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eda:	f043 0201 	orr.w	r2, r3, #1
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d011      	beq.n	8006f14 <HAL_UART_IRQHandler+0xec>
 8006ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00b      	beq.n	8006f14 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2202      	movs	r2, #2
 8006f02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f0a:	f043 0204 	orr.w	r2, r3, #4
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f18:	f003 0304 	and.w	r3, r3, #4
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d011      	beq.n	8006f44 <HAL_UART_IRQHandler+0x11c>
 8006f20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00b      	beq.n	8006f44 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2204      	movs	r2, #4
 8006f32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f3a:	f043 0202 	orr.w	r2, r3, #2
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f48:	f003 0308 	and.w	r3, r3, #8
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d017      	beq.n	8006f80 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f54:	f003 0320 	and.w	r3, r3, #32
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d105      	bne.n	8006f68 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f60:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00b      	beq.n	8006f80 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2208      	movs	r2, #8
 8006f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f76:	f043 0208 	orr.w	r2, r3, #8
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d012      	beq.n	8006fb2 <HAL_UART_IRQHandler+0x18a>
 8006f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00c      	beq.n	8006fb2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fa0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fa8:	f043 0220 	orr.w	r2, r3, #32
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f000 81fd 	beq.w	80073b8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fc2:	f003 0320 	and.w	r3, r3, #32
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00d      	beq.n	8006fe6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fce:	f003 0320 	and.w	r3, r3, #32
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d007      	beq.n	8006fe6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d003      	beq.n	8006fe6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffa:	2b40      	cmp	r3, #64	; 0x40
 8006ffc:	d005      	beq.n	800700a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007002:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007006:	2b00      	cmp	r3, #0
 8007008:	d04f      	beq.n	80070aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fec8 	bl	8007da0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701a:	2b40      	cmp	r3, #64	; 0x40
 800701c:	d141      	bne.n	80070a2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3308      	adds	r3, #8
 8007024:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007028:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800702c:	e853 3f00 	ldrex	r3, [r3]
 8007030:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007034:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800703c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3308      	adds	r3, #8
 8007046:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800704a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800704e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007052:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007056:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800705a:	e841 2300 	strex	r3, r2, [r1]
 800705e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007062:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1d9      	bne.n	800701e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800706e:	2b00      	cmp	r3, #0
 8007070:	d013      	beq.n	800709a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007076:	4a13      	ldr	r2, [pc, #76]	; (80070c4 <HAL_UART_IRQHandler+0x29c>)
 8007078:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800707e:	4618      	mov	r0, r3
 8007080:	f7fb fef9 	bl	8002e76 <HAL_DMA_Abort_IT>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d017      	beq.n	80070ba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800708e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007094:	4610      	mov	r0, r2
 8007096:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007098:	e00f      	b.n	80070ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f9a0 	bl	80073e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070a0:	e00b      	b.n	80070ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f99c 	bl	80073e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070a8:	e007      	b.n	80070ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f998 	bl	80073e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80070b8:	e17e      	b.n	80073b8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ba:	bf00      	nop
    return;
 80070bc:	e17c      	b.n	80073b8 <HAL_UART_IRQHandler+0x590>
 80070be:	bf00      	nop
 80070c0:	04000120 	.word	0x04000120
 80070c4:	08007e69 	.word	0x08007e69

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	f040 814c 	bne.w	800736a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80070d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d6:	f003 0310 	and.w	r3, r3, #16
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f000 8145 	beq.w	800736a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80070e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070e4:	f003 0310 	and.w	r3, r3, #16
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 813e 	beq.w	800736a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2210      	movs	r2, #16
 80070f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007100:	2b40      	cmp	r3, #64	; 0x40
 8007102:	f040 80b6 	bne.w	8007272 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007112:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007116:	2b00      	cmp	r3, #0
 8007118:	f000 8150 	beq.w	80073bc <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007122:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007126:	429a      	cmp	r2, r3
 8007128:	f080 8148 	bcs.w	80073bc <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007132:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007140:	f000 8086 	beq.w	8007250 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007150:	e853 3f00 	ldrex	r3, [r3]
 8007154:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007158:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800715c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007160:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	461a      	mov	r2, r3
 800716a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800716e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007172:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007176:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800717a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800717e:	e841 2300 	strex	r3, r2, [r1]
 8007182:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007186:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1da      	bne.n	8007144 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	3308      	adds	r3, #8
 8007194:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007198:	e853 3f00 	ldrex	r3, [r3]
 800719c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800719e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071a0:	f023 0301 	bic.w	r3, r3, #1
 80071a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	3308      	adds	r3, #8
 80071ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80071b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80071b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80071ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80071be:	e841 2300 	strex	r3, r2, [r1]
 80071c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80071c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1e1      	bne.n	800718e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3308      	adds	r3, #8
 80071d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071d4:	e853 3f00 	ldrex	r3, [r3]
 80071d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80071da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	3308      	adds	r3, #8
 80071ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80071ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80071f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80071f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80071f6:	e841 2300 	strex	r3, r2, [r1]
 80071fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80071fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1e3      	bne.n	80071ca <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2220      	movs	r2, #32
 8007206:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007218:	e853 3f00 	ldrex	r3, [r3]
 800721c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800721e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007220:	f023 0310 	bic.w	r3, r3, #16
 8007224:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	461a      	mov	r2, r3
 800722e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007232:	65bb      	str	r3, [r7, #88]	; 0x58
 8007234:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007236:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007238:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800723a:	e841 2300 	strex	r3, r2, [r1]
 800723e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1e4      	bne.n	8007210 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800724a:	4618      	mov	r0, r3
 800724c:	f7fb fda3 	bl	8002d96 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2202      	movs	r2, #2
 8007254:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007262:	b29b      	uxth	r3, r3
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	b29b      	uxth	r3, r3
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f8c2 	bl	80073f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007270:	e0a4      	b.n	80073bc <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800727e:	b29b      	uxth	r3, r3
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800728c:	b29b      	uxth	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	f000 8096 	beq.w	80073c0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007294:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007298:	2b00      	cmp	r3, #0
 800729a:	f000 8091 	beq.w	80073c0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a6:	e853 3f00 	ldrex	r3, [r3]
 80072aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	461a      	mov	r2, r3
 80072bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072c0:	647b      	str	r3, [r7, #68]	; 0x44
 80072c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072c8:	e841 2300 	strex	r3, r2, [r1]
 80072cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1e4      	bne.n	800729e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	3308      	adds	r3, #8
 80072da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	e853 3f00 	ldrex	r3, [r3]
 80072e2:	623b      	str	r3, [r7, #32]
   return(result);
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	f023 0301 	bic.w	r3, r3, #1
 80072ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3308      	adds	r3, #8
 80072f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80072f8:	633a      	str	r2, [r7, #48]	; 0x30
 80072fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007300:	e841 2300 	strex	r3, r2, [r1]
 8007304:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1e3      	bne.n	80072d4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2220      	movs	r2, #32
 8007310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	e853 3f00 	ldrex	r3, [r3]
 800732c:	60fb      	str	r3, [r7, #12]
   return(result);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f023 0310 	bic.w	r3, r3, #16
 8007334:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	461a      	mov	r2, r3
 800733e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007342:	61fb      	str	r3, [r7, #28]
 8007344:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007346:	69b9      	ldr	r1, [r7, #24]
 8007348:	69fa      	ldr	r2, [r7, #28]
 800734a:	e841 2300 	strex	r3, r2, [r1]
 800734e:	617b      	str	r3, [r7, #20]
   return(result);
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1e4      	bne.n	8007320 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2202      	movs	r2, #2
 800735a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800735c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007360:	4619      	mov	r1, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f846 	bl	80073f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007368:	e02a      	b.n	80073c0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800736a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800736e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00e      	beq.n	8007394 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800737a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800737e:	2b00      	cmp	r3, #0
 8007380:	d008      	beq.n	8007394 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007386:	2b00      	cmp	r3, #0
 8007388:	d01c      	beq.n	80073c4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	4798      	blx	r3
    }
    return;
 8007392:	e017      	b.n	80073c4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739c:	2b00      	cmp	r3, #0
 800739e:	d012      	beq.n	80073c6 <HAL_UART_IRQHandler+0x59e>
 80073a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00c      	beq.n	80073c6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fd71 	bl	8007e94 <UART_EndTransmit_IT>
    return;
 80073b2:	e008      	b.n	80073c6 <HAL_UART_IRQHandler+0x59e>
      return;
 80073b4:	bf00      	nop
 80073b6:	e006      	b.n	80073c6 <HAL_UART_IRQHandler+0x59e>
    return;
 80073b8:	bf00      	nop
 80073ba:	e004      	b.n	80073c6 <HAL_UART_IRQHandler+0x59e>
      return;
 80073bc:	bf00      	nop
 80073be:	e002      	b.n	80073c6 <HAL_UART_IRQHandler+0x59e>
      return;
 80073c0:	bf00      	nop
 80073c2:	e000      	b.n	80073c6 <HAL_UART_IRQHandler+0x59e>
    return;
 80073c4:	bf00      	nop
  }

}
 80073c6:	37e8      	adds	r7, #232	; 0xe8
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	460b      	mov	r3, r1
 80073fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b088      	sub	sp, #32
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689a      	ldr	r2, [r3, #8]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	431a      	orrs	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	431a      	orrs	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	4313      	orrs	r3, r2
 800742e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	4ba6      	ldr	r3, [pc, #664]	; (80076d0 <UART_SetConfig+0x2c4>)
 8007438:	4013      	ands	r3, r2
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	6812      	ldr	r2, [r2, #0]
 800743e:	6979      	ldr	r1, [r7, #20]
 8007440:	430b      	orrs	r3, r1
 8007442:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	430a      	orrs	r2, r1
 8007458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	4313      	orrs	r3, r2
 8007468:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	430a      	orrs	r2, r1
 800747c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a94      	ldr	r2, [pc, #592]	; (80076d4 <UART_SetConfig+0x2c8>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d120      	bne.n	80074ca <UART_SetConfig+0xbe>
 8007488:	4b93      	ldr	r3, [pc, #588]	; (80076d8 <UART_SetConfig+0x2cc>)
 800748a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800748e:	f003 0303 	and.w	r3, r3, #3
 8007492:	2b03      	cmp	r3, #3
 8007494:	d816      	bhi.n	80074c4 <UART_SetConfig+0xb8>
 8007496:	a201      	add	r2, pc, #4	; (adr r2, 800749c <UART_SetConfig+0x90>)
 8007498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749c:	080074ad 	.word	0x080074ad
 80074a0:	080074b9 	.word	0x080074b9
 80074a4:	080074b3 	.word	0x080074b3
 80074a8:	080074bf 	.word	0x080074bf
 80074ac:	2301      	movs	r3, #1
 80074ae:	77fb      	strb	r3, [r7, #31]
 80074b0:	e150      	b.n	8007754 <UART_SetConfig+0x348>
 80074b2:	2302      	movs	r3, #2
 80074b4:	77fb      	strb	r3, [r7, #31]
 80074b6:	e14d      	b.n	8007754 <UART_SetConfig+0x348>
 80074b8:	2304      	movs	r3, #4
 80074ba:	77fb      	strb	r3, [r7, #31]
 80074bc:	e14a      	b.n	8007754 <UART_SetConfig+0x348>
 80074be:	2308      	movs	r3, #8
 80074c0:	77fb      	strb	r3, [r7, #31]
 80074c2:	e147      	b.n	8007754 <UART_SetConfig+0x348>
 80074c4:	2310      	movs	r3, #16
 80074c6:	77fb      	strb	r3, [r7, #31]
 80074c8:	e144      	b.n	8007754 <UART_SetConfig+0x348>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a83      	ldr	r2, [pc, #524]	; (80076dc <UART_SetConfig+0x2d0>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d132      	bne.n	800753a <UART_SetConfig+0x12e>
 80074d4:	4b80      	ldr	r3, [pc, #512]	; (80076d8 <UART_SetConfig+0x2cc>)
 80074d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074da:	f003 030c 	and.w	r3, r3, #12
 80074de:	2b0c      	cmp	r3, #12
 80074e0:	d828      	bhi.n	8007534 <UART_SetConfig+0x128>
 80074e2:	a201      	add	r2, pc, #4	; (adr r2, 80074e8 <UART_SetConfig+0xdc>)
 80074e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e8:	0800751d 	.word	0x0800751d
 80074ec:	08007535 	.word	0x08007535
 80074f0:	08007535 	.word	0x08007535
 80074f4:	08007535 	.word	0x08007535
 80074f8:	08007529 	.word	0x08007529
 80074fc:	08007535 	.word	0x08007535
 8007500:	08007535 	.word	0x08007535
 8007504:	08007535 	.word	0x08007535
 8007508:	08007523 	.word	0x08007523
 800750c:	08007535 	.word	0x08007535
 8007510:	08007535 	.word	0x08007535
 8007514:	08007535 	.word	0x08007535
 8007518:	0800752f 	.word	0x0800752f
 800751c:	2300      	movs	r3, #0
 800751e:	77fb      	strb	r3, [r7, #31]
 8007520:	e118      	b.n	8007754 <UART_SetConfig+0x348>
 8007522:	2302      	movs	r3, #2
 8007524:	77fb      	strb	r3, [r7, #31]
 8007526:	e115      	b.n	8007754 <UART_SetConfig+0x348>
 8007528:	2304      	movs	r3, #4
 800752a:	77fb      	strb	r3, [r7, #31]
 800752c:	e112      	b.n	8007754 <UART_SetConfig+0x348>
 800752e:	2308      	movs	r3, #8
 8007530:	77fb      	strb	r3, [r7, #31]
 8007532:	e10f      	b.n	8007754 <UART_SetConfig+0x348>
 8007534:	2310      	movs	r3, #16
 8007536:	77fb      	strb	r3, [r7, #31]
 8007538:	e10c      	b.n	8007754 <UART_SetConfig+0x348>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a68      	ldr	r2, [pc, #416]	; (80076e0 <UART_SetConfig+0x2d4>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d120      	bne.n	8007586 <UART_SetConfig+0x17a>
 8007544:	4b64      	ldr	r3, [pc, #400]	; (80076d8 <UART_SetConfig+0x2cc>)
 8007546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800754a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800754e:	2b30      	cmp	r3, #48	; 0x30
 8007550:	d013      	beq.n	800757a <UART_SetConfig+0x16e>
 8007552:	2b30      	cmp	r3, #48	; 0x30
 8007554:	d814      	bhi.n	8007580 <UART_SetConfig+0x174>
 8007556:	2b20      	cmp	r3, #32
 8007558:	d009      	beq.n	800756e <UART_SetConfig+0x162>
 800755a:	2b20      	cmp	r3, #32
 800755c:	d810      	bhi.n	8007580 <UART_SetConfig+0x174>
 800755e:	2b00      	cmp	r3, #0
 8007560:	d002      	beq.n	8007568 <UART_SetConfig+0x15c>
 8007562:	2b10      	cmp	r3, #16
 8007564:	d006      	beq.n	8007574 <UART_SetConfig+0x168>
 8007566:	e00b      	b.n	8007580 <UART_SetConfig+0x174>
 8007568:	2300      	movs	r3, #0
 800756a:	77fb      	strb	r3, [r7, #31]
 800756c:	e0f2      	b.n	8007754 <UART_SetConfig+0x348>
 800756e:	2302      	movs	r3, #2
 8007570:	77fb      	strb	r3, [r7, #31]
 8007572:	e0ef      	b.n	8007754 <UART_SetConfig+0x348>
 8007574:	2304      	movs	r3, #4
 8007576:	77fb      	strb	r3, [r7, #31]
 8007578:	e0ec      	b.n	8007754 <UART_SetConfig+0x348>
 800757a:	2308      	movs	r3, #8
 800757c:	77fb      	strb	r3, [r7, #31]
 800757e:	e0e9      	b.n	8007754 <UART_SetConfig+0x348>
 8007580:	2310      	movs	r3, #16
 8007582:	77fb      	strb	r3, [r7, #31]
 8007584:	e0e6      	b.n	8007754 <UART_SetConfig+0x348>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a56      	ldr	r2, [pc, #344]	; (80076e4 <UART_SetConfig+0x2d8>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d120      	bne.n	80075d2 <UART_SetConfig+0x1c6>
 8007590:	4b51      	ldr	r3, [pc, #324]	; (80076d8 <UART_SetConfig+0x2cc>)
 8007592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007596:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800759a:	2bc0      	cmp	r3, #192	; 0xc0
 800759c:	d013      	beq.n	80075c6 <UART_SetConfig+0x1ba>
 800759e:	2bc0      	cmp	r3, #192	; 0xc0
 80075a0:	d814      	bhi.n	80075cc <UART_SetConfig+0x1c0>
 80075a2:	2b80      	cmp	r3, #128	; 0x80
 80075a4:	d009      	beq.n	80075ba <UART_SetConfig+0x1ae>
 80075a6:	2b80      	cmp	r3, #128	; 0x80
 80075a8:	d810      	bhi.n	80075cc <UART_SetConfig+0x1c0>
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d002      	beq.n	80075b4 <UART_SetConfig+0x1a8>
 80075ae:	2b40      	cmp	r3, #64	; 0x40
 80075b0:	d006      	beq.n	80075c0 <UART_SetConfig+0x1b4>
 80075b2:	e00b      	b.n	80075cc <UART_SetConfig+0x1c0>
 80075b4:	2300      	movs	r3, #0
 80075b6:	77fb      	strb	r3, [r7, #31]
 80075b8:	e0cc      	b.n	8007754 <UART_SetConfig+0x348>
 80075ba:	2302      	movs	r3, #2
 80075bc:	77fb      	strb	r3, [r7, #31]
 80075be:	e0c9      	b.n	8007754 <UART_SetConfig+0x348>
 80075c0:	2304      	movs	r3, #4
 80075c2:	77fb      	strb	r3, [r7, #31]
 80075c4:	e0c6      	b.n	8007754 <UART_SetConfig+0x348>
 80075c6:	2308      	movs	r3, #8
 80075c8:	77fb      	strb	r3, [r7, #31]
 80075ca:	e0c3      	b.n	8007754 <UART_SetConfig+0x348>
 80075cc:	2310      	movs	r3, #16
 80075ce:	77fb      	strb	r3, [r7, #31]
 80075d0:	e0c0      	b.n	8007754 <UART_SetConfig+0x348>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a44      	ldr	r2, [pc, #272]	; (80076e8 <UART_SetConfig+0x2dc>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d125      	bne.n	8007628 <UART_SetConfig+0x21c>
 80075dc:	4b3e      	ldr	r3, [pc, #248]	; (80076d8 <UART_SetConfig+0x2cc>)
 80075de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075ea:	d017      	beq.n	800761c <UART_SetConfig+0x210>
 80075ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075f0:	d817      	bhi.n	8007622 <UART_SetConfig+0x216>
 80075f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075f6:	d00b      	beq.n	8007610 <UART_SetConfig+0x204>
 80075f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075fc:	d811      	bhi.n	8007622 <UART_SetConfig+0x216>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d003      	beq.n	800760a <UART_SetConfig+0x1fe>
 8007602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007606:	d006      	beq.n	8007616 <UART_SetConfig+0x20a>
 8007608:	e00b      	b.n	8007622 <UART_SetConfig+0x216>
 800760a:	2300      	movs	r3, #0
 800760c:	77fb      	strb	r3, [r7, #31]
 800760e:	e0a1      	b.n	8007754 <UART_SetConfig+0x348>
 8007610:	2302      	movs	r3, #2
 8007612:	77fb      	strb	r3, [r7, #31]
 8007614:	e09e      	b.n	8007754 <UART_SetConfig+0x348>
 8007616:	2304      	movs	r3, #4
 8007618:	77fb      	strb	r3, [r7, #31]
 800761a:	e09b      	b.n	8007754 <UART_SetConfig+0x348>
 800761c:	2308      	movs	r3, #8
 800761e:	77fb      	strb	r3, [r7, #31]
 8007620:	e098      	b.n	8007754 <UART_SetConfig+0x348>
 8007622:	2310      	movs	r3, #16
 8007624:	77fb      	strb	r3, [r7, #31]
 8007626:	e095      	b.n	8007754 <UART_SetConfig+0x348>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a2f      	ldr	r2, [pc, #188]	; (80076ec <UART_SetConfig+0x2e0>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d125      	bne.n	800767e <UART_SetConfig+0x272>
 8007632:	4b29      	ldr	r3, [pc, #164]	; (80076d8 <UART_SetConfig+0x2cc>)
 8007634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007638:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800763c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007640:	d017      	beq.n	8007672 <UART_SetConfig+0x266>
 8007642:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007646:	d817      	bhi.n	8007678 <UART_SetConfig+0x26c>
 8007648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800764c:	d00b      	beq.n	8007666 <UART_SetConfig+0x25a>
 800764e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007652:	d811      	bhi.n	8007678 <UART_SetConfig+0x26c>
 8007654:	2b00      	cmp	r3, #0
 8007656:	d003      	beq.n	8007660 <UART_SetConfig+0x254>
 8007658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800765c:	d006      	beq.n	800766c <UART_SetConfig+0x260>
 800765e:	e00b      	b.n	8007678 <UART_SetConfig+0x26c>
 8007660:	2301      	movs	r3, #1
 8007662:	77fb      	strb	r3, [r7, #31]
 8007664:	e076      	b.n	8007754 <UART_SetConfig+0x348>
 8007666:	2302      	movs	r3, #2
 8007668:	77fb      	strb	r3, [r7, #31]
 800766a:	e073      	b.n	8007754 <UART_SetConfig+0x348>
 800766c:	2304      	movs	r3, #4
 800766e:	77fb      	strb	r3, [r7, #31]
 8007670:	e070      	b.n	8007754 <UART_SetConfig+0x348>
 8007672:	2308      	movs	r3, #8
 8007674:	77fb      	strb	r3, [r7, #31]
 8007676:	e06d      	b.n	8007754 <UART_SetConfig+0x348>
 8007678:	2310      	movs	r3, #16
 800767a:	77fb      	strb	r3, [r7, #31]
 800767c:	e06a      	b.n	8007754 <UART_SetConfig+0x348>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a1b      	ldr	r2, [pc, #108]	; (80076f0 <UART_SetConfig+0x2e4>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d138      	bne.n	80076fa <UART_SetConfig+0x2ee>
 8007688:	4b13      	ldr	r3, [pc, #76]	; (80076d8 <UART_SetConfig+0x2cc>)
 800768a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800768e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007692:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007696:	d017      	beq.n	80076c8 <UART_SetConfig+0x2bc>
 8007698:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800769c:	d82a      	bhi.n	80076f4 <UART_SetConfig+0x2e8>
 800769e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076a2:	d00b      	beq.n	80076bc <UART_SetConfig+0x2b0>
 80076a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076a8:	d824      	bhi.n	80076f4 <UART_SetConfig+0x2e8>
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <UART_SetConfig+0x2aa>
 80076ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076b2:	d006      	beq.n	80076c2 <UART_SetConfig+0x2b6>
 80076b4:	e01e      	b.n	80076f4 <UART_SetConfig+0x2e8>
 80076b6:	2300      	movs	r3, #0
 80076b8:	77fb      	strb	r3, [r7, #31]
 80076ba:	e04b      	b.n	8007754 <UART_SetConfig+0x348>
 80076bc:	2302      	movs	r3, #2
 80076be:	77fb      	strb	r3, [r7, #31]
 80076c0:	e048      	b.n	8007754 <UART_SetConfig+0x348>
 80076c2:	2304      	movs	r3, #4
 80076c4:	77fb      	strb	r3, [r7, #31]
 80076c6:	e045      	b.n	8007754 <UART_SetConfig+0x348>
 80076c8:	2308      	movs	r3, #8
 80076ca:	77fb      	strb	r3, [r7, #31]
 80076cc:	e042      	b.n	8007754 <UART_SetConfig+0x348>
 80076ce:	bf00      	nop
 80076d0:	efff69f3 	.word	0xefff69f3
 80076d4:	40011000 	.word	0x40011000
 80076d8:	40023800 	.word	0x40023800
 80076dc:	40004400 	.word	0x40004400
 80076e0:	40004800 	.word	0x40004800
 80076e4:	40004c00 	.word	0x40004c00
 80076e8:	40005000 	.word	0x40005000
 80076ec:	40011400 	.word	0x40011400
 80076f0:	40007800 	.word	0x40007800
 80076f4:	2310      	movs	r3, #16
 80076f6:	77fb      	strb	r3, [r7, #31]
 80076f8:	e02c      	b.n	8007754 <UART_SetConfig+0x348>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a72      	ldr	r2, [pc, #456]	; (80078c8 <UART_SetConfig+0x4bc>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d125      	bne.n	8007750 <UART_SetConfig+0x344>
 8007704:	4b71      	ldr	r3, [pc, #452]	; (80078cc <UART_SetConfig+0x4c0>)
 8007706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800770a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800770e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007712:	d017      	beq.n	8007744 <UART_SetConfig+0x338>
 8007714:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007718:	d817      	bhi.n	800774a <UART_SetConfig+0x33e>
 800771a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800771e:	d00b      	beq.n	8007738 <UART_SetConfig+0x32c>
 8007720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007724:	d811      	bhi.n	800774a <UART_SetConfig+0x33e>
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <UART_SetConfig+0x326>
 800772a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800772e:	d006      	beq.n	800773e <UART_SetConfig+0x332>
 8007730:	e00b      	b.n	800774a <UART_SetConfig+0x33e>
 8007732:	2300      	movs	r3, #0
 8007734:	77fb      	strb	r3, [r7, #31]
 8007736:	e00d      	b.n	8007754 <UART_SetConfig+0x348>
 8007738:	2302      	movs	r3, #2
 800773a:	77fb      	strb	r3, [r7, #31]
 800773c:	e00a      	b.n	8007754 <UART_SetConfig+0x348>
 800773e:	2304      	movs	r3, #4
 8007740:	77fb      	strb	r3, [r7, #31]
 8007742:	e007      	b.n	8007754 <UART_SetConfig+0x348>
 8007744:	2308      	movs	r3, #8
 8007746:	77fb      	strb	r3, [r7, #31]
 8007748:	e004      	b.n	8007754 <UART_SetConfig+0x348>
 800774a:	2310      	movs	r3, #16
 800774c:	77fb      	strb	r3, [r7, #31]
 800774e:	e001      	b.n	8007754 <UART_SetConfig+0x348>
 8007750:	2310      	movs	r3, #16
 8007752:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	69db      	ldr	r3, [r3, #28]
 8007758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800775c:	d15b      	bne.n	8007816 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800775e:	7ffb      	ldrb	r3, [r7, #31]
 8007760:	2b08      	cmp	r3, #8
 8007762:	d828      	bhi.n	80077b6 <UART_SetConfig+0x3aa>
 8007764:	a201      	add	r2, pc, #4	; (adr r2, 800776c <UART_SetConfig+0x360>)
 8007766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776a:	bf00      	nop
 800776c:	08007791 	.word	0x08007791
 8007770:	08007799 	.word	0x08007799
 8007774:	080077a1 	.word	0x080077a1
 8007778:	080077b7 	.word	0x080077b7
 800777c:	080077a7 	.word	0x080077a7
 8007780:	080077b7 	.word	0x080077b7
 8007784:	080077b7 	.word	0x080077b7
 8007788:	080077b7 	.word	0x080077b7
 800778c:	080077af 	.word	0x080077af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007790:	f7fd fc6a 	bl	8005068 <HAL_RCC_GetPCLK1Freq>
 8007794:	61b8      	str	r0, [r7, #24]
        break;
 8007796:	e013      	b.n	80077c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007798:	f7fd fc7a 	bl	8005090 <HAL_RCC_GetPCLK2Freq>
 800779c:	61b8      	str	r0, [r7, #24]
        break;
 800779e:	e00f      	b.n	80077c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077a0:	4b4b      	ldr	r3, [pc, #300]	; (80078d0 <UART_SetConfig+0x4c4>)
 80077a2:	61bb      	str	r3, [r7, #24]
        break;
 80077a4:	e00c      	b.n	80077c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077a6:	f7fd fb4d 	bl	8004e44 <HAL_RCC_GetSysClockFreq>
 80077aa:	61b8      	str	r0, [r7, #24]
        break;
 80077ac:	e008      	b.n	80077c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077b2:	61bb      	str	r3, [r7, #24]
        break;
 80077b4:	e004      	b.n	80077c0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80077b6:	2300      	movs	r3, #0
 80077b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	77bb      	strb	r3, [r7, #30]
        break;
 80077be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d074      	beq.n	80078b0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	005a      	lsls	r2, r3, #1
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	085b      	lsrs	r3, r3, #1
 80077d0:	441a      	add	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	2b0f      	cmp	r3, #15
 80077e0:	d916      	bls.n	8007810 <UART_SetConfig+0x404>
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077e8:	d212      	bcs.n	8007810 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	f023 030f 	bic.w	r3, r3, #15
 80077f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	085b      	lsrs	r3, r3, #1
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	f003 0307 	and.w	r3, r3, #7
 80077fe:	b29a      	uxth	r2, r3
 8007800:	89fb      	ldrh	r3, [r7, #14]
 8007802:	4313      	orrs	r3, r2
 8007804:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	89fa      	ldrh	r2, [r7, #14]
 800780c:	60da      	str	r2, [r3, #12]
 800780e:	e04f      	b.n	80078b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	77bb      	strb	r3, [r7, #30]
 8007814:	e04c      	b.n	80078b0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007816:	7ffb      	ldrb	r3, [r7, #31]
 8007818:	2b08      	cmp	r3, #8
 800781a:	d828      	bhi.n	800786e <UART_SetConfig+0x462>
 800781c:	a201      	add	r2, pc, #4	; (adr r2, 8007824 <UART_SetConfig+0x418>)
 800781e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007822:	bf00      	nop
 8007824:	08007849 	.word	0x08007849
 8007828:	08007851 	.word	0x08007851
 800782c:	08007859 	.word	0x08007859
 8007830:	0800786f 	.word	0x0800786f
 8007834:	0800785f 	.word	0x0800785f
 8007838:	0800786f 	.word	0x0800786f
 800783c:	0800786f 	.word	0x0800786f
 8007840:	0800786f 	.word	0x0800786f
 8007844:	08007867 	.word	0x08007867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007848:	f7fd fc0e 	bl	8005068 <HAL_RCC_GetPCLK1Freq>
 800784c:	61b8      	str	r0, [r7, #24]
        break;
 800784e:	e013      	b.n	8007878 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007850:	f7fd fc1e 	bl	8005090 <HAL_RCC_GetPCLK2Freq>
 8007854:	61b8      	str	r0, [r7, #24]
        break;
 8007856:	e00f      	b.n	8007878 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007858:	4b1d      	ldr	r3, [pc, #116]	; (80078d0 <UART_SetConfig+0x4c4>)
 800785a:	61bb      	str	r3, [r7, #24]
        break;
 800785c:	e00c      	b.n	8007878 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800785e:	f7fd faf1 	bl	8004e44 <HAL_RCC_GetSysClockFreq>
 8007862:	61b8      	str	r0, [r7, #24]
        break;
 8007864:	e008      	b.n	8007878 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800786a:	61bb      	str	r3, [r7, #24]
        break;
 800786c:	e004      	b.n	8007878 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800786e:	2300      	movs	r3, #0
 8007870:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	77bb      	strb	r3, [r7, #30]
        break;
 8007876:	bf00      	nop
    }

    if (pclk != 0U)
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d018      	beq.n	80078b0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	085a      	lsrs	r2, r3, #1
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	441a      	add	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007890:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	2b0f      	cmp	r3, #15
 8007896:	d909      	bls.n	80078ac <UART_SetConfig+0x4a0>
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800789e:	d205      	bcs.n	80078ac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	60da      	str	r2, [r3, #12]
 80078aa:	e001      	b.n	80078b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80078bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3720      	adds	r7, #32
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	40007c00 	.word	0x40007c00
 80078cc:	40023800 	.word	0x40023800
 80078d0:	00f42400 	.word	0x00f42400

080078d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00a      	beq.n	80078fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007902:	f003 0302 	and.w	r3, r3, #2
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	430a      	orrs	r2, r1
 800791e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007924:	f003 0304 	and.w	r3, r3, #4
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00a      	beq.n	8007942 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007946:	f003 0308 	and.w	r3, r3, #8
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00a      	beq.n	8007964 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	430a      	orrs	r2, r1
 8007962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007968:	f003 0310 	and.w	r3, r3, #16
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00a      	beq.n	8007986 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	430a      	orrs	r2, r1
 8007984:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798a:	f003 0320 	and.w	r3, r3, #32
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00a      	beq.n	80079a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	430a      	orrs	r2, r1
 80079a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d01a      	beq.n	80079ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	430a      	orrs	r2, r1
 80079c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079d2:	d10a      	bne.n	80079ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	430a      	orrs	r2, r1
 80079e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00a      	beq.n	8007a0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	430a      	orrs	r2, r1
 8007a0a:	605a      	str	r2, [r3, #4]
  }
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af02      	add	r7, sp, #8
 8007a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a28:	f7fb f874 	bl	8002b14 <HAL_GetTick>
 8007a2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0308 	and.w	r3, r3, #8
 8007a38:	2b08      	cmp	r3, #8
 8007a3a:	d10e      	bne.n	8007a5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a40:	9300      	str	r3, [sp, #0]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f81b 	bl	8007a86 <UART_WaitOnFlagUntilTimeout>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e011      	b.n	8007a7e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2220      	movs	r2, #32
 8007a5e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2220      	movs	r2, #32
 8007a64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b09c      	sub	sp, #112	; 0x70
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	60f8      	str	r0, [r7, #12]
 8007a8e:	60b9      	str	r1, [r7, #8]
 8007a90:	603b      	str	r3, [r7, #0]
 8007a92:	4613      	mov	r3, r2
 8007a94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a96:	e0a7      	b.n	8007be8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9e:	f000 80a3 	beq.w	8007be8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aa2:	f7fb f837 	bl	8002b14 <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d302      	bcc.n	8007ab8 <UART_WaitOnFlagUntilTimeout+0x32>
 8007ab2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d13f      	bne.n	8007b38 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ac0:	e853 3f00 	ldrex	r3, [r3]
 8007ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ac8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007acc:	667b      	str	r3, [r7, #100]	; 0x64
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ad6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ad8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ada:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007adc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ade:	e841 2300 	strex	r3, r2, [r1]
 8007ae2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1e6      	bne.n	8007ab8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3308      	adds	r3, #8
 8007af0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007af4:	e853 3f00 	ldrex	r3, [r3]
 8007af8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afc:	f023 0301 	bic.w	r3, r3, #1
 8007b00:	663b      	str	r3, [r7, #96]	; 0x60
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3308      	adds	r3, #8
 8007b08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b12:	e841 2300 	strex	r3, r2, [r1]
 8007b16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1e5      	bne.n	8007aea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2220      	movs	r2, #32
 8007b22:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2220      	movs	r2, #32
 8007b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e068      	b.n	8007c0a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0304 	and.w	r3, r3, #4
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d050      	beq.n	8007be8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	69db      	ldr	r3, [r3, #28]
 8007b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b54:	d148      	bne.n	8007be8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b5e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b68:	e853 3f00 	ldrex	r3, [r3]
 8007b6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b80:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b86:	e841 2300 	strex	r3, r2, [r1]
 8007b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1e6      	bne.n	8007b60 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3308      	adds	r3, #8
 8007b98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	e853 3f00 	ldrex	r3, [r3]
 8007ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	f023 0301 	bic.w	r3, r3, #1
 8007ba8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	3308      	adds	r3, #8
 8007bb0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007bb2:	623a      	str	r2, [r7, #32]
 8007bb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb6:	69f9      	ldr	r1, [r7, #28]
 8007bb8:	6a3a      	ldr	r2, [r7, #32]
 8007bba:	e841 2300 	strex	r3, r2, [r1]
 8007bbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1e5      	bne.n	8007b92 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2220      	movs	r2, #32
 8007bca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e010      	b.n	8007c0a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	69da      	ldr	r2, [r3, #28]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	bf0c      	ite	eq
 8007bf8:	2301      	moveq	r3, #1
 8007bfa:	2300      	movne	r3, #0
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	461a      	mov	r2, r3
 8007c00:	79fb      	ldrb	r3, [r7, #7]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	f43f af48 	beq.w	8007a98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3770      	adds	r7, #112	; 0x70
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
	...

08007c14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b097      	sub	sp, #92	; 0x5c
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	88fa      	ldrh	r2, [r7, #6]
 8007c2c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	88fa      	ldrh	r2, [r7, #6]
 8007c34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c46:	d10e      	bne.n	8007c66 <UART_Start_Receive_IT+0x52>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d105      	bne.n	8007c5c <UART_Start_Receive_IT+0x48>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007c56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c5a:	e02d      	b.n	8007cb8 <UART_Start_Receive_IT+0xa4>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	22ff      	movs	r2, #255	; 0xff
 8007c60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c64:	e028      	b.n	8007cb8 <UART_Start_Receive_IT+0xa4>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10d      	bne.n	8007c8a <UART_Start_Receive_IT+0x76>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d104      	bne.n	8007c80 <UART_Start_Receive_IT+0x6c>
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	22ff      	movs	r2, #255	; 0xff
 8007c7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c7e:	e01b      	b.n	8007cb8 <UART_Start_Receive_IT+0xa4>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	227f      	movs	r2, #127	; 0x7f
 8007c84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c88:	e016      	b.n	8007cb8 <UART_Start_Receive_IT+0xa4>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c92:	d10d      	bne.n	8007cb0 <UART_Start_Receive_IT+0x9c>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d104      	bne.n	8007ca6 <UART_Start_Receive_IT+0x92>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	227f      	movs	r2, #127	; 0x7f
 8007ca0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ca4:	e008      	b.n	8007cb8 <UART_Start_Receive_IT+0xa4>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	223f      	movs	r2, #63	; 0x3f
 8007caa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007cae:	e003      	b.n	8007cb8 <UART_Start_Receive_IT+0xa4>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2222      	movs	r2, #34	; 0x22
 8007cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3308      	adds	r3, #8
 8007cce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cd2:	e853 3f00 	ldrex	r3, [r3]
 8007cd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cda:	f043 0301 	orr.w	r3, r3, #1
 8007cde:	657b      	str	r3, [r7, #84]	; 0x54
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3308      	adds	r3, #8
 8007ce6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ce8:	64ba      	str	r2, [r7, #72]	; 0x48
 8007cea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007cee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cf0:	e841 2300 	strex	r3, r2, [r1]
 8007cf4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1e5      	bne.n	8007cc8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d04:	d107      	bne.n	8007d16 <UART_Start_Receive_IT+0x102>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d103      	bne.n	8007d16 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	4a21      	ldr	r2, [pc, #132]	; (8007d98 <UART_Start_Receive_IT+0x184>)
 8007d12:	669a      	str	r2, [r3, #104]	; 0x68
 8007d14:	e002      	b.n	8007d1c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	4a20      	ldr	r2, [pc, #128]	; (8007d9c <UART_Start_Receive_IT+0x188>)
 8007d1a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d019      	beq.n	8007d58 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2c:	e853 3f00 	ldrex	r3, [r3]
 8007d30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007d38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d42:	637b      	str	r3, [r7, #52]	; 0x34
 8007d44:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d4a:	e841 2300 	strex	r3, r2, [r1]
 8007d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1e6      	bne.n	8007d24 <UART_Start_Receive_IT+0x110>
 8007d56:	e018      	b.n	8007d8a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	e853 3f00 	ldrex	r3, [r3]
 8007d64:	613b      	str	r3, [r7, #16]
   return(result);
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f043 0320 	orr.w	r3, r3, #32
 8007d6c:	653b      	str	r3, [r7, #80]	; 0x50
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	461a      	mov	r2, r3
 8007d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d76:	623b      	str	r3, [r7, #32]
 8007d78:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7a:	69f9      	ldr	r1, [r7, #28]
 8007d7c:	6a3a      	ldr	r2, [r7, #32]
 8007d7e:	e841 2300 	strex	r3, r2, [r1]
 8007d82:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1e6      	bne.n	8007d58 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	375c      	adds	r7, #92	; 0x5c
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr
 8007d98:	0800804f 	.word	0x0800804f
 8007d9c:	08007ee9 	.word	0x08007ee9

08007da0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b095      	sub	sp, #84	; 0x54
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db0:	e853 3f00 	ldrex	r3, [r3]
 8007db4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dc6:	643b      	str	r3, [r7, #64]	; 0x40
 8007dc8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dce:	e841 2300 	strex	r3, r2, [r1]
 8007dd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1e6      	bne.n	8007da8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	3308      	adds	r3, #8
 8007de0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	e853 3f00 	ldrex	r3, [r3]
 8007de8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	f023 0301 	bic.w	r3, r3, #1
 8007df0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3308      	adds	r3, #8
 8007df8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e02:	e841 2300 	strex	r3, r2, [r1]
 8007e06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1e5      	bne.n	8007dda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d118      	bne.n	8007e48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	e853 3f00 	ldrex	r3, [r3]
 8007e22:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f023 0310 	bic.w	r3, r3, #16
 8007e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	461a      	mov	r2, r3
 8007e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e34:	61bb      	str	r3, [r7, #24]
 8007e36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e38:	6979      	ldr	r1, [r7, #20]
 8007e3a:	69ba      	ldr	r2, [r7, #24]
 8007e3c:	e841 2300 	strex	r3, r2, [r1]
 8007e40:	613b      	str	r3, [r7, #16]
   return(result);
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1e6      	bne.n	8007e16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2220      	movs	r2, #32
 8007e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007e5c:	bf00      	nop
 8007e5e:	3754      	adds	r7, #84	; 0x54
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f7ff faaa 	bl	80073e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e8c:	bf00      	nop
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b088      	sub	sp, #32
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	e853 3f00 	ldrex	r3, [r3]
 8007ea8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eb0:	61fb      	str	r3, [r7, #28]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	61bb      	str	r3, [r7, #24]
 8007ebc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebe:	6979      	ldr	r1, [r7, #20]
 8007ec0:	69ba      	ldr	r2, [r7, #24]
 8007ec2:	e841 2300 	strex	r3, r2, [r1]
 8007ec6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1e6      	bne.n	8007e9c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2220      	movs	r2, #32
 8007ed2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f7ff fa76 	bl	80073cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ee0:	bf00      	nop
 8007ee2:	3720      	adds	r7, #32
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b096      	sub	sp, #88	; 0x58
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ef6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f00:	2b22      	cmp	r3, #34	; 0x22
 8007f02:	f040 8098 	bne.w	8008036 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f10:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007f14:	b2d9      	uxtb	r1, r3
 8007f16:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007f1a:	b2da      	uxtb	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f20:	400a      	ands	r2, r1
 8007f22:	b2d2      	uxtb	r2, r2
 8007f24:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f2a:	1c5a      	adds	r2, r3, #1
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d17b      	bne.n	8008046 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f56:	e853 3f00 	ldrex	r3, [r3]
 8007f5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f62:	653b      	str	r3, [r7, #80]	; 0x50
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f6c:	647b      	str	r3, [r7, #68]	; 0x44
 8007f6e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f74:	e841 2300 	strex	r3, r2, [r1]
 8007f78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1e6      	bne.n	8007f4e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3308      	adds	r3, #8
 8007f86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	e853 3f00 	ldrex	r3, [r3]
 8007f8e:	623b      	str	r3, [r7, #32]
   return(result);
 8007f90:	6a3b      	ldr	r3, [r7, #32]
 8007f92:	f023 0301 	bic.w	r3, r3, #1
 8007f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	3308      	adds	r3, #8
 8007f9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fa0:	633a      	str	r2, [r7, #48]	; 0x30
 8007fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fa8:	e841 2300 	strex	r3, r2, [r1]
 8007fac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1e5      	bne.n	8007f80 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2220      	movs	r2, #32
 8007fb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d12e      	bne.n	800802e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	e853 3f00 	ldrex	r3, [r3]
 8007fe2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f023 0310 	bic.w	r3, r3, #16
 8007fea:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ff4:	61fb      	str	r3, [r7, #28]
 8007ff6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff8:	69b9      	ldr	r1, [r7, #24]
 8007ffa:	69fa      	ldr	r2, [r7, #28]
 8007ffc:	e841 2300 	strex	r3, r2, [r1]
 8008000:	617b      	str	r3, [r7, #20]
   return(result);
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1e6      	bne.n	8007fd6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	69db      	ldr	r3, [r3, #28]
 800800e:	f003 0310 	and.w	r3, r3, #16
 8008012:	2b10      	cmp	r3, #16
 8008014:	d103      	bne.n	800801e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2210      	movs	r2, #16
 800801c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008024:	4619      	mov	r1, r3
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7ff f9e4 	bl	80073f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800802c:	e00b      	b.n	8008046 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7f9 fff2 	bl	8002018 <HAL_UART_RxCpltCallback>
}
 8008034:	e007      	b.n	8008046 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	699a      	ldr	r2, [r3, #24]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f042 0208 	orr.w	r2, r2, #8
 8008044:	619a      	str	r2, [r3, #24]
}
 8008046:	bf00      	nop
 8008048:	3758      	adds	r7, #88	; 0x58
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b096      	sub	sp, #88	; 0x58
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800805c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008066:	2b22      	cmp	r3, #34	; 0x22
 8008068:	f040 8098 	bne.w	800819c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008072:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800807a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800807c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008080:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008084:	4013      	ands	r3, r2
 8008086:	b29a      	uxth	r2, r3
 8008088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800808a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008090:	1c9a      	adds	r2, r3, #2
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800809c:	b29b      	uxth	r3, r3
 800809e:	3b01      	subs	r3, #1
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d17b      	bne.n	80081ac <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080bc:	e853 3f00 	ldrex	r3, [r3]
 80080c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080d2:	643b      	str	r3, [r7, #64]	; 0x40
 80080d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080da:	e841 2300 	strex	r3, r2, [r1]
 80080de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1e6      	bne.n	80080b4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	3308      	adds	r3, #8
 80080ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ee:	6a3b      	ldr	r3, [r7, #32]
 80080f0:	e853 3f00 	ldrex	r3, [r3]
 80080f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	f023 0301 	bic.w	r3, r3, #1
 80080fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3308      	adds	r3, #8
 8008104:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008106:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008108:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800810c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800810e:	e841 2300 	strex	r3, r2, [r1]
 8008112:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1e5      	bne.n	80080e6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2220      	movs	r2, #32
 800811e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008132:	2b01      	cmp	r3, #1
 8008134:	d12e      	bne.n	8008194 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	e853 3f00 	ldrex	r3, [r3]
 8008148:	60bb      	str	r3, [r7, #8]
   return(result);
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	f023 0310 	bic.w	r3, r3, #16
 8008150:	647b      	str	r3, [r7, #68]	; 0x44
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	461a      	mov	r2, r3
 8008158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800815a:	61bb      	str	r3, [r7, #24]
 800815c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815e:	6979      	ldr	r1, [r7, #20]
 8008160:	69ba      	ldr	r2, [r7, #24]
 8008162:	e841 2300 	strex	r3, r2, [r1]
 8008166:	613b      	str	r3, [r7, #16]
   return(result);
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1e6      	bne.n	800813c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	69db      	ldr	r3, [r3, #28]
 8008174:	f003 0310 	and.w	r3, r3, #16
 8008178:	2b10      	cmp	r3, #16
 800817a:	d103      	bne.n	8008184 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2210      	movs	r2, #16
 8008182:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800818a:	4619      	mov	r1, r3
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f7ff f931 	bl	80073f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008192:	e00b      	b.n	80081ac <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f7f9 ff3f 	bl	8002018 <HAL_UART_RxCpltCallback>
}
 800819a:	e007      	b.n	80081ac <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	699a      	ldr	r2, [r3, #24]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f042 0208 	orr.w	r2, r2, #8
 80081aa:	619a      	str	r2, [r3, #24]
}
 80081ac:	bf00      	nop
 80081ae:	3758      	adds	r7, #88	; 0x58
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081b4:	b084      	sub	sp, #16
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b084      	sub	sp, #16
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
 80081be:	f107 001c 	add.w	r0, r7, #28
 80081c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80081c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d120      	bne.n	800820e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68da      	ldr	r2, [r3, #12]
 80081dc:	4b20      	ldr	r3, [pc, #128]	; (8008260 <USB_CoreInit+0xac>)
 80081de:	4013      	ands	r3, r2
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80081f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d105      	bne.n	8008202 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fa96 	bl	8008734 <USB_CoreReset>
 8008208:	4603      	mov	r3, r0
 800820a:	73fb      	strb	r3, [r7, #15]
 800820c:	e010      	b.n	8008230 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 fa8a 	bl	8008734 <USB_CoreReset>
 8008220:	4603      	mov	r3, r0
 8008222:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008228:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008232:	2b01      	cmp	r3, #1
 8008234:	d10b      	bne.n	800824e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	f043 0206 	orr.w	r2, r3, #6
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	f043 0220 	orr.w	r2, r3, #32
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800824e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008250:	4618      	mov	r0, r3
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800825a:	b004      	add	sp, #16
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	ffbdffbf 	.word	0xffbdffbf

08008264 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	f023 0201 	bic.w	r2, r3, #1
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	370c      	adds	r7, #12
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr

08008286 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b084      	sub	sp, #16
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
 800828e:	460b      	mov	r3, r1
 8008290:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008292:	2300      	movs	r3, #0
 8008294:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082a2:	78fb      	ldrb	r3, [r7, #3]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d115      	bne.n	80082d4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80082b4:	2001      	movs	r0, #1
 80082b6:	f7fa fc39 	bl	8002b2c <HAL_Delay>
      ms++;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	3301      	adds	r3, #1
 80082be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fa29 	bl	8008718 <USB_GetMode>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d01e      	beq.n	800830a <USB_SetCurrentMode+0x84>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2b31      	cmp	r3, #49	; 0x31
 80082d0:	d9f0      	bls.n	80082b4 <USB_SetCurrentMode+0x2e>
 80082d2:	e01a      	b.n	800830a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80082d4:	78fb      	ldrb	r3, [r7, #3]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d115      	bne.n	8008306 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80082e6:	2001      	movs	r0, #1
 80082e8:	f7fa fc20 	bl	8002b2c <HAL_Delay>
      ms++;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	3301      	adds	r3, #1
 80082f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fa10 	bl	8008718 <USB_GetMode>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d005      	beq.n	800830a <USB_SetCurrentMode+0x84>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2b31      	cmp	r3, #49	; 0x31
 8008302:	d9f0      	bls.n	80082e6 <USB_SetCurrentMode+0x60>
 8008304:	e001      	b.n	800830a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e005      	b.n	8008316 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2b32      	cmp	r3, #50	; 0x32
 800830e:	d101      	bne.n	8008314 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e000      	b.n	8008316 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
	...

08008320 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008320:	b084      	sub	sp, #16
 8008322:	b580      	push	{r7, lr}
 8008324:	b086      	sub	sp, #24
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800832e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008332:	2300      	movs	r3, #0
 8008334:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800833a:	2300      	movs	r3, #0
 800833c:	613b      	str	r3, [r7, #16]
 800833e:	e009      	b.n	8008354 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	3340      	adds	r3, #64	; 0x40
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	2200      	movs	r2, #0
 800834c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	3301      	adds	r3, #1
 8008352:	613b      	str	r3, [r7, #16]
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	2b0e      	cmp	r3, #14
 8008358:	d9f2      	bls.n	8008340 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800835a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800835c:	2b00      	cmp	r3, #0
 800835e:	d11c      	bne.n	800839a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800836e:	f043 0302 	orr.w	r3, r3, #2
 8008372:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008378:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	601a      	str	r2, [r3, #0]
 8008398:	e005      	b.n	80083a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083ac:	461a      	mov	r2, r3
 80083ae:	2300      	movs	r3, #0
 80083b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083b8:	4619      	mov	r1, r3
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083c0:	461a      	mov	r2, r3
 80083c2:	680b      	ldr	r3, [r1, #0]
 80083c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d10c      	bne.n	80083e6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80083cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d104      	bne.n	80083dc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80083d2:	2100      	movs	r1, #0
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 f965 	bl	80086a4 <USB_SetDevSpeed>
 80083da:	e008      	b.n	80083ee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80083dc:	2101      	movs	r1, #1
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f960 	bl	80086a4 <USB_SetDevSpeed>
 80083e4:	e003      	b.n	80083ee <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80083e6:	2103      	movs	r1, #3
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f95b 	bl	80086a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80083ee:	2110      	movs	r1, #16
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f8f3 	bl	80085dc <USB_FlushTxFifo>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 f91f 	bl	8008644 <USB_FlushRxFifo>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d001      	beq.n	8008410 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008416:	461a      	mov	r2, r3
 8008418:	2300      	movs	r3, #0
 800841a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008422:	461a      	mov	r2, r3
 8008424:	2300      	movs	r3, #0
 8008426:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800842e:	461a      	mov	r2, r3
 8008430:	2300      	movs	r3, #0
 8008432:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008434:	2300      	movs	r3, #0
 8008436:	613b      	str	r3, [r7, #16]
 8008438:	e043      	b.n	80084c2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	015a      	lsls	r2, r3, #5
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	4413      	add	r3, r2
 8008442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800844c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008450:	d118      	bne.n	8008484 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10a      	bne.n	800846e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	015a      	lsls	r2, r3, #5
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4413      	add	r3, r2
 8008460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008464:	461a      	mov	r2, r3
 8008466:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800846a:	6013      	str	r3, [r2, #0]
 800846c:	e013      	b.n	8008496 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	015a      	lsls	r2, r3, #5
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	4413      	add	r3, r2
 8008476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800847a:	461a      	mov	r2, r3
 800847c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008480:	6013      	str	r3, [r2, #0]
 8008482:	e008      	b.n	8008496 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	4413      	add	r3, r2
 800848c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008490:	461a      	mov	r2, r3
 8008492:	2300      	movs	r3, #0
 8008494:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	015a      	lsls	r2, r3, #5
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	4413      	add	r3, r2
 800849e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a2:	461a      	mov	r2, r3
 80084a4:	2300      	movs	r3, #0
 80084a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	015a      	lsls	r2, r3, #5
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4413      	add	r3, r2
 80084b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b4:	461a      	mov	r2, r3
 80084b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	3301      	adds	r3, #1
 80084c0:	613b      	str	r3, [r7, #16]
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d3b7      	bcc.n	800843a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084ca:	2300      	movs	r3, #0
 80084cc:	613b      	str	r3, [r7, #16]
 80084ce:	e043      	b.n	8008558 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	015a      	lsls	r2, r3, #5
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	4413      	add	r3, r2
 80084d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084e6:	d118      	bne.n	800851a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d10a      	bne.n	8008504 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	015a      	lsls	r2, r3, #5
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	4413      	add	r3, r2
 80084f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084fa:	461a      	mov	r2, r3
 80084fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008500:	6013      	str	r3, [r2, #0]
 8008502:	e013      	b.n	800852c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	015a      	lsls	r2, r3, #5
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4413      	add	r3, r2
 800850c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008510:	461a      	mov	r2, r3
 8008512:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008516:	6013      	str	r3, [r2, #0]
 8008518:	e008      	b.n	800852c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	015a      	lsls	r2, r3, #5
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	4413      	add	r3, r2
 8008522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008526:	461a      	mov	r2, r3
 8008528:	2300      	movs	r3, #0
 800852a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	015a      	lsls	r2, r3, #5
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	4413      	add	r3, r2
 8008534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008538:	461a      	mov	r2, r3
 800853a:	2300      	movs	r3, #0
 800853c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	015a      	lsls	r2, r3, #5
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	4413      	add	r3, r2
 8008546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854a:	461a      	mov	r2, r3
 800854c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008550:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	3301      	adds	r3, #1
 8008556:	613b      	str	r3, [r7, #16]
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855a:	693a      	ldr	r2, [r7, #16]
 800855c:	429a      	cmp	r2, r3
 800855e:	d3b7      	bcc.n	80084d0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800856e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008572:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008580:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008584:	2b00      	cmp	r3, #0
 8008586:	d105      	bne.n	8008594 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	f043 0210 	orr.w	r2, r3, #16
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	699a      	ldr	r2, [r3, #24]
 8008598:	4b0e      	ldr	r3, [pc, #56]	; (80085d4 <USB_DevInit+0x2b4>)
 800859a:	4313      	orrs	r3, r2
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80085a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d005      	beq.n	80085b2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	f043 0208 	orr.w	r2, r3, #8
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80085b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d105      	bne.n	80085c4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	699a      	ldr	r2, [r3, #24]
 80085bc:	4b06      	ldr	r3, [pc, #24]	; (80085d8 <USB_DevInit+0x2b8>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80085c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3718      	adds	r7, #24
 80085ca:	46bd      	mov	sp, r7
 80085cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085d0:	b004      	add	sp, #16
 80085d2:	4770      	bx	lr
 80085d4:	803c3800 	.word	0x803c3800
 80085d8:	40000004 	.word	0x40000004

080085dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80085e6:	2300      	movs	r3, #0
 80085e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	3301      	adds	r3, #1
 80085ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	4a13      	ldr	r2, [pc, #76]	; (8008640 <USB_FlushTxFifo+0x64>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d901      	bls.n	80085fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e01b      	b.n	8008634 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	2b00      	cmp	r3, #0
 8008602:	daf2      	bge.n	80085ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008604:	2300      	movs	r3, #0
 8008606:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	019b      	lsls	r3, r3, #6
 800860c:	f043 0220 	orr.w	r2, r3, #32
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	3301      	adds	r3, #1
 8008618:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	4a08      	ldr	r2, [pc, #32]	; (8008640 <USB_FlushTxFifo+0x64>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d901      	bls.n	8008626 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008622:	2303      	movs	r3, #3
 8008624:	e006      	b.n	8008634 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	f003 0320 	and.w	r3, r3, #32
 800862e:	2b20      	cmp	r3, #32
 8008630:	d0f0      	beq.n	8008614 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3714      	adds	r7, #20
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	00030d40 	.word	0x00030d40

08008644 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800864c:	2300      	movs	r3, #0
 800864e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	3301      	adds	r3, #1
 8008654:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	4a11      	ldr	r2, [pc, #68]	; (80086a0 <USB_FlushRxFifo+0x5c>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d901      	bls.n	8008662 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e018      	b.n	8008694 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	2b00      	cmp	r3, #0
 8008668:	daf2      	bge.n	8008650 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800866a:	2300      	movs	r3, #0
 800866c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2210      	movs	r2, #16
 8008672:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	3301      	adds	r3, #1
 8008678:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	4a08      	ldr	r2, [pc, #32]	; (80086a0 <USB_FlushRxFifo+0x5c>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d901      	bls.n	8008686 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e006      	b.n	8008694 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	f003 0310 	and.w	r3, r3, #16
 800868e:	2b10      	cmp	r3, #16
 8008690:	d0f0      	beq.n	8008674 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr
 80086a0:	00030d40 	.word	0x00030d40

080086a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	460b      	mov	r3, r1
 80086ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	78fb      	ldrb	r3, [r7, #3]
 80086be:	68f9      	ldr	r1, [r7, #12]
 80086c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086c4:	4313      	orrs	r3, r2
 80086c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3714      	adds	r7, #20
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80086d6:	b480      	push	{r7}
 80086d8:	b085      	sub	sp, #20
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80086f0:	f023 0303 	bic.w	r3, r3, #3
 80086f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008704:	f043 0302 	orr.w	r3, r3, #2
 8008708:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	695b      	ldr	r3, [r3, #20]
 8008724:	f003 0301 	and.w	r3, r3, #1
}
 8008728:	4618      	mov	r0, r3
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800873c:	2300      	movs	r3, #0
 800873e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	3301      	adds	r3, #1
 8008744:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	4a13      	ldr	r2, [pc, #76]	; (8008798 <USB_CoreReset+0x64>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d901      	bls.n	8008752 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	e01b      	b.n	800878a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	2b00      	cmp	r3, #0
 8008758:	daf2      	bge.n	8008740 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800875a:	2300      	movs	r3, #0
 800875c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	f043 0201 	orr.w	r2, r3, #1
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	3301      	adds	r3, #1
 800876e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	4a09      	ldr	r2, [pc, #36]	; (8008798 <USB_CoreReset+0x64>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d901      	bls.n	800877c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008778:	2303      	movs	r3, #3
 800877a:	e006      	b.n	800878a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	f003 0301 	and.w	r3, r3, #1
 8008784:	2b01      	cmp	r3, #1
 8008786:	d0f0      	beq.n	800876a <USB_CoreReset+0x36>

  return HAL_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3714      	adds	r7, #20
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	00030d40 	.word	0x00030d40

0800879c <atof>:
 800879c:	2100      	movs	r1, #0
 800879e:	f001 baf5 	b.w	8009d8c <strtod>
	...

080087a4 <__errno>:
 80087a4:	4b01      	ldr	r3, [pc, #4]	; (80087ac <__errno+0x8>)
 80087a6:	6818      	ldr	r0, [r3, #0]
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	2000001c 	.word	0x2000001c

080087b0 <__libc_init_array>:
 80087b0:	b570      	push	{r4, r5, r6, lr}
 80087b2:	4d0d      	ldr	r5, [pc, #52]	; (80087e8 <__libc_init_array+0x38>)
 80087b4:	4c0d      	ldr	r4, [pc, #52]	; (80087ec <__libc_init_array+0x3c>)
 80087b6:	1b64      	subs	r4, r4, r5
 80087b8:	10a4      	asrs	r4, r4, #2
 80087ba:	2600      	movs	r6, #0
 80087bc:	42a6      	cmp	r6, r4
 80087be:	d109      	bne.n	80087d4 <__libc_init_array+0x24>
 80087c0:	4d0b      	ldr	r5, [pc, #44]	; (80087f0 <__libc_init_array+0x40>)
 80087c2:	4c0c      	ldr	r4, [pc, #48]	; (80087f4 <__libc_init_array+0x44>)
 80087c4:	f004 fa14 	bl	800cbf0 <_init>
 80087c8:	1b64      	subs	r4, r4, r5
 80087ca:	10a4      	asrs	r4, r4, #2
 80087cc:	2600      	movs	r6, #0
 80087ce:	42a6      	cmp	r6, r4
 80087d0:	d105      	bne.n	80087de <__libc_init_array+0x2e>
 80087d2:	bd70      	pop	{r4, r5, r6, pc}
 80087d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80087d8:	4798      	blx	r3
 80087da:	3601      	adds	r6, #1
 80087dc:	e7ee      	b.n	80087bc <__libc_init_array+0xc>
 80087de:	f855 3b04 	ldr.w	r3, [r5], #4
 80087e2:	4798      	blx	r3
 80087e4:	3601      	adds	r6, #1
 80087e6:	e7f2      	b.n	80087ce <__libc_init_array+0x1e>
 80087e8:	0800d0fc 	.word	0x0800d0fc
 80087ec:	0800d0fc 	.word	0x0800d0fc
 80087f0:	0800d0fc 	.word	0x0800d0fc
 80087f4:	0800d100 	.word	0x0800d100

080087f8 <memset>:
 80087f8:	4402      	add	r2, r0
 80087fa:	4603      	mov	r3, r0
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d100      	bne.n	8008802 <memset+0xa>
 8008800:	4770      	bx	lr
 8008802:	f803 1b01 	strb.w	r1, [r3], #1
 8008806:	e7f9      	b.n	80087fc <memset+0x4>

08008808 <__cvt>:
 8008808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800880c:	ec55 4b10 	vmov	r4, r5, d0
 8008810:	2d00      	cmp	r5, #0
 8008812:	460e      	mov	r6, r1
 8008814:	4619      	mov	r1, r3
 8008816:	462b      	mov	r3, r5
 8008818:	bfbb      	ittet	lt
 800881a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800881e:	461d      	movlt	r5, r3
 8008820:	2300      	movge	r3, #0
 8008822:	232d      	movlt	r3, #45	; 0x2d
 8008824:	700b      	strb	r3, [r1, #0]
 8008826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008828:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800882c:	4691      	mov	r9, r2
 800882e:	f023 0820 	bic.w	r8, r3, #32
 8008832:	bfbc      	itt	lt
 8008834:	4622      	movlt	r2, r4
 8008836:	4614      	movlt	r4, r2
 8008838:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800883c:	d005      	beq.n	800884a <__cvt+0x42>
 800883e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008842:	d100      	bne.n	8008846 <__cvt+0x3e>
 8008844:	3601      	adds	r6, #1
 8008846:	2102      	movs	r1, #2
 8008848:	e000      	b.n	800884c <__cvt+0x44>
 800884a:	2103      	movs	r1, #3
 800884c:	ab03      	add	r3, sp, #12
 800884e:	9301      	str	r3, [sp, #4]
 8008850:	ab02      	add	r3, sp, #8
 8008852:	9300      	str	r3, [sp, #0]
 8008854:	ec45 4b10 	vmov	d0, r4, r5
 8008858:	4653      	mov	r3, sl
 800885a:	4632      	mov	r2, r6
 800885c:	f001 fb30 	bl	8009ec0 <_dtoa_r>
 8008860:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008864:	4607      	mov	r7, r0
 8008866:	d102      	bne.n	800886e <__cvt+0x66>
 8008868:	f019 0f01 	tst.w	r9, #1
 800886c:	d022      	beq.n	80088b4 <__cvt+0xac>
 800886e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008872:	eb07 0906 	add.w	r9, r7, r6
 8008876:	d110      	bne.n	800889a <__cvt+0x92>
 8008878:	783b      	ldrb	r3, [r7, #0]
 800887a:	2b30      	cmp	r3, #48	; 0x30
 800887c:	d10a      	bne.n	8008894 <__cvt+0x8c>
 800887e:	2200      	movs	r2, #0
 8008880:	2300      	movs	r3, #0
 8008882:	4620      	mov	r0, r4
 8008884:	4629      	mov	r1, r5
 8008886:	f7f8 f93f 	bl	8000b08 <__aeabi_dcmpeq>
 800888a:	b918      	cbnz	r0, 8008894 <__cvt+0x8c>
 800888c:	f1c6 0601 	rsb	r6, r6, #1
 8008890:	f8ca 6000 	str.w	r6, [sl]
 8008894:	f8da 3000 	ldr.w	r3, [sl]
 8008898:	4499      	add	r9, r3
 800889a:	2200      	movs	r2, #0
 800889c:	2300      	movs	r3, #0
 800889e:	4620      	mov	r0, r4
 80088a0:	4629      	mov	r1, r5
 80088a2:	f7f8 f931 	bl	8000b08 <__aeabi_dcmpeq>
 80088a6:	b108      	cbz	r0, 80088ac <__cvt+0xa4>
 80088a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80088ac:	2230      	movs	r2, #48	; 0x30
 80088ae:	9b03      	ldr	r3, [sp, #12]
 80088b0:	454b      	cmp	r3, r9
 80088b2:	d307      	bcc.n	80088c4 <__cvt+0xbc>
 80088b4:	9b03      	ldr	r3, [sp, #12]
 80088b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088b8:	1bdb      	subs	r3, r3, r7
 80088ba:	4638      	mov	r0, r7
 80088bc:	6013      	str	r3, [r2, #0]
 80088be:	b004      	add	sp, #16
 80088c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c4:	1c59      	adds	r1, r3, #1
 80088c6:	9103      	str	r1, [sp, #12]
 80088c8:	701a      	strb	r2, [r3, #0]
 80088ca:	e7f0      	b.n	80088ae <__cvt+0xa6>

080088cc <__exponent>:
 80088cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088ce:	4603      	mov	r3, r0
 80088d0:	2900      	cmp	r1, #0
 80088d2:	bfb8      	it	lt
 80088d4:	4249      	neglt	r1, r1
 80088d6:	f803 2b02 	strb.w	r2, [r3], #2
 80088da:	bfb4      	ite	lt
 80088dc:	222d      	movlt	r2, #45	; 0x2d
 80088de:	222b      	movge	r2, #43	; 0x2b
 80088e0:	2909      	cmp	r1, #9
 80088e2:	7042      	strb	r2, [r0, #1]
 80088e4:	dd2a      	ble.n	800893c <__exponent+0x70>
 80088e6:	f10d 0407 	add.w	r4, sp, #7
 80088ea:	46a4      	mov	ip, r4
 80088ec:	270a      	movs	r7, #10
 80088ee:	46a6      	mov	lr, r4
 80088f0:	460a      	mov	r2, r1
 80088f2:	fb91 f6f7 	sdiv	r6, r1, r7
 80088f6:	fb07 1516 	mls	r5, r7, r6, r1
 80088fa:	3530      	adds	r5, #48	; 0x30
 80088fc:	2a63      	cmp	r2, #99	; 0x63
 80088fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8008902:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008906:	4631      	mov	r1, r6
 8008908:	dcf1      	bgt.n	80088ee <__exponent+0x22>
 800890a:	3130      	adds	r1, #48	; 0x30
 800890c:	f1ae 0502 	sub.w	r5, lr, #2
 8008910:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008914:	1c44      	adds	r4, r0, #1
 8008916:	4629      	mov	r1, r5
 8008918:	4561      	cmp	r1, ip
 800891a:	d30a      	bcc.n	8008932 <__exponent+0x66>
 800891c:	f10d 0209 	add.w	r2, sp, #9
 8008920:	eba2 020e 	sub.w	r2, r2, lr
 8008924:	4565      	cmp	r5, ip
 8008926:	bf88      	it	hi
 8008928:	2200      	movhi	r2, #0
 800892a:	4413      	add	r3, r2
 800892c:	1a18      	subs	r0, r3, r0
 800892e:	b003      	add	sp, #12
 8008930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008932:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008936:	f804 2f01 	strb.w	r2, [r4, #1]!
 800893a:	e7ed      	b.n	8008918 <__exponent+0x4c>
 800893c:	2330      	movs	r3, #48	; 0x30
 800893e:	3130      	adds	r1, #48	; 0x30
 8008940:	7083      	strb	r3, [r0, #2]
 8008942:	70c1      	strb	r1, [r0, #3]
 8008944:	1d03      	adds	r3, r0, #4
 8008946:	e7f1      	b.n	800892c <__exponent+0x60>

08008948 <_printf_float>:
 8008948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894c:	ed2d 8b02 	vpush	{d8}
 8008950:	b08d      	sub	sp, #52	; 0x34
 8008952:	460c      	mov	r4, r1
 8008954:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008958:	4616      	mov	r6, r2
 800895a:	461f      	mov	r7, r3
 800895c:	4605      	mov	r5, r0
 800895e:	f002 fc0d 	bl	800b17c <_localeconv_r>
 8008962:	f8d0 a000 	ldr.w	sl, [r0]
 8008966:	4650      	mov	r0, sl
 8008968:	f7f7 fc52 	bl	8000210 <strlen>
 800896c:	2300      	movs	r3, #0
 800896e:	930a      	str	r3, [sp, #40]	; 0x28
 8008970:	6823      	ldr	r3, [r4, #0]
 8008972:	9305      	str	r3, [sp, #20]
 8008974:	f8d8 3000 	ldr.w	r3, [r8]
 8008978:	f894 b018 	ldrb.w	fp, [r4, #24]
 800897c:	3307      	adds	r3, #7
 800897e:	f023 0307 	bic.w	r3, r3, #7
 8008982:	f103 0208 	add.w	r2, r3, #8
 8008986:	f8c8 2000 	str.w	r2, [r8]
 800898a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008992:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008996:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800899a:	9307      	str	r3, [sp, #28]
 800899c:	f8cd 8018 	str.w	r8, [sp, #24]
 80089a0:	ee08 0a10 	vmov	s16, r0
 80089a4:	4b9f      	ldr	r3, [pc, #636]	; (8008c24 <_printf_float+0x2dc>)
 80089a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089aa:	f04f 32ff 	mov.w	r2, #4294967295
 80089ae:	f7f8 f8dd 	bl	8000b6c <__aeabi_dcmpun>
 80089b2:	bb88      	cbnz	r0, 8008a18 <_printf_float+0xd0>
 80089b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089b8:	4b9a      	ldr	r3, [pc, #616]	; (8008c24 <_printf_float+0x2dc>)
 80089ba:	f04f 32ff 	mov.w	r2, #4294967295
 80089be:	f7f8 f8b7 	bl	8000b30 <__aeabi_dcmple>
 80089c2:	bb48      	cbnz	r0, 8008a18 <_printf_float+0xd0>
 80089c4:	2200      	movs	r2, #0
 80089c6:	2300      	movs	r3, #0
 80089c8:	4640      	mov	r0, r8
 80089ca:	4649      	mov	r1, r9
 80089cc:	f7f8 f8a6 	bl	8000b1c <__aeabi_dcmplt>
 80089d0:	b110      	cbz	r0, 80089d8 <_printf_float+0x90>
 80089d2:	232d      	movs	r3, #45	; 0x2d
 80089d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089d8:	4b93      	ldr	r3, [pc, #588]	; (8008c28 <_printf_float+0x2e0>)
 80089da:	4894      	ldr	r0, [pc, #592]	; (8008c2c <_printf_float+0x2e4>)
 80089dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80089e0:	bf94      	ite	ls
 80089e2:	4698      	movls	r8, r3
 80089e4:	4680      	movhi	r8, r0
 80089e6:	2303      	movs	r3, #3
 80089e8:	6123      	str	r3, [r4, #16]
 80089ea:	9b05      	ldr	r3, [sp, #20]
 80089ec:	f023 0204 	bic.w	r2, r3, #4
 80089f0:	6022      	str	r2, [r4, #0]
 80089f2:	f04f 0900 	mov.w	r9, #0
 80089f6:	9700      	str	r7, [sp, #0]
 80089f8:	4633      	mov	r3, r6
 80089fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80089fc:	4621      	mov	r1, r4
 80089fe:	4628      	mov	r0, r5
 8008a00:	f000 f9d8 	bl	8008db4 <_printf_common>
 8008a04:	3001      	adds	r0, #1
 8008a06:	f040 8090 	bne.w	8008b2a <_printf_float+0x1e2>
 8008a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a0e:	b00d      	add	sp, #52	; 0x34
 8008a10:	ecbd 8b02 	vpop	{d8}
 8008a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a18:	4642      	mov	r2, r8
 8008a1a:	464b      	mov	r3, r9
 8008a1c:	4640      	mov	r0, r8
 8008a1e:	4649      	mov	r1, r9
 8008a20:	f7f8 f8a4 	bl	8000b6c <__aeabi_dcmpun>
 8008a24:	b140      	cbz	r0, 8008a38 <_printf_float+0xf0>
 8008a26:	464b      	mov	r3, r9
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	bfbc      	itt	lt
 8008a2c:	232d      	movlt	r3, #45	; 0x2d
 8008a2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008a32:	487f      	ldr	r0, [pc, #508]	; (8008c30 <_printf_float+0x2e8>)
 8008a34:	4b7f      	ldr	r3, [pc, #508]	; (8008c34 <_printf_float+0x2ec>)
 8008a36:	e7d1      	b.n	80089dc <_printf_float+0x94>
 8008a38:	6863      	ldr	r3, [r4, #4]
 8008a3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008a3e:	9206      	str	r2, [sp, #24]
 8008a40:	1c5a      	adds	r2, r3, #1
 8008a42:	d13f      	bne.n	8008ac4 <_printf_float+0x17c>
 8008a44:	2306      	movs	r3, #6
 8008a46:	6063      	str	r3, [r4, #4]
 8008a48:	9b05      	ldr	r3, [sp, #20]
 8008a4a:	6861      	ldr	r1, [r4, #4]
 8008a4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008a50:	2300      	movs	r3, #0
 8008a52:	9303      	str	r3, [sp, #12]
 8008a54:	ab0a      	add	r3, sp, #40	; 0x28
 8008a56:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008a5a:	ab09      	add	r3, sp, #36	; 0x24
 8008a5c:	ec49 8b10 	vmov	d0, r8, r9
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	6022      	str	r2, [r4, #0]
 8008a64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008a68:	4628      	mov	r0, r5
 8008a6a:	f7ff fecd 	bl	8008808 <__cvt>
 8008a6e:	9b06      	ldr	r3, [sp, #24]
 8008a70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a72:	2b47      	cmp	r3, #71	; 0x47
 8008a74:	4680      	mov	r8, r0
 8008a76:	d108      	bne.n	8008a8a <_printf_float+0x142>
 8008a78:	1cc8      	adds	r0, r1, #3
 8008a7a:	db02      	blt.n	8008a82 <_printf_float+0x13a>
 8008a7c:	6863      	ldr	r3, [r4, #4]
 8008a7e:	4299      	cmp	r1, r3
 8008a80:	dd41      	ble.n	8008b06 <_printf_float+0x1be>
 8008a82:	f1ab 0b02 	sub.w	fp, fp, #2
 8008a86:	fa5f fb8b 	uxtb.w	fp, fp
 8008a8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a8e:	d820      	bhi.n	8008ad2 <_printf_float+0x18a>
 8008a90:	3901      	subs	r1, #1
 8008a92:	465a      	mov	r2, fp
 8008a94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a98:	9109      	str	r1, [sp, #36]	; 0x24
 8008a9a:	f7ff ff17 	bl	80088cc <__exponent>
 8008a9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aa0:	1813      	adds	r3, r2, r0
 8008aa2:	2a01      	cmp	r2, #1
 8008aa4:	4681      	mov	r9, r0
 8008aa6:	6123      	str	r3, [r4, #16]
 8008aa8:	dc02      	bgt.n	8008ab0 <_printf_float+0x168>
 8008aaa:	6822      	ldr	r2, [r4, #0]
 8008aac:	07d2      	lsls	r2, r2, #31
 8008aae:	d501      	bpl.n	8008ab4 <_printf_float+0x16c>
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	6123      	str	r3, [r4, #16]
 8008ab4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d09c      	beq.n	80089f6 <_printf_float+0xae>
 8008abc:	232d      	movs	r3, #45	; 0x2d
 8008abe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ac2:	e798      	b.n	80089f6 <_printf_float+0xae>
 8008ac4:	9a06      	ldr	r2, [sp, #24]
 8008ac6:	2a47      	cmp	r2, #71	; 0x47
 8008ac8:	d1be      	bne.n	8008a48 <_printf_float+0x100>
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1bc      	bne.n	8008a48 <_printf_float+0x100>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e7b9      	b.n	8008a46 <_printf_float+0xfe>
 8008ad2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008ad6:	d118      	bne.n	8008b0a <_printf_float+0x1c2>
 8008ad8:	2900      	cmp	r1, #0
 8008ada:	6863      	ldr	r3, [r4, #4]
 8008adc:	dd0b      	ble.n	8008af6 <_printf_float+0x1ae>
 8008ade:	6121      	str	r1, [r4, #16]
 8008ae0:	b913      	cbnz	r3, 8008ae8 <_printf_float+0x1a0>
 8008ae2:	6822      	ldr	r2, [r4, #0]
 8008ae4:	07d0      	lsls	r0, r2, #31
 8008ae6:	d502      	bpl.n	8008aee <_printf_float+0x1a6>
 8008ae8:	3301      	adds	r3, #1
 8008aea:	440b      	add	r3, r1
 8008aec:	6123      	str	r3, [r4, #16]
 8008aee:	65a1      	str	r1, [r4, #88]	; 0x58
 8008af0:	f04f 0900 	mov.w	r9, #0
 8008af4:	e7de      	b.n	8008ab4 <_printf_float+0x16c>
 8008af6:	b913      	cbnz	r3, 8008afe <_printf_float+0x1b6>
 8008af8:	6822      	ldr	r2, [r4, #0]
 8008afa:	07d2      	lsls	r2, r2, #31
 8008afc:	d501      	bpl.n	8008b02 <_printf_float+0x1ba>
 8008afe:	3302      	adds	r3, #2
 8008b00:	e7f4      	b.n	8008aec <_printf_float+0x1a4>
 8008b02:	2301      	movs	r3, #1
 8008b04:	e7f2      	b.n	8008aec <_printf_float+0x1a4>
 8008b06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b0c:	4299      	cmp	r1, r3
 8008b0e:	db05      	blt.n	8008b1c <_printf_float+0x1d4>
 8008b10:	6823      	ldr	r3, [r4, #0]
 8008b12:	6121      	str	r1, [r4, #16]
 8008b14:	07d8      	lsls	r0, r3, #31
 8008b16:	d5ea      	bpl.n	8008aee <_printf_float+0x1a6>
 8008b18:	1c4b      	adds	r3, r1, #1
 8008b1a:	e7e7      	b.n	8008aec <_printf_float+0x1a4>
 8008b1c:	2900      	cmp	r1, #0
 8008b1e:	bfd4      	ite	le
 8008b20:	f1c1 0202 	rsble	r2, r1, #2
 8008b24:	2201      	movgt	r2, #1
 8008b26:	4413      	add	r3, r2
 8008b28:	e7e0      	b.n	8008aec <_printf_float+0x1a4>
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	055a      	lsls	r2, r3, #21
 8008b2e:	d407      	bmi.n	8008b40 <_printf_float+0x1f8>
 8008b30:	6923      	ldr	r3, [r4, #16]
 8008b32:	4642      	mov	r2, r8
 8008b34:	4631      	mov	r1, r6
 8008b36:	4628      	mov	r0, r5
 8008b38:	47b8      	blx	r7
 8008b3a:	3001      	adds	r0, #1
 8008b3c:	d12c      	bne.n	8008b98 <_printf_float+0x250>
 8008b3e:	e764      	b.n	8008a0a <_printf_float+0xc2>
 8008b40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008b44:	f240 80e0 	bls.w	8008d08 <_printf_float+0x3c0>
 8008b48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	2300      	movs	r3, #0
 8008b50:	f7f7 ffda 	bl	8000b08 <__aeabi_dcmpeq>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	d034      	beq.n	8008bc2 <_printf_float+0x27a>
 8008b58:	4a37      	ldr	r2, [pc, #220]	; (8008c38 <_printf_float+0x2f0>)
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	4631      	mov	r1, r6
 8008b5e:	4628      	mov	r0, r5
 8008b60:	47b8      	blx	r7
 8008b62:	3001      	adds	r0, #1
 8008b64:	f43f af51 	beq.w	8008a0a <_printf_float+0xc2>
 8008b68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	db02      	blt.n	8008b76 <_printf_float+0x22e>
 8008b70:	6823      	ldr	r3, [r4, #0]
 8008b72:	07d8      	lsls	r0, r3, #31
 8008b74:	d510      	bpl.n	8008b98 <_printf_float+0x250>
 8008b76:	ee18 3a10 	vmov	r3, s16
 8008b7a:	4652      	mov	r2, sl
 8008b7c:	4631      	mov	r1, r6
 8008b7e:	4628      	mov	r0, r5
 8008b80:	47b8      	blx	r7
 8008b82:	3001      	adds	r0, #1
 8008b84:	f43f af41 	beq.w	8008a0a <_printf_float+0xc2>
 8008b88:	f04f 0800 	mov.w	r8, #0
 8008b8c:	f104 091a 	add.w	r9, r4, #26
 8008b90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b92:	3b01      	subs	r3, #1
 8008b94:	4543      	cmp	r3, r8
 8008b96:	dc09      	bgt.n	8008bac <_printf_float+0x264>
 8008b98:	6823      	ldr	r3, [r4, #0]
 8008b9a:	079b      	lsls	r3, r3, #30
 8008b9c:	f100 8105 	bmi.w	8008daa <_printf_float+0x462>
 8008ba0:	68e0      	ldr	r0, [r4, #12]
 8008ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ba4:	4298      	cmp	r0, r3
 8008ba6:	bfb8      	it	lt
 8008ba8:	4618      	movlt	r0, r3
 8008baa:	e730      	b.n	8008a0e <_printf_float+0xc6>
 8008bac:	2301      	movs	r3, #1
 8008bae:	464a      	mov	r2, r9
 8008bb0:	4631      	mov	r1, r6
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	47b8      	blx	r7
 8008bb6:	3001      	adds	r0, #1
 8008bb8:	f43f af27 	beq.w	8008a0a <_printf_float+0xc2>
 8008bbc:	f108 0801 	add.w	r8, r8, #1
 8008bc0:	e7e6      	b.n	8008b90 <_printf_float+0x248>
 8008bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	dc39      	bgt.n	8008c3c <_printf_float+0x2f4>
 8008bc8:	4a1b      	ldr	r2, [pc, #108]	; (8008c38 <_printf_float+0x2f0>)
 8008bca:	2301      	movs	r3, #1
 8008bcc:	4631      	mov	r1, r6
 8008bce:	4628      	mov	r0, r5
 8008bd0:	47b8      	blx	r7
 8008bd2:	3001      	adds	r0, #1
 8008bd4:	f43f af19 	beq.w	8008a0a <_printf_float+0xc2>
 8008bd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	d102      	bne.n	8008be6 <_printf_float+0x29e>
 8008be0:	6823      	ldr	r3, [r4, #0]
 8008be2:	07d9      	lsls	r1, r3, #31
 8008be4:	d5d8      	bpl.n	8008b98 <_printf_float+0x250>
 8008be6:	ee18 3a10 	vmov	r3, s16
 8008bea:	4652      	mov	r2, sl
 8008bec:	4631      	mov	r1, r6
 8008bee:	4628      	mov	r0, r5
 8008bf0:	47b8      	blx	r7
 8008bf2:	3001      	adds	r0, #1
 8008bf4:	f43f af09 	beq.w	8008a0a <_printf_float+0xc2>
 8008bf8:	f04f 0900 	mov.w	r9, #0
 8008bfc:	f104 0a1a 	add.w	sl, r4, #26
 8008c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c02:	425b      	negs	r3, r3
 8008c04:	454b      	cmp	r3, r9
 8008c06:	dc01      	bgt.n	8008c0c <_printf_float+0x2c4>
 8008c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c0a:	e792      	b.n	8008b32 <_printf_float+0x1ea>
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	4652      	mov	r2, sl
 8008c10:	4631      	mov	r1, r6
 8008c12:	4628      	mov	r0, r5
 8008c14:	47b8      	blx	r7
 8008c16:	3001      	adds	r0, #1
 8008c18:	f43f aef7 	beq.w	8008a0a <_printf_float+0xc2>
 8008c1c:	f109 0901 	add.w	r9, r9, #1
 8008c20:	e7ee      	b.n	8008c00 <_printf_float+0x2b8>
 8008c22:	bf00      	nop
 8008c24:	7fefffff 	.word	0x7fefffff
 8008c28:	0800cc58 	.word	0x0800cc58
 8008c2c:	0800cc5c 	.word	0x0800cc5c
 8008c30:	0800cc64 	.word	0x0800cc64
 8008c34:	0800cc60 	.word	0x0800cc60
 8008c38:	0800cc68 	.word	0x0800cc68
 8008c3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c40:	429a      	cmp	r2, r3
 8008c42:	bfa8      	it	ge
 8008c44:	461a      	movge	r2, r3
 8008c46:	2a00      	cmp	r2, #0
 8008c48:	4691      	mov	r9, r2
 8008c4a:	dc37      	bgt.n	8008cbc <_printf_float+0x374>
 8008c4c:	f04f 0b00 	mov.w	fp, #0
 8008c50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c54:	f104 021a 	add.w	r2, r4, #26
 8008c58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c5a:	9305      	str	r3, [sp, #20]
 8008c5c:	eba3 0309 	sub.w	r3, r3, r9
 8008c60:	455b      	cmp	r3, fp
 8008c62:	dc33      	bgt.n	8008ccc <_printf_float+0x384>
 8008c64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	db3b      	blt.n	8008ce4 <_printf_float+0x39c>
 8008c6c:	6823      	ldr	r3, [r4, #0]
 8008c6e:	07da      	lsls	r2, r3, #31
 8008c70:	d438      	bmi.n	8008ce4 <_printf_float+0x39c>
 8008c72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c74:	9a05      	ldr	r2, [sp, #20]
 8008c76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c78:	1a9a      	subs	r2, r3, r2
 8008c7a:	eba3 0901 	sub.w	r9, r3, r1
 8008c7e:	4591      	cmp	r9, r2
 8008c80:	bfa8      	it	ge
 8008c82:	4691      	movge	r9, r2
 8008c84:	f1b9 0f00 	cmp.w	r9, #0
 8008c88:	dc35      	bgt.n	8008cf6 <_printf_float+0x3ae>
 8008c8a:	f04f 0800 	mov.w	r8, #0
 8008c8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c92:	f104 0a1a 	add.w	sl, r4, #26
 8008c96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c9a:	1a9b      	subs	r3, r3, r2
 8008c9c:	eba3 0309 	sub.w	r3, r3, r9
 8008ca0:	4543      	cmp	r3, r8
 8008ca2:	f77f af79 	ble.w	8008b98 <_printf_float+0x250>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	4652      	mov	r2, sl
 8008caa:	4631      	mov	r1, r6
 8008cac:	4628      	mov	r0, r5
 8008cae:	47b8      	blx	r7
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	f43f aeaa 	beq.w	8008a0a <_printf_float+0xc2>
 8008cb6:	f108 0801 	add.w	r8, r8, #1
 8008cba:	e7ec      	b.n	8008c96 <_printf_float+0x34e>
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	4631      	mov	r1, r6
 8008cc0:	4642      	mov	r2, r8
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	47b8      	blx	r7
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	d1c0      	bne.n	8008c4c <_printf_float+0x304>
 8008cca:	e69e      	b.n	8008a0a <_printf_float+0xc2>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	4631      	mov	r1, r6
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	9205      	str	r2, [sp, #20]
 8008cd4:	47b8      	blx	r7
 8008cd6:	3001      	adds	r0, #1
 8008cd8:	f43f ae97 	beq.w	8008a0a <_printf_float+0xc2>
 8008cdc:	9a05      	ldr	r2, [sp, #20]
 8008cde:	f10b 0b01 	add.w	fp, fp, #1
 8008ce2:	e7b9      	b.n	8008c58 <_printf_float+0x310>
 8008ce4:	ee18 3a10 	vmov	r3, s16
 8008ce8:	4652      	mov	r2, sl
 8008cea:	4631      	mov	r1, r6
 8008cec:	4628      	mov	r0, r5
 8008cee:	47b8      	blx	r7
 8008cf0:	3001      	adds	r0, #1
 8008cf2:	d1be      	bne.n	8008c72 <_printf_float+0x32a>
 8008cf4:	e689      	b.n	8008a0a <_printf_float+0xc2>
 8008cf6:	9a05      	ldr	r2, [sp, #20]
 8008cf8:	464b      	mov	r3, r9
 8008cfa:	4442      	add	r2, r8
 8008cfc:	4631      	mov	r1, r6
 8008cfe:	4628      	mov	r0, r5
 8008d00:	47b8      	blx	r7
 8008d02:	3001      	adds	r0, #1
 8008d04:	d1c1      	bne.n	8008c8a <_printf_float+0x342>
 8008d06:	e680      	b.n	8008a0a <_printf_float+0xc2>
 8008d08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d0a:	2a01      	cmp	r2, #1
 8008d0c:	dc01      	bgt.n	8008d12 <_printf_float+0x3ca>
 8008d0e:	07db      	lsls	r3, r3, #31
 8008d10:	d538      	bpl.n	8008d84 <_printf_float+0x43c>
 8008d12:	2301      	movs	r3, #1
 8008d14:	4642      	mov	r2, r8
 8008d16:	4631      	mov	r1, r6
 8008d18:	4628      	mov	r0, r5
 8008d1a:	47b8      	blx	r7
 8008d1c:	3001      	adds	r0, #1
 8008d1e:	f43f ae74 	beq.w	8008a0a <_printf_float+0xc2>
 8008d22:	ee18 3a10 	vmov	r3, s16
 8008d26:	4652      	mov	r2, sl
 8008d28:	4631      	mov	r1, r6
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	47b8      	blx	r7
 8008d2e:	3001      	adds	r0, #1
 8008d30:	f43f ae6b 	beq.w	8008a0a <_printf_float+0xc2>
 8008d34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d38:	2200      	movs	r2, #0
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f7f7 fee4 	bl	8000b08 <__aeabi_dcmpeq>
 8008d40:	b9d8      	cbnz	r0, 8008d7a <_printf_float+0x432>
 8008d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d44:	f108 0201 	add.w	r2, r8, #1
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	4631      	mov	r1, r6
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	47b8      	blx	r7
 8008d50:	3001      	adds	r0, #1
 8008d52:	d10e      	bne.n	8008d72 <_printf_float+0x42a>
 8008d54:	e659      	b.n	8008a0a <_printf_float+0xc2>
 8008d56:	2301      	movs	r3, #1
 8008d58:	4652      	mov	r2, sl
 8008d5a:	4631      	mov	r1, r6
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	47b8      	blx	r7
 8008d60:	3001      	adds	r0, #1
 8008d62:	f43f ae52 	beq.w	8008a0a <_printf_float+0xc2>
 8008d66:	f108 0801 	add.w	r8, r8, #1
 8008d6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	4543      	cmp	r3, r8
 8008d70:	dcf1      	bgt.n	8008d56 <_printf_float+0x40e>
 8008d72:	464b      	mov	r3, r9
 8008d74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d78:	e6dc      	b.n	8008b34 <_printf_float+0x1ec>
 8008d7a:	f04f 0800 	mov.w	r8, #0
 8008d7e:	f104 0a1a 	add.w	sl, r4, #26
 8008d82:	e7f2      	b.n	8008d6a <_printf_float+0x422>
 8008d84:	2301      	movs	r3, #1
 8008d86:	4642      	mov	r2, r8
 8008d88:	e7df      	b.n	8008d4a <_printf_float+0x402>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	464a      	mov	r2, r9
 8008d8e:	4631      	mov	r1, r6
 8008d90:	4628      	mov	r0, r5
 8008d92:	47b8      	blx	r7
 8008d94:	3001      	adds	r0, #1
 8008d96:	f43f ae38 	beq.w	8008a0a <_printf_float+0xc2>
 8008d9a:	f108 0801 	add.w	r8, r8, #1
 8008d9e:	68e3      	ldr	r3, [r4, #12]
 8008da0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008da2:	1a5b      	subs	r3, r3, r1
 8008da4:	4543      	cmp	r3, r8
 8008da6:	dcf0      	bgt.n	8008d8a <_printf_float+0x442>
 8008da8:	e6fa      	b.n	8008ba0 <_printf_float+0x258>
 8008daa:	f04f 0800 	mov.w	r8, #0
 8008dae:	f104 0919 	add.w	r9, r4, #25
 8008db2:	e7f4      	b.n	8008d9e <_printf_float+0x456>

08008db4 <_printf_common>:
 8008db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008db8:	4616      	mov	r6, r2
 8008dba:	4699      	mov	r9, r3
 8008dbc:	688a      	ldr	r2, [r1, #8]
 8008dbe:	690b      	ldr	r3, [r1, #16]
 8008dc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	bfb8      	it	lt
 8008dc8:	4613      	movlt	r3, r2
 8008dca:	6033      	str	r3, [r6, #0]
 8008dcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008dd0:	4607      	mov	r7, r0
 8008dd2:	460c      	mov	r4, r1
 8008dd4:	b10a      	cbz	r2, 8008dda <_printf_common+0x26>
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	6033      	str	r3, [r6, #0]
 8008dda:	6823      	ldr	r3, [r4, #0]
 8008ddc:	0699      	lsls	r1, r3, #26
 8008dde:	bf42      	ittt	mi
 8008de0:	6833      	ldrmi	r3, [r6, #0]
 8008de2:	3302      	addmi	r3, #2
 8008de4:	6033      	strmi	r3, [r6, #0]
 8008de6:	6825      	ldr	r5, [r4, #0]
 8008de8:	f015 0506 	ands.w	r5, r5, #6
 8008dec:	d106      	bne.n	8008dfc <_printf_common+0x48>
 8008dee:	f104 0a19 	add.w	sl, r4, #25
 8008df2:	68e3      	ldr	r3, [r4, #12]
 8008df4:	6832      	ldr	r2, [r6, #0]
 8008df6:	1a9b      	subs	r3, r3, r2
 8008df8:	42ab      	cmp	r3, r5
 8008dfa:	dc26      	bgt.n	8008e4a <_printf_common+0x96>
 8008dfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e00:	1e13      	subs	r3, r2, #0
 8008e02:	6822      	ldr	r2, [r4, #0]
 8008e04:	bf18      	it	ne
 8008e06:	2301      	movne	r3, #1
 8008e08:	0692      	lsls	r2, r2, #26
 8008e0a:	d42b      	bmi.n	8008e64 <_printf_common+0xb0>
 8008e0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e10:	4649      	mov	r1, r9
 8008e12:	4638      	mov	r0, r7
 8008e14:	47c0      	blx	r8
 8008e16:	3001      	adds	r0, #1
 8008e18:	d01e      	beq.n	8008e58 <_printf_common+0xa4>
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	68e5      	ldr	r5, [r4, #12]
 8008e1e:	6832      	ldr	r2, [r6, #0]
 8008e20:	f003 0306 	and.w	r3, r3, #6
 8008e24:	2b04      	cmp	r3, #4
 8008e26:	bf08      	it	eq
 8008e28:	1aad      	subeq	r5, r5, r2
 8008e2a:	68a3      	ldr	r3, [r4, #8]
 8008e2c:	6922      	ldr	r2, [r4, #16]
 8008e2e:	bf0c      	ite	eq
 8008e30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e34:	2500      	movne	r5, #0
 8008e36:	4293      	cmp	r3, r2
 8008e38:	bfc4      	itt	gt
 8008e3a:	1a9b      	subgt	r3, r3, r2
 8008e3c:	18ed      	addgt	r5, r5, r3
 8008e3e:	2600      	movs	r6, #0
 8008e40:	341a      	adds	r4, #26
 8008e42:	42b5      	cmp	r5, r6
 8008e44:	d11a      	bne.n	8008e7c <_printf_common+0xc8>
 8008e46:	2000      	movs	r0, #0
 8008e48:	e008      	b.n	8008e5c <_printf_common+0xa8>
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	4652      	mov	r2, sl
 8008e4e:	4649      	mov	r1, r9
 8008e50:	4638      	mov	r0, r7
 8008e52:	47c0      	blx	r8
 8008e54:	3001      	adds	r0, #1
 8008e56:	d103      	bne.n	8008e60 <_printf_common+0xac>
 8008e58:	f04f 30ff 	mov.w	r0, #4294967295
 8008e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e60:	3501      	adds	r5, #1
 8008e62:	e7c6      	b.n	8008df2 <_printf_common+0x3e>
 8008e64:	18e1      	adds	r1, r4, r3
 8008e66:	1c5a      	adds	r2, r3, #1
 8008e68:	2030      	movs	r0, #48	; 0x30
 8008e6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e6e:	4422      	add	r2, r4
 8008e70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e78:	3302      	adds	r3, #2
 8008e7a:	e7c7      	b.n	8008e0c <_printf_common+0x58>
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	4622      	mov	r2, r4
 8008e80:	4649      	mov	r1, r9
 8008e82:	4638      	mov	r0, r7
 8008e84:	47c0      	blx	r8
 8008e86:	3001      	adds	r0, #1
 8008e88:	d0e6      	beq.n	8008e58 <_printf_common+0xa4>
 8008e8a:	3601      	adds	r6, #1
 8008e8c:	e7d9      	b.n	8008e42 <_printf_common+0x8e>
	...

08008e90 <_printf_i>:
 8008e90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e94:	7e0f      	ldrb	r7, [r1, #24]
 8008e96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e98:	2f78      	cmp	r7, #120	; 0x78
 8008e9a:	4691      	mov	r9, r2
 8008e9c:	4680      	mov	r8, r0
 8008e9e:	460c      	mov	r4, r1
 8008ea0:	469a      	mov	sl, r3
 8008ea2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ea6:	d807      	bhi.n	8008eb8 <_printf_i+0x28>
 8008ea8:	2f62      	cmp	r7, #98	; 0x62
 8008eaa:	d80a      	bhi.n	8008ec2 <_printf_i+0x32>
 8008eac:	2f00      	cmp	r7, #0
 8008eae:	f000 80d8 	beq.w	8009062 <_printf_i+0x1d2>
 8008eb2:	2f58      	cmp	r7, #88	; 0x58
 8008eb4:	f000 80a3 	beq.w	8008ffe <_printf_i+0x16e>
 8008eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ebc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ec0:	e03a      	b.n	8008f38 <_printf_i+0xa8>
 8008ec2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ec6:	2b15      	cmp	r3, #21
 8008ec8:	d8f6      	bhi.n	8008eb8 <_printf_i+0x28>
 8008eca:	a101      	add	r1, pc, #4	; (adr r1, 8008ed0 <_printf_i+0x40>)
 8008ecc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ed0:	08008f29 	.word	0x08008f29
 8008ed4:	08008f3d 	.word	0x08008f3d
 8008ed8:	08008eb9 	.word	0x08008eb9
 8008edc:	08008eb9 	.word	0x08008eb9
 8008ee0:	08008eb9 	.word	0x08008eb9
 8008ee4:	08008eb9 	.word	0x08008eb9
 8008ee8:	08008f3d 	.word	0x08008f3d
 8008eec:	08008eb9 	.word	0x08008eb9
 8008ef0:	08008eb9 	.word	0x08008eb9
 8008ef4:	08008eb9 	.word	0x08008eb9
 8008ef8:	08008eb9 	.word	0x08008eb9
 8008efc:	08009049 	.word	0x08009049
 8008f00:	08008f6d 	.word	0x08008f6d
 8008f04:	0800902b 	.word	0x0800902b
 8008f08:	08008eb9 	.word	0x08008eb9
 8008f0c:	08008eb9 	.word	0x08008eb9
 8008f10:	0800906b 	.word	0x0800906b
 8008f14:	08008eb9 	.word	0x08008eb9
 8008f18:	08008f6d 	.word	0x08008f6d
 8008f1c:	08008eb9 	.word	0x08008eb9
 8008f20:	08008eb9 	.word	0x08008eb9
 8008f24:	08009033 	.word	0x08009033
 8008f28:	682b      	ldr	r3, [r5, #0]
 8008f2a:	1d1a      	adds	r2, r3, #4
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	602a      	str	r2, [r5, #0]
 8008f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e0a3      	b.n	8009084 <_printf_i+0x1f4>
 8008f3c:	6820      	ldr	r0, [r4, #0]
 8008f3e:	6829      	ldr	r1, [r5, #0]
 8008f40:	0606      	lsls	r6, r0, #24
 8008f42:	f101 0304 	add.w	r3, r1, #4
 8008f46:	d50a      	bpl.n	8008f5e <_printf_i+0xce>
 8008f48:	680e      	ldr	r6, [r1, #0]
 8008f4a:	602b      	str	r3, [r5, #0]
 8008f4c:	2e00      	cmp	r6, #0
 8008f4e:	da03      	bge.n	8008f58 <_printf_i+0xc8>
 8008f50:	232d      	movs	r3, #45	; 0x2d
 8008f52:	4276      	negs	r6, r6
 8008f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f58:	485e      	ldr	r0, [pc, #376]	; (80090d4 <_printf_i+0x244>)
 8008f5a:	230a      	movs	r3, #10
 8008f5c:	e019      	b.n	8008f92 <_printf_i+0x102>
 8008f5e:	680e      	ldr	r6, [r1, #0]
 8008f60:	602b      	str	r3, [r5, #0]
 8008f62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f66:	bf18      	it	ne
 8008f68:	b236      	sxthne	r6, r6
 8008f6a:	e7ef      	b.n	8008f4c <_printf_i+0xbc>
 8008f6c:	682b      	ldr	r3, [r5, #0]
 8008f6e:	6820      	ldr	r0, [r4, #0]
 8008f70:	1d19      	adds	r1, r3, #4
 8008f72:	6029      	str	r1, [r5, #0]
 8008f74:	0601      	lsls	r1, r0, #24
 8008f76:	d501      	bpl.n	8008f7c <_printf_i+0xec>
 8008f78:	681e      	ldr	r6, [r3, #0]
 8008f7a:	e002      	b.n	8008f82 <_printf_i+0xf2>
 8008f7c:	0646      	lsls	r6, r0, #25
 8008f7e:	d5fb      	bpl.n	8008f78 <_printf_i+0xe8>
 8008f80:	881e      	ldrh	r6, [r3, #0]
 8008f82:	4854      	ldr	r0, [pc, #336]	; (80090d4 <_printf_i+0x244>)
 8008f84:	2f6f      	cmp	r7, #111	; 0x6f
 8008f86:	bf0c      	ite	eq
 8008f88:	2308      	moveq	r3, #8
 8008f8a:	230a      	movne	r3, #10
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f92:	6865      	ldr	r5, [r4, #4]
 8008f94:	60a5      	str	r5, [r4, #8]
 8008f96:	2d00      	cmp	r5, #0
 8008f98:	bfa2      	ittt	ge
 8008f9a:	6821      	ldrge	r1, [r4, #0]
 8008f9c:	f021 0104 	bicge.w	r1, r1, #4
 8008fa0:	6021      	strge	r1, [r4, #0]
 8008fa2:	b90e      	cbnz	r6, 8008fa8 <_printf_i+0x118>
 8008fa4:	2d00      	cmp	r5, #0
 8008fa6:	d04d      	beq.n	8009044 <_printf_i+0x1b4>
 8008fa8:	4615      	mov	r5, r2
 8008faa:	fbb6 f1f3 	udiv	r1, r6, r3
 8008fae:	fb03 6711 	mls	r7, r3, r1, r6
 8008fb2:	5dc7      	ldrb	r7, [r0, r7]
 8008fb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008fb8:	4637      	mov	r7, r6
 8008fba:	42bb      	cmp	r3, r7
 8008fbc:	460e      	mov	r6, r1
 8008fbe:	d9f4      	bls.n	8008faa <_printf_i+0x11a>
 8008fc0:	2b08      	cmp	r3, #8
 8008fc2:	d10b      	bne.n	8008fdc <_printf_i+0x14c>
 8008fc4:	6823      	ldr	r3, [r4, #0]
 8008fc6:	07de      	lsls	r6, r3, #31
 8008fc8:	d508      	bpl.n	8008fdc <_printf_i+0x14c>
 8008fca:	6923      	ldr	r3, [r4, #16]
 8008fcc:	6861      	ldr	r1, [r4, #4]
 8008fce:	4299      	cmp	r1, r3
 8008fd0:	bfde      	ittt	le
 8008fd2:	2330      	movle	r3, #48	; 0x30
 8008fd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008fd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008fdc:	1b52      	subs	r2, r2, r5
 8008fde:	6122      	str	r2, [r4, #16]
 8008fe0:	f8cd a000 	str.w	sl, [sp]
 8008fe4:	464b      	mov	r3, r9
 8008fe6:	aa03      	add	r2, sp, #12
 8008fe8:	4621      	mov	r1, r4
 8008fea:	4640      	mov	r0, r8
 8008fec:	f7ff fee2 	bl	8008db4 <_printf_common>
 8008ff0:	3001      	adds	r0, #1
 8008ff2:	d14c      	bne.n	800908e <_printf_i+0x1fe>
 8008ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff8:	b004      	add	sp, #16
 8008ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ffe:	4835      	ldr	r0, [pc, #212]	; (80090d4 <_printf_i+0x244>)
 8009000:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009004:	6829      	ldr	r1, [r5, #0]
 8009006:	6823      	ldr	r3, [r4, #0]
 8009008:	f851 6b04 	ldr.w	r6, [r1], #4
 800900c:	6029      	str	r1, [r5, #0]
 800900e:	061d      	lsls	r5, r3, #24
 8009010:	d514      	bpl.n	800903c <_printf_i+0x1ac>
 8009012:	07df      	lsls	r7, r3, #31
 8009014:	bf44      	itt	mi
 8009016:	f043 0320 	orrmi.w	r3, r3, #32
 800901a:	6023      	strmi	r3, [r4, #0]
 800901c:	b91e      	cbnz	r6, 8009026 <_printf_i+0x196>
 800901e:	6823      	ldr	r3, [r4, #0]
 8009020:	f023 0320 	bic.w	r3, r3, #32
 8009024:	6023      	str	r3, [r4, #0]
 8009026:	2310      	movs	r3, #16
 8009028:	e7b0      	b.n	8008f8c <_printf_i+0xfc>
 800902a:	6823      	ldr	r3, [r4, #0]
 800902c:	f043 0320 	orr.w	r3, r3, #32
 8009030:	6023      	str	r3, [r4, #0]
 8009032:	2378      	movs	r3, #120	; 0x78
 8009034:	4828      	ldr	r0, [pc, #160]	; (80090d8 <_printf_i+0x248>)
 8009036:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800903a:	e7e3      	b.n	8009004 <_printf_i+0x174>
 800903c:	0659      	lsls	r1, r3, #25
 800903e:	bf48      	it	mi
 8009040:	b2b6      	uxthmi	r6, r6
 8009042:	e7e6      	b.n	8009012 <_printf_i+0x182>
 8009044:	4615      	mov	r5, r2
 8009046:	e7bb      	b.n	8008fc0 <_printf_i+0x130>
 8009048:	682b      	ldr	r3, [r5, #0]
 800904a:	6826      	ldr	r6, [r4, #0]
 800904c:	6961      	ldr	r1, [r4, #20]
 800904e:	1d18      	adds	r0, r3, #4
 8009050:	6028      	str	r0, [r5, #0]
 8009052:	0635      	lsls	r5, r6, #24
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	d501      	bpl.n	800905c <_printf_i+0x1cc>
 8009058:	6019      	str	r1, [r3, #0]
 800905a:	e002      	b.n	8009062 <_printf_i+0x1d2>
 800905c:	0670      	lsls	r0, r6, #25
 800905e:	d5fb      	bpl.n	8009058 <_printf_i+0x1c8>
 8009060:	8019      	strh	r1, [r3, #0]
 8009062:	2300      	movs	r3, #0
 8009064:	6123      	str	r3, [r4, #16]
 8009066:	4615      	mov	r5, r2
 8009068:	e7ba      	b.n	8008fe0 <_printf_i+0x150>
 800906a:	682b      	ldr	r3, [r5, #0]
 800906c:	1d1a      	adds	r2, r3, #4
 800906e:	602a      	str	r2, [r5, #0]
 8009070:	681d      	ldr	r5, [r3, #0]
 8009072:	6862      	ldr	r2, [r4, #4]
 8009074:	2100      	movs	r1, #0
 8009076:	4628      	mov	r0, r5
 8009078:	f7f7 f8d2 	bl	8000220 <memchr>
 800907c:	b108      	cbz	r0, 8009082 <_printf_i+0x1f2>
 800907e:	1b40      	subs	r0, r0, r5
 8009080:	6060      	str	r0, [r4, #4]
 8009082:	6863      	ldr	r3, [r4, #4]
 8009084:	6123      	str	r3, [r4, #16]
 8009086:	2300      	movs	r3, #0
 8009088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800908c:	e7a8      	b.n	8008fe0 <_printf_i+0x150>
 800908e:	6923      	ldr	r3, [r4, #16]
 8009090:	462a      	mov	r2, r5
 8009092:	4649      	mov	r1, r9
 8009094:	4640      	mov	r0, r8
 8009096:	47d0      	blx	sl
 8009098:	3001      	adds	r0, #1
 800909a:	d0ab      	beq.n	8008ff4 <_printf_i+0x164>
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	079b      	lsls	r3, r3, #30
 80090a0:	d413      	bmi.n	80090ca <_printf_i+0x23a>
 80090a2:	68e0      	ldr	r0, [r4, #12]
 80090a4:	9b03      	ldr	r3, [sp, #12]
 80090a6:	4298      	cmp	r0, r3
 80090a8:	bfb8      	it	lt
 80090aa:	4618      	movlt	r0, r3
 80090ac:	e7a4      	b.n	8008ff8 <_printf_i+0x168>
 80090ae:	2301      	movs	r3, #1
 80090b0:	4632      	mov	r2, r6
 80090b2:	4649      	mov	r1, r9
 80090b4:	4640      	mov	r0, r8
 80090b6:	47d0      	blx	sl
 80090b8:	3001      	adds	r0, #1
 80090ba:	d09b      	beq.n	8008ff4 <_printf_i+0x164>
 80090bc:	3501      	adds	r5, #1
 80090be:	68e3      	ldr	r3, [r4, #12]
 80090c0:	9903      	ldr	r1, [sp, #12]
 80090c2:	1a5b      	subs	r3, r3, r1
 80090c4:	42ab      	cmp	r3, r5
 80090c6:	dcf2      	bgt.n	80090ae <_printf_i+0x21e>
 80090c8:	e7eb      	b.n	80090a2 <_printf_i+0x212>
 80090ca:	2500      	movs	r5, #0
 80090cc:	f104 0619 	add.w	r6, r4, #25
 80090d0:	e7f5      	b.n	80090be <_printf_i+0x22e>
 80090d2:	bf00      	nop
 80090d4:	0800cc6a 	.word	0x0800cc6a
 80090d8:	0800cc7b 	.word	0x0800cc7b

080090dc <sniprintf>:
 80090dc:	b40c      	push	{r2, r3}
 80090de:	b530      	push	{r4, r5, lr}
 80090e0:	4b17      	ldr	r3, [pc, #92]	; (8009140 <sniprintf+0x64>)
 80090e2:	1e0c      	subs	r4, r1, #0
 80090e4:	681d      	ldr	r5, [r3, #0]
 80090e6:	b09d      	sub	sp, #116	; 0x74
 80090e8:	da08      	bge.n	80090fc <sniprintf+0x20>
 80090ea:	238b      	movs	r3, #139	; 0x8b
 80090ec:	602b      	str	r3, [r5, #0]
 80090ee:	f04f 30ff 	mov.w	r0, #4294967295
 80090f2:	b01d      	add	sp, #116	; 0x74
 80090f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090f8:	b002      	add	sp, #8
 80090fa:	4770      	bx	lr
 80090fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009100:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009104:	bf14      	ite	ne
 8009106:	f104 33ff 	addne.w	r3, r4, #4294967295
 800910a:	4623      	moveq	r3, r4
 800910c:	9304      	str	r3, [sp, #16]
 800910e:	9307      	str	r3, [sp, #28]
 8009110:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009114:	9002      	str	r0, [sp, #8]
 8009116:	9006      	str	r0, [sp, #24]
 8009118:	f8ad 3016 	strh.w	r3, [sp, #22]
 800911c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800911e:	ab21      	add	r3, sp, #132	; 0x84
 8009120:	a902      	add	r1, sp, #8
 8009122:	4628      	mov	r0, r5
 8009124:	9301      	str	r3, [sp, #4]
 8009126:	f002 fe69 	bl	800bdfc <_svfiprintf_r>
 800912a:	1c43      	adds	r3, r0, #1
 800912c:	bfbc      	itt	lt
 800912e:	238b      	movlt	r3, #139	; 0x8b
 8009130:	602b      	strlt	r3, [r5, #0]
 8009132:	2c00      	cmp	r4, #0
 8009134:	d0dd      	beq.n	80090f2 <sniprintf+0x16>
 8009136:	9b02      	ldr	r3, [sp, #8]
 8009138:	2200      	movs	r2, #0
 800913a:	701a      	strb	r2, [r3, #0]
 800913c:	e7d9      	b.n	80090f2 <sniprintf+0x16>
 800913e:	bf00      	nop
 8009140:	2000001c 	.word	0x2000001c

08009144 <sulp>:
 8009144:	b570      	push	{r4, r5, r6, lr}
 8009146:	4604      	mov	r4, r0
 8009148:	460d      	mov	r5, r1
 800914a:	ec45 4b10 	vmov	d0, r4, r5
 800914e:	4616      	mov	r6, r2
 8009150:	f002 fbb2 	bl	800b8b8 <__ulp>
 8009154:	ec51 0b10 	vmov	r0, r1, d0
 8009158:	b17e      	cbz	r6, 800917a <sulp+0x36>
 800915a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800915e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009162:	2b00      	cmp	r3, #0
 8009164:	dd09      	ble.n	800917a <sulp+0x36>
 8009166:	051b      	lsls	r3, r3, #20
 8009168:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800916c:	2400      	movs	r4, #0
 800916e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009172:	4622      	mov	r2, r4
 8009174:	462b      	mov	r3, r5
 8009176:	f7f7 fa5f 	bl	8000638 <__aeabi_dmul>
 800917a:	bd70      	pop	{r4, r5, r6, pc}
 800917c:	0000      	movs	r0, r0
	...

08009180 <_strtod_l>:
 8009180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009184:	ed2d 8b02 	vpush	{d8}
 8009188:	b09d      	sub	sp, #116	; 0x74
 800918a:	461f      	mov	r7, r3
 800918c:	2300      	movs	r3, #0
 800918e:	9318      	str	r3, [sp, #96]	; 0x60
 8009190:	4ba2      	ldr	r3, [pc, #648]	; (800941c <_strtod_l+0x29c>)
 8009192:	9213      	str	r2, [sp, #76]	; 0x4c
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	9305      	str	r3, [sp, #20]
 8009198:	4604      	mov	r4, r0
 800919a:	4618      	mov	r0, r3
 800919c:	4688      	mov	r8, r1
 800919e:	f7f7 f837 	bl	8000210 <strlen>
 80091a2:	f04f 0a00 	mov.w	sl, #0
 80091a6:	4605      	mov	r5, r0
 80091a8:	f04f 0b00 	mov.w	fp, #0
 80091ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80091b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091b2:	781a      	ldrb	r2, [r3, #0]
 80091b4:	2a2b      	cmp	r2, #43	; 0x2b
 80091b6:	d04e      	beq.n	8009256 <_strtod_l+0xd6>
 80091b8:	d83b      	bhi.n	8009232 <_strtod_l+0xb2>
 80091ba:	2a0d      	cmp	r2, #13
 80091bc:	d834      	bhi.n	8009228 <_strtod_l+0xa8>
 80091be:	2a08      	cmp	r2, #8
 80091c0:	d834      	bhi.n	800922c <_strtod_l+0xac>
 80091c2:	2a00      	cmp	r2, #0
 80091c4:	d03e      	beq.n	8009244 <_strtod_l+0xc4>
 80091c6:	2300      	movs	r3, #0
 80091c8:	930a      	str	r3, [sp, #40]	; 0x28
 80091ca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80091cc:	7833      	ldrb	r3, [r6, #0]
 80091ce:	2b30      	cmp	r3, #48	; 0x30
 80091d0:	f040 80b0 	bne.w	8009334 <_strtod_l+0x1b4>
 80091d4:	7873      	ldrb	r3, [r6, #1]
 80091d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80091da:	2b58      	cmp	r3, #88	; 0x58
 80091dc:	d168      	bne.n	80092b0 <_strtod_l+0x130>
 80091de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091e0:	9301      	str	r3, [sp, #4]
 80091e2:	ab18      	add	r3, sp, #96	; 0x60
 80091e4:	9702      	str	r7, [sp, #8]
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	4a8d      	ldr	r2, [pc, #564]	; (8009420 <_strtod_l+0x2a0>)
 80091ea:	ab19      	add	r3, sp, #100	; 0x64
 80091ec:	a917      	add	r1, sp, #92	; 0x5c
 80091ee:	4620      	mov	r0, r4
 80091f0:	f001 fcbc 	bl	800ab6c <__gethex>
 80091f4:	f010 0707 	ands.w	r7, r0, #7
 80091f8:	4605      	mov	r5, r0
 80091fa:	d005      	beq.n	8009208 <_strtod_l+0x88>
 80091fc:	2f06      	cmp	r7, #6
 80091fe:	d12c      	bne.n	800925a <_strtod_l+0xda>
 8009200:	3601      	adds	r6, #1
 8009202:	2300      	movs	r3, #0
 8009204:	9617      	str	r6, [sp, #92]	; 0x5c
 8009206:	930a      	str	r3, [sp, #40]	; 0x28
 8009208:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800920a:	2b00      	cmp	r3, #0
 800920c:	f040 8590 	bne.w	8009d30 <_strtod_l+0xbb0>
 8009210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009212:	b1eb      	cbz	r3, 8009250 <_strtod_l+0xd0>
 8009214:	4652      	mov	r2, sl
 8009216:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800921a:	ec43 2b10 	vmov	d0, r2, r3
 800921e:	b01d      	add	sp, #116	; 0x74
 8009220:	ecbd 8b02 	vpop	{d8}
 8009224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009228:	2a20      	cmp	r2, #32
 800922a:	d1cc      	bne.n	80091c6 <_strtod_l+0x46>
 800922c:	3301      	adds	r3, #1
 800922e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009230:	e7be      	b.n	80091b0 <_strtod_l+0x30>
 8009232:	2a2d      	cmp	r2, #45	; 0x2d
 8009234:	d1c7      	bne.n	80091c6 <_strtod_l+0x46>
 8009236:	2201      	movs	r2, #1
 8009238:	920a      	str	r2, [sp, #40]	; 0x28
 800923a:	1c5a      	adds	r2, r3, #1
 800923c:	9217      	str	r2, [sp, #92]	; 0x5c
 800923e:	785b      	ldrb	r3, [r3, #1]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1c2      	bne.n	80091ca <_strtod_l+0x4a>
 8009244:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009246:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800924a:	2b00      	cmp	r3, #0
 800924c:	f040 856e 	bne.w	8009d2c <_strtod_l+0xbac>
 8009250:	4652      	mov	r2, sl
 8009252:	465b      	mov	r3, fp
 8009254:	e7e1      	b.n	800921a <_strtod_l+0x9a>
 8009256:	2200      	movs	r2, #0
 8009258:	e7ee      	b.n	8009238 <_strtod_l+0xb8>
 800925a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800925c:	b13a      	cbz	r2, 800926e <_strtod_l+0xee>
 800925e:	2135      	movs	r1, #53	; 0x35
 8009260:	a81a      	add	r0, sp, #104	; 0x68
 8009262:	f002 fc34 	bl	800bace <__copybits>
 8009266:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009268:	4620      	mov	r0, r4
 800926a:	f001 fff3 	bl	800b254 <_Bfree>
 800926e:	3f01      	subs	r7, #1
 8009270:	2f04      	cmp	r7, #4
 8009272:	d806      	bhi.n	8009282 <_strtod_l+0x102>
 8009274:	e8df f007 	tbb	[pc, r7]
 8009278:	1714030a 	.word	0x1714030a
 800927c:	0a          	.byte	0x0a
 800927d:	00          	.byte	0x00
 800927e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009282:	0728      	lsls	r0, r5, #28
 8009284:	d5c0      	bpl.n	8009208 <_strtod_l+0x88>
 8009286:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800928a:	e7bd      	b.n	8009208 <_strtod_l+0x88>
 800928c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009290:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009292:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009296:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800929a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800929e:	e7f0      	b.n	8009282 <_strtod_l+0x102>
 80092a0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009424 <_strtod_l+0x2a4>
 80092a4:	e7ed      	b.n	8009282 <_strtod_l+0x102>
 80092a6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80092aa:	f04f 3aff 	mov.w	sl, #4294967295
 80092ae:	e7e8      	b.n	8009282 <_strtod_l+0x102>
 80092b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092b2:	1c5a      	adds	r2, r3, #1
 80092b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80092b6:	785b      	ldrb	r3, [r3, #1]
 80092b8:	2b30      	cmp	r3, #48	; 0x30
 80092ba:	d0f9      	beq.n	80092b0 <_strtod_l+0x130>
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d0a3      	beq.n	8009208 <_strtod_l+0x88>
 80092c0:	2301      	movs	r3, #1
 80092c2:	f04f 0900 	mov.w	r9, #0
 80092c6:	9304      	str	r3, [sp, #16]
 80092c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092ca:	9308      	str	r3, [sp, #32]
 80092cc:	f8cd 901c 	str.w	r9, [sp, #28]
 80092d0:	464f      	mov	r7, r9
 80092d2:	220a      	movs	r2, #10
 80092d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80092d6:	7806      	ldrb	r6, [r0, #0]
 80092d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80092dc:	b2d9      	uxtb	r1, r3
 80092de:	2909      	cmp	r1, #9
 80092e0:	d92a      	bls.n	8009338 <_strtod_l+0x1b8>
 80092e2:	9905      	ldr	r1, [sp, #20]
 80092e4:	462a      	mov	r2, r5
 80092e6:	f002 fea3 	bl	800c030 <strncmp>
 80092ea:	b398      	cbz	r0, 8009354 <_strtod_l+0x1d4>
 80092ec:	2000      	movs	r0, #0
 80092ee:	4632      	mov	r2, r6
 80092f0:	463d      	mov	r5, r7
 80092f2:	9005      	str	r0, [sp, #20]
 80092f4:	4603      	mov	r3, r0
 80092f6:	2a65      	cmp	r2, #101	; 0x65
 80092f8:	d001      	beq.n	80092fe <_strtod_l+0x17e>
 80092fa:	2a45      	cmp	r2, #69	; 0x45
 80092fc:	d118      	bne.n	8009330 <_strtod_l+0x1b0>
 80092fe:	b91d      	cbnz	r5, 8009308 <_strtod_l+0x188>
 8009300:	9a04      	ldr	r2, [sp, #16]
 8009302:	4302      	orrs	r2, r0
 8009304:	d09e      	beq.n	8009244 <_strtod_l+0xc4>
 8009306:	2500      	movs	r5, #0
 8009308:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800930c:	f108 0201 	add.w	r2, r8, #1
 8009310:	9217      	str	r2, [sp, #92]	; 0x5c
 8009312:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009316:	2a2b      	cmp	r2, #43	; 0x2b
 8009318:	d075      	beq.n	8009406 <_strtod_l+0x286>
 800931a:	2a2d      	cmp	r2, #45	; 0x2d
 800931c:	d07b      	beq.n	8009416 <_strtod_l+0x296>
 800931e:	f04f 0c00 	mov.w	ip, #0
 8009322:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009326:	2909      	cmp	r1, #9
 8009328:	f240 8082 	bls.w	8009430 <_strtod_l+0x2b0>
 800932c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009330:	2600      	movs	r6, #0
 8009332:	e09d      	b.n	8009470 <_strtod_l+0x2f0>
 8009334:	2300      	movs	r3, #0
 8009336:	e7c4      	b.n	80092c2 <_strtod_l+0x142>
 8009338:	2f08      	cmp	r7, #8
 800933a:	bfd8      	it	le
 800933c:	9907      	ldrle	r1, [sp, #28]
 800933e:	f100 0001 	add.w	r0, r0, #1
 8009342:	bfda      	itte	le
 8009344:	fb02 3301 	mlale	r3, r2, r1, r3
 8009348:	9307      	strle	r3, [sp, #28]
 800934a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800934e:	3701      	adds	r7, #1
 8009350:	9017      	str	r0, [sp, #92]	; 0x5c
 8009352:	e7bf      	b.n	80092d4 <_strtod_l+0x154>
 8009354:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009356:	195a      	adds	r2, r3, r5
 8009358:	9217      	str	r2, [sp, #92]	; 0x5c
 800935a:	5d5a      	ldrb	r2, [r3, r5]
 800935c:	2f00      	cmp	r7, #0
 800935e:	d037      	beq.n	80093d0 <_strtod_l+0x250>
 8009360:	9005      	str	r0, [sp, #20]
 8009362:	463d      	mov	r5, r7
 8009364:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009368:	2b09      	cmp	r3, #9
 800936a:	d912      	bls.n	8009392 <_strtod_l+0x212>
 800936c:	2301      	movs	r3, #1
 800936e:	e7c2      	b.n	80092f6 <_strtod_l+0x176>
 8009370:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009372:	1c5a      	adds	r2, r3, #1
 8009374:	9217      	str	r2, [sp, #92]	; 0x5c
 8009376:	785a      	ldrb	r2, [r3, #1]
 8009378:	3001      	adds	r0, #1
 800937a:	2a30      	cmp	r2, #48	; 0x30
 800937c:	d0f8      	beq.n	8009370 <_strtod_l+0x1f0>
 800937e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009382:	2b08      	cmp	r3, #8
 8009384:	f200 84d9 	bhi.w	8009d3a <_strtod_l+0xbba>
 8009388:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800938a:	9005      	str	r0, [sp, #20]
 800938c:	2000      	movs	r0, #0
 800938e:	9308      	str	r3, [sp, #32]
 8009390:	4605      	mov	r5, r0
 8009392:	3a30      	subs	r2, #48	; 0x30
 8009394:	f100 0301 	add.w	r3, r0, #1
 8009398:	d014      	beq.n	80093c4 <_strtod_l+0x244>
 800939a:	9905      	ldr	r1, [sp, #20]
 800939c:	4419      	add	r1, r3
 800939e:	9105      	str	r1, [sp, #20]
 80093a0:	462b      	mov	r3, r5
 80093a2:	eb00 0e05 	add.w	lr, r0, r5
 80093a6:	210a      	movs	r1, #10
 80093a8:	4573      	cmp	r3, lr
 80093aa:	d113      	bne.n	80093d4 <_strtod_l+0x254>
 80093ac:	182b      	adds	r3, r5, r0
 80093ae:	2b08      	cmp	r3, #8
 80093b0:	f105 0501 	add.w	r5, r5, #1
 80093b4:	4405      	add	r5, r0
 80093b6:	dc1c      	bgt.n	80093f2 <_strtod_l+0x272>
 80093b8:	9907      	ldr	r1, [sp, #28]
 80093ba:	230a      	movs	r3, #10
 80093bc:	fb03 2301 	mla	r3, r3, r1, r2
 80093c0:	9307      	str	r3, [sp, #28]
 80093c2:	2300      	movs	r3, #0
 80093c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80093c6:	1c51      	adds	r1, r2, #1
 80093c8:	9117      	str	r1, [sp, #92]	; 0x5c
 80093ca:	7852      	ldrb	r2, [r2, #1]
 80093cc:	4618      	mov	r0, r3
 80093ce:	e7c9      	b.n	8009364 <_strtod_l+0x1e4>
 80093d0:	4638      	mov	r0, r7
 80093d2:	e7d2      	b.n	800937a <_strtod_l+0x1fa>
 80093d4:	2b08      	cmp	r3, #8
 80093d6:	dc04      	bgt.n	80093e2 <_strtod_l+0x262>
 80093d8:	9e07      	ldr	r6, [sp, #28]
 80093da:	434e      	muls	r6, r1
 80093dc:	9607      	str	r6, [sp, #28]
 80093de:	3301      	adds	r3, #1
 80093e0:	e7e2      	b.n	80093a8 <_strtod_l+0x228>
 80093e2:	f103 0c01 	add.w	ip, r3, #1
 80093e6:	f1bc 0f10 	cmp.w	ip, #16
 80093ea:	bfd8      	it	le
 80093ec:	fb01 f909 	mulle.w	r9, r1, r9
 80093f0:	e7f5      	b.n	80093de <_strtod_l+0x25e>
 80093f2:	2d10      	cmp	r5, #16
 80093f4:	bfdc      	itt	le
 80093f6:	230a      	movle	r3, #10
 80093f8:	fb03 2909 	mlale	r9, r3, r9, r2
 80093fc:	e7e1      	b.n	80093c2 <_strtod_l+0x242>
 80093fe:	2300      	movs	r3, #0
 8009400:	9305      	str	r3, [sp, #20]
 8009402:	2301      	movs	r3, #1
 8009404:	e77c      	b.n	8009300 <_strtod_l+0x180>
 8009406:	f04f 0c00 	mov.w	ip, #0
 800940a:	f108 0202 	add.w	r2, r8, #2
 800940e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009410:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009414:	e785      	b.n	8009322 <_strtod_l+0x1a2>
 8009416:	f04f 0c01 	mov.w	ip, #1
 800941a:	e7f6      	b.n	800940a <_strtod_l+0x28a>
 800941c:	0800cdd8 	.word	0x0800cdd8
 8009420:	0800cc8c 	.word	0x0800cc8c
 8009424:	7ff00000 	.word	0x7ff00000
 8009428:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800942a:	1c51      	adds	r1, r2, #1
 800942c:	9117      	str	r1, [sp, #92]	; 0x5c
 800942e:	7852      	ldrb	r2, [r2, #1]
 8009430:	2a30      	cmp	r2, #48	; 0x30
 8009432:	d0f9      	beq.n	8009428 <_strtod_l+0x2a8>
 8009434:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009438:	2908      	cmp	r1, #8
 800943a:	f63f af79 	bhi.w	8009330 <_strtod_l+0x1b0>
 800943e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009442:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009444:	9206      	str	r2, [sp, #24]
 8009446:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009448:	1c51      	adds	r1, r2, #1
 800944a:	9117      	str	r1, [sp, #92]	; 0x5c
 800944c:	7852      	ldrb	r2, [r2, #1]
 800944e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009452:	2e09      	cmp	r6, #9
 8009454:	d937      	bls.n	80094c6 <_strtod_l+0x346>
 8009456:	9e06      	ldr	r6, [sp, #24]
 8009458:	1b89      	subs	r1, r1, r6
 800945a:	2908      	cmp	r1, #8
 800945c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009460:	dc02      	bgt.n	8009468 <_strtod_l+0x2e8>
 8009462:	4576      	cmp	r6, lr
 8009464:	bfa8      	it	ge
 8009466:	4676      	movge	r6, lr
 8009468:	f1bc 0f00 	cmp.w	ip, #0
 800946c:	d000      	beq.n	8009470 <_strtod_l+0x2f0>
 800946e:	4276      	negs	r6, r6
 8009470:	2d00      	cmp	r5, #0
 8009472:	d14d      	bne.n	8009510 <_strtod_l+0x390>
 8009474:	9904      	ldr	r1, [sp, #16]
 8009476:	4301      	orrs	r1, r0
 8009478:	f47f aec6 	bne.w	8009208 <_strtod_l+0x88>
 800947c:	2b00      	cmp	r3, #0
 800947e:	f47f aee1 	bne.w	8009244 <_strtod_l+0xc4>
 8009482:	2a69      	cmp	r2, #105	; 0x69
 8009484:	d027      	beq.n	80094d6 <_strtod_l+0x356>
 8009486:	dc24      	bgt.n	80094d2 <_strtod_l+0x352>
 8009488:	2a49      	cmp	r2, #73	; 0x49
 800948a:	d024      	beq.n	80094d6 <_strtod_l+0x356>
 800948c:	2a4e      	cmp	r2, #78	; 0x4e
 800948e:	f47f aed9 	bne.w	8009244 <_strtod_l+0xc4>
 8009492:	499f      	ldr	r1, [pc, #636]	; (8009710 <_strtod_l+0x590>)
 8009494:	a817      	add	r0, sp, #92	; 0x5c
 8009496:	f001 fdc1 	bl	800b01c <__match>
 800949a:	2800      	cmp	r0, #0
 800949c:	f43f aed2 	beq.w	8009244 <_strtod_l+0xc4>
 80094a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	2b28      	cmp	r3, #40	; 0x28
 80094a6:	d12d      	bne.n	8009504 <_strtod_l+0x384>
 80094a8:	499a      	ldr	r1, [pc, #616]	; (8009714 <_strtod_l+0x594>)
 80094aa:	aa1a      	add	r2, sp, #104	; 0x68
 80094ac:	a817      	add	r0, sp, #92	; 0x5c
 80094ae:	f001 fdc9 	bl	800b044 <__hexnan>
 80094b2:	2805      	cmp	r0, #5
 80094b4:	d126      	bne.n	8009504 <_strtod_l+0x384>
 80094b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80094bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80094c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80094c4:	e6a0      	b.n	8009208 <_strtod_l+0x88>
 80094c6:	210a      	movs	r1, #10
 80094c8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80094cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80094d0:	e7b9      	b.n	8009446 <_strtod_l+0x2c6>
 80094d2:	2a6e      	cmp	r2, #110	; 0x6e
 80094d4:	e7db      	b.n	800948e <_strtod_l+0x30e>
 80094d6:	4990      	ldr	r1, [pc, #576]	; (8009718 <_strtod_l+0x598>)
 80094d8:	a817      	add	r0, sp, #92	; 0x5c
 80094da:	f001 fd9f 	bl	800b01c <__match>
 80094de:	2800      	cmp	r0, #0
 80094e0:	f43f aeb0 	beq.w	8009244 <_strtod_l+0xc4>
 80094e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094e6:	498d      	ldr	r1, [pc, #564]	; (800971c <_strtod_l+0x59c>)
 80094e8:	3b01      	subs	r3, #1
 80094ea:	a817      	add	r0, sp, #92	; 0x5c
 80094ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80094ee:	f001 fd95 	bl	800b01c <__match>
 80094f2:	b910      	cbnz	r0, 80094fa <_strtod_l+0x37a>
 80094f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094f6:	3301      	adds	r3, #1
 80094f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80094fa:	f8df b230 	ldr.w	fp, [pc, #560]	; 800972c <_strtod_l+0x5ac>
 80094fe:	f04f 0a00 	mov.w	sl, #0
 8009502:	e681      	b.n	8009208 <_strtod_l+0x88>
 8009504:	4886      	ldr	r0, [pc, #536]	; (8009720 <_strtod_l+0x5a0>)
 8009506:	f002 fd7b 	bl	800c000 <nan>
 800950a:	ec5b ab10 	vmov	sl, fp, d0
 800950e:	e67b      	b.n	8009208 <_strtod_l+0x88>
 8009510:	9b05      	ldr	r3, [sp, #20]
 8009512:	9807      	ldr	r0, [sp, #28]
 8009514:	1af3      	subs	r3, r6, r3
 8009516:	2f00      	cmp	r7, #0
 8009518:	bf08      	it	eq
 800951a:	462f      	moveq	r7, r5
 800951c:	2d10      	cmp	r5, #16
 800951e:	9306      	str	r3, [sp, #24]
 8009520:	46a8      	mov	r8, r5
 8009522:	bfa8      	it	ge
 8009524:	f04f 0810 	movge.w	r8, #16
 8009528:	f7f7 f80c 	bl	8000544 <__aeabi_ui2d>
 800952c:	2d09      	cmp	r5, #9
 800952e:	4682      	mov	sl, r0
 8009530:	468b      	mov	fp, r1
 8009532:	dd13      	ble.n	800955c <_strtod_l+0x3dc>
 8009534:	4b7b      	ldr	r3, [pc, #492]	; (8009724 <_strtod_l+0x5a4>)
 8009536:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800953a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800953e:	f7f7 f87b 	bl	8000638 <__aeabi_dmul>
 8009542:	4682      	mov	sl, r0
 8009544:	4648      	mov	r0, r9
 8009546:	468b      	mov	fp, r1
 8009548:	f7f6 fffc 	bl	8000544 <__aeabi_ui2d>
 800954c:	4602      	mov	r2, r0
 800954e:	460b      	mov	r3, r1
 8009550:	4650      	mov	r0, sl
 8009552:	4659      	mov	r1, fp
 8009554:	f7f6 feba 	bl	80002cc <__adddf3>
 8009558:	4682      	mov	sl, r0
 800955a:	468b      	mov	fp, r1
 800955c:	2d0f      	cmp	r5, #15
 800955e:	dc38      	bgt.n	80095d2 <_strtod_l+0x452>
 8009560:	9b06      	ldr	r3, [sp, #24]
 8009562:	2b00      	cmp	r3, #0
 8009564:	f43f ae50 	beq.w	8009208 <_strtod_l+0x88>
 8009568:	dd24      	ble.n	80095b4 <_strtod_l+0x434>
 800956a:	2b16      	cmp	r3, #22
 800956c:	dc0b      	bgt.n	8009586 <_strtod_l+0x406>
 800956e:	496d      	ldr	r1, [pc, #436]	; (8009724 <_strtod_l+0x5a4>)
 8009570:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009574:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009578:	4652      	mov	r2, sl
 800957a:	465b      	mov	r3, fp
 800957c:	f7f7 f85c 	bl	8000638 <__aeabi_dmul>
 8009580:	4682      	mov	sl, r0
 8009582:	468b      	mov	fp, r1
 8009584:	e640      	b.n	8009208 <_strtod_l+0x88>
 8009586:	9a06      	ldr	r2, [sp, #24]
 8009588:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800958c:	4293      	cmp	r3, r2
 800958e:	db20      	blt.n	80095d2 <_strtod_l+0x452>
 8009590:	4c64      	ldr	r4, [pc, #400]	; (8009724 <_strtod_l+0x5a4>)
 8009592:	f1c5 050f 	rsb	r5, r5, #15
 8009596:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800959a:	4652      	mov	r2, sl
 800959c:	465b      	mov	r3, fp
 800959e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095a2:	f7f7 f849 	bl	8000638 <__aeabi_dmul>
 80095a6:	9b06      	ldr	r3, [sp, #24]
 80095a8:	1b5d      	subs	r5, r3, r5
 80095aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80095ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80095b2:	e7e3      	b.n	800957c <_strtod_l+0x3fc>
 80095b4:	9b06      	ldr	r3, [sp, #24]
 80095b6:	3316      	adds	r3, #22
 80095b8:	db0b      	blt.n	80095d2 <_strtod_l+0x452>
 80095ba:	9b05      	ldr	r3, [sp, #20]
 80095bc:	1b9e      	subs	r6, r3, r6
 80095be:	4b59      	ldr	r3, [pc, #356]	; (8009724 <_strtod_l+0x5a4>)
 80095c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80095c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80095c8:	4650      	mov	r0, sl
 80095ca:	4659      	mov	r1, fp
 80095cc:	f7f7 f95e 	bl	800088c <__aeabi_ddiv>
 80095d0:	e7d6      	b.n	8009580 <_strtod_l+0x400>
 80095d2:	9b06      	ldr	r3, [sp, #24]
 80095d4:	eba5 0808 	sub.w	r8, r5, r8
 80095d8:	4498      	add	r8, r3
 80095da:	f1b8 0f00 	cmp.w	r8, #0
 80095de:	dd74      	ble.n	80096ca <_strtod_l+0x54a>
 80095e0:	f018 030f 	ands.w	r3, r8, #15
 80095e4:	d00a      	beq.n	80095fc <_strtod_l+0x47c>
 80095e6:	494f      	ldr	r1, [pc, #316]	; (8009724 <_strtod_l+0x5a4>)
 80095e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095ec:	4652      	mov	r2, sl
 80095ee:	465b      	mov	r3, fp
 80095f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095f4:	f7f7 f820 	bl	8000638 <__aeabi_dmul>
 80095f8:	4682      	mov	sl, r0
 80095fa:	468b      	mov	fp, r1
 80095fc:	f038 080f 	bics.w	r8, r8, #15
 8009600:	d04f      	beq.n	80096a2 <_strtod_l+0x522>
 8009602:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009606:	dd22      	ble.n	800964e <_strtod_l+0x4ce>
 8009608:	2500      	movs	r5, #0
 800960a:	462e      	mov	r6, r5
 800960c:	9507      	str	r5, [sp, #28]
 800960e:	9505      	str	r5, [sp, #20]
 8009610:	2322      	movs	r3, #34	; 0x22
 8009612:	f8df b118 	ldr.w	fp, [pc, #280]	; 800972c <_strtod_l+0x5ac>
 8009616:	6023      	str	r3, [r4, #0]
 8009618:	f04f 0a00 	mov.w	sl, #0
 800961c:	9b07      	ldr	r3, [sp, #28]
 800961e:	2b00      	cmp	r3, #0
 8009620:	f43f adf2 	beq.w	8009208 <_strtod_l+0x88>
 8009624:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009626:	4620      	mov	r0, r4
 8009628:	f001 fe14 	bl	800b254 <_Bfree>
 800962c:	9905      	ldr	r1, [sp, #20]
 800962e:	4620      	mov	r0, r4
 8009630:	f001 fe10 	bl	800b254 <_Bfree>
 8009634:	4631      	mov	r1, r6
 8009636:	4620      	mov	r0, r4
 8009638:	f001 fe0c 	bl	800b254 <_Bfree>
 800963c:	9907      	ldr	r1, [sp, #28]
 800963e:	4620      	mov	r0, r4
 8009640:	f001 fe08 	bl	800b254 <_Bfree>
 8009644:	4629      	mov	r1, r5
 8009646:	4620      	mov	r0, r4
 8009648:	f001 fe04 	bl	800b254 <_Bfree>
 800964c:	e5dc      	b.n	8009208 <_strtod_l+0x88>
 800964e:	4b36      	ldr	r3, [pc, #216]	; (8009728 <_strtod_l+0x5a8>)
 8009650:	9304      	str	r3, [sp, #16]
 8009652:	2300      	movs	r3, #0
 8009654:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009658:	4650      	mov	r0, sl
 800965a:	4659      	mov	r1, fp
 800965c:	4699      	mov	r9, r3
 800965e:	f1b8 0f01 	cmp.w	r8, #1
 8009662:	dc21      	bgt.n	80096a8 <_strtod_l+0x528>
 8009664:	b10b      	cbz	r3, 800966a <_strtod_l+0x4ea>
 8009666:	4682      	mov	sl, r0
 8009668:	468b      	mov	fp, r1
 800966a:	4b2f      	ldr	r3, [pc, #188]	; (8009728 <_strtod_l+0x5a8>)
 800966c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009670:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009674:	4652      	mov	r2, sl
 8009676:	465b      	mov	r3, fp
 8009678:	e9d9 0100 	ldrd	r0, r1, [r9]
 800967c:	f7f6 ffdc 	bl	8000638 <__aeabi_dmul>
 8009680:	4b2a      	ldr	r3, [pc, #168]	; (800972c <_strtod_l+0x5ac>)
 8009682:	460a      	mov	r2, r1
 8009684:	400b      	ands	r3, r1
 8009686:	492a      	ldr	r1, [pc, #168]	; (8009730 <_strtod_l+0x5b0>)
 8009688:	428b      	cmp	r3, r1
 800968a:	4682      	mov	sl, r0
 800968c:	d8bc      	bhi.n	8009608 <_strtod_l+0x488>
 800968e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009692:	428b      	cmp	r3, r1
 8009694:	bf86      	itte	hi
 8009696:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009734 <_strtod_l+0x5b4>
 800969a:	f04f 3aff 	movhi.w	sl, #4294967295
 800969e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80096a2:	2300      	movs	r3, #0
 80096a4:	9304      	str	r3, [sp, #16]
 80096a6:	e084      	b.n	80097b2 <_strtod_l+0x632>
 80096a8:	f018 0f01 	tst.w	r8, #1
 80096ac:	d005      	beq.n	80096ba <_strtod_l+0x53a>
 80096ae:	9b04      	ldr	r3, [sp, #16]
 80096b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b4:	f7f6 ffc0 	bl	8000638 <__aeabi_dmul>
 80096b8:	2301      	movs	r3, #1
 80096ba:	9a04      	ldr	r2, [sp, #16]
 80096bc:	3208      	adds	r2, #8
 80096be:	f109 0901 	add.w	r9, r9, #1
 80096c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80096c6:	9204      	str	r2, [sp, #16]
 80096c8:	e7c9      	b.n	800965e <_strtod_l+0x4de>
 80096ca:	d0ea      	beq.n	80096a2 <_strtod_l+0x522>
 80096cc:	f1c8 0800 	rsb	r8, r8, #0
 80096d0:	f018 020f 	ands.w	r2, r8, #15
 80096d4:	d00a      	beq.n	80096ec <_strtod_l+0x56c>
 80096d6:	4b13      	ldr	r3, [pc, #76]	; (8009724 <_strtod_l+0x5a4>)
 80096d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096dc:	4650      	mov	r0, sl
 80096de:	4659      	mov	r1, fp
 80096e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e4:	f7f7 f8d2 	bl	800088c <__aeabi_ddiv>
 80096e8:	4682      	mov	sl, r0
 80096ea:	468b      	mov	fp, r1
 80096ec:	ea5f 1828 	movs.w	r8, r8, asr #4
 80096f0:	d0d7      	beq.n	80096a2 <_strtod_l+0x522>
 80096f2:	f1b8 0f1f 	cmp.w	r8, #31
 80096f6:	dd1f      	ble.n	8009738 <_strtod_l+0x5b8>
 80096f8:	2500      	movs	r5, #0
 80096fa:	462e      	mov	r6, r5
 80096fc:	9507      	str	r5, [sp, #28]
 80096fe:	9505      	str	r5, [sp, #20]
 8009700:	2322      	movs	r3, #34	; 0x22
 8009702:	f04f 0a00 	mov.w	sl, #0
 8009706:	f04f 0b00 	mov.w	fp, #0
 800970a:	6023      	str	r3, [r4, #0]
 800970c:	e786      	b.n	800961c <_strtod_l+0x49c>
 800970e:	bf00      	nop
 8009710:	0800cc65 	.word	0x0800cc65
 8009714:	0800cca0 	.word	0x0800cca0
 8009718:	0800cc5d 	.word	0x0800cc5d
 800971c:	0800cce3 	.word	0x0800cce3
 8009720:	0800cf90 	.word	0x0800cf90
 8009724:	0800ce70 	.word	0x0800ce70
 8009728:	0800ce48 	.word	0x0800ce48
 800972c:	7ff00000 	.word	0x7ff00000
 8009730:	7ca00000 	.word	0x7ca00000
 8009734:	7fefffff 	.word	0x7fefffff
 8009738:	f018 0310 	ands.w	r3, r8, #16
 800973c:	bf18      	it	ne
 800973e:	236a      	movne	r3, #106	; 0x6a
 8009740:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009af0 <_strtod_l+0x970>
 8009744:	9304      	str	r3, [sp, #16]
 8009746:	4650      	mov	r0, sl
 8009748:	4659      	mov	r1, fp
 800974a:	2300      	movs	r3, #0
 800974c:	f018 0f01 	tst.w	r8, #1
 8009750:	d004      	beq.n	800975c <_strtod_l+0x5dc>
 8009752:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009756:	f7f6 ff6f 	bl	8000638 <__aeabi_dmul>
 800975a:	2301      	movs	r3, #1
 800975c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009760:	f109 0908 	add.w	r9, r9, #8
 8009764:	d1f2      	bne.n	800974c <_strtod_l+0x5cc>
 8009766:	b10b      	cbz	r3, 800976c <_strtod_l+0x5ec>
 8009768:	4682      	mov	sl, r0
 800976a:	468b      	mov	fp, r1
 800976c:	9b04      	ldr	r3, [sp, #16]
 800976e:	b1c3      	cbz	r3, 80097a2 <_strtod_l+0x622>
 8009770:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009774:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009778:	2b00      	cmp	r3, #0
 800977a:	4659      	mov	r1, fp
 800977c:	dd11      	ble.n	80097a2 <_strtod_l+0x622>
 800977e:	2b1f      	cmp	r3, #31
 8009780:	f340 8124 	ble.w	80099cc <_strtod_l+0x84c>
 8009784:	2b34      	cmp	r3, #52	; 0x34
 8009786:	bfde      	ittt	le
 8009788:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800978c:	f04f 33ff 	movle.w	r3, #4294967295
 8009790:	fa03 f202 	lslle.w	r2, r3, r2
 8009794:	f04f 0a00 	mov.w	sl, #0
 8009798:	bfcc      	ite	gt
 800979a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800979e:	ea02 0b01 	andle.w	fp, r2, r1
 80097a2:	2200      	movs	r2, #0
 80097a4:	2300      	movs	r3, #0
 80097a6:	4650      	mov	r0, sl
 80097a8:	4659      	mov	r1, fp
 80097aa:	f7f7 f9ad 	bl	8000b08 <__aeabi_dcmpeq>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	d1a2      	bne.n	80096f8 <_strtod_l+0x578>
 80097b2:	9b07      	ldr	r3, [sp, #28]
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	9908      	ldr	r1, [sp, #32]
 80097b8:	462b      	mov	r3, r5
 80097ba:	463a      	mov	r2, r7
 80097bc:	4620      	mov	r0, r4
 80097be:	f001 fdb1 	bl	800b324 <__s2b>
 80097c2:	9007      	str	r0, [sp, #28]
 80097c4:	2800      	cmp	r0, #0
 80097c6:	f43f af1f 	beq.w	8009608 <_strtod_l+0x488>
 80097ca:	9b05      	ldr	r3, [sp, #20]
 80097cc:	1b9e      	subs	r6, r3, r6
 80097ce:	9b06      	ldr	r3, [sp, #24]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	bfb4      	ite	lt
 80097d4:	4633      	movlt	r3, r6
 80097d6:	2300      	movge	r3, #0
 80097d8:	930c      	str	r3, [sp, #48]	; 0x30
 80097da:	9b06      	ldr	r3, [sp, #24]
 80097dc:	2500      	movs	r5, #0
 80097de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80097e2:	9312      	str	r3, [sp, #72]	; 0x48
 80097e4:	462e      	mov	r6, r5
 80097e6:	9b07      	ldr	r3, [sp, #28]
 80097e8:	4620      	mov	r0, r4
 80097ea:	6859      	ldr	r1, [r3, #4]
 80097ec:	f001 fcf2 	bl	800b1d4 <_Balloc>
 80097f0:	9005      	str	r0, [sp, #20]
 80097f2:	2800      	cmp	r0, #0
 80097f4:	f43f af0c 	beq.w	8009610 <_strtod_l+0x490>
 80097f8:	9b07      	ldr	r3, [sp, #28]
 80097fa:	691a      	ldr	r2, [r3, #16]
 80097fc:	3202      	adds	r2, #2
 80097fe:	f103 010c 	add.w	r1, r3, #12
 8009802:	0092      	lsls	r2, r2, #2
 8009804:	300c      	adds	r0, #12
 8009806:	f001 fcd7 	bl	800b1b8 <memcpy>
 800980a:	ec4b ab10 	vmov	d0, sl, fp
 800980e:	aa1a      	add	r2, sp, #104	; 0x68
 8009810:	a919      	add	r1, sp, #100	; 0x64
 8009812:	4620      	mov	r0, r4
 8009814:	f002 f8cc 	bl	800b9b0 <__d2b>
 8009818:	ec4b ab18 	vmov	d8, sl, fp
 800981c:	9018      	str	r0, [sp, #96]	; 0x60
 800981e:	2800      	cmp	r0, #0
 8009820:	f43f aef6 	beq.w	8009610 <_strtod_l+0x490>
 8009824:	2101      	movs	r1, #1
 8009826:	4620      	mov	r0, r4
 8009828:	f001 fe16 	bl	800b458 <__i2b>
 800982c:	4606      	mov	r6, r0
 800982e:	2800      	cmp	r0, #0
 8009830:	f43f aeee 	beq.w	8009610 <_strtod_l+0x490>
 8009834:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009836:	9904      	ldr	r1, [sp, #16]
 8009838:	2b00      	cmp	r3, #0
 800983a:	bfab      	itete	ge
 800983c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800983e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009840:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009842:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009846:	bfac      	ite	ge
 8009848:	eb03 0902 	addge.w	r9, r3, r2
 800984c:	1ad7      	sublt	r7, r2, r3
 800984e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009850:	eba3 0801 	sub.w	r8, r3, r1
 8009854:	4490      	add	r8, r2
 8009856:	4ba1      	ldr	r3, [pc, #644]	; (8009adc <_strtod_l+0x95c>)
 8009858:	f108 38ff 	add.w	r8, r8, #4294967295
 800985c:	4598      	cmp	r8, r3
 800985e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009862:	f280 80c7 	bge.w	80099f4 <_strtod_l+0x874>
 8009866:	eba3 0308 	sub.w	r3, r3, r8
 800986a:	2b1f      	cmp	r3, #31
 800986c:	eba2 0203 	sub.w	r2, r2, r3
 8009870:	f04f 0101 	mov.w	r1, #1
 8009874:	f300 80b1 	bgt.w	80099da <_strtod_l+0x85a>
 8009878:	fa01 f303 	lsl.w	r3, r1, r3
 800987c:	930d      	str	r3, [sp, #52]	; 0x34
 800987e:	2300      	movs	r3, #0
 8009880:	9308      	str	r3, [sp, #32]
 8009882:	eb09 0802 	add.w	r8, r9, r2
 8009886:	9b04      	ldr	r3, [sp, #16]
 8009888:	45c1      	cmp	r9, r8
 800988a:	4417      	add	r7, r2
 800988c:	441f      	add	r7, r3
 800988e:	464b      	mov	r3, r9
 8009890:	bfa8      	it	ge
 8009892:	4643      	movge	r3, r8
 8009894:	42bb      	cmp	r3, r7
 8009896:	bfa8      	it	ge
 8009898:	463b      	movge	r3, r7
 800989a:	2b00      	cmp	r3, #0
 800989c:	bfc2      	ittt	gt
 800989e:	eba8 0803 	subgt.w	r8, r8, r3
 80098a2:	1aff      	subgt	r7, r7, r3
 80098a4:	eba9 0903 	subgt.w	r9, r9, r3
 80098a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	dd17      	ble.n	80098de <_strtod_l+0x75e>
 80098ae:	4631      	mov	r1, r6
 80098b0:	461a      	mov	r2, r3
 80098b2:	4620      	mov	r0, r4
 80098b4:	f001 fe90 	bl	800b5d8 <__pow5mult>
 80098b8:	4606      	mov	r6, r0
 80098ba:	2800      	cmp	r0, #0
 80098bc:	f43f aea8 	beq.w	8009610 <_strtod_l+0x490>
 80098c0:	4601      	mov	r1, r0
 80098c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80098c4:	4620      	mov	r0, r4
 80098c6:	f001 fddd 	bl	800b484 <__multiply>
 80098ca:	900b      	str	r0, [sp, #44]	; 0x2c
 80098cc:	2800      	cmp	r0, #0
 80098ce:	f43f ae9f 	beq.w	8009610 <_strtod_l+0x490>
 80098d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80098d4:	4620      	mov	r0, r4
 80098d6:	f001 fcbd 	bl	800b254 <_Bfree>
 80098da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098dc:	9318      	str	r3, [sp, #96]	; 0x60
 80098de:	f1b8 0f00 	cmp.w	r8, #0
 80098e2:	f300 808c 	bgt.w	80099fe <_strtod_l+0x87e>
 80098e6:	9b06      	ldr	r3, [sp, #24]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	dd08      	ble.n	80098fe <_strtod_l+0x77e>
 80098ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098ee:	9905      	ldr	r1, [sp, #20]
 80098f0:	4620      	mov	r0, r4
 80098f2:	f001 fe71 	bl	800b5d8 <__pow5mult>
 80098f6:	9005      	str	r0, [sp, #20]
 80098f8:	2800      	cmp	r0, #0
 80098fa:	f43f ae89 	beq.w	8009610 <_strtod_l+0x490>
 80098fe:	2f00      	cmp	r7, #0
 8009900:	dd08      	ble.n	8009914 <_strtod_l+0x794>
 8009902:	9905      	ldr	r1, [sp, #20]
 8009904:	463a      	mov	r2, r7
 8009906:	4620      	mov	r0, r4
 8009908:	f001 fec0 	bl	800b68c <__lshift>
 800990c:	9005      	str	r0, [sp, #20]
 800990e:	2800      	cmp	r0, #0
 8009910:	f43f ae7e 	beq.w	8009610 <_strtod_l+0x490>
 8009914:	f1b9 0f00 	cmp.w	r9, #0
 8009918:	dd08      	ble.n	800992c <_strtod_l+0x7ac>
 800991a:	4631      	mov	r1, r6
 800991c:	464a      	mov	r2, r9
 800991e:	4620      	mov	r0, r4
 8009920:	f001 feb4 	bl	800b68c <__lshift>
 8009924:	4606      	mov	r6, r0
 8009926:	2800      	cmp	r0, #0
 8009928:	f43f ae72 	beq.w	8009610 <_strtod_l+0x490>
 800992c:	9a05      	ldr	r2, [sp, #20]
 800992e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009930:	4620      	mov	r0, r4
 8009932:	f001 ff37 	bl	800b7a4 <__mdiff>
 8009936:	4605      	mov	r5, r0
 8009938:	2800      	cmp	r0, #0
 800993a:	f43f ae69 	beq.w	8009610 <_strtod_l+0x490>
 800993e:	68c3      	ldr	r3, [r0, #12]
 8009940:	930b      	str	r3, [sp, #44]	; 0x2c
 8009942:	2300      	movs	r3, #0
 8009944:	60c3      	str	r3, [r0, #12]
 8009946:	4631      	mov	r1, r6
 8009948:	f001 ff10 	bl	800b76c <__mcmp>
 800994c:	2800      	cmp	r0, #0
 800994e:	da60      	bge.n	8009a12 <_strtod_l+0x892>
 8009950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009952:	ea53 030a 	orrs.w	r3, r3, sl
 8009956:	f040 8082 	bne.w	8009a5e <_strtod_l+0x8de>
 800995a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800995e:	2b00      	cmp	r3, #0
 8009960:	d17d      	bne.n	8009a5e <_strtod_l+0x8de>
 8009962:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009966:	0d1b      	lsrs	r3, r3, #20
 8009968:	051b      	lsls	r3, r3, #20
 800996a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800996e:	d976      	bls.n	8009a5e <_strtod_l+0x8de>
 8009970:	696b      	ldr	r3, [r5, #20]
 8009972:	b913      	cbnz	r3, 800997a <_strtod_l+0x7fa>
 8009974:	692b      	ldr	r3, [r5, #16]
 8009976:	2b01      	cmp	r3, #1
 8009978:	dd71      	ble.n	8009a5e <_strtod_l+0x8de>
 800997a:	4629      	mov	r1, r5
 800997c:	2201      	movs	r2, #1
 800997e:	4620      	mov	r0, r4
 8009980:	f001 fe84 	bl	800b68c <__lshift>
 8009984:	4631      	mov	r1, r6
 8009986:	4605      	mov	r5, r0
 8009988:	f001 fef0 	bl	800b76c <__mcmp>
 800998c:	2800      	cmp	r0, #0
 800998e:	dd66      	ble.n	8009a5e <_strtod_l+0x8de>
 8009990:	9904      	ldr	r1, [sp, #16]
 8009992:	4a53      	ldr	r2, [pc, #332]	; (8009ae0 <_strtod_l+0x960>)
 8009994:	465b      	mov	r3, fp
 8009996:	2900      	cmp	r1, #0
 8009998:	f000 8081 	beq.w	8009a9e <_strtod_l+0x91e>
 800999c:	ea02 010b 	and.w	r1, r2, fp
 80099a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80099a4:	dc7b      	bgt.n	8009a9e <_strtod_l+0x91e>
 80099a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80099aa:	f77f aea9 	ble.w	8009700 <_strtod_l+0x580>
 80099ae:	4b4d      	ldr	r3, [pc, #308]	; (8009ae4 <_strtod_l+0x964>)
 80099b0:	4650      	mov	r0, sl
 80099b2:	4659      	mov	r1, fp
 80099b4:	2200      	movs	r2, #0
 80099b6:	f7f6 fe3f 	bl	8000638 <__aeabi_dmul>
 80099ba:	460b      	mov	r3, r1
 80099bc:	4303      	orrs	r3, r0
 80099be:	bf08      	it	eq
 80099c0:	2322      	moveq	r3, #34	; 0x22
 80099c2:	4682      	mov	sl, r0
 80099c4:	468b      	mov	fp, r1
 80099c6:	bf08      	it	eq
 80099c8:	6023      	streq	r3, [r4, #0]
 80099ca:	e62b      	b.n	8009624 <_strtod_l+0x4a4>
 80099cc:	f04f 32ff 	mov.w	r2, #4294967295
 80099d0:	fa02 f303 	lsl.w	r3, r2, r3
 80099d4:	ea03 0a0a 	and.w	sl, r3, sl
 80099d8:	e6e3      	b.n	80097a2 <_strtod_l+0x622>
 80099da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80099de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80099e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80099e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80099ea:	fa01 f308 	lsl.w	r3, r1, r8
 80099ee:	9308      	str	r3, [sp, #32]
 80099f0:	910d      	str	r1, [sp, #52]	; 0x34
 80099f2:	e746      	b.n	8009882 <_strtod_l+0x702>
 80099f4:	2300      	movs	r3, #0
 80099f6:	9308      	str	r3, [sp, #32]
 80099f8:	2301      	movs	r3, #1
 80099fa:	930d      	str	r3, [sp, #52]	; 0x34
 80099fc:	e741      	b.n	8009882 <_strtod_l+0x702>
 80099fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a00:	4642      	mov	r2, r8
 8009a02:	4620      	mov	r0, r4
 8009a04:	f001 fe42 	bl	800b68c <__lshift>
 8009a08:	9018      	str	r0, [sp, #96]	; 0x60
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	f47f af6b 	bne.w	80098e6 <_strtod_l+0x766>
 8009a10:	e5fe      	b.n	8009610 <_strtod_l+0x490>
 8009a12:	465f      	mov	r7, fp
 8009a14:	d16e      	bne.n	8009af4 <_strtod_l+0x974>
 8009a16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a1c:	b342      	cbz	r2, 8009a70 <_strtod_l+0x8f0>
 8009a1e:	4a32      	ldr	r2, [pc, #200]	; (8009ae8 <_strtod_l+0x968>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d128      	bne.n	8009a76 <_strtod_l+0x8f6>
 8009a24:	9b04      	ldr	r3, [sp, #16]
 8009a26:	4651      	mov	r1, sl
 8009a28:	b1eb      	cbz	r3, 8009a66 <_strtod_l+0x8e6>
 8009a2a:	4b2d      	ldr	r3, [pc, #180]	; (8009ae0 <_strtod_l+0x960>)
 8009a2c:	403b      	ands	r3, r7
 8009a2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009a32:	f04f 32ff 	mov.w	r2, #4294967295
 8009a36:	d819      	bhi.n	8009a6c <_strtod_l+0x8ec>
 8009a38:	0d1b      	lsrs	r3, r3, #20
 8009a3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a42:	4299      	cmp	r1, r3
 8009a44:	d117      	bne.n	8009a76 <_strtod_l+0x8f6>
 8009a46:	4b29      	ldr	r3, [pc, #164]	; (8009aec <_strtod_l+0x96c>)
 8009a48:	429f      	cmp	r7, r3
 8009a4a:	d102      	bne.n	8009a52 <_strtod_l+0x8d2>
 8009a4c:	3101      	adds	r1, #1
 8009a4e:	f43f addf 	beq.w	8009610 <_strtod_l+0x490>
 8009a52:	4b23      	ldr	r3, [pc, #140]	; (8009ae0 <_strtod_l+0x960>)
 8009a54:	403b      	ands	r3, r7
 8009a56:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009a5a:	f04f 0a00 	mov.w	sl, #0
 8009a5e:	9b04      	ldr	r3, [sp, #16]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1a4      	bne.n	80099ae <_strtod_l+0x82e>
 8009a64:	e5de      	b.n	8009624 <_strtod_l+0x4a4>
 8009a66:	f04f 33ff 	mov.w	r3, #4294967295
 8009a6a:	e7ea      	b.n	8009a42 <_strtod_l+0x8c2>
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	e7e8      	b.n	8009a42 <_strtod_l+0x8c2>
 8009a70:	ea53 030a 	orrs.w	r3, r3, sl
 8009a74:	d08c      	beq.n	8009990 <_strtod_l+0x810>
 8009a76:	9b08      	ldr	r3, [sp, #32]
 8009a78:	b1db      	cbz	r3, 8009ab2 <_strtod_l+0x932>
 8009a7a:	423b      	tst	r3, r7
 8009a7c:	d0ef      	beq.n	8009a5e <_strtod_l+0x8de>
 8009a7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a80:	9a04      	ldr	r2, [sp, #16]
 8009a82:	4650      	mov	r0, sl
 8009a84:	4659      	mov	r1, fp
 8009a86:	b1c3      	cbz	r3, 8009aba <_strtod_l+0x93a>
 8009a88:	f7ff fb5c 	bl	8009144 <sulp>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	460b      	mov	r3, r1
 8009a90:	ec51 0b18 	vmov	r0, r1, d8
 8009a94:	f7f6 fc1a 	bl	80002cc <__adddf3>
 8009a98:	4682      	mov	sl, r0
 8009a9a:	468b      	mov	fp, r1
 8009a9c:	e7df      	b.n	8009a5e <_strtod_l+0x8de>
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009aa4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009aa8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009aac:	f04f 3aff 	mov.w	sl, #4294967295
 8009ab0:	e7d5      	b.n	8009a5e <_strtod_l+0x8de>
 8009ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ab4:	ea13 0f0a 	tst.w	r3, sl
 8009ab8:	e7e0      	b.n	8009a7c <_strtod_l+0x8fc>
 8009aba:	f7ff fb43 	bl	8009144 <sulp>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	ec51 0b18 	vmov	r0, r1, d8
 8009ac6:	f7f6 fbff 	bl	80002c8 <__aeabi_dsub>
 8009aca:	2200      	movs	r2, #0
 8009acc:	2300      	movs	r3, #0
 8009ace:	4682      	mov	sl, r0
 8009ad0:	468b      	mov	fp, r1
 8009ad2:	f7f7 f819 	bl	8000b08 <__aeabi_dcmpeq>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d0c1      	beq.n	8009a5e <_strtod_l+0x8de>
 8009ada:	e611      	b.n	8009700 <_strtod_l+0x580>
 8009adc:	fffffc02 	.word	0xfffffc02
 8009ae0:	7ff00000 	.word	0x7ff00000
 8009ae4:	39500000 	.word	0x39500000
 8009ae8:	000fffff 	.word	0x000fffff
 8009aec:	7fefffff 	.word	0x7fefffff
 8009af0:	0800ccb8 	.word	0x0800ccb8
 8009af4:	4631      	mov	r1, r6
 8009af6:	4628      	mov	r0, r5
 8009af8:	f001 ffb6 	bl	800ba68 <__ratio>
 8009afc:	ec59 8b10 	vmov	r8, r9, d0
 8009b00:	ee10 0a10 	vmov	r0, s0
 8009b04:	2200      	movs	r2, #0
 8009b06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b0a:	4649      	mov	r1, r9
 8009b0c:	f7f7 f810 	bl	8000b30 <__aeabi_dcmple>
 8009b10:	2800      	cmp	r0, #0
 8009b12:	d07a      	beq.n	8009c0a <_strtod_l+0xa8a>
 8009b14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d04a      	beq.n	8009bb0 <_strtod_l+0xa30>
 8009b1a:	4b95      	ldr	r3, [pc, #596]	; (8009d70 <_strtod_l+0xbf0>)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009b22:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009d70 <_strtod_l+0xbf0>
 8009b26:	f04f 0800 	mov.w	r8, #0
 8009b2a:	4b92      	ldr	r3, [pc, #584]	; (8009d74 <_strtod_l+0xbf4>)
 8009b2c:	403b      	ands	r3, r7
 8009b2e:	930d      	str	r3, [sp, #52]	; 0x34
 8009b30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b32:	4b91      	ldr	r3, [pc, #580]	; (8009d78 <_strtod_l+0xbf8>)
 8009b34:	429a      	cmp	r2, r3
 8009b36:	f040 80b0 	bne.w	8009c9a <_strtod_l+0xb1a>
 8009b3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b3e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009b42:	ec4b ab10 	vmov	d0, sl, fp
 8009b46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009b4a:	f001 feb5 	bl	800b8b8 <__ulp>
 8009b4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b52:	ec53 2b10 	vmov	r2, r3, d0
 8009b56:	f7f6 fd6f 	bl	8000638 <__aeabi_dmul>
 8009b5a:	4652      	mov	r2, sl
 8009b5c:	465b      	mov	r3, fp
 8009b5e:	f7f6 fbb5 	bl	80002cc <__adddf3>
 8009b62:	460b      	mov	r3, r1
 8009b64:	4983      	ldr	r1, [pc, #524]	; (8009d74 <_strtod_l+0xbf4>)
 8009b66:	4a85      	ldr	r2, [pc, #532]	; (8009d7c <_strtod_l+0xbfc>)
 8009b68:	4019      	ands	r1, r3
 8009b6a:	4291      	cmp	r1, r2
 8009b6c:	4682      	mov	sl, r0
 8009b6e:	d960      	bls.n	8009c32 <_strtod_l+0xab2>
 8009b70:	ee18 3a90 	vmov	r3, s17
 8009b74:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d104      	bne.n	8009b86 <_strtod_l+0xa06>
 8009b7c:	ee18 3a10 	vmov	r3, s16
 8009b80:	3301      	adds	r3, #1
 8009b82:	f43f ad45 	beq.w	8009610 <_strtod_l+0x490>
 8009b86:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009d88 <_strtod_l+0xc08>
 8009b8a:	f04f 3aff 	mov.w	sl, #4294967295
 8009b8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b90:	4620      	mov	r0, r4
 8009b92:	f001 fb5f 	bl	800b254 <_Bfree>
 8009b96:	9905      	ldr	r1, [sp, #20]
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f001 fb5b 	bl	800b254 <_Bfree>
 8009b9e:	4631      	mov	r1, r6
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f001 fb57 	bl	800b254 <_Bfree>
 8009ba6:	4629      	mov	r1, r5
 8009ba8:	4620      	mov	r0, r4
 8009baa:	f001 fb53 	bl	800b254 <_Bfree>
 8009bae:	e61a      	b.n	80097e6 <_strtod_l+0x666>
 8009bb0:	f1ba 0f00 	cmp.w	sl, #0
 8009bb4:	d11b      	bne.n	8009bee <_strtod_l+0xa6e>
 8009bb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bba:	b9f3      	cbnz	r3, 8009bfa <_strtod_l+0xa7a>
 8009bbc:	4b6c      	ldr	r3, [pc, #432]	; (8009d70 <_strtod_l+0xbf0>)
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	4640      	mov	r0, r8
 8009bc2:	4649      	mov	r1, r9
 8009bc4:	f7f6 ffaa 	bl	8000b1c <__aeabi_dcmplt>
 8009bc8:	b9d0      	cbnz	r0, 8009c00 <_strtod_l+0xa80>
 8009bca:	4640      	mov	r0, r8
 8009bcc:	4649      	mov	r1, r9
 8009bce:	4b6c      	ldr	r3, [pc, #432]	; (8009d80 <_strtod_l+0xc00>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f7f6 fd31 	bl	8000638 <__aeabi_dmul>
 8009bd6:	4680      	mov	r8, r0
 8009bd8:	4689      	mov	r9, r1
 8009bda:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009bde:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009be2:	9315      	str	r3, [sp, #84]	; 0x54
 8009be4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009be8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009bec:	e79d      	b.n	8009b2a <_strtod_l+0x9aa>
 8009bee:	f1ba 0f01 	cmp.w	sl, #1
 8009bf2:	d102      	bne.n	8009bfa <_strtod_l+0xa7a>
 8009bf4:	2f00      	cmp	r7, #0
 8009bf6:	f43f ad83 	beq.w	8009700 <_strtod_l+0x580>
 8009bfa:	4b62      	ldr	r3, [pc, #392]	; (8009d84 <_strtod_l+0xc04>)
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	e78e      	b.n	8009b1e <_strtod_l+0x99e>
 8009c00:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009d80 <_strtod_l+0xc00>
 8009c04:	f04f 0800 	mov.w	r8, #0
 8009c08:	e7e7      	b.n	8009bda <_strtod_l+0xa5a>
 8009c0a:	4b5d      	ldr	r3, [pc, #372]	; (8009d80 <_strtod_l+0xc00>)
 8009c0c:	4640      	mov	r0, r8
 8009c0e:	4649      	mov	r1, r9
 8009c10:	2200      	movs	r2, #0
 8009c12:	f7f6 fd11 	bl	8000638 <__aeabi_dmul>
 8009c16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c18:	4680      	mov	r8, r0
 8009c1a:	4689      	mov	r9, r1
 8009c1c:	b933      	cbnz	r3, 8009c2c <_strtod_l+0xaac>
 8009c1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c22:	900e      	str	r0, [sp, #56]	; 0x38
 8009c24:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009c2a:	e7dd      	b.n	8009be8 <_strtod_l+0xa68>
 8009c2c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009c30:	e7f9      	b.n	8009c26 <_strtod_l+0xaa6>
 8009c32:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009c36:	9b04      	ldr	r3, [sp, #16]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1a8      	bne.n	8009b8e <_strtod_l+0xa0e>
 8009c3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009c40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c42:	0d1b      	lsrs	r3, r3, #20
 8009c44:	051b      	lsls	r3, r3, #20
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d1a1      	bne.n	8009b8e <_strtod_l+0xa0e>
 8009c4a:	4640      	mov	r0, r8
 8009c4c:	4649      	mov	r1, r9
 8009c4e:	f7f7 f8a3 	bl	8000d98 <__aeabi_d2lz>
 8009c52:	f7f6 fcc3 	bl	80005dc <__aeabi_l2d>
 8009c56:	4602      	mov	r2, r0
 8009c58:	460b      	mov	r3, r1
 8009c5a:	4640      	mov	r0, r8
 8009c5c:	4649      	mov	r1, r9
 8009c5e:	f7f6 fb33 	bl	80002c8 <__aeabi_dsub>
 8009c62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c68:	ea43 030a 	orr.w	r3, r3, sl
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	4680      	mov	r8, r0
 8009c70:	4689      	mov	r9, r1
 8009c72:	d055      	beq.n	8009d20 <_strtod_l+0xba0>
 8009c74:	a336      	add	r3, pc, #216	; (adr r3, 8009d50 <_strtod_l+0xbd0>)
 8009c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7a:	f7f6 ff4f 	bl	8000b1c <__aeabi_dcmplt>
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	f47f acd0 	bne.w	8009624 <_strtod_l+0x4a4>
 8009c84:	a334      	add	r3, pc, #208	; (adr r3, 8009d58 <_strtod_l+0xbd8>)
 8009c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8a:	4640      	mov	r0, r8
 8009c8c:	4649      	mov	r1, r9
 8009c8e:	f7f6 ff63 	bl	8000b58 <__aeabi_dcmpgt>
 8009c92:	2800      	cmp	r0, #0
 8009c94:	f43f af7b 	beq.w	8009b8e <_strtod_l+0xa0e>
 8009c98:	e4c4      	b.n	8009624 <_strtod_l+0x4a4>
 8009c9a:	9b04      	ldr	r3, [sp, #16]
 8009c9c:	b333      	cbz	r3, 8009cec <_strtod_l+0xb6c>
 8009c9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ca0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009ca4:	d822      	bhi.n	8009cec <_strtod_l+0xb6c>
 8009ca6:	a32e      	add	r3, pc, #184	; (adr r3, 8009d60 <_strtod_l+0xbe0>)
 8009ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cac:	4640      	mov	r0, r8
 8009cae:	4649      	mov	r1, r9
 8009cb0:	f7f6 ff3e 	bl	8000b30 <__aeabi_dcmple>
 8009cb4:	b1a0      	cbz	r0, 8009ce0 <_strtod_l+0xb60>
 8009cb6:	4649      	mov	r1, r9
 8009cb8:	4640      	mov	r0, r8
 8009cba:	f7f6 ff95 	bl	8000be8 <__aeabi_d2uiz>
 8009cbe:	2801      	cmp	r0, #1
 8009cc0:	bf38      	it	cc
 8009cc2:	2001      	movcc	r0, #1
 8009cc4:	f7f6 fc3e 	bl	8000544 <__aeabi_ui2d>
 8009cc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cca:	4680      	mov	r8, r0
 8009ccc:	4689      	mov	r9, r1
 8009cce:	bb23      	cbnz	r3, 8009d1a <_strtod_l+0xb9a>
 8009cd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cd4:	9010      	str	r0, [sp, #64]	; 0x40
 8009cd6:	9311      	str	r3, [sp, #68]	; 0x44
 8009cd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009cdc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ce4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009ce8:	1a9b      	subs	r3, r3, r2
 8009cea:	9309      	str	r3, [sp, #36]	; 0x24
 8009cec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009cf0:	eeb0 0a48 	vmov.f32	s0, s16
 8009cf4:	eef0 0a68 	vmov.f32	s1, s17
 8009cf8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009cfc:	f001 fddc 	bl	800b8b8 <__ulp>
 8009d00:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d04:	ec53 2b10 	vmov	r2, r3, d0
 8009d08:	f7f6 fc96 	bl	8000638 <__aeabi_dmul>
 8009d0c:	ec53 2b18 	vmov	r2, r3, d8
 8009d10:	f7f6 fadc 	bl	80002cc <__adddf3>
 8009d14:	4682      	mov	sl, r0
 8009d16:	468b      	mov	fp, r1
 8009d18:	e78d      	b.n	8009c36 <_strtod_l+0xab6>
 8009d1a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009d1e:	e7db      	b.n	8009cd8 <_strtod_l+0xb58>
 8009d20:	a311      	add	r3, pc, #68	; (adr r3, 8009d68 <_strtod_l+0xbe8>)
 8009d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d26:	f7f6 fef9 	bl	8000b1c <__aeabi_dcmplt>
 8009d2a:	e7b2      	b.n	8009c92 <_strtod_l+0xb12>
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	930a      	str	r3, [sp, #40]	; 0x28
 8009d30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009d32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d34:	6013      	str	r3, [r2, #0]
 8009d36:	f7ff ba6b 	b.w	8009210 <_strtod_l+0x90>
 8009d3a:	2a65      	cmp	r2, #101	; 0x65
 8009d3c:	f43f ab5f 	beq.w	80093fe <_strtod_l+0x27e>
 8009d40:	2a45      	cmp	r2, #69	; 0x45
 8009d42:	f43f ab5c 	beq.w	80093fe <_strtod_l+0x27e>
 8009d46:	2301      	movs	r3, #1
 8009d48:	f7ff bb94 	b.w	8009474 <_strtod_l+0x2f4>
 8009d4c:	f3af 8000 	nop.w
 8009d50:	94a03595 	.word	0x94a03595
 8009d54:	3fdfffff 	.word	0x3fdfffff
 8009d58:	35afe535 	.word	0x35afe535
 8009d5c:	3fe00000 	.word	0x3fe00000
 8009d60:	ffc00000 	.word	0xffc00000
 8009d64:	41dfffff 	.word	0x41dfffff
 8009d68:	94a03595 	.word	0x94a03595
 8009d6c:	3fcfffff 	.word	0x3fcfffff
 8009d70:	3ff00000 	.word	0x3ff00000
 8009d74:	7ff00000 	.word	0x7ff00000
 8009d78:	7fe00000 	.word	0x7fe00000
 8009d7c:	7c9fffff 	.word	0x7c9fffff
 8009d80:	3fe00000 	.word	0x3fe00000
 8009d84:	bff00000 	.word	0xbff00000
 8009d88:	7fefffff 	.word	0x7fefffff

08009d8c <strtod>:
 8009d8c:	460a      	mov	r2, r1
 8009d8e:	4601      	mov	r1, r0
 8009d90:	4802      	ldr	r0, [pc, #8]	; (8009d9c <strtod+0x10>)
 8009d92:	4b03      	ldr	r3, [pc, #12]	; (8009da0 <strtod+0x14>)
 8009d94:	6800      	ldr	r0, [r0, #0]
 8009d96:	f7ff b9f3 	b.w	8009180 <_strtod_l>
 8009d9a:	bf00      	nop
 8009d9c:	2000001c 	.word	0x2000001c
 8009da0:	20000084 	.word	0x20000084

08009da4 <quorem>:
 8009da4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da8:	6903      	ldr	r3, [r0, #16]
 8009daa:	690c      	ldr	r4, [r1, #16]
 8009dac:	42a3      	cmp	r3, r4
 8009dae:	4607      	mov	r7, r0
 8009db0:	f2c0 8081 	blt.w	8009eb6 <quorem+0x112>
 8009db4:	3c01      	subs	r4, #1
 8009db6:	f101 0814 	add.w	r8, r1, #20
 8009dba:	f100 0514 	add.w	r5, r0, #20
 8009dbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dc2:	9301      	str	r3, [sp, #4]
 8009dc4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009dc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009dd4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009dd8:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ddc:	d331      	bcc.n	8009e42 <quorem+0x9e>
 8009dde:	f04f 0e00 	mov.w	lr, #0
 8009de2:	4640      	mov	r0, r8
 8009de4:	46ac      	mov	ip, r5
 8009de6:	46f2      	mov	sl, lr
 8009de8:	f850 2b04 	ldr.w	r2, [r0], #4
 8009dec:	b293      	uxth	r3, r2
 8009dee:	fb06 e303 	mla	r3, r6, r3, lr
 8009df2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	ebaa 0303 	sub.w	r3, sl, r3
 8009dfc:	f8dc a000 	ldr.w	sl, [ip]
 8009e00:	0c12      	lsrs	r2, r2, #16
 8009e02:	fa13 f38a 	uxtah	r3, r3, sl
 8009e06:	fb06 e202 	mla	r2, r6, r2, lr
 8009e0a:	9300      	str	r3, [sp, #0]
 8009e0c:	9b00      	ldr	r3, [sp, #0]
 8009e0e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e12:	b292      	uxth	r2, r2
 8009e14:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009e18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e1c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009e20:	4581      	cmp	r9, r0
 8009e22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e26:	f84c 3b04 	str.w	r3, [ip], #4
 8009e2a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e2e:	d2db      	bcs.n	8009de8 <quorem+0x44>
 8009e30:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e34:	b92b      	cbnz	r3, 8009e42 <quorem+0x9e>
 8009e36:	9b01      	ldr	r3, [sp, #4]
 8009e38:	3b04      	subs	r3, #4
 8009e3a:	429d      	cmp	r5, r3
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	d32e      	bcc.n	8009e9e <quorem+0xfa>
 8009e40:	613c      	str	r4, [r7, #16]
 8009e42:	4638      	mov	r0, r7
 8009e44:	f001 fc92 	bl	800b76c <__mcmp>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	db24      	blt.n	8009e96 <quorem+0xf2>
 8009e4c:	3601      	adds	r6, #1
 8009e4e:	4628      	mov	r0, r5
 8009e50:	f04f 0c00 	mov.w	ip, #0
 8009e54:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e58:	f8d0 e000 	ldr.w	lr, [r0]
 8009e5c:	b293      	uxth	r3, r2
 8009e5e:	ebac 0303 	sub.w	r3, ip, r3
 8009e62:	0c12      	lsrs	r2, r2, #16
 8009e64:	fa13 f38e 	uxtah	r3, r3, lr
 8009e68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009e6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e76:	45c1      	cmp	r9, r8
 8009e78:	f840 3b04 	str.w	r3, [r0], #4
 8009e7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009e80:	d2e8      	bcs.n	8009e54 <quorem+0xb0>
 8009e82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e8a:	b922      	cbnz	r2, 8009e96 <quorem+0xf2>
 8009e8c:	3b04      	subs	r3, #4
 8009e8e:	429d      	cmp	r5, r3
 8009e90:	461a      	mov	r2, r3
 8009e92:	d30a      	bcc.n	8009eaa <quorem+0x106>
 8009e94:	613c      	str	r4, [r7, #16]
 8009e96:	4630      	mov	r0, r6
 8009e98:	b003      	add	sp, #12
 8009e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9e:	6812      	ldr	r2, [r2, #0]
 8009ea0:	3b04      	subs	r3, #4
 8009ea2:	2a00      	cmp	r2, #0
 8009ea4:	d1cc      	bne.n	8009e40 <quorem+0x9c>
 8009ea6:	3c01      	subs	r4, #1
 8009ea8:	e7c7      	b.n	8009e3a <quorem+0x96>
 8009eaa:	6812      	ldr	r2, [r2, #0]
 8009eac:	3b04      	subs	r3, #4
 8009eae:	2a00      	cmp	r2, #0
 8009eb0:	d1f0      	bne.n	8009e94 <quorem+0xf0>
 8009eb2:	3c01      	subs	r4, #1
 8009eb4:	e7eb      	b.n	8009e8e <quorem+0xea>
 8009eb6:	2000      	movs	r0, #0
 8009eb8:	e7ee      	b.n	8009e98 <quorem+0xf4>
 8009eba:	0000      	movs	r0, r0
 8009ebc:	0000      	movs	r0, r0
	...

08009ec0 <_dtoa_r>:
 8009ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec4:	ed2d 8b04 	vpush	{d8-d9}
 8009ec8:	ec57 6b10 	vmov	r6, r7, d0
 8009ecc:	b093      	sub	sp, #76	; 0x4c
 8009ece:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009ed0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009ed4:	9106      	str	r1, [sp, #24]
 8009ed6:	ee10 aa10 	vmov	sl, s0
 8009eda:	4604      	mov	r4, r0
 8009edc:	9209      	str	r2, [sp, #36]	; 0x24
 8009ede:	930c      	str	r3, [sp, #48]	; 0x30
 8009ee0:	46bb      	mov	fp, r7
 8009ee2:	b975      	cbnz	r5, 8009f02 <_dtoa_r+0x42>
 8009ee4:	2010      	movs	r0, #16
 8009ee6:	f001 f94d 	bl	800b184 <malloc>
 8009eea:	4602      	mov	r2, r0
 8009eec:	6260      	str	r0, [r4, #36]	; 0x24
 8009eee:	b920      	cbnz	r0, 8009efa <_dtoa_r+0x3a>
 8009ef0:	4ba7      	ldr	r3, [pc, #668]	; (800a190 <_dtoa_r+0x2d0>)
 8009ef2:	21ea      	movs	r1, #234	; 0xea
 8009ef4:	48a7      	ldr	r0, [pc, #668]	; (800a194 <_dtoa_r+0x2d4>)
 8009ef6:	f002 f8bd 	bl	800c074 <__assert_func>
 8009efa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009efe:	6005      	str	r5, [r0, #0]
 8009f00:	60c5      	str	r5, [r0, #12]
 8009f02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f04:	6819      	ldr	r1, [r3, #0]
 8009f06:	b151      	cbz	r1, 8009f1e <_dtoa_r+0x5e>
 8009f08:	685a      	ldr	r2, [r3, #4]
 8009f0a:	604a      	str	r2, [r1, #4]
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	4093      	lsls	r3, r2
 8009f10:	608b      	str	r3, [r1, #8]
 8009f12:	4620      	mov	r0, r4
 8009f14:	f001 f99e 	bl	800b254 <_Bfree>
 8009f18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	601a      	str	r2, [r3, #0]
 8009f1e:	1e3b      	subs	r3, r7, #0
 8009f20:	bfaa      	itet	ge
 8009f22:	2300      	movge	r3, #0
 8009f24:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009f28:	f8c8 3000 	strge.w	r3, [r8]
 8009f2c:	4b9a      	ldr	r3, [pc, #616]	; (800a198 <_dtoa_r+0x2d8>)
 8009f2e:	bfbc      	itt	lt
 8009f30:	2201      	movlt	r2, #1
 8009f32:	f8c8 2000 	strlt.w	r2, [r8]
 8009f36:	ea33 030b 	bics.w	r3, r3, fp
 8009f3a:	d11b      	bne.n	8009f74 <_dtoa_r+0xb4>
 8009f3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f3e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f42:	6013      	str	r3, [r2, #0]
 8009f44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f48:	4333      	orrs	r3, r6
 8009f4a:	f000 8592 	beq.w	800aa72 <_dtoa_r+0xbb2>
 8009f4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f50:	b963      	cbnz	r3, 8009f6c <_dtoa_r+0xac>
 8009f52:	4b92      	ldr	r3, [pc, #584]	; (800a19c <_dtoa_r+0x2dc>)
 8009f54:	e022      	b.n	8009f9c <_dtoa_r+0xdc>
 8009f56:	4b92      	ldr	r3, [pc, #584]	; (800a1a0 <_dtoa_r+0x2e0>)
 8009f58:	9301      	str	r3, [sp, #4]
 8009f5a:	3308      	adds	r3, #8
 8009f5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f5e:	6013      	str	r3, [r2, #0]
 8009f60:	9801      	ldr	r0, [sp, #4]
 8009f62:	b013      	add	sp, #76	; 0x4c
 8009f64:	ecbd 8b04 	vpop	{d8-d9}
 8009f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f6c:	4b8b      	ldr	r3, [pc, #556]	; (800a19c <_dtoa_r+0x2dc>)
 8009f6e:	9301      	str	r3, [sp, #4]
 8009f70:	3303      	adds	r3, #3
 8009f72:	e7f3      	b.n	8009f5c <_dtoa_r+0x9c>
 8009f74:	2200      	movs	r2, #0
 8009f76:	2300      	movs	r3, #0
 8009f78:	4650      	mov	r0, sl
 8009f7a:	4659      	mov	r1, fp
 8009f7c:	f7f6 fdc4 	bl	8000b08 <__aeabi_dcmpeq>
 8009f80:	ec4b ab19 	vmov	d9, sl, fp
 8009f84:	4680      	mov	r8, r0
 8009f86:	b158      	cbz	r0, 8009fa0 <_dtoa_r+0xe0>
 8009f88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	6013      	str	r3, [r2, #0]
 8009f8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	f000 856b 	beq.w	800aa6c <_dtoa_r+0xbac>
 8009f96:	4883      	ldr	r0, [pc, #524]	; (800a1a4 <_dtoa_r+0x2e4>)
 8009f98:	6018      	str	r0, [r3, #0]
 8009f9a:	1e43      	subs	r3, r0, #1
 8009f9c:	9301      	str	r3, [sp, #4]
 8009f9e:	e7df      	b.n	8009f60 <_dtoa_r+0xa0>
 8009fa0:	ec4b ab10 	vmov	d0, sl, fp
 8009fa4:	aa10      	add	r2, sp, #64	; 0x40
 8009fa6:	a911      	add	r1, sp, #68	; 0x44
 8009fa8:	4620      	mov	r0, r4
 8009faa:	f001 fd01 	bl	800b9b0 <__d2b>
 8009fae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009fb2:	ee08 0a10 	vmov	s16, r0
 8009fb6:	2d00      	cmp	r5, #0
 8009fb8:	f000 8084 	beq.w	800a0c4 <_dtoa_r+0x204>
 8009fbc:	ee19 3a90 	vmov	r3, s19
 8009fc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fc4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009fc8:	4656      	mov	r6, sl
 8009fca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009fce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009fd2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009fd6:	4b74      	ldr	r3, [pc, #464]	; (800a1a8 <_dtoa_r+0x2e8>)
 8009fd8:	2200      	movs	r2, #0
 8009fda:	4630      	mov	r0, r6
 8009fdc:	4639      	mov	r1, r7
 8009fde:	f7f6 f973 	bl	80002c8 <__aeabi_dsub>
 8009fe2:	a365      	add	r3, pc, #404	; (adr r3, 800a178 <_dtoa_r+0x2b8>)
 8009fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe8:	f7f6 fb26 	bl	8000638 <__aeabi_dmul>
 8009fec:	a364      	add	r3, pc, #400	; (adr r3, 800a180 <_dtoa_r+0x2c0>)
 8009fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff2:	f7f6 f96b 	bl	80002cc <__adddf3>
 8009ff6:	4606      	mov	r6, r0
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	460f      	mov	r7, r1
 8009ffc:	f7f6 fab2 	bl	8000564 <__aeabi_i2d>
 800a000:	a361      	add	r3, pc, #388	; (adr r3, 800a188 <_dtoa_r+0x2c8>)
 800a002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a006:	f7f6 fb17 	bl	8000638 <__aeabi_dmul>
 800a00a:	4602      	mov	r2, r0
 800a00c:	460b      	mov	r3, r1
 800a00e:	4630      	mov	r0, r6
 800a010:	4639      	mov	r1, r7
 800a012:	f7f6 f95b 	bl	80002cc <__adddf3>
 800a016:	4606      	mov	r6, r0
 800a018:	460f      	mov	r7, r1
 800a01a:	f7f6 fdbd 	bl	8000b98 <__aeabi_d2iz>
 800a01e:	2200      	movs	r2, #0
 800a020:	9000      	str	r0, [sp, #0]
 800a022:	2300      	movs	r3, #0
 800a024:	4630      	mov	r0, r6
 800a026:	4639      	mov	r1, r7
 800a028:	f7f6 fd78 	bl	8000b1c <__aeabi_dcmplt>
 800a02c:	b150      	cbz	r0, 800a044 <_dtoa_r+0x184>
 800a02e:	9800      	ldr	r0, [sp, #0]
 800a030:	f7f6 fa98 	bl	8000564 <__aeabi_i2d>
 800a034:	4632      	mov	r2, r6
 800a036:	463b      	mov	r3, r7
 800a038:	f7f6 fd66 	bl	8000b08 <__aeabi_dcmpeq>
 800a03c:	b910      	cbnz	r0, 800a044 <_dtoa_r+0x184>
 800a03e:	9b00      	ldr	r3, [sp, #0]
 800a040:	3b01      	subs	r3, #1
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	9b00      	ldr	r3, [sp, #0]
 800a046:	2b16      	cmp	r3, #22
 800a048:	d85a      	bhi.n	800a100 <_dtoa_r+0x240>
 800a04a:	9a00      	ldr	r2, [sp, #0]
 800a04c:	4b57      	ldr	r3, [pc, #348]	; (800a1ac <_dtoa_r+0x2ec>)
 800a04e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a056:	ec51 0b19 	vmov	r0, r1, d9
 800a05a:	f7f6 fd5f 	bl	8000b1c <__aeabi_dcmplt>
 800a05e:	2800      	cmp	r0, #0
 800a060:	d050      	beq.n	800a104 <_dtoa_r+0x244>
 800a062:	9b00      	ldr	r3, [sp, #0]
 800a064:	3b01      	subs	r3, #1
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	2300      	movs	r3, #0
 800a06a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a06c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a06e:	1b5d      	subs	r5, r3, r5
 800a070:	1e6b      	subs	r3, r5, #1
 800a072:	9305      	str	r3, [sp, #20]
 800a074:	bf45      	ittet	mi
 800a076:	f1c5 0301 	rsbmi	r3, r5, #1
 800a07a:	9304      	strmi	r3, [sp, #16]
 800a07c:	2300      	movpl	r3, #0
 800a07e:	2300      	movmi	r3, #0
 800a080:	bf4c      	ite	mi
 800a082:	9305      	strmi	r3, [sp, #20]
 800a084:	9304      	strpl	r3, [sp, #16]
 800a086:	9b00      	ldr	r3, [sp, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	db3d      	blt.n	800a108 <_dtoa_r+0x248>
 800a08c:	9b05      	ldr	r3, [sp, #20]
 800a08e:	9a00      	ldr	r2, [sp, #0]
 800a090:	920a      	str	r2, [sp, #40]	; 0x28
 800a092:	4413      	add	r3, r2
 800a094:	9305      	str	r3, [sp, #20]
 800a096:	2300      	movs	r3, #0
 800a098:	9307      	str	r3, [sp, #28]
 800a09a:	9b06      	ldr	r3, [sp, #24]
 800a09c:	2b09      	cmp	r3, #9
 800a09e:	f200 8089 	bhi.w	800a1b4 <_dtoa_r+0x2f4>
 800a0a2:	2b05      	cmp	r3, #5
 800a0a4:	bfc4      	itt	gt
 800a0a6:	3b04      	subgt	r3, #4
 800a0a8:	9306      	strgt	r3, [sp, #24]
 800a0aa:	9b06      	ldr	r3, [sp, #24]
 800a0ac:	f1a3 0302 	sub.w	r3, r3, #2
 800a0b0:	bfcc      	ite	gt
 800a0b2:	2500      	movgt	r5, #0
 800a0b4:	2501      	movle	r5, #1
 800a0b6:	2b03      	cmp	r3, #3
 800a0b8:	f200 8087 	bhi.w	800a1ca <_dtoa_r+0x30a>
 800a0bc:	e8df f003 	tbb	[pc, r3]
 800a0c0:	59383a2d 	.word	0x59383a2d
 800a0c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a0c8:	441d      	add	r5, r3
 800a0ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a0ce:	2b20      	cmp	r3, #32
 800a0d0:	bfc1      	itttt	gt
 800a0d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a0d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a0da:	fa0b f303 	lslgt.w	r3, fp, r3
 800a0de:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a0e2:	bfda      	itte	le
 800a0e4:	f1c3 0320 	rsble	r3, r3, #32
 800a0e8:	fa06 f003 	lslle.w	r0, r6, r3
 800a0ec:	4318      	orrgt	r0, r3
 800a0ee:	f7f6 fa29 	bl	8000544 <__aeabi_ui2d>
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	4606      	mov	r6, r0
 800a0f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a0fa:	3d01      	subs	r5, #1
 800a0fc:	930e      	str	r3, [sp, #56]	; 0x38
 800a0fe:	e76a      	b.n	8009fd6 <_dtoa_r+0x116>
 800a100:	2301      	movs	r3, #1
 800a102:	e7b2      	b.n	800a06a <_dtoa_r+0x1aa>
 800a104:	900b      	str	r0, [sp, #44]	; 0x2c
 800a106:	e7b1      	b.n	800a06c <_dtoa_r+0x1ac>
 800a108:	9b04      	ldr	r3, [sp, #16]
 800a10a:	9a00      	ldr	r2, [sp, #0]
 800a10c:	1a9b      	subs	r3, r3, r2
 800a10e:	9304      	str	r3, [sp, #16]
 800a110:	4253      	negs	r3, r2
 800a112:	9307      	str	r3, [sp, #28]
 800a114:	2300      	movs	r3, #0
 800a116:	930a      	str	r3, [sp, #40]	; 0x28
 800a118:	e7bf      	b.n	800a09a <_dtoa_r+0x1da>
 800a11a:	2300      	movs	r3, #0
 800a11c:	9308      	str	r3, [sp, #32]
 800a11e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a120:	2b00      	cmp	r3, #0
 800a122:	dc55      	bgt.n	800a1d0 <_dtoa_r+0x310>
 800a124:	2301      	movs	r3, #1
 800a126:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a12a:	461a      	mov	r2, r3
 800a12c:	9209      	str	r2, [sp, #36]	; 0x24
 800a12e:	e00c      	b.n	800a14a <_dtoa_r+0x28a>
 800a130:	2301      	movs	r3, #1
 800a132:	e7f3      	b.n	800a11c <_dtoa_r+0x25c>
 800a134:	2300      	movs	r3, #0
 800a136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a138:	9308      	str	r3, [sp, #32]
 800a13a:	9b00      	ldr	r3, [sp, #0]
 800a13c:	4413      	add	r3, r2
 800a13e:	9302      	str	r3, [sp, #8]
 800a140:	3301      	adds	r3, #1
 800a142:	2b01      	cmp	r3, #1
 800a144:	9303      	str	r3, [sp, #12]
 800a146:	bfb8      	it	lt
 800a148:	2301      	movlt	r3, #1
 800a14a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a14c:	2200      	movs	r2, #0
 800a14e:	6042      	str	r2, [r0, #4]
 800a150:	2204      	movs	r2, #4
 800a152:	f102 0614 	add.w	r6, r2, #20
 800a156:	429e      	cmp	r6, r3
 800a158:	6841      	ldr	r1, [r0, #4]
 800a15a:	d93d      	bls.n	800a1d8 <_dtoa_r+0x318>
 800a15c:	4620      	mov	r0, r4
 800a15e:	f001 f839 	bl	800b1d4 <_Balloc>
 800a162:	9001      	str	r0, [sp, #4]
 800a164:	2800      	cmp	r0, #0
 800a166:	d13b      	bne.n	800a1e0 <_dtoa_r+0x320>
 800a168:	4b11      	ldr	r3, [pc, #68]	; (800a1b0 <_dtoa_r+0x2f0>)
 800a16a:	4602      	mov	r2, r0
 800a16c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a170:	e6c0      	b.n	8009ef4 <_dtoa_r+0x34>
 800a172:	2301      	movs	r3, #1
 800a174:	e7df      	b.n	800a136 <_dtoa_r+0x276>
 800a176:	bf00      	nop
 800a178:	636f4361 	.word	0x636f4361
 800a17c:	3fd287a7 	.word	0x3fd287a7
 800a180:	8b60c8b3 	.word	0x8b60c8b3
 800a184:	3fc68a28 	.word	0x3fc68a28
 800a188:	509f79fb 	.word	0x509f79fb
 800a18c:	3fd34413 	.word	0x3fd34413
 800a190:	0800cced 	.word	0x0800cced
 800a194:	0800cd04 	.word	0x0800cd04
 800a198:	7ff00000 	.word	0x7ff00000
 800a19c:	0800cce9 	.word	0x0800cce9
 800a1a0:	0800cce0 	.word	0x0800cce0
 800a1a4:	0800cc69 	.word	0x0800cc69
 800a1a8:	3ff80000 	.word	0x3ff80000
 800a1ac:	0800ce70 	.word	0x0800ce70
 800a1b0:	0800cd5f 	.word	0x0800cd5f
 800a1b4:	2501      	movs	r5, #1
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	9306      	str	r3, [sp, #24]
 800a1ba:	9508      	str	r5, [sp, #32]
 800a1bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a1c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	2312      	movs	r3, #18
 800a1c8:	e7b0      	b.n	800a12c <_dtoa_r+0x26c>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	9308      	str	r3, [sp, #32]
 800a1ce:	e7f5      	b.n	800a1bc <_dtoa_r+0x2fc>
 800a1d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a1d6:	e7b8      	b.n	800a14a <_dtoa_r+0x28a>
 800a1d8:	3101      	adds	r1, #1
 800a1da:	6041      	str	r1, [r0, #4]
 800a1dc:	0052      	lsls	r2, r2, #1
 800a1de:	e7b8      	b.n	800a152 <_dtoa_r+0x292>
 800a1e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1e2:	9a01      	ldr	r2, [sp, #4]
 800a1e4:	601a      	str	r2, [r3, #0]
 800a1e6:	9b03      	ldr	r3, [sp, #12]
 800a1e8:	2b0e      	cmp	r3, #14
 800a1ea:	f200 809d 	bhi.w	800a328 <_dtoa_r+0x468>
 800a1ee:	2d00      	cmp	r5, #0
 800a1f0:	f000 809a 	beq.w	800a328 <_dtoa_r+0x468>
 800a1f4:	9b00      	ldr	r3, [sp, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	dd32      	ble.n	800a260 <_dtoa_r+0x3a0>
 800a1fa:	4ab7      	ldr	r2, [pc, #732]	; (800a4d8 <_dtoa_r+0x618>)
 800a1fc:	f003 030f 	and.w	r3, r3, #15
 800a200:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a204:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a208:	9b00      	ldr	r3, [sp, #0]
 800a20a:	05d8      	lsls	r0, r3, #23
 800a20c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a210:	d516      	bpl.n	800a240 <_dtoa_r+0x380>
 800a212:	4bb2      	ldr	r3, [pc, #712]	; (800a4dc <_dtoa_r+0x61c>)
 800a214:	ec51 0b19 	vmov	r0, r1, d9
 800a218:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a21c:	f7f6 fb36 	bl	800088c <__aeabi_ddiv>
 800a220:	f007 070f 	and.w	r7, r7, #15
 800a224:	4682      	mov	sl, r0
 800a226:	468b      	mov	fp, r1
 800a228:	2503      	movs	r5, #3
 800a22a:	4eac      	ldr	r6, [pc, #688]	; (800a4dc <_dtoa_r+0x61c>)
 800a22c:	b957      	cbnz	r7, 800a244 <_dtoa_r+0x384>
 800a22e:	4642      	mov	r2, r8
 800a230:	464b      	mov	r3, r9
 800a232:	4650      	mov	r0, sl
 800a234:	4659      	mov	r1, fp
 800a236:	f7f6 fb29 	bl	800088c <__aeabi_ddiv>
 800a23a:	4682      	mov	sl, r0
 800a23c:	468b      	mov	fp, r1
 800a23e:	e028      	b.n	800a292 <_dtoa_r+0x3d2>
 800a240:	2502      	movs	r5, #2
 800a242:	e7f2      	b.n	800a22a <_dtoa_r+0x36a>
 800a244:	07f9      	lsls	r1, r7, #31
 800a246:	d508      	bpl.n	800a25a <_dtoa_r+0x39a>
 800a248:	4640      	mov	r0, r8
 800a24a:	4649      	mov	r1, r9
 800a24c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a250:	f7f6 f9f2 	bl	8000638 <__aeabi_dmul>
 800a254:	3501      	adds	r5, #1
 800a256:	4680      	mov	r8, r0
 800a258:	4689      	mov	r9, r1
 800a25a:	107f      	asrs	r7, r7, #1
 800a25c:	3608      	adds	r6, #8
 800a25e:	e7e5      	b.n	800a22c <_dtoa_r+0x36c>
 800a260:	f000 809b 	beq.w	800a39a <_dtoa_r+0x4da>
 800a264:	9b00      	ldr	r3, [sp, #0]
 800a266:	4f9d      	ldr	r7, [pc, #628]	; (800a4dc <_dtoa_r+0x61c>)
 800a268:	425e      	negs	r6, r3
 800a26a:	4b9b      	ldr	r3, [pc, #620]	; (800a4d8 <_dtoa_r+0x618>)
 800a26c:	f006 020f 	and.w	r2, r6, #15
 800a270:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a278:	ec51 0b19 	vmov	r0, r1, d9
 800a27c:	f7f6 f9dc 	bl	8000638 <__aeabi_dmul>
 800a280:	1136      	asrs	r6, r6, #4
 800a282:	4682      	mov	sl, r0
 800a284:	468b      	mov	fp, r1
 800a286:	2300      	movs	r3, #0
 800a288:	2502      	movs	r5, #2
 800a28a:	2e00      	cmp	r6, #0
 800a28c:	d17a      	bne.n	800a384 <_dtoa_r+0x4c4>
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d1d3      	bne.n	800a23a <_dtoa_r+0x37a>
 800a292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a294:	2b00      	cmp	r3, #0
 800a296:	f000 8082 	beq.w	800a39e <_dtoa_r+0x4de>
 800a29a:	4b91      	ldr	r3, [pc, #580]	; (800a4e0 <_dtoa_r+0x620>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	4650      	mov	r0, sl
 800a2a0:	4659      	mov	r1, fp
 800a2a2:	f7f6 fc3b 	bl	8000b1c <__aeabi_dcmplt>
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	d079      	beq.n	800a39e <_dtoa_r+0x4de>
 800a2aa:	9b03      	ldr	r3, [sp, #12]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d076      	beq.n	800a39e <_dtoa_r+0x4de>
 800a2b0:	9b02      	ldr	r3, [sp, #8]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	dd36      	ble.n	800a324 <_dtoa_r+0x464>
 800a2b6:	9b00      	ldr	r3, [sp, #0]
 800a2b8:	4650      	mov	r0, sl
 800a2ba:	4659      	mov	r1, fp
 800a2bc:	1e5f      	subs	r7, r3, #1
 800a2be:	2200      	movs	r2, #0
 800a2c0:	4b88      	ldr	r3, [pc, #544]	; (800a4e4 <_dtoa_r+0x624>)
 800a2c2:	f7f6 f9b9 	bl	8000638 <__aeabi_dmul>
 800a2c6:	9e02      	ldr	r6, [sp, #8]
 800a2c8:	4682      	mov	sl, r0
 800a2ca:	468b      	mov	fp, r1
 800a2cc:	3501      	adds	r5, #1
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	f7f6 f948 	bl	8000564 <__aeabi_i2d>
 800a2d4:	4652      	mov	r2, sl
 800a2d6:	465b      	mov	r3, fp
 800a2d8:	f7f6 f9ae 	bl	8000638 <__aeabi_dmul>
 800a2dc:	4b82      	ldr	r3, [pc, #520]	; (800a4e8 <_dtoa_r+0x628>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f7f5 fff4 	bl	80002cc <__adddf3>
 800a2e4:	46d0      	mov	r8, sl
 800a2e6:	46d9      	mov	r9, fp
 800a2e8:	4682      	mov	sl, r0
 800a2ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a2ee:	2e00      	cmp	r6, #0
 800a2f0:	d158      	bne.n	800a3a4 <_dtoa_r+0x4e4>
 800a2f2:	4b7e      	ldr	r3, [pc, #504]	; (800a4ec <_dtoa_r+0x62c>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	4640      	mov	r0, r8
 800a2f8:	4649      	mov	r1, r9
 800a2fa:	f7f5 ffe5 	bl	80002c8 <__aeabi_dsub>
 800a2fe:	4652      	mov	r2, sl
 800a300:	465b      	mov	r3, fp
 800a302:	4680      	mov	r8, r0
 800a304:	4689      	mov	r9, r1
 800a306:	f7f6 fc27 	bl	8000b58 <__aeabi_dcmpgt>
 800a30a:	2800      	cmp	r0, #0
 800a30c:	f040 8295 	bne.w	800a83a <_dtoa_r+0x97a>
 800a310:	4652      	mov	r2, sl
 800a312:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a316:	4640      	mov	r0, r8
 800a318:	4649      	mov	r1, r9
 800a31a:	f7f6 fbff 	bl	8000b1c <__aeabi_dcmplt>
 800a31e:	2800      	cmp	r0, #0
 800a320:	f040 8289 	bne.w	800a836 <_dtoa_r+0x976>
 800a324:	ec5b ab19 	vmov	sl, fp, d9
 800a328:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	f2c0 8148 	blt.w	800a5c0 <_dtoa_r+0x700>
 800a330:	9a00      	ldr	r2, [sp, #0]
 800a332:	2a0e      	cmp	r2, #14
 800a334:	f300 8144 	bgt.w	800a5c0 <_dtoa_r+0x700>
 800a338:	4b67      	ldr	r3, [pc, #412]	; (800a4d8 <_dtoa_r+0x618>)
 800a33a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a33e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a344:	2b00      	cmp	r3, #0
 800a346:	f280 80d5 	bge.w	800a4f4 <_dtoa_r+0x634>
 800a34a:	9b03      	ldr	r3, [sp, #12]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f300 80d1 	bgt.w	800a4f4 <_dtoa_r+0x634>
 800a352:	f040 826f 	bne.w	800a834 <_dtoa_r+0x974>
 800a356:	4b65      	ldr	r3, [pc, #404]	; (800a4ec <_dtoa_r+0x62c>)
 800a358:	2200      	movs	r2, #0
 800a35a:	4640      	mov	r0, r8
 800a35c:	4649      	mov	r1, r9
 800a35e:	f7f6 f96b 	bl	8000638 <__aeabi_dmul>
 800a362:	4652      	mov	r2, sl
 800a364:	465b      	mov	r3, fp
 800a366:	f7f6 fbed 	bl	8000b44 <__aeabi_dcmpge>
 800a36a:	9e03      	ldr	r6, [sp, #12]
 800a36c:	4637      	mov	r7, r6
 800a36e:	2800      	cmp	r0, #0
 800a370:	f040 8245 	bne.w	800a7fe <_dtoa_r+0x93e>
 800a374:	9d01      	ldr	r5, [sp, #4]
 800a376:	2331      	movs	r3, #49	; 0x31
 800a378:	f805 3b01 	strb.w	r3, [r5], #1
 800a37c:	9b00      	ldr	r3, [sp, #0]
 800a37e:	3301      	adds	r3, #1
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	e240      	b.n	800a806 <_dtoa_r+0x946>
 800a384:	07f2      	lsls	r2, r6, #31
 800a386:	d505      	bpl.n	800a394 <_dtoa_r+0x4d4>
 800a388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a38c:	f7f6 f954 	bl	8000638 <__aeabi_dmul>
 800a390:	3501      	adds	r5, #1
 800a392:	2301      	movs	r3, #1
 800a394:	1076      	asrs	r6, r6, #1
 800a396:	3708      	adds	r7, #8
 800a398:	e777      	b.n	800a28a <_dtoa_r+0x3ca>
 800a39a:	2502      	movs	r5, #2
 800a39c:	e779      	b.n	800a292 <_dtoa_r+0x3d2>
 800a39e:	9f00      	ldr	r7, [sp, #0]
 800a3a0:	9e03      	ldr	r6, [sp, #12]
 800a3a2:	e794      	b.n	800a2ce <_dtoa_r+0x40e>
 800a3a4:	9901      	ldr	r1, [sp, #4]
 800a3a6:	4b4c      	ldr	r3, [pc, #304]	; (800a4d8 <_dtoa_r+0x618>)
 800a3a8:	4431      	add	r1, r6
 800a3aa:	910d      	str	r1, [sp, #52]	; 0x34
 800a3ac:	9908      	ldr	r1, [sp, #32]
 800a3ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a3b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a3b6:	2900      	cmp	r1, #0
 800a3b8:	d043      	beq.n	800a442 <_dtoa_r+0x582>
 800a3ba:	494d      	ldr	r1, [pc, #308]	; (800a4f0 <_dtoa_r+0x630>)
 800a3bc:	2000      	movs	r0, #0
 800a3be:	f7f6 fa65 	bl	800088c <__aeabi_ddiv>
 800a3c2:	4652      	mov	r2, sl
 800a3c4:	465b      	mov	r3, fp
 800a3c6:	f7f5 ff7f 	bl	80002c8 <__aeabi_dsub>
 800a3ca:	9d01      	ldr	r5, [sp, #4]
 800a3cc:	4682      	mov	sl, r0
 800a3ce:	468b      	mov	fp, r1
 800a3d0:	4649      	mov	r1, r9
 800a3d2:	4640      	mov	r0, r8
 800a3d4:	f7f6 fbe0 	bl	8000b98 <__aeabi_d2iz>
 800a3d8:	4606      	mov	r6, r0
 800a3da:	f7f6 f8c3 	bl	8000564 <__aeabi_i2d>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	4640      	mov	r0, r8
 800a3e4:	4649      	mov	r1, r9
 800a3e6:	f7f5 ff6f 	bl	80002c8 <__aeabi_dsub>
 800a3ea:	3630      	adds	r6, #48	; 0x30
 800a3ec:	f805 6b01 	strb.w	r6, [r5], #1
 800a3f0:	4652      	mov	r2, sl
 800a3f2:	465b      	mov	r3, fp
 800a3f4:	4680      	mov	r8, r0
 800a3f6:	4689      	mov	r9, r1
 800a3f8:	f7f6 fb90 	bl	8000b1c <__aeabi_dcmplt>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	d163      	bne.n	800a4c8 <_dtoa_r+0x608>
 800a400:	4642      	mov	r2, r8
 800a402:	464b      	mov	r3, r9
 800a404:	4936      	ldr	r1, [pc, #216]	; (800a4e0 <_dtoa_r+0x620>)
 800a406:	2000      	movs	r0, #0
 800a408:	f7f5 ff5e 	bl	80002c8 <__aeabi_dsub>
 800a40c:	4652      	mov	r2, sl
 800a40e:	465b      	mov	r3, fp
 800a410:	f7f6 fb84 	bl	8000b1c <__aeabi_dcmplt>
 800a414:	2800      	cmp	r0, #0
 800a416:	f040 80b5 	bne.w	800a584 <_dtoa_r+0x6c4>
 800a41a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a41c:	429d      	cmp	r5, r3
 800a41e:	d081      	beq.n	800a324 <_dtoa_r+0x464>
 800a420:	4b30      	ldr	r3, [pc, #192]	; (800a4e4 <_dtoa_r+0x624>)
 800a422:	2200      	movs	r2, #0
 800a424:	4650      	mov	r0, sl
 800a426:	4659      	mov	r1, fp
 800a428:	f7f6 f906 	bl	8000638 <__aeabi_dmul>
 800a42c:	4b2d      	ldr	r3, [pc, #180]	; (800a4e4 <_dtoa_r+0x624>)
 800a42e:	4682      	mov	sl, r0
 800a430:	468b      	mov	fp, r1
 800a432:	4640      	mov	r0, r8
 800a434:	4649      	mov	r1, r9
 800a436:	2200      	movs	r2, #0
 800a438:	f7f6 f8fe 	bl	8000638 <__aeabi_dmul>
 800a43c:	4680      	mov	r8, r0
 800a43e:	4689      	mov	r9, r1
 800a440:	e7c6      	b.n	800a3d0 <_dtoa_r+0x510>
 800a442:	4650      	mov	r0, sl
 800a444:	4659      	mov	r1, fp
 800a446:	f7f6 f8f7 	bl	8000638 <__aeabi_dmul>
 800a44a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a44c:	9d01      	ldr	r5, [sp, #4]
 800a44e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a450:	4682      	mov	sl, r0
 800a452:	468b      	mov	fp, r1
 800a454:	4649      	mov	r1, r9
 800a456:	4640      	mov	r0, r8
 800a458:	f7f6 fb9e 	bl	8000b98 <__aeabi_d2iz>
 800a45c:	4606      	mov	r6, r0
 800a45e:	f7f6 f881 	bl	8000564 <__aeabi_i2d>
 800a462:	3630      	adds	r6, #48	; 0x30
 800a464:	4602      	mov	r2, r0
 800a466:	460b      	mov	r3, r1
 800a468:	4640      	mov	r0, r8
 800a46a:	4649      	mov	r1, r9
 800a46c:	f7f5 ff2c 	bl	80002c8 <__aeabi_dsub>
 800a470:	f805 6b01 	strb.w	r6, [r5], #1
 800a474:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a476:	429d      	cmp	r5, r3
 800a478:	4680      	mov	r8, r0
 800a47a:	4689      	mov	r9, r1
 800a47c:	f04f 0200 	mov.w	r2, #0
 800a480:	d124      	bne.n	800a4cc <_dtoa_r+0x60c>
 800a482:	4b1b      	ldr	r3, [pc, #108]	; (800a4f0 <_dtoa_r+0x630>)
 800a484:	4650      	mov	r0, sl
 800a486:	4659      	mov	r1, fp
 800a488:	f7f5 ff20 	bl	80002cc <__adddf3>
 800a48c:	4602      	mov	r2, r0
 800a48e:	460b      	mov	r3, r1
 800a490:	4640      	mov	r0, r8
 800a492:	4649      	mov	r1, r9
 800a494:	f7f6 fb60 	bl	8000b58 <__aeabi_dcmpgt>
 800a498:	2800      	cmp	r0, #0
 800a49a:	d173      	bne.n	800a584 <_dtoa_r+0x6c4>
 800a49c:	4652      	mov	r2, sl
 800a49e:	465b      	mov	r3, fp
 800a4a0:	4913      	ldr	r1, [pc, #76]	; (800a4f0 <_dtoa_r+0x630>)
 800a4a2:	2000      	movs	r0, #0
 800a4a4:	f7f5 ff10 	bl	80002c8 <__aeabi_dsub>
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	4640      	mov	r0, r8
 800a4ae:	4649      	mov	r1, r9
 800a4b0:	f7f6 fb34 	bl	8000b1c <__aeabi_dcmplt>
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	f43f af35 	beq.w	800a324 <_dtoa_r+0x464>
 800a4ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a4bc:	1e6b      	subs	r3, r5, #1
 800a4be:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a4c4:	2b30      	cmp	r3, #48	; 0x30
 800a4c6:	d0f8      	beq.n	800a4ba <_dtoa_r+0x5fa>
 800a4c8:	9700      	str	r7, [sp, #0]
 800a4ca:	e049      	b.n	800a560 <_dtoa_r+0x6a0>
 800a4cc:	4b05      	ldr	r3, [pc, #20]	; (800a4e4 <_dtoa_r+0x624>)
 800a4ce:	f7f6 f8b3 	bl	8000638 <__aeabi_dmul>
 800a4d2:	4680      	mov	r8, r0
 800a4d4:	4689      	mov	r9, r1
 800a4d6:	e7bd      	b.n	800a454 <_dtoa_r+0x594>
 800a4d8:	0800ce70 	.word	0x0800ce70
 800a4dc:	0800ce48 	.word	0x0800ce48
 800a4e0:	3ff00000 	.word	0x3ff00000
 800a4e4:	40240000 	.word	0x40240000
 800a4e8:	401c0000 	.word	0x401c0000
 800a4ec:	40140000 	.word	0x40140000
 800a4f0:	3fe00000 	.word	0x3fe00000
 800a4f4:	9d01      	ldr	r5, [sp, #4]
 800a4f6:	4656      	mov	r6, sl
 800a4f8:	465f      	mov	r7, fp
 800a4fa:	4642      	mov	r2, r8
 800a4fc:	464b      	mov	r3, r9
 800a4fe:	4630      	mov	r0, r6
 800a500:	4639      	mov	r1, r7
 800a502:	f7f6 f9c3 	bl	800088c <__aeabi_ddiv>
 800a506:	f7f6 fb47 	bl	8000b98 <__aeabi_d2iz>
 800a50a:	4682      	mov	sl, r0
 800a50c:	f7f6 f82a 	bl	8000564 <__aeabi_i2d>
 800a510:	4642      	mov	r2, r8
 800a512:	464b      	mov	r3, r9
 800a514:	f7f6 f890 	bl	8000638 <__aeabi_dmul>
 800a518:	4602      	mov	r2, r0
 800a51a:	460b      	mov	r3, r1
 800a51c:	4630      	mov	r0, r6
 800a51e:	4639      	mov	r1, r7
 800a520:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a524:	f7f5 fed0 	bl	80002c8 <__aeabi_dsub>
 800a528:	f805 6b01 	strb.w	r6, [r5], #1
 800a52c:	9e01      	ldr	r6, [sp, #4]
 800a52e:	9f03      	ldr	r7, [sp, #12]
 800a530:	1bae      	subs	r6, r5, r6
 800a532:	42b7      	cmp	r7, r6
 800a534:	4602      	mov	r2, r0
 800a536:	460b      	mov	r3, r1
 800a538:	d135      	bne.n	800a5a6 <_dtoa_r+0x6e6>
 800a53a:	f7f5 fec7 	bl	80002cc <__adddf3>
 800a53e:	4642      	mov	r2, r8
 800a540:	464b      	mov	r3, r9
 800a542:	4606      	mov	r6, r0
 800a544:	460f      	mov	r7, r1
 800a546:	f7f6 fb07 	bl	8000b58 <__aeabi_dcmpgt>
 800a54a:	b9d0      	cbnz	r0, 800a582 <_dtoa_r+0x6c2>
 800a54c:	4642      	mov	r2, r8
 800a54e:	464b      	mov	r3, r9
 800a550:	4630      	mov	r0, r6
 800a552:	4639      	mov	r1, r7
 800a554:	f7f6 fad8 	bl	8000b08 <__aeabi_dcmpeq>
 800a558:	b110      	cbz	r0, 800a560 <_dtoa_r+0x6a0>
 800a55a:	f01a 0f01 	tst.w	sl, #1
 800a55e:	d110      	bne.n	800a582 <_dtoa_r+0x6c2>
 800a560:	4620      	mov	r0, r4
 800a562:	ee18 1a10 	vmov	r1, s16
 800a566:	f000 fe75 	bl	800b254 <_Bfree>
 800a56a:	2300      	movs	r3, #0
 800a56c:	9800      	ldr	r0, [sp, #0]
 800a56e:	702b      	strb	r3, [r5, #0]
 800a570:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a572:	3001      	adds	r0, #1
 800a574:	6018      	str	r0, [r3, #0]
 800a576:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a578:	2b00      	cmp	r3, #0
 800a57a:	f43f acf1 	beq.w	8009f60 <_dtoa_r+0xa0>
 800a57e:	601d      	str	r5, [r3, #0]
 800a580:	e4ee      	b.n	8009f60 <_dtoa_r+0xa0>
 800a582:	9f00      	ldr	r7, [sp, #0]
 800a584:	462b      	mov	r3, r5
 800a586:	461d      	mov	r5, r3
 800a588:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a58c:	2a39      	cmp	r2, #57	; 0x39
 800a58e:	d106      	bne.n	800a59e <_dtoa_r+0x6de>
 800a590:	9a01      	ldr	r2, [sp, #4]
 800a592:	429a      	cmp	r2, r3
 800a594:	d1f7      	bne.n	800a586 <_dtoa_r+0x6c6>
 800a596:	9901      	ldr	r1, [sp, #4]
 800a598:	2230      	movs	r2, #48	; 0x30
 800a59a:	3701      	adds	r7, #1
 800a59c:	700a      	strb	r2, [r1, #0]
 800a59e:	781a      	ldrb	r2, [r3, #0]
 800a5a0:	3201      	adds	r2, #1
 800a5a2:	701a      	strb	r2, [r3, #0]
 800a5a4:	e790      	b.n	800a4c8 <_dtoa_r+0x608>
 800a5a6:	4ba6      	ldr	r3, [pc, #664]	; (800a840 <_dtoa_r+0x980>)
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f7f6 f845 	bl	8000638 <__aeabi_dmul>
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	4606      	mov	r6, r0
 800a5b4:	460f      	mov	r7, r1
 800a5b6:	f7f6 faa7 	bl	8000b08 <__aeabi_dcmpeq>
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	d09d      	beq.n	800a4fa <_dtoa_r+0x63a>
 800a5be:	e7cf      	b.n	800a560 <_dtoa_r+0x6a0>
 800a5c0:	9a08      	ldr	r2, [sp, #32]
 800a5c2:	2a00      	cmp	r2, #0
 800a5c4:	f000 80d7 	beq.w	800a776 <_dtoa_r+0x8b6>
 800a5c8:	9a06      	ldr	r2, [sp, #24]
 800a5ca:	2a01      	cmp	r2, #1
 800a5cc:	f300 80ba 	bgt.w	800a744 <_dtoa_r+0x884>
 800a5d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5d2:	2a00      	cmp	r2, #0
 800a5d4:	f000 80b2 	beq.w	800a73c <_dtoa_r+0x87c>
 800a5d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a5dc:	9e07      	ldr	r6, [sp, #28]
 800a5de:	9d04      	ldr	r5, [sp, #16]
 800a5e0:	9a04      	ldr	r2, [sp, #16]
 800a5e2:	441a      	add	r2, r3
 800a5e4:	9204      	str	r2, [sp, #16]
 800a5e6:	9a05      	ldr	r2, [sp, #20]
 800a5e8:	2101      	movs	r1, #1
 800a5ea:	441a      	add	r2, r3
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	9205      	str	r2, [sp, #20]
 800a5f0:	f000 ff32 	bl	800b458 <__i2b>
 800a5f4:	4607      	mov	r7, r0
 800a5f6:	2d00      	cmp	r5, #0
 800a5f8:	dd0c      	ble.n	800a614 <_dtoa_r+0x754>
 800a5fa:	9b05      	ldr	r3, [sp, #20]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	dd09      	ble.n	800a614 <_dtoa_r+0x754>
 800a600:	42ab      	cmp	r3, r5
 800a602:	9a04      	ldr	r2, [sp, #16]
 800a604:	bfa8      	it	ge
 800a606:	462b      	movge	r3, r5
 800a608:	1ad2      	subs	r2, r2, r3
 800a60a:	9204      	str	r2, [sp, #16]
 800a60c:	9a05      	ldr	r2, [sp, #20]
 800a60e:	1aed      	subs	r5, r5, r3
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	9305      	str	r3, [sp, #20]
 800a614:	9b07      	ldr	r3, [sp, #28]
 800a616:	b31b      	cbz	r3, 800a660 <_dtoa_r+0x7a0>
 800a618:	9b08      	ldr	r3, [sp, #32]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f000 80af 	beq.w	800a77e <_dtoa_r+0x8be>
 800a620:	2e00      	cmp	r6, #0
 800a622:	dd13      	ble.n	800a64c <_dtoa_r+0x78c>
 800a624:	4639      	mov	r1, r7
 800a626:	4632      	mov	r2, r6
 800a628:	4620      	mov	r0, r4
 800a62a:	f000 ffd5 	bl	800b5d8 <__pow5mult>
 800a62e:	ee18 2a10 	vmov	r2, s16
 800a632:	4601      	mov	r1, r0
 800a634:	4607      	mov	r7, r0
 800a636:	4620      	mov	r0, r4
 800a638:	f000 ff24 	bl	800b484 <__multiply>
 800a63c:	ee18 1a10 	vmov	r1, s16
 800a640:	4680      	mov	r8, r0
 800a642:	4620      	mov	r0, r4
 800a644:	f000 fe06 	bl	800b254 <_Bfree>
 800a648:	ee08 8a10 	vmov	s16, r8
 800a64c:	9b07      	ldr	r3, [sp, #28]
 800a64e:	1b9a      	subs	r2, r3, r6
 800a650:	d006      	beq.n	800a660 <_dtoa_r+0x7a0>
 800a652:	ee18 1a10 	vmov	r1, s16
 800a656:	4620      	mov	r0, r4
 800a658:	f000 ffbe 	bl	800b5d8 <__pow5mult>
 800a65c:	ee08 0a10 	vmov	s16, r0
 800a660:	2101      	movs	r1, #1
 800a662:	4620      	mov	r0, r4
 800a664:	f000 fef8 	bl	800b458 <__i2b>
 800a668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	4606      	mov	r6, r0
 800a66e:	f340 8088 	ble.w	800a782 <_dtoa_r+0x8c2>
 800a672:	461a      	mov	r2, r3
 800a674:	4601      	mov	r1, r0
 800a676:	4620      	mov	r0, r4
 800a678:	f000 ffae 	bl	800b5d8 <__pow5mult>
 800a67c:	9b06      	ldr	r3, [sp, #24]
 800a67e:	2b01      	cmp	r3, #1
 800a680:	4606      	mov	r6, r0
 800a682:	f340 8081 	ble.w	800a788 <_dtoa_r+0x8c8>
 800a686:	f04f 0800 	mov.w	r8, #0
 800a68a:	6933      	ldr	r3, [r6, #16]
 800a68c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a690:	6918      	ldr	r0, [r3, #16]
 800a692:	f000 fe91 	bl	800b3b8 <__hi0bits>
 800a696:	f1c0 0020 	rsb	r0, r0, #32
 800a69a:	9b05      	ldr	r3, [sp, #20]
 800a69c:	4418      	add	r0, r3
 800a69e:	f010 001f 	ands.w	r0, r0, #31
 800a6a2:	f000 8092 	beq.w	800a7ca <_dtoa_r+0x90a>
 800a6a6:	f1c0 0320 	rsb	r3, r0, #32
 800a6aa:	2b04      	cmp	r3, #4
 800a6ac:	f340 808a 	ble.w	800a7c4 <_dtoa_r+0x904>
 800a6b0:	f1c0 001c 	rsb	r0, r0, #28
 800a6b4:	9b04      	ldr	r3, [sp, #16]
 800a6b6:	4403      	add	r3, r0
 800a6b8:	9304      	str	r3, [sp, #16]
 800a6ba:	9b05      	ldr	r3, [sp, #20]
 800a6bc:	4403      	add	r3, r0
 800a6be:	4405      	add	r5, r0
 800a6c0:	9305      	str	r3, [sp, #20]
 800a6c2:	9b04      	ldr	r3, [sp, #16]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	dd07      	ble.n	800a6d8 <_dtoa_r+0x818>
 800a6c8:	ee18 1a10 	vmov	r1, s16
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	f000 ffdc 	bl	800b68c <__lshift>
 800a6d4:	ee08 0a10 	vmov	s16, r0
 800a6d8:	9b05      	ldr	r3, [sp, #20]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	dd05      	ble.n	800a6ea <_dtoa_r+0x82a>
 800a6de:	4631      	mov	r1, r6
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	f000 ffd2 	bl	800b68c <__lshift>
 800a6e8:	4606      	mov	r6, r0
 800a6ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d06e      	beq.n	800a7ce <_dtoa_r+0x90e>
 800a6f0:	ee18 0a10 	vmov	r0, s16
 800a6f4:	4631      	mov	r1, r6
 800a6f6:	f001 f839 	bl	800b76c <__mcmp>
 800a6fa:	2800      	cmp	r0, #0
 800a6fc:	da67      	bge.n	800a7ce <_dtoa_r+0x90e>
 800a6fe:	9b00      	ldr	r3, [sp, #0]
 800a700:	3b01      	subs	r3, #1
 800a702:	ee18 1a10 	vmov	r1, s16
 800a706:	9300      	str	r3, [sp, #0]
 800a708:	220a      	movs	r2, #10
 800a70a:	2300      	movs	r3, #0
 800a70c:	4620      	mov	r0, r4
 800a70e:	f000 fdc3 	bl	800b298 <__multadd>
 800a712:	9b08      	ldr	r3, [sp, #32]
 800a714:	ee08 0a10 	vmov	s16, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f000 81b1 	beq.w	800aa80 <_dtoa_r+0xbc0>
 800a71e:	2300      	movs	r3, #0
 800a720:	4639      	mov	r1, r7
 800a722:	220a      	movs	r2, #10
 800a724:	4620      	mov	r0, r4
 800a726:	f000 fdb7 	bl	800b298 <__multadd>
 800a72a:	9b02      	ldr	r3, [sp, #8]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	4607      	mov	r7, r0
 800a730:	f300 808e 	bgt.w	800a850 <_dtoa_r+0x990>
 800a734:	9b06      	ldr	r3, [sp, #24]
 800a736:	2b02      	cmp	r3, #2
 800a738:	dc51      	bgt.n	800a7de <_dtoa_r+0x91e>
 800a73a:	e089      	b.n	800a850 <_dtoa_r+0x990>
 800a73c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a73e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a742:	e74b      	b.n	800a5dc <_dtoa_r+0x71c>
 800a744:	9b03      	ldr	r3, [sp, #12]
 800a746:	1e5e      	subs	r6, r3, #1
 800a748:	9b07      	ldr	r3, [sp, #28]
 800a74a:	42b3      	cmp	r3, r6
 800a74c:	bfbf      	itttt	lt
 800a74e:	9b07      	ldrlt	r3, [sp, #28]
 800a750:	9607      	strlt	r6, [sp, #28]
 800a752:	1af2      	sublt	r2, r6, r3
 800a754:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a756:	bfb6      	itet	lt
 800a758:	189b      	addlt	r3, r3, r2
 800a75a:	1b9e      	subge	r6, r3, r6
 800a75c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a75e:	9b03      	ldr	r3, [sp, #12]
 800a760:	bfb8      	it	lt
 800a762:	2600      	movlt	r6, #0
 800a764:	2b00      	cmp	r3, #0
 800a766:	bfb7      	itett	lt
 800a768:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a76c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a770:	1a9d      	sublt	r5, r3, r2
 800a772:	2300      	movlt	r3, #0
 800a774:	e734      	b.n	800a5e0 <_dtoa_r+0x720>
 800a776:	9e07      	ldr	r6, [sp, #28]
 800a778:	9d04      	ldr	r5, [sp, #16]
 800a77a:	9f08      	ldr	r7, [sp, #32]
 800a77c:	e73b      	b.n	800a5f6 <_dtoa_r+0x736>
 800a77e:	9a07      	ldr	r2, [sp, #28]
 800a780:	e767      	b.n	800a652 <_dtoa_r+0x792>
 800a782:	9b06      	ldr	r3, [sp, #24]
 800a784:	2b01      	cmp	r3, #1
 800a786:	dc18      	bgt.n	800a7ba <_dtoa_r+0x8fa>
 800a788:	f1ba 0f00 	cmp.w	sl, #0
 800a78c:	d115      	bne.n	800a7ba <_dtoa_r+0x8fa>
 800a78e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a792:	b993      	cbnz	r3, 800a7ba <_dtoa_r+0x8fa>
 800a794:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a798:	0d1b      	lsrs	r3, r3, #20
 800a79a:	051b      	lsls	r3, r3, #20
 800a79c:	b183      	cbz	r3, 800a7c0 <_dtoa_r+0x900>
 800a79e:	9b04      	ldr	r3, [sp, #16]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	9304      	str	r3, [sp, #16]
 800a7a4:	9b05      	ldr	r3, [sp, #20]
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	9305      	str	r3, [sp, #20]
 800a7aa:	f04f 0801 	mov.w	r8, #1
 800a7ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f47f af6a 	bne.w	800a68a <_dtoa_r+0x7ca>
 800a7b6:	2001      	movs	r0, #1
 800a7b8:	e76f      	b.n	800a69a <_dtoa_r+0x7da>
 800a7ba:	f04f 0800 	mov.w	r8, #0
 800a7be:	e7f6      	b.n	800a7ae <_dtoa_r+0x8ee>
 800a7c0:	4698      	mov	r8, r3
 800a7c2:	e7f4      	b.n	800a7ae <_dtoa_r+0x8ee>
 800a7c4:	f43f af7d 	beq.w	800a6c2 <_dtoa_r+0x802>
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	301c      	adds	r0, #28
 800a7cc:	e772      	b.n	800a6b4 <_dtoa_r+0x7f4>
 800a7ce:	9b03      	ldr	r3, [sp, #12]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	dc37      	bgt.n	800a844 <_dtoa_r+0x984>
 800a7d4:	9b06      	ldr	r3, [sp, #24]
 800a7d6:	2b02      	cmp	r3, #2
 800a7d8:	dd34      	ble.n	800a844 <_dtoa_r+0x984>
 800a7da:	9b03      	ldr	r3, [sp, #12]
 800a7dc:	9302      	str	r3, [sp, #8]
 800a7de:	9b02      	ldr	r3, [sp, #8]
 800a7e0:	b96b      	cbnz	r3, 800a7fe <_dtoa_r+0x93e>
 800a7e2:	4631      	mov	r1, r6
 800a7e4:	2205      	movs	r2, #5
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	f000 fd56 	bl	800b298 <__multadd>
 800a7ec:	4601      	mov	r1, r0
 800a7ee:	4606      	mov	r6, r0
 800a7f0:	ee18 0a10 	vmov	r0, s16
 800a7f4:	f000 ffba 	bl	800b76c <__mcmp>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	f73f adbb 	bgt.w	800a374 <_dtoa_r+0x4b4>
 800a7fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a800:	9d01      	ldr	r5, [sp, #4]
 800a802:	43db      	mvns	r3, r3
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	f04f 0800 	mov.w	r8, #0
 800a80a:	4631      	mov	r1, r6
 800a80c:	4620      	mov	r0, r4
 800a80e:	f000 fd21 	bl	800b254 <_Bfree>
 800a812:	2f00      	cmp	r7, #0
 800a814:	f43f aea4 	beq.w	800a560 <_dtoa_r+0x6a0>
 800a818:	f1b8 0f00 	cmp.w	r8, #0
 800a81c:	d005      	beq.n	800a82a <_dtoa_r+0x96a>
 800a81e:	45b8      	cmp	r8, r7
 800a820:	d003      	beq.n	800a82a <_dtoa_r+0x96a>
 800a822:	4641      	mov	r1, r8
 800a824:	4620      	mov	r0, r4
 800a826:	f000 fd15 	bl	800b254 <_Bfree>
 800a82a:	4639      	mov	r1, r7
 800a82c:	4620      	mov	r0, r4
 800a82e:	f000 fd11 	bl	800b254 <_Bfree>
 800a832:	e695      	b.n	800a560 <_dtoa_r+0x6a0>
 800a834:	2600      	movs	r6, #0
 800a836:	4637      	mov	r7, r6
 800a838:	e7e1      	b.n	800a7fe <_dtoa_r+0x93e>
 800a83a:	9700      	str	r7, [sp, #0]
 800a83c:	4637      	mov	r7, r6
 800a83e:	e599      	b.n	800a374 <_dtoa_r+0x4b4>
 800a840:	40240000 	.word	0x40240000
 800a844:	9b08      	ldr	r3, [sp, #32]
 800a846:	2b00      	cmp	r3, #0
 800a848:	f000 80ca 	beq.w	800a9e0 <_dtoa_r+0xb20>
 800a84c:	9b03      	ldr	r3, [sp, #12]
 800a84e:	9302      	str	r3, [sp, #8]
 800a850:	2d00      	cmp	r5, #0
 800a852:	dd05      	ble.n	800a860 <_dtoa_r+0x9a0>
 800a854:	4639      	mov	r1, r7
 800a856:	462a      	mov	r2, r5
 800a858:	4620      	mov	r0, r4
 800a85a:	f000 ff17 	bl	800b68c <__lshift>
 800a85e:	4607      	mov	r7, r0
 800a860:	f1b8 0f00 	cmp.w	r8, #0
 800a864:	d05b      	beq.n	800a91e <_dtoa_r+0xa5e>
 800a866:	6879      	ldr	r1, [r7, #4]
 800a868:	4620      	mov	r0, r4
 800a86a:	f000 fcb3 	bl	800b1d4 <_Balloc>
 800a86e:	4605      	mov	r5, r0
 800a870:	b928      	cbnz	r0, 800a87e <_dtoa_r+0x9be>
 800a872:	4b87      	ldr	r3, [pc, #540]	; (800aa90 <_dtoa_r+0xbd0>)
 800a874:	4602      	mov	r2, r0
 800a876:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a87a:	f7ff bb3b 	b.w	8009ef4 <_dtoa_r+0x34>
 800a87e:	693a      	ldr	r2, [r7, #16]
 800a880:	3202      	adds	r2, #2
 800a882:	0092      	lsls	r2, r2, #2
 800a884:	f107 010c 	add.w	r1, r7, #12
 800a888:	300c      	adds	r0, #12
 800a88a:	f000 fc95 	bl	800b1b8 <memcpy>
 800a88e:	2201      	movs	r2, #1
 800a890:	4629      	mov	r1, r5
 800a892:	4620      	mov	r0, r4
 800a894:	f000 fefa 	bl	800b68c <__lshift>
 800a898:	9b01      	ldr	r3, [sp, #4]
 800a89a:	f103 0901 	add.w	r9, r3, #1
 800a89e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	9305      	str	r3, [sp, #20]
 800a8a6:	f00a 0301 	and.w	r3, sl, #1
 800a8aa:	46b8      	mov	r8, r7
 800a8ac:	9304      	str	r3, [sp, #16]
 800a8ae:	4607      	mov	r7, r0
 800a8b0:	4631      	mov	r1, r6
 800a8b2:	ee18 0a10 	vmov	r0, s16
 800a8b6:	f7ff fa75 	bl	8009da4 <quorem>
 800a8ba:	4641      	mov	r1, r8
 800a8bc:	9002      	str	r0, [sp, #8]
 800a8be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a8c2:	ee18 0a10 	vmov	r0, s16
 800a8c6:	f000 ff51 	bl	800b76c <__mcmp>
 800a8ca:	463a      	mov	r2, r7
 800a8cc:	9003      	str	r0, [sp, #12]
 800a8ce:	4631      	mov	r1, r6
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	f000 ff67 	bl	800b7a4 <__mdiff>
 800a8d6:	68c2      	ldr	r2, [r0, #12]
 800a8d8:	f109 3bff 	add.w	fp, r9, #4294967295
 800a8dc:	4605      	mov	r5, r0
 800a8de:	bb02      	cbnz	r2, 800a922 <_dtoa_r+0xa62>
 800a8e0:	4601      	mov	r1, r0
 800a8e2:	ee18 0a10 	vmov	r0, s16
 800a8e6:	f000 ff41 	bl	800b76c <__mcmp>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	4629      	mov	r1, r5
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	9207      	str	r2, [sp, #28]
 800a8f2:	f000 fcaf 	bl	800b254 <_Bfree>
 800a8f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a8fa:	ea43 0102 	orr.w	r1, r3, r2
 800a8fe:	9b04      	ldr	r3, [sp, #16]
 800a900:	430b      	orrs	r3, r1
 800a902:	464d      	mov	r5, r9
 800a904:	d10f      	bne.n	800a926 <_dtoa_r+0xa66>
 800a906:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a90a:	d02a      	beq.n	800a962 <_dtoa_r+0xaa2>
 800a90c:	9b03      	ldr	r3, [sp, #12]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	dd02      	ble.n	800a918 <_dtoa_r+0xa58>
 800a912:	9b02      	ldr	r3, [sp, #8]
 800a914:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a918:	f88b a000 	strb.w	sl, [fp]
 800a91c:	e775      	b.n	800a80a <_dtoa_r+0x94a>
 800a91e:	4638      	mov	r0, r7
 800a920:	e7ba      	b.n	800a898 <_dtoa_r+0x9d8>
 800a922:	2201      	movs	r2, #1
 800a924:	e7e2      	b.n	800a8ec <_dtoa_r+0xa2c>
 800a926:	9b03      	ldr	r3, [sp, #12]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	db04      	blt.n	800a936 <_dtoa_r+0xa76>
 800a92c:	9906      	ldr	r1, [sp, #24]
 800a92e:	430b      	orrs	r3, r1
 800a930:	9904      	ldr	r1, [sp, #16]
 800a932:	430b      	orrs	r3, r1
 800a934:	d122      	bne.n	800a97c <_dtoa_r+0xabc>
 800a936:	2a00      	cmp	r2, #0
 800a938:	ddee      	ble.n	800a918 <_dtoa_r+0xa58>
 800a93a:	ee18 1a10 	vmov	r1, s16
 800a93e:	2201      	movs	r2, #1
 800a940:	4620      	mov	r0, r4
 800a942:	f000 fea3 	bl	800b68c <__lshift>
 800a946:	4631      	mov	r1, r6
 800a948:	ee08 0a10 	vmov	s16, r0
 800a94c:	f000 ff0e 	bl	800b76c <__mcmp>
 800a950:	2800      	cmp	r0, #0
 800a952:	dc03      	bgt.n	800a95c <_dtoa_r+0xa9c>
 800a954:	d1e0      	bne.n	800a918 <_dtoa_r+0xa58>
 800a956:	f01a 0f01 	tst.w	sl, #1
 800a95a:	d0dd      	beq.n	800a918 <_dtoa_r+0xa58>
 800a95c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a960:	d1d7      	bne.n	800a912 <_dtoa_r+0xa52>
 800a962:	2339      	movs	r3, #57	; 0x39
 800a964:	f88b 3000 	strb.w	r3, [fp]
 800a968:	462b      	mov	r3, r5
 800a96a:	461d      	mov	r5, r3
 800a96c:	3b01      	subs	r3, #1
 800a96e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a972:	2a39      	cmp	r2, #57	; 0x39
 800a974:	d071      	beq.n	800aa5a <_dtoa_r+0xb9a>
 800a976:	3201      	adds	r2, #1
 800a978:	701a      	strb	r2, [r3, #0]
 800a97a:	e746      	b.n	800a80a <_dtoa_r+0x94a>
 800a97c:	2a00      	cmp	r2, #0
 800a97e:	dd07      	ble.n	800a990 <_dtoa_r+0xad0>
 800a980:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a984:	d0ed      	beq.n	800a962 <_dtoa_r+0xaa2>
 800a986:	f10a 0301 	add.w	r3, sl, #1
 800a98a:	f88b 3000 	strb.w	r3, [fp]
 800a98e:	e73c      	b.n	800a80a <_dtoa_r+0x94a>
 800a990:	9b05      	ldr	r3, [sp, #20]
 800a992:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a996:	4599      	cmp	r9, r3
 800a998:	d047      	beq.n	800aa2a <_dtoa_r+0xb6a>
 800a99a:	ee18 1a10 	vmov	r1, s16
 800a99e:	2300      	movs	r3, #0
 800a9a0:	220a      	movs	r2, #10
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f000 fc78 	bl	800b298 <__multadd>
 800a9a8:	45b8      	cmp	r8, r7
 800a9aa:	ee08 0a10 	vmov	s16, r0
 800a9ae:	f04f 0300 	mov.w	r3, #0
 800a9b2:	f04f 020a 	mov.w	r2, #10
 800a9b6:	4641      	mov	r1, r8
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	d106      	bne.n	800a9ca <_dtoa_r+0xb0a>
 800a9bc:	f000 fc6c 	bl	800b298 <__multadd>
 800a9c0:	4680      	mov	r8, r0
 800a9c2:	4607      	mov	r7, r0
 800a9c4:	f109 0901 	add.w	r9, r9, #1
 800a9c8:	e772      	b.n	800a8b0 <_dtoa_r+0x9f0>
 800a9ca:	f000 fc65 	bl	800b298 <__multadd>
 800a9ce:	4639      	mov	r1, r7
 800a9d0:	4680      	mov	r8, r0
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	220a      	movs	r2, #10
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	f000 fc5e 	bl	800b298 <__multadd>
 800a9dc:	4607      	mov	r7, r0
 800a9de:	e7f1      	b.n	800a9c4 <_dtoa_r+0xb04>
 800a9e0:	9b03      	ldr	r3, [sp, #12]
 800a9e2:	9302      	str	r3, [sp, #8]
 800a9e4:	9d01      	ldr	r5, [sp, #4]
 800a9e6:	ee18 0a10 	vmov	r0, s16
 800a9ea:	4631      	mov	r1, r6
 800a9ec:	f7ff f9da 	bl	8009da4 <quorem>
 800a9f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a9f4:	9b01      	ldr	r3, [sp, #4]
 800a9f6:	f805 ab01 	strb.w	sl, [r5], #1
 800a9fa:	1aea      	subs	r2, r5, r3
 800a9fc:	9b02      	ldr	r3, [sp, #8]
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	dd09      	ble.n	800aa16 <_dtoa_r+0xb56>
 800aa02:	ee18 1a10 	vmov	r1, s16
 800aa06:	2300      	movs	r3, #0
 800aa08:	220a      	movs	r2, #10
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	f000 fc44 	bl	800b298 <__multadd>
 800aa10:	ee08 0a10 	vmov	s16, r0
 800aa14:	e7e7      	b.n	800a9e6 <_dtoa_r+0xb26>
 800aa16:	9b02      	ldr	r3, [sp, #8]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	bfc8      	it	gt
 800aa1c:	461d      	movgt	r5, r3
 800aa1e:	9b01      	ldr	r3, [sp, #4]
 800aa20:	bfd8      	it	le
 800aa22:	2501      	movle	r5, #1
 800aa24:	441d      	add	r5, r3
 800aa26:	f04f 0800 	mov.w	r8, #0
 800aa2a:	ee18 1a10 	vmov	r1, s16
 800aa2e:	2201      	movs	r2, #1
 800aa30:	4620      	mov	r0, r4
 800aa32:	f000 fe2b 	bl	800b68c <__lshift>
 800aa36:	4631      	mov	r1, r6
 800aa38:	ee08 0a10 	vmov	s16, r0
 800aa3c:	f000 fe96 	bl	800b76c <__mcmp>
 800aa40:	2800      	cmp	r0, #0
 800aa42:	dc91      	bgt.n	800a968 <_dtoa_r+0xaa8>
 800aa44:	d102      	bne.n	800aa4c <_dtoa_r+0xb8c>
 800aa46:	f01a 0f01 	tst.w	sl, #1
 800aa4a:	d18d      	bne.n	800a968 <_dtoa_r+0xaa8>
 800aa4c:	462b      	mov	r3, r5
 800aa4e:	461d      	mov	r5, r3
 800aa50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa54:	2a30      	cmp	r2, #48	; 0x30
 800aa56:	d0fa      	beq.n	800aa4e <_dtoa_r+0xb8e>
 800aa58:	e6d7      	b.n	800a80a <_dtoa_r+0x94a>
 800aa5a:	9a01      	ldr	r2, [sp, #4]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d184      	bne.n	800a96a <_dtoa_r+0xaaa>
 800aa60:	9b00      	ldr	r3, [sp, #0]
 800aa62:	3301      	adds	r3, #1
 800aa64:	9300      	str	r3, [sp, #0]
 800aa66:	2331      	movs	r3, #49	; 0x31
 800aa68:	7013      	strb	r3, [r2, #0]
 800aa6a:	e6ce      	b.n	800a80a <_dtoa_r+0x94a>
 800aa6c:	4b09      	ldr	r3, [pc, #36]	; (800aa94 <_dtoa_r+0xbd4>)
 800aa6e:	f7ff ba95 	b.w	8009f9c <_dtoa_r+0xdc>
 800aa72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f47f aa6e 	bne.w	8009f56 <_dtoa_r+0x96>
 800aa7a:	4b07      	ldr	r3, [pc, #28]	; (800aa98 <_dtoa_r+0xbd8>)
 800aa7c:	f7ff ba8e 	b.w	8009f9c <_dtoa_r+0xdc>
 800aa80:	9b02      	ldr	r3, [sp, #8]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	dcae      	bgt.n	800a9e4 <_dtoa_r+0xb24>
 800aa86:	9b06      	ldr	r3, [sp, #24]
 800aa88:	2b02      	cmp	r3, #2
 800aa8a:	f73f aea8 	bgt.w	800a7de <_dtoa_r+0x91e>
 800aa8e:	e7a9      	b.n	800a9e4 <_dtoa_r+0xb24>
 800aa90:	0800cd5f 	.word	0x0800cd5f
 800aa94:	0800cc68 	.word	0x0800cc68
 800aa98:	0800cce0 	.word	0x0800cce0

0800aa9c <rshift>:
 800aa9c:	6903      	ldr	r3, [r0, #16]
 800aa9e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aaa2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aaa6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aaaa:	f100 0414 	add.w	r4, r0, #20
 800aaae:	dd45      	ble.n	800ab3c <rshift+0xa0>
 800aab0:	f011 011f 	ands.w	r1, r1, #31
 800aab4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aab8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aabc:	d10c      	bne.n	800aad8 <rshift+0x3c>
 800aabe:	f100 0710 	add.w	r7, r0, #16
 800aac2:	4629      	mov	r1, r5
 800aac4:	42b1      	cmp	r1, r6
 800aac6:	d334      	bcc.n	800ab32 <rshift+0x96>
 800aac8:	1a9b      	subs	r3, r3, r2
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	1eea      	subs	r2, r5, #3
 800aace:	4296      	cmp	r6, r2
 800aad0:	bf38      	it	cc
 800aad2:	2300      	movcc	r3, #0
 800aad4:	4423      	add	r3, r4
 800aad6:	e015      	b.n	800ab04 <rshift+0x68>
 800aad8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aadc:	f1c1 0820 	rsb	r8, r1, #32
 800aae0:	40cf      	lsrs	r7, r1
 800aae2:	f105 0e04 	add.w	lr, r5, #4
 800aae6:	46a1      	mov	r9, r4
 800aae8:	4576      	cmp	r6, lr
 800aaea:	46f4      	mov	ip, lr
 800aaec:	d815      	bhi.n	800ab1a <rshift+0x7e>
 800aaee:	1a9a      	subs	r2, r3, r2
 800aaf0:	0092      	lsls	r2, r2, #2
 800aaf2:	3a04      	subs	r2, #4
 800aaf4:	3501      	adds	r5, #1
 800aaf6:	42ae      	cmp	r6, r5
 800aaf8:	bf38      	it	cc
 800aafa:	2200      	movcc	r2, #0
 800aafc:	18a3      	adds	r3, r4, r2
 800aafe:	50a7      	str	r7, [r4, r2]
 800ab00:	b107      	cbz	r7, 800ab04 <rshift+0x68>
 800ab02:	3304      	adds	r3, #4
 800ab04:	1b1a      	subs	r2, r3, r4
 800ab06:	42a3      	cmp	r3, r4
 800ab08:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ab0c:	bf08      	it	eq
 800ab0e:	2300      	moveq	r3, #0
 800ab10:	6102      	str	r2, [r0, #16]
 800ab12:	bf08      	it	eq
 800ab14:	6143      	streq	r3, [r0, #20]
 800ab16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab1a:	f8dc c000 	ldr.w	ip, [ip]
 800ab1e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ab22:	ea4c 0707 	orr.w	r7, ip, r7
 800ab26:	f849 7b04 	str.w	r7, [r9], #4
 800ab2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ab2e:	40cf      	lsrs	r7, r1
 800ab30:	e7da      	b.n	800aae8 <rshift+0x4c>
 800ab32:	f851 cb04 	ldr.w	ip, [r1], #4
 800ab36:	f847 cf04 	str.w	ip, [r7, #4]!
 800ab3a:	e7c3      	b.n	800aac4 <rshift+0x28>
 800ab3c:	4623      	mov	r3, r4
 800ab3e:	e7e1      	b.n	800ab04 <rshift+0x68>

0800ab40 <__hexdig_fun>:
 800ab40:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ab44:	2b09      	cmp	r3, #9
 800ab46:	d802      	bhi.n	800ab4e <__hexdig_fun+0xe>
 800ab48:	3820      	subs	r0, #32
 800ab4a:	b2c0      	uxtb	r0, r0
 800ab4c:	4770      	bx	lr
 800ab4e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ab52:	2b05      	cmp	r3, #5
 800ab54:	d801      	bhi.n	800ab5a <__hexdig_fun+0x1a>
 800ab56:	3847      	subs	r0, #71	; 0x47
 800ab58:	e7f7      	b.n	800ab4a <__hexdig_fun+0xa>
 800ab5a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ab5e:	2b05      	cmp	r3, #5
 800ab60:	d801      	bhi.n	800ab66 <__hexdig_fun+0x26>
 800ab62:	3827      	subs	r0, #39	; 0x27
 800ab64:	e7f1      	b.n	800ab4a <__hexdig_fun+0xa>
 800ab66:	2000      	movs	r0, #0
 800ab68:	4770      	bx	lr
	...

0800ab6c <__gethex>:
 800ab6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab70:	ed2d 8b02 	vpush	{d8}
 800ab74:	b089      	sub	sp, #36	; 0x24
 800ab76:	ee08 0a10 	vmov	s16, r0
 800ab7a:	9304      	str	r3, [sp, #16]
 800ab7c:	4bb4      	ldr	r3, [pc, #720]	; (800ae50 <__gethex+0x2e4>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	9301      	str	r3, [sp, #4]
 800ab82:	4618      	mov	r0, r3
 800ab84:	468b      	mov	fp, r1
 800ab86:	4690      	mov	r8, r2
 800ab88:	f7f5 fb42 	bl	8000210 <strlen>
 800ab8c:	9b01      	ldr	r3, [sp, #4]
 800ab8e:	f8db 2000 	ldr.w	r2, [fp]
 800ab92:	4403      	add	r3, r0
 800ab94:	4682      	mov	sl, r0
 800ab96:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ab9a:	9305      	str	r3, [sp, #20]
 800ab9c:	1c93      	adds	r3, r2, #2
 800ab9e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800aba2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800aba6:	32fe      	adds	r2, #254	; 0xfe
 800aba8:	18d1      	adds	r1, r2, r3
 800abaa:	461f      	mov	r7, r3
 800abac:	f813 0b01 	ldrb.w	r0, [r3], #1
 800abb0:	9100      	str	r1, [sp, #0]
 800abb2:	2830      	cmp	r0, #48	; 0x30
 800abb4:	d0f8      	beq.n	800aba8 <__gethex+0x3c>
 800abb6:	f7ff ffc3 	bl	800ab40 <__hexdig_fun>
 800abba:	4604      	mov	r4, r0
 800abbc:	2800      	cmp	r0, #0
 800abbe:	d13a      	bne.n	800ac36 <__gethex+0xca>
 800abc0:	9901      	ldr	r1, [sp, #4]
 800abc2:	4652      	mov	r2, sl
 800abc4:	4638      	mov	r0, r7
 800abc6:	f001 fa33 	bl	800c030 <strncmp>
 800abca:	4605      	mov	r5, r0
 800abcc:	2800      	cmp	r0, #0
 800abce:	d168      	bne.n	800aca2 <__gethex+0x136>
 800abd0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800abd4:	eb07 060a 	add.w	r6, r7, sl
 800abd8:	f7ff ffb2 	bl	800ab40 <__hexdig_fun>
 800abdc:	2800      	cmp	r0, #0
 800abde:	d062      	beq.n	800aca6 <__gethex+0x13a>
 800abe0:	4633      	mov	r3, r6
 800abe2:	7818      	ldrb	r0, [r3, #0]
 800abe4:	2830      	cmp	r0, #48	; 0x30
 800abe6:	461f      	mov	r7, r3
 800abe8:	f103 0301 	add.w	r3, r3, #1
 800abec:	d0f9      	beq.n	800abe2 <__gethex+0x76>
 800abee:	f7ff ffa7 	bl	800ab40 <__hexdig_fun>
 800abf2:	2301      	movs	r3, #1
 800abf4:	fab0 f480 	clz	r4, r0
 800abf8:	0964      	lsrs	r4, r4, #5
 800abfa:	4635      	mov	r5, r6
 800abfc:	9300      	str	r3, [sp, #0]
 800abfe:	463a      	mov	r2, r7
 800ac00:	4616      	mov	r6, r2
 800ac02:	3201      	adds	r2, #1
 800ac04:	7830      	ldrb	r0, [r6, #0]
 800ac06:	f7ff ff9b 	bl	800ab40 <__hexdig_fun>
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	d1f8      	bne.n	800ac00 <__gethex+0x94>
 800ac0e:	9901      	ldr	r1, [sp, #4]
 800ac10:	4652      	mov	r2, sl
 800ac12:	4630      	mov	r0, r6
 800ac14:	f001 fa0c 	bl	800c030 <strncmp>
 800ac18:	b980      	cbnz	r0, 800ac3c <__gethex+0xd0>
 800ac1a:	b94d      	cbnz	r5, 800ac30 <__gethex+0xc4>
 800ac1c:	eb06 050a 	add.w	r5, r6, sl
 800ac20:	462a      	mov	r2, r5
 800ac22:	4616      	mov	r6, r2
 800ac24:	3201      	adds	r2, #1
 800ac26:	7830      	ldrb	r0, [r6, #0]
 800ac28:	f7ff ff8a 	bl	800ab40 <__hexdig_fun>
 800ac2c:	2800      	cmp	r0, #0
 800ac2e:	d1f8      	bne.n	800ac22 <__gethex+0xb6>
 800ac30:	1bad      	subs	r5, r5, r6
 800ac32:	00ad      	lsls	r5, r5, #2
 800ac34:	e004      	b.n	800ac40 <__gethex+0xd4>
 800ac36:	2400      	movs	r4, #0
 800ac38:	4625      	mov	r5, r4
 800ac3a:	e7e0      	b.n	800abfe <__gethex+0x92>
 800ac3c:	2d00      	cmp	r5, #0
 800ac3e:	d1f7      	bne.n	800ac30 <__gethex+0xc4>
 800ac40:	7833      	ldrb	r3, [r6, #0]
 800ac42:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ac46:	2b50      	cmp	r3, #80	; 0x50
 800ac48:	d13b      	bne.n	800acc2 <__gethex+0x156>
 800ac4a:	7873      	ldrb	r3, [r6, #1]
 800ac4c:	2b2b      	cmp	r3, #43	; 0x2b
 800ac4e:	d02c      	beq.n	800acaa <__gethex+0x13e>
 800ac50:	2b2d      	cmp	r3, #45	; 0x2d
 800ac52:	d02e      	beq.n	800acb2 <__gethex+0x146>
 800ac54:	1c71      	adds	r1, r6, #1
 800ac56:	f04f 0900 	mov.w	r9, #0
 800ac5a:	7808      	ldrb	r0, [r1, #0]
 800ac5c:	f7ff ff70 	bl	800ab40 <__hexdig_fun>
 800ac60:	1e43      	subs	r3, r0, #1
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	2b18      	cmp	r3, #24
 800ac66:	d82c      	bhi.n	800acc2 <__gethex+0x156>
 800ac68:	f1a0 0210 	sub.w	r2, r0, #16
 800ac6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ac70:	f7ff ff66 	bl	800ab40 <__hexdig_fun>
 800ac74:	1e43      	subs	r3, r0, #1
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	2b18      	cmp	r3, #24
 800ac7a:	d91d      	bls.n	800acb8 <__gethex+0x14c>
 800ac7c:	f1b9 0f00 	cmp.w	r9, #0
 800ac80:	d000      	beq.n	800ac84 <__gethex+0x118>
 800ac82:	4252      	negs	r2, r2
 800ac84:	4415      	add	r5, r2
 800ac86:	f8cb 1000 	str.w	r1, [fp]
 800ac8a:	b1e4      	cbz	r4, 800acc6 <__gethex+0x15a>
 800ac8c:	9b00      	ldr	r3, [sp, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	bf14      	ite	ne
 800ac92:	2700      	movne	r7, #0
 800ac94:	2706      	moveq	r7, #6
 800ac96:	4638      	mov	r0, r7
 800ac98:	b009      	add	sp, #36	; 0x24
 800ac9a:	ecbd 8b02 	vpop	{d8}
 800ac9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca2:	463e      	mov	r6, r7
 800aca4:	4625      	mov	r5, r4
 800aca6:	2401      	movs	r4, #1
 800aca8:	e7ca      	b.n	800ac40 <__gethex+0xd4>
 800acaa:	f04f 0900 	mov.w	r9, #0
 800acae:	1cb1      	adds	r1, r6, #2
 800acb0:	e7d3      	b.n	800ac5a <__gethex+0xee>
 800acb2:	f04f 0901 	mov.w	r9, #1
 800acb6:	e7fa      	b.n	800acae <__gethex+0x142>
 800acb8:	230a      	movs	r3, #10
 800acba:	fb03 0202 	mla	r2, r3, r2, r0
 800acbe:	3a10      	subs	r2, #16
 800acc0:	e7d4      	b.n	800ac6c <__gethex+0x100>
 800acc2:	4631      	mov	r1, r6
 800acc4:	e7df      	b.n	800ac86 <__gethex+0x11a>
 800acc6:	1bf3      	subs	r3, r6, r7
 800acc8:	3b01      	subs	r3, #1
 800acca:	4621      	mov	r1, r4
 800accc:	2b07      	cmp	r3, #7
 800acce:	dc0b      	bgt.n	800ace8 <__gethex+0x17c>
 800acd0:	ee18 0a10 	vmov	r0, s16
 800acd4:	f000 fa7e 	bl	800b1d4 <_Balloc>
 800acd8:	4604      	mov	r4, r0
 800acda:	b940      	cbnz	r0, 800acee <__gethex+0x182>
 800acdc:	4b5d      	ldr	r3, [pc, #372]	; (800ae54 <__gethex+0x2e8>)
 800acde:	4602      	mov	r2, r0
 800ace0:	21de      	movs	r1, #222	; 0xde
 800ace2:	485d      	ldr	r0, [pc, #372]	; (800ae58 <__gethex+0x2ec>)
 800ace4:	f001 f9c6 	bl	800c074 <__assert_func>
 800ace8:	3101      	adds	r1, #1
 800acea:	105b      	asrs	r3, r3, #1
 800acec:	e7ee      	b.n	800accc <__gethex+0x160>
 800acee:	f100 0914 	add.w	r9, r0, #20
 800acf2:	f04f 0b00 	mov.w	fp, #0
 800acf6:	f1ca 0301 	rsb	r3, sl, #1
 800acfa:	f8cd 9008 	str.w	r9, [sp, #8]
 800acfe:	f8cd b000 	str.w	fp, [sp]
 800ad02:	9306      	str	r3, [sp, #24]
 800ad04:	42b7      	cmp	r7, r6
 800ad06:	d340      	bcc.n	800ad8a <__gethex+0x21e>
 800ad08:	9802      	ldr	r0, [sp, #8]
 800ad0a:	9b00      	ldr	r3, [sp, #0]
 800ad0c:	f840 3b04 	str.w	r3, [r0], #4
 800ad10:	eba0 0009 	sub.w	r0, r0, r9
 800ad14:	1080      	asrs	r0, r0, #2
 800ad16:	0146      	lsls	r6, r0, #5
 800ad18:	6120      	str	r0, [r4, #16]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f000 fb4c 	bl	800b3b8 <__hi0bits>
 800ad20:	1a30      	subs	r0, r6, r0
 800ad22:	f8d8 6000 	ldr.w	r6, [r8]
 800ad26:	42b0      	cmp	r0, r6
 800ad28:	dd63      	ble.n	800adf2 <__gethex+0x286>
 800ad2a:	1b87      	subs	r7, r0, r6
 800ad2c:	4639      	mov	r1, r7
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f000 fef0 	bl	800bb14 <__any_on>
 800ad34:	4682      	mov	sl, r0
 800ad36:	b1a8      	cbz	r0, 800ad64 <__gethex+0x1f8>
 800ad38:	1e7b      	subs	r3, r7, #1
 800ad3a:	1159      	asrs	r1, r3, #5
 800ad3c:	f003 021f 	and.w	r2, r3, #31
 800ad40:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ad44:	f04f 0a01 	mov.w	sl, #1
 800ad48:	fa0a f202 	lsl.w	r2, sl, r2
 800ad4c:	420a      	tst	r2, r1
 800ad4e:	d009      	beq.n	800ad64 <__gethex+0x1f8>
 800ad50:	4553      	cmp	r3, sl
 800ad52:	dd05      	ble.n	800ad60 <__gethex+0x1f4>
 800ad54:	1eb9      	subs	r1, r7, #2
 800ad56:	4620      	mov	r0, r4
 800ad58:	f000 fedc 	bl	800bb14 <__any_on>
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	d145      	bne.n	800adec <__gethex+0x280>
 800ad60:	f04f 0a02 	mov.w	sl, #2
 800ad64:	4639      	mov	r1, r7
 800ad66:	4620      	mov	r0, r4
 800ad68:	f7ff fe98 	bl	800aa9c <rshift>
 800ad6c:	443d      	add	r5, r7
 800ad6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad72:	42ab      	cmp	r3, r5
 800ad74:	da4c      	bge.n	800ae10 <__gethex+0x2a4>
 800ad76:	ee18 0a10 	vmov	r0, s16
 800ad7a:	4621      	mov	r1, r4
 800ad7c:	f000 fa6a 	bl	800b254 <_Bfree>
 800ad80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ad82:	2300      	movs	r3, #0
 800ad84:	6013      	str	r3, [r2, #0]
 800ad86:	27a3      	movs	r7, #163	; 0xa3
 800ad88:	e785      	b.n	800ac96 <__gethex+0x12a>
 800ad8a:	1e73      	subs	r3, r6, #1
 800ad8c:	9a05      	ldr	r2, [sp, #20]
 800ad8e:	9303      	str	r3, [sp, #12]
 800ad90:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d019      	beq.n	800adcc <__gethex+0x260>
 800ad98:	f1bb 0f20 	cmp.w	fp, #32
 800ad9c:	d107      	bne.n	800adae <__gethex+0x242>
 800ad9e:	9b02      	ldr	r3, [sp, #8]
 800ada0:	9a00      	ldr	r2, [sp, #0]
 800ada2:	f843 2b04 	str.w	r2, [r3], #4
 800ada6:	9302      	str	r3, [sp, #8]
 800ada8:	2300      	movs	r3, #0
 800adaa:	9300      	str	r3, [sp, #0]
 800adac:	469b      	mov	fp, r3
 800adae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800adb2:	f7ff fec5 	bl	800ab40 <__hexdig_fun>
 800adb6:	9b00      	ldr	r3, [sp, #0]
 800adb8:	f000 000f 	and.w	r0, r0, #15
 800adbc:	fa00 f00b 	lsl.w	r0, r0, fp
 800adc0:	4303      	orrs	r3, r0
 800adc2:	9300      	str	r3, [sp, #0]
 800adc4:	f10b 0b04 	add.w	fp, fp, #4
 800adc8:	9b03      	ldr	r3, [sp, #12]
 800adca:	e00d      	b.n	800ade8 <__gethex+0x27c>
 800adcc:	9b03      	ldr	r3, [sp, #12]
 800adce:	9a06      	ldr	r2, [sp, #24]
 800add0:	4413      	add	r3, r2
 800add2:	42bb      	cmp	r3, r7
 800add4:	d3e0      	bcc.n	800ad98 <__gethex+0x22c>
 800add6:	4618      	mov	r0, r3
 800add8:	9901      	ldr	r1, [sp, #4]
 800adda:	9307      	str	r3, [sp, #28]
 800addc:	4652      	mov	r2, sl
 800adde:	f001 f927 	bl	800c030 <strncmp>
 800ade2:	9b07      	ldr	r3, [sp, #28]
 800ade4:	2800      	cmp	r0, #0
 800ade6:	d1d7      	bne.n	800ad98 <__gethex+0x22c>
 800ade8:	461e      	mov	r6, r3
 800adea:	e78b      	b.n	800ad04 <__gethex+0x198>
 800adec:	f04f 0a03 	mov.w	sl, #3
 800adf0:	e7b8      	b.n	800ad64 <__gethex+0x1f8>
 800adf2:	da0a      	bge.n	800ae0a <__gethex+0x29e>
 800adf4:	1a37      	subs	r7, r6, r0
 800adf6:	4621      	mov	r1, r4
 800adf8:	ee18 0a10 	vmov	r0, s16
 800adfc:	463a      	mov	r2, r7
 800adfe:	f000 fc45 	bl	800b68c <__lshift>
 800ae02:	1bed      	subs	r5, r5, r7
 800ae04:	4604      	mov	r4, r0
 800ae06:	f100 0914 	add.w	r9, r0, #20
 800ae0a:	f04f 0a00 	mov.w	sl, #0
 800ae0e:	e7ae      	b.n	800ad6e <__gethex+0x202>
 800ae10:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ae14:	42a8      	cmp	r0, r5
 800ae16:	dd72      	ble.n	800aefe <__gethex+0x392>
 800ae18:	1b45      	subs	r5, r0, r5
 800ae1a:	42ae      	cmp	r6, r5
 800ae1c:	dc36      	bgt.n	800ae8c <__gethex+0x320>
 800ae1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae22:	2b02      	cmp	r3, #2
 800ae24:	d02a      	beq.n	800ae7c <__gethex+0x310>
 800ae26:	2b03      	cmp	r3, #3
 800ae28:	d02c      	beq.n	800ae84 <__gethex+0x318>
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d11c      	bne.n	800ae68 <__gethex+0x2fc>
 800ae2e:	42ae      	cmp	r6, r5
 800ae30:	d11a      	bne.n	800ae68 <__gethex+0x2fc>
 800ae32:	2e01      	cmp	r6, #1
 800ae34:	d112      	bne.n	800ae5c <__gethex+0x2f0>
 800ae36:	9a04      	ldr	r2, [sp, #16]
 800ae38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ae3c:	6013      	str	r3, [r2, #0]
 800ae3e:	2301      	movs	r3, #1
 800ae40:	6123      	str	r3, [r4, #16]
 800ae42:	f8c9 3000 	str.w	r3, [r9]
 800ae46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae48:	2762      	movs	r7, #98	; 0x62
 800ae4a:	601c      	str	r4, [r3, #0]
 800ae4c:	e723      	b.n	800ac96 <__gethex+0x12a>
 800ae4e:	bf00      	nop
 800ae50:	0800cdd8 	.word	0x0800cdd8
 800ae54:	0800cd5f 	.word	0x0800cd5f
 800ae58:	0800cd70 	.word	0x0800cd70
 800ae5c:	1e71      	subs	r1, r6, #1
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f000 fe58 	bl	800bb14 <__any_on>
 800ae64:	2800      	cmp	r0, #0
 800ae66:	d1e6      	bne.n	800ae36 <__gethex+0x2ca>
 800ae68:	ee18 0a10 	vmov	r0, s16
 800ae6c:	4621      	mov	r1, r4
 800ae6e:	f000 f9f1 	bl	800b254 <_Bfree>
 800ae72:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ae74:	2300      	movs	r3, #0
 800ae76:	6013      	str	r3, [r2, #0]
 800ae78:	2750      	movs	r7, #80	; 0x50
 800ae7a:	e70c      	b.n	800ac96 <__gethex+0x12a>
 800ae7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d1f2      	bne.n	800ae68 <__gethex+0x2fc>
 800ae82:	e7d8      	b.n	800ae36 <__gethex+0x2ca>
 800ae84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d1d5      	bne.n	800ae36 <__gethex+0x2ca>
 800ae8a:	e7ed      	b.n	800ae68 <__gethex+0x2fc>
 800ae8c:	1e6f      	subs	r7, r5, #1
 800ae8e:	f1ba 0f00 	cmp.w	sl, #0
 800ae92:	d131      	bne.n	800aef8 <__gethex+0x38c>
 800ae94:	b127      	cbz	r7, 800aea0 <__gethex+0x334>
 800ae96:	4639      	mov	r1, r7
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f000 fe3b 	bl	800bb14 <__any_on>
 800ae9e:	4682      	mov	sl, r0
 800aea0:	117b      	asrs	r3, r7, #5
 800aea2:	2101      	movs	r1, #1
 800aea4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800aea8:	f007 071f 	and.w	r7, r7, #31
 800aeac:	fa01 f707 	lsl.w	r7, r1, r7
 800aeb0:	421f      	tst	r7, r3
 800aeb2:	4629      	mov	r1, r5
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	bf18      	it	ne
 800aeb8:	f04a 0a02 	orrne.w	sl, sl, #2
 800aebc:	1b76      	subs	r6, r6, r5
 800aebe:	f7ff fded 	bl	800aa9c <rshift>
 800aec2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aec6:	2702      	movs	r7, #2
 800aec8:	f1ba 0f00 	cmp.w	sl, #0
 800aecc:	d048      	beq.n	800af60 <__gethex+0x3f4>
 800aece:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aed2:	2b02      	cmp	r3, #2
 800aed4:	d015      	beq.n	800af02 <__gethex+0x396>
 800aed6:	2b03      	cmp	r3, #3
 800aed8:	d017      	beq.n	800af0a <__gethex+0x39e>
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	d109      	bne.n	800aef2 <__gethex+0x386>
 800aede:	f01a 0f02 	tst.w	sl, #2
 800aee2:	d006      	beq.n	800aef2 <__gethex+0x386>
 800aee4:	f8d9 0000 	ldr.w	r0, [r9]
 800aee8:	ea4a 0a00 	orr.w	sl, sl, r0
 800aeec:	f01a 0f01 	tst.w	sl, #1
 800aef0:	d10e      	bne.n	800af10 <__gethex+0x3a4>
 800aef2:	f047 0710 	orr.w	r7, r7, #16
 800aef6:	e033      	b.n	800af60 <__gethex+0x3f4>
 800aef8:	f04f 0a01 	mov.w	sl, #1
 800aefc:	e7d0      	b.n	800aea0 <__gethex+0x334>
 800aefe:	2701      	movs	r7, #1
 800af00:	e7e2      	b.n	800aec8 <__gethex+0x35c>
 800af02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af04:	f1c3 0301 	rsb	r3, r3, #1
 800af08:	9315      	str	r3, [sp, #84]	; 0x54
 800af0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d0f0      	beq.n	800aef2 <__gethex+0x386>
 800af10:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800af14:	f104 0314 	add.w	r3, r4, #20
 800af18:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800af1c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800af20:	f04f 0c00 	mov.w	ip, #0
 800af24:	4618      	mov	r0, r3
 800af26:	f853 2b04 	ldr.w	r2, [r3], #4
 800af2a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800af2e:	d01c      	beq.n	800af6a <__gethex+0x3fe>
 800af30:	3201      	adds	r2, #1
 800af32:	6002      	str	r2, [r0, #0]
 800af34:	2f02      	cmp	r7, #2
 800af36:	f104 0314 	add.w	r3, r4, #20
 800af3a:	d13f      	bne.n	800afbc <__gethex+0x450>
 800af3c:	f8d8 2000 	ldr.w	r2, [r8]
 800af40:	3a01      	subs	r2, #1
 800af42:	42b2      	cmp	r2, r6
 800af44:	d10a      	bne.n	800af5c <__gethex+0x3f0>
 800af46:	1171      	asrs	r1, r6, #5
 800af48:	2201      	movs	r2, #1
 800af4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800af4e:	f006 061f 	and.w	r6, r6, #31
 800af52:	fa02 f606 	lsl.w	r6, r2, r6
 800af56:	421e      	tst	r6, r3
 800af58:	bf18      	it	ne
 800af5a:	4617      	movne	r7, r2
 800af5c:	f047 0720 	orr.w	r7, r7, #32
 800af60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af62:	601c      	str	r4, [r3, #0]
 800af64:	9b04      	ldr	r3, [sp, #16]
 800af66:	601d      	str	r5, [r3, #0]
 800af68:	e695      	b.n	800ac96 <__gethex+0x12a>
 800af6a:	4299      	cmp	r1, r3
 800af6c:	f843 cc04 	str.w	ip, [r3, #-4]
 800af70:	d8d8      	bhi.n	800af24 <__gethex+0x3b8>
 800af72:	68a3      	ldr	r3, [r4, #8]
 800af74:	459b      	cmp	fp, r3
 800af76:	db19      	blt.n	800afac <__gethex+0x440>
 800af78:	6861      	ldr	r1, [r4, #4]
 800af7a:	ee18 0a10 	vmov	r0, s16
 800af7e:	3101      	adds	r1, #1
 800af80:	f000 f928 	bl	800b1d4 <_Balloc>
 800af84:	4681      	mov	r9, r0
 800af86:	b918      	cbnz	r0, 800af90 <__gethex+0x424>
 800af88:	4b1a      	ldr	r3, [pc, #104]	; (800aff4 <__gethex+0x488>)
 800af8a:	4602      	mov	r2, r0
 800af8c:	2184      	movs	r1, #132	; 0x84
 800af8e:	e6a8      	b.n	800ace2 <__gethex+0x176>
 800af90:	6922      	ldr	r2, [r4, #16]
 800af92:	3202      	adds	r2, #2
 800af94:	f104 010c 	add.w	r1, r4, #12
 800af98:	0092      	lsls	r2, r2, #2
 800af9a:	300c      	adds	r0, #12
 800af9c:	f000 f90c 	bl	800b1b8 <memcpy>
 800afa0:	4621      	mov	r1, r4
 800afa2:	ee18 0a10 	vmov	r0, s16
 800afa6:	f000 f955 	bl	800b254 <_Bfree>
 800afaa:	464c      	mov	r4, r9
 800afac:	6923      	ldr	r3, [r4, #16]
 800afae:	1c5a      	adds	r2, r3, #1
 800afb0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800afb4:	6122      	str	r2, [r4, #16]
 800afb6:	2201      	movs	r2, #1
 800afb8:	615a      	str	r2, [r3, #20]
 800afba:	e7bb      	b.n	800af34 <__gethex+0x3c8>
 800afbc:	6922      	ldr	r2, [r4, #16]
 800afbe:	455a      	cmp	r2, fp
 800afc0:	dd0b      	ble.n	800afda <__gethex+0x46e>
 800afc2:	2101      	movs	r1, #1
 800afc4:	4620      	mov	r0, r4
 800afc6:	f7ff fd69 	bl	800aa9c <rshift>
 800afca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800afce:	3501      	adds	r5, #1
 800afd0:	42ab      	cmp	r3, r5
 800afd2:	f6ff aed0 	blt.w	800ad76 <__gethex+0x20a>
 800afd6:	2701      	movs	r7, #1
 800afd8:	e7c0      	b.n	800af5c <__gethex+0x3f0>
 800afda:	f016 061f 	ands.w	r6, r6, #31
 800afde:	d0fa      	beq.n	800afd6 <__gethex+0x46a>
 800afe0:	4453      	add	r3, sl
 800afe2:	f1c6 0620 	rsb	r6, r6, #32
 800afe6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800afea:	f000 f9e5 	bl	800b3b8 <__hi0bits>
 800afee:	42b0      	cmp	r0, r6
 800aff0:	dbe7      	blt.n	800afc2 <__gethex+0x456>
 800aff2:	e7f0      	b.n	800afd6 <__gethex+0x46a>
 800aff4:	0800cd5f 	.word	0x0800cd5f

0800aff8 <L_shift>:
 800aff8:	f1c2 0208 	rsb	r2, r2, #8
 800affc:	0092      	lsls	r2, r2, #2
 800affe:	b570      	push	{r4, r5, r6, lr}
 800b000:	f1c2 0620 	rsb	r6, r2, #32
 800b004:	6843      	ldr	r3, [r0, #4]
 800b006:	6804      	ldr	r4, [r0, #0]
 800b008:	fa03 f506 	lsl.w	r5, r3, r6
 800b00c:	432c      	orrs	r4, r5
 800b00e:	40d3      	lsrs	r3, r2
 800b010:	6004      	str	r4, [r0, #0]
 800b012:	f840 3f04 	str.w	r3, [r0, #4]!
 800b016:	4288      	cmp	r0, r1
 800b018:	d3f4      	bcc.n	800b004 <L_shift+0xc>
 800b01a:	bd70      	pop	{r4, r5, r6, pc}

0800b01c <__match>:
 800b01c:	b530      	push	{r4, r5, lr}
 800b01e:	6803      	ldr	r3, [r0, #0]
 800b020:	3301      	adds	r3, #1
 800b022:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b026:	b914      	cbnz	r4, 800b02e <__match+0x12>
 800b028:	6003      	str	r3, [r0, #0]
 800b02a:	2001      	movs	r0, #1
 800b02c:	bd30      	pop	{r4, r5, pc}
 800b02e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b032:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b036:	2d19      	cmp	r5, #25
 800b038:	bf98      	it	ls
 800b03a:	3220      	addls	r2, #32
 800b03c:	42a2      	cmp	r2, r4
 800b03e:	d0f0      	beq.n	800b022 <__match+0x6>
 800b040:	2000      	movs	r0, #0
 800b042:	e7f3      	b.n	800b02c <__match+0x10>

0800b044 <__hexnan>:
 800b044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b048:	680b      	ldr	r3, [r1, #0]
 800b04a:	115e      	asrs	r6, r3, #5
 800b04c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b050:	f013 031f 	ands.w	r3, r3, #31
 800b054:	b087      	sub	sp, #28
 800b056:	bf18      	it	ne
 800b058:	3604      	addne	r6, #4
 800b05a:	2500      	movs	r5, #0
 800b05c:	1f37      	subs	r7, r6, #4
 800b05e:	4690      	mov	r8, r2
 800b060:	6802      	ldr	r2, [r0, #0]
 800b062:	9301      	str	r3, [sp, #4]
 800b064:	4682      	mov	sl, r0
 800b066:	f846 5c04 	str.w	r5, [r6, #-4]
 800b06a:	46b9      	mov	r9, r7
 800b06c:	463c      	mov	r4, r7
 800b06e:	9502      	str	r5, [sp, #8]
 800b070:	46ab      	mov	fp, r5
 800b072:	7851      	ldrb	r1, [r2, #1]
 800b074:	1c53      	adds	r3, r2, #1
 800b076:	9303      	str	r3, [sp, #12]
 800b078:	b341      	cbz	r1, 800b0cc <__hexnan+0x88>
 800b07a:	4608      	mov	r0, r1
 800b07c:	9205      	str	r2, [sp, #20]
 800b07e:	9104      	str	r1, [sp, #16]
 800b080:	f7ff fd5e 	bl	800ab40 <__hexdig_fun>
 800b084:	2800      	cmp	r0, #0
 800b086:	d14f      	bne.n	800b128 <__hexnan+0xe4>
 800b088:	9904      	ldr	r1, [sp, #16]
 800b08a:	9a05      	ldr	r2, [sp, #20]
 800b08c:	2920      	cmp	r1, #32
 800b08e:	d818      	bhi.n	800b0c2 <__hexnan+0x7e>
 800b090:	9b02      	ldr	r3, [sp, #8]
 800b092:	459b      	cmp	fp, r3
 800b094:	dd13      	ble.n	800b0be <__hexnan+0x7a>
 800b096:	454c      	cmp	r4, r9
 800b098:	d206      	bcs.n	800b0a8 <__hexnan+0x64>
 800b09a:	2d07      	cmp	r5, #7
 800b09c:	dc04      	bgt.n	800b0a8 <__hexnan+0x64>
 800b09e:	462a      	mov	r2, r5
 800b0a0:	4649      	mov	r1, r9
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f7ff ffa8 	bl	800aff8 <L_shift>
 800b0a8:	4544      	cmp	r4, r8
 800b0aa:	d950      	bls.n	800b14e <__hexnan+0x10a>
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	f1a4 0904 	sub.w	r9, r4, #4
 800b0b2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b0b6:	f8cd b008 	str.w	fp, [sp, #8]
 800b0ba:	464c      	mov	r4, r9
 800b0bc:	461d      	mov	r5, r3
 800b0be:	9a03      	ldr	r2, [sp, #12]
 800b0c0:	e7d7      	b.n	800b072 <__hexnan+0x2e>
 800b0c2:	2929      	cmp	r1, #41	; 0x29
 800b0c4:	d156      	bne.n	800b174 <__hexnan+0x130>
 800b0c6:	3202      	adds	r2, #2
 800b0c8:	f8ca 2000 	str.w	r2, [sl]
 800b0cc:	f1bb 0f00 	cmp.w	fp, #0
 800b0d0:	d050      	beq.n	800b174 <__hexnan+0x130>
 800b0d2:	454c      	cmp	r4, r9
 800b0d4:	d206      	bcs.n	800b0e4 <__hexnan+0xa0>
 800b0d6:	2d07      	cmp	r5, #7
 800b0d8:	dc04      	bgt.n	800b0e4 <__hexnan+0xa0>
 800b0da:	462a      	mov	r2, r5
 800b0dc:	4649      	mov	r1, r9
 800b0de:	4620      	mov	r0, r4
 800b0e0:	f7ff ff8a 	bl	800aff8 <L_shift>
 800b0e4:	4544      	cmp	r4, r8
 800b0e6:	d934      	bls.n	800b152 <__hexnan+0x10e>
 800b0e8:	f1a8 0204 	sub.w	r2, r8, #4
 800b0ec:	4623      	mov	r3, r4
 800b0ee:	f853 1b04 	ldr.w	r1, [r3], #4
 800b0f2:	f842 1f04 	str.w	r1, [r2, #4]!
 800b0f6:	429f      	cmp	r7, r3
 800b0f8:	d2f9      	bcs.n	800b0ee <__hexnan+0xaa>
 800b0fa:	1b3b      	subs	r3, r7, r4
 800b0fc:	f023 0303 	bic.w	r3, r3, #3
 800b100:	3304      	adds	r3, #4
 800b102:	3401      	adds	r4, #1
 800b104:	3e03      	subs	r6, #3
 800b106:	42b4      	cmp	r4, r6
 800b108:	bf88      	it	hi
 800b10a:	2304      	movhi	r3, #4
 800b10c:	4443      	add	r3, r8
 800b10e:	2200      	movs	r2, #0
 800b110:	f843 2b04 	str.w	r2, [r3], #4
 800b114:	429f      	cmp	r7, r3
 800b116:	d2fb      	bcs.n	800b110 <__hexnan+0xcc>
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	b91b      	cbnz	r3, 800b124 <__hexnan+0xe0>
 800b11c:	4547      	cmp	r7, r8
 800b11e:	d127      	bne.n	800b170 <__hexnan+0x12c>
 800b120:	2301      	movs	r3, #1
 800b122:	603b      	str	r3, [r7, #0]
 800b124:	2005      	movs	r0, #5
 800b126:	e026      	b.n	800b176 <__hexnan+0x132>
 800b128:	3501      	adds	r5, #1
 800b12a:	2d08      	cmp	r5, #8
 800b12c:	f10b 0b01 	add.w	fp, fp, #1
 800b130:	dd06      	ble.n	800b140 <__hexnan+0xfc>
 800b132:	4544      	cmp	r4, r8
 800b134:	d9c3      	bls.n	800b0be <__hexnan+0x7a>
 800b136:	2300      	movs	r3, #0
 800b138:	f844 3c04 	str.w	r3, [r4, #-4]
 800b13c:	2501      	movs	r5, #1
 800b13e:	3c04      	subs	r4, #4
 800b140:	6822      	ldr	r2, [r4, #0]
 800b142:	f000 000f 	and.w	r0, r0, #15
 800b146:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b14a:	6022      	str	r2, [r4, #0]
 800b14c:	e7b7      	b.n	800b0be <__hexnan+0x7a>
 800b14e:	2508      	movs	r5, #8
 800b150:	e7b5      	b.n	800b0be <__hexnan+0x7a>
 800b152:	9b01      	ldr	r3, [sp, #4]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d0df      	beq.n	800b118 <__hexnan+0xd4>
 800b158:	f04f 32ff 	mov.w	r2, #4294967295
 800b15c:	f1c3 0320 	rsb	r3, r3, #32
 800b160:	fa22 f303 	lsr.w	r3, r2, r3
 800b164:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b168:	401a      	ands	r2, r3
 800b16a:	f846 2c04 	str.w	r2, [r6, #-4]
 800b16e:	e7d3      	b.n	800b118 <__hexnan+0xd4>
 800b170:	3f04      	subs	r7, #4
 800b172:	e7d1      	b.n	800b118 <__hexnan+0xd4>
 800b174:	2004      	movs	r0, #4
 800b176:	b007      	add	sp, #28
 800b178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b17c <_localeconv_r>:
 800b17c:	4800      	ldr	r0, [pc, #0]	; (800b180 <_localeconv_r+0x4>)
 800b17e:	4770      	bx	lr
 800b180:	20000174 	.word	0x20000174

0800b184 <malloc>:
 800b184:	4b02      	ldr	r3, [pc, #8]	; (800b190 <malloc+0xc>)
 800b186:	4601      	mov	r1, r0
 800b188:	6818      	ldr	r0, [r3, #0]
 800b18a:	f000 bd67 	b.w	800bc5c <_malloc_r>
 800b18e:	bf00      	nop
 800b190:	2000001c 	.word	0x2000001c

0800b194 <__ascii_mbtowc>:
 800b194:	b082      	sub	sp, #8
 800b196:	b901      	cbnz	r1, 800b19a <__ascii_mbtowc+0x6>
 800b198:	a901      	add	r1, sp, #4
 800b19a:	b142      	cbz	r2, 800b1ae <__ascii_mbtowc+0x1a>
 800b19c:	b14b      	cbz	r3, 800b1b2 <__ascii_mbtowc+0x1e>
 800b19e:	7813      	ldrb	r3, [r2, #0]
 800b1a0:	600b      	str	r3, [r1, #0]
 800b1a2:	7812      	ldrb	r2, [r2, #0]
 800b1a4:	1e10      	subs	r0, r2, #0
 800b1a6:	bf18      	it	ne
 800b1a8:	2001      	movne	r0, #1
 800b1aa:	b002      	add	sp, #8
 800b1ac:	4770      	bx	lr
 800b1ae:	4610      	mov	r0, r2
 800b1b0:	e7fb      	b.n	800b1aa <__ascii_mbtowc+0x16>
 800b1b2:	f06f 0001 	mvn.w	r0, #1
 800b1b6:	e7f8      	b.n	800b1aa <__ascii_mbtowc+0x16>

0800b1b8 <memcpy>:
 800b1b8:	440a      	add	r2, r1
 800b1ba:	4291      	cmp	r1, r2
 800b1bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1c0:	d100      	bne.n	800b1c4 <memcpy+0xc>
 800b1c2:	4770      	bx	lr
 800b1c4:	b510      	push	{r4, lr}
 800b1c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1ce:	4291      	cmp	r1, r2
 800b1d0:	d1f9      	bne.n	800b1c6 <memcpy+0xe>
 800b1d2:	bd10      	pop	{r4, pc}

0800b1d4 <_Balloc>:
 800b1d4:	b570      	push	{r4, r5, r6, lr}
 800b1d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1d8:	4604      	mov	r4, r0
 800b1da:	460d      	mov	r5, r1
 800b1dc:	b976      	cbnz	r6, 800b1fc <_Balloc+0x28>
 800b1de:	2010      	movs	r0, #16
 800b1e0:	f7ff ffd0 	bl	800b184 <malloc>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	6260      	str	r0, [r4, #36]	; 0x24
 800b1e8:	b920      	cbnz	r0, 800b1f4 <_Balloc+0x20>
 800b1ea:	4b18      	ldr	r3, [pc, #96]	; (800b24c <_Balloc+0x78>)
 800b1ec:	4818      	ldr	r0, [pc, #96]	; (800b250 <_Balloc+0x7c>)
 800b1ee:	2166      	movs	r1, #102	; 0x66
 800b1f0:	f000 ff40 	bl	800c074 <__assert_func>
 800b1f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1f8:	6006      	str	r6, [r0, #0]
 800b1fa:	60c6      	str	r6, [r0, #12]
 800b1fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b1fe:	68f3      	ldr	r3, [r6, #12]
 800b200:	b183      	cbz	r3, 800b224 <_Balloc+0x50>
 800b202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b20a:	b9b8      	cbnz	r0, 800b23c <_Balloc+0x68>
 800b20c:	2101      	movs	r1, #1
 800b20e:	fa01 f605 	lsl.w	r6, r1, r5
 800b212:	1d72      	adds	r2, r6, #5
 800b214:	0092      	lsls	r2, r2, #2
 800b216:	4620      	mov	r0, r4
 800b218:	f000 fc9d 	bl	800bb56 <_calloc_r>
 800b21c:	b160      	cbz	r0, 800b238 <_Balloc+0x64>
 800b21e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b222:	e00e      	b.n	800b242 <_Balloc+0x6e>
 800b224:	2221      	movs	r2, #33	; 0x21
 800b226:	2104      	movs	r1, #4
 800b228:	4620      	mov	r0, r4
 800b22a:	f000 fc94 	bl	800bb56 <_calloc_r>
 800b22e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b230:	60f0      	str	r0, [r6, #12]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d1e4      	bne.n	800b202 <_Balloc+0x2e>
 800b238:	2000      	movs	r0, #0
 800b23a:	bd70      	pop	{r4, r5, r6, pc}
 800b23c:	6802      	ldr	r2, [r0, #0]
 800b23e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b242:	2300      	movs	r3, #0
 800b244:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b248:	e7f7      	b.n	800b23a <_Balloc+0x66>
 800b24a:	bf00      	nop
 800b24c:	0800cced 	.word	0x0800cced
 800b250:	0800cdec 	.word	0x0800cdec

0800b254 <_Bfree>:
 800b254:	b570      	push	{r4, r5, r6, lr}
 800b256:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b258:	4605      	mov	r5, r0
 800b25a:	460c      	mov	r4, r1
 800b25c:	b976      	cbnz	r6, 800b27c <_Bfree+0x28>
 800b25e:	2010      	movs	r0, #16
 800b260:	f7ff ff90 	bl	800b184 <malloc>
 800b264:	4602      	mov	r2, r0
 800b266:	6268      	str	r0, [r5, #36]	; 0x24
 800b268:	b920      	cbnz	r0, 800b274 <_Bfree+0x20>
 800b26a:	4b09      	ldr	r3, [pc, #36]	; (800b290 <_Bfree+0x3c>)
 800b26c:	4809      	ldr	r0, [pc, #36]	; (800b294 <_Bfree+0x40>)
 800b26e:	218a      	movs	r1, #138	; 0x8a
 800b270:	f000 ff00 	bl	800c074 <__assert_func>
 800b274:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b278:	6006      	str	r6, [r0, #0]
 800b27a:	60c6      	str	r6, [r0, #12]
 800b27c:	b13c      	cbz	r4, 800b28e <_Bfree+0x3a>
 800b27e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b280:	6862      	ldr	r2, [r4, #4]
 800b282:	68db      	ldr	r3, [r3, #12]
 800b284:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b288:	6021      	str	r1, [r4, #0]
 800b28a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b28e:	bd70      	pop	{r4, r5, r6, pc}
 800b290:	0800cced 	.word	0x0800cced
 800b294:	0800cdec 	.word	0x0800cdec

0800b298 <__multadd>:
 800b298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b29c:	690d      	ldr	r5, [r1, #16]
 800b29e:	4607      	mov	r7, r0
 800b2a0:	460c      	mov	r4, r1
 800b2a2:	461e      	mov	r6, r3
 800b2a4:	f101 0c14 	add.w	ip, r1, #20
 800b2a8:	2000      	movs	r0, #0
 800b2aa:	f8dc 3000 	ldr.w	r3, [ip]
 800b2ae:	b299      	uxth	r1, r3
 800b2b0:	fb02 6101 	mla	r1, r2, r1, r6
 800b2b4:	0c1e      	lsrs	r6, r3, #16
 800b2b6:	0c0b      	lsrs	r3, r1, #16
 800b2b8:	fb02 3306 	mla	r3, r2, r6, r3
 800b2bc:	b289      	uxth	r1, r1
 800b2be:	3001      	adds	r0, #1
 800b2c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b2c4:	4285      	cmp	r5, r0
 800b2c6:	f84c 1b04 	str.w	r1, [ip], #4
 800b2ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b2ce:	dcec      	bgt.n	800b2aa <__multadd+0x12>
 800b2d0:	b30e      	cbz	r6, 800b316 <__multadd+0x7e>
 800b2d2:	68a3      	ldr	r3, [r4, #8]
 800b2d4:	42ab      	cmp	r3, r5
 800b2d6:	dc19      	bgt.n	800b30c <__multadd+0x74>
 800b2d8:	6861      	ldr	r1, [r4, #4]
 800b2da:	4638      	mov	r0, r7
 800b2dc:	3101      	adds	r1, #1
 800b2de:	f7ff ff79 	bl	800b1d4 <_Balloc>
 800b2e2:	4680      	mov	r8, r0
 800b2e4:	b928      	cbnz	r0, 800b2f2 <__multadd+0x5a>
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	4b0c      	ldr	r3, [pc, #48]	; (800b31c <__multadd+0x84>)
 800b2ea:	480d      	ldr	r0, [pc, #52]	; (800b320 <__multadd+0x88>)
 800b2ec:	21b5      	movs	r1, #181	; 0xb5
 800b2ee:	f000 fec1 	bl	800c074 <__assert_func>
 800b2f2:	6922      	ldr	r2, [r4, #16]
 800b2f4:	3202      	adds	r2, #2
 800b2f6:	f104 010c 	add.w	r1, r4, #12
 800b2fa:	0092      	lsls	r2, r2, #2
 800b2fc:	300c      	adds	r0, #12
 800b2fe:	f7ff ff5b 	bl	800b1b8 <memcpy>
 800b302:	4621      	mov	r1, r4
 800b304:	4638      	mov	r0, r7
 800b306:	f7ff ffa5 	bl	800b254 <_Bfree>
 800b30a:	4644      	mov	r4, r8
 800b30c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b310:	3501      	adds	r5, #1
 800b312:	615e      	str	r6, [r3, #20]
 800b314:	6125      	str	r5, [r4, #16]
 800b316:	4620      	mov	r0, r4
 800b318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b31c:	0800cd5f 	.word	0x0800cd5f
 800b320:	0800cdec 	.word	0x0800cdec

0800b324 <__s2b>:
 800b324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b328:	460c      	mov	r4, r1
 800b32a:	4615      	mov	r5, r2
 800b32c:	461f      	mov	r7, r3
 800b32e:	2209      	movs	r2, #9
 800b330:	3308      	adds	r3, #8
 800b332:	4606      	mov	r6, r0
 800b334:	fb93 f3f2 	sdiv	r3, r3, r2
 800b338:	2100      	movs	r1, #0
 800b33a:	2201      	movs	r2, #1
 800b33c:	429a      	cmp	r2, r3
 800b33e:	db09      	blt.n	800b354 <__s2b+0x30>
 800b340:	4630      	mov	r0, r6
 800b342:	f7ff ff47 	bl	800b1d4 <_Balloc>
 800b346:	b940      	cbnz	r0, 800b35a <__s2b+0x36>
 800b348:	4602      	mov	r2, r0
 800b34a:	4b19      	ldr	r3, [pc, #100]	; (800b3b0 <__s2b+0x8c>)
 800b34c:	4819      	ldr	r0, [pc, #100]	; (800b3b4 <__s2b+0x90>)
 800b34e:	21ce      	movs	r1, #206	; 0xce
 800b350:	f000 fe90 	bl	800c074 <__assert_func>
 800b354:	0052      	lsls	r2, r2, #1
 800b356:	3101      	adds	r1, #1
 800b358:	e7f0      	b.n	800b33c <__s2b+0x18>
 800b35a:	9b08      	ldr	r3, [sp, #32]
 800b35c:	6143      	str	r3, [r0, #20]
 800b35e:	2d09      	cmp	r5, #9
 800b360:	f04f 0301 	mov.w	r3, #1
 800b364:	6103      	str	r3, [r0, #16]
 800b366:	dd16      	ble.n	800b396 <__s2b+0x72>
 800b368:	f104 0909 	add.w	r9, r4, #9
 800b36c:	46c8      	mov	r8, r9
 800b36e:	442c      	add	r4, r5
 800b370:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b374:	4601      	mov	r1, r0
 800b376:	3b30      	subs	r3, #48	; 0x30
 800b378:	220a      	movs	r2, #10
 800b37a:	4630      	mov	r0, r6
 800b37c:	f7ff ff8c 	bl	800b298 <__multadd>
 800b380:	45a0      	cmp	r8, r4
 800b382:	d1f5      	bne.n	800b370 <__s2b+0x4c>
 800b384:	f1a5 0408 	sub.w	r4, r5, #8
 800b388:	444c      	add	r4, r9
 800b38a:	1b2d      	subs	r5, r5, r4
 800b38c:	1963      	adds	r3, r4, r5
 800b38e:	42bb      	cmp	r3, r7
 800b390:	db04      	blt.n	800b39c <__s2b+0x78>
 800b392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b396:	340a      	adds	r4, #10
 800b398:	2509      	movs	r5, #9
 800b39a:	e7f6      	b.n	800b38a <__s2b+0x66>
 800b39c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b3a0:	4601      	mov	r1, r0
 800b3a2:	3b30      	subs	r3, #48	; 0x30
 800b3a4:	220a      	movs	r2, #10
 800b3a6:	4630      	mov	r0, r6
 800b3a8:	f7ff ff76 	bl	800b298 <__multadd>
 800b3ac:	e7ee      	b.n	800b38c <__s2b+0x68>
 800b3ae:	bf00      	nop
 800b3b0:	0800cd5f 	.word	0x0800cd5f
 800b3b4:	0800cdec 	.word	0x0800cdec

0800b3b8 <__hi0bits>:
 800b3b8:	0c03      	lsrs	r3, r0, #16
 800b3ba:	041b      	lsls	r3, r3, #16
 800b3bc:	b9d3      	cbnz	r3, 800b3f4 <__hi0bits+0x3c>
 800b3be:	0400      	lsls	r0, r0, #16
 800b3c0:	2310      	movs	r3, #16
 800b3c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b3c6:	bf04      	itt	eq
 800b3c8:	0200      	lsleq	r0, r0, #8
 800b3ca:	3308      	addeq	r3, #8
 800b3cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b3d0:	bf04      	itt	eq
 800b3d2:	0100      	lsleq	r0, r0, #4
 800b3d4:	3304      	addeq	r3, #4
 800b3d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b3da:	bf04      	itt	eq
 800b3dc:	0080      	lsleq	r0, r0, #2
 800b3de:	3302      	addeq	r3, #2
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	db05      	blt.n	800b3f0 <__hi0bits+0x38>
 800b3e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b3e8:	f103 0301 	add.w	r3, r3, #1
 800b3ec:	bf08      	it	eq
 800b3ee:	2320      	moveq	r3, #32
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	4770      	bx	lr
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	e7e4      	b.n	800b3c2 <__hi0bits+0xa>

0800b3f8 <__lo0bits>:
 800b3f8:	6803      	ldr	r3, [r0, #0]
 800b3fa:	f013 0207 	ands.w	r2, r3, #7
 800b3fe:	4601      	mov	r1, r0
 800b400:	d00b      	beq.n	800b41a <__lo0bits+0x22>
 800b402:	07da      	lsls	r2, r3, #31
 800b404:	d423      	bmi.n	800b44e <__lo0bits+0x56>
 800b406:	0798      	lsls	r0, r3, #30
 800b408:	bf49      	itett	mi
 800b40a:	085b      	lsrmi	r3, r3, #1
 800b40c:	089b      	lsrpl	r3, r3, #2
 800b40e:	2001      	movmi	r0, #1
 800b410:	600b      	strmi	r3, [r1, #0]
 800b412:	bf5c      	itt	pl
 800b414:	600b      	strpl	r3, [r1, #0]
 800b416:	2002      	movpl	r0, #2
 800b418:	4770      	bx	lr
 800b41a:	b298      	uxth	r0, r3
 800b41c:	b9a8      	cbnz	r0, 800b44a <__lo0bits+0x52>
 800b41e:	0c1b      	lsrs	r3, r3, #16
 800b420:	2010      	movs	r0, #16
 800b422:	b2da      	uxtb	r2, r3
 800b424:	b90a      	cbnz	r2, 800b42a <__lo0bits+0x32>
 800b426:	3008      	adds	r0, #8
 800b428:	0a1b      	lsrs	r3, r3, #8
 800b42a:	071a      	lsls	r2, r3, #28
 800b42c:	bf04      	itt	eq
 800b42e:	091b      	lsreq	r3, r3, #4
 800b430:	3004      	addeq	r0, #4
 800b432:	079a      	lsls	r2, r3, #30
 800b434:	bf04      	itt	eq
 800b436:	089b      	lsreq	r3, r3, #2
 800b438:	3002      	addeq	r0, #2
 800b43a:	07da      	lsls	r2, r3, #31
 800b43c:	d403      	bmi.n	800b446 <__lo0bits+0x4e>
 800b43e:	085b      	lsrs	r3, r3, #1
 800b440:	f100 0001 	add.w	r0, r0, #1
 800b444:	d005      	beq.n	800b452 <__lo0bits+0x5a>
 800b446:	600b      	str	r3, [r1, #0]
 800b448:	4770      	bx	lr
 800b44a:	4610      	mov	r0, r2
 800b44c:	e7e9      	b.n	800b422 <__lo0bits+0x2a>
 800b44e:	2000      	movs	r0, #0
 800b450:	4770      	bx	lr
 800b452:	2020      	movs	r0, #32
 800b454:	4770      	bx	lr
	...

0800b458 <__i2b>:
 800b458:	b510      	push	{r4, lr}
 800b45a:	460c      	mov	r4, r1
 800b45c:	2101      	movs	r1, #1
 800b45e:	f7ff feb9 	bl	800b1d4 <_Balloc>
 800b462:	4602      	mov	r2, r0
 800b464:	b928      	cbnz	r0, 800b472 <__i2b+0x1a>
 800b466:	4b05      	ldr	r3, [pc, #20]	; (800b47c <__i2b+0x24>)
 800b468:	4805      	ldr	r0, [pc, #20]	; (800b480 <__i2b+0x28>)
 800b46a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b46e:	f000 fe01 	bl	800c074 <__assert_func>
 800b472:	2301      	movs	r3, #1
 800b474:	6144      	str	r4, [r0, #20]
 800b476:	6103      	str	r3, [r0, #16]
 800b478:	bd10      	pop	{r4, pc}
 800b47a:	bf00      	nop
 800b47c:	0800cd5f 	.word	0x0800cd5f
 800b480:	0800cdec 	.word	0x0800cdec

0800b484 <__multiply>:
 800b484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b488:	4691      	mov	r9, r2
 800b48a:	690a      	ldr	r2, [r1, #16]
 800b48c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b490:	429a      	cmp	r2, r3
 800b492:	bfb8      	it	lt
 800b494:	460b      	movlt	r3, r1
 800b496:	460c      	mov	r4, r1
 800b498:	bfbc      	itt	lt
 800b49a:	464c      	movlt	r4, r9
 800b49c:	4699      	movlt	r9, r3
 800b49e:	6927      	ldr	r7, [r4, #16]
 800b4a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b4a4:	68a3      	ldr	r3, [r4, #8]
 800b4a6:	6861      	ldr	r1, [r4, #4]
 800b4a8:	eb07 060a 	add.w	r6, r7, sl
 800b4ac:	42b3      	cmp	r3, r6
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	bfb8      	it	lt
 800b4b2:	3101      	addlt	r1, #1
 800b4b4:	f7ff fe8e 	bl	800b1d4 <_Balloc>
 800b4b8:	b930      	cbnz	r0, 800b4c8 <__multiply+0x44>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	4b44      	ldr	r3, [pc, #272]	; (800b5d0 <__multiply+0x14c>)
 800b4be:	4845      	ldr	r0, [pc, #276]	; (800b5d4 <__multiply+0x150>)
 800b4c0:	f240 115d 	movw	r1, #349	; 0x15d
 800b4c4:	f000 fdd6 	bl	800c074 <__assert_func>
 800b4c8:	f100 0514 	add.w	r5, r0, #20
 800b4cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b4d0:	462b      	mov	r3, r5
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	4543      	cmp	r3, r8
 800b4d6:	d321      	bcc.n	800b51c <__multiply+0x98>
 800b4d8:	f104 0314 	add.w	r3, r4, #20
 800b4dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b4e0:	f109 0314 	add.w	r3, r9, #20
 800b4e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b4e8:	9202      	str	r2, [sp, #8]
 800b4ea:	1b3a      	subs	r2, r7, r4
 800b4ec:	3a15      	subs	r2, #21
 800b4ee:	f022 0203 	bic.w	r2, r2, #3
 800b4f2:	3204      	adds	r2, #4
 800b4f4:	f104 0115 	add.w	r1, r4, #21
 800b4f8:	428f      	cmp	r7, r1
 800b4fa:	bf38      	it	cc
 800b4fc:	2204      	movcc	r2, #4
 800b4fe:	9201      	str	r2, [sp, #4]
 800b500:	9a02      	ldr	r2, [sp, #8]
 800b502:	9303      	str	r3, [sp, #12]
 800b504:	429a      	cmp	r2, r3
 800b506:	d80c      	bhi.n	800b522 <__multiply+0x9e>
 800b508:	2e00      	cmp	r6, #0
 800b50a:	dd03      	ble.n	800b514 <__multiply+0x90>
 800b50c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b510:	2b00      	cmp	r3, #0
 800b512:	d05a      	beq.n	800b5ca <__multiply+0x146>
 800b514:	6106      	str	r6, [r0, #16]
 800b516:	b005      	add	sp, #20
 800b518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b51c:	f843 2b04 	str.w	r2, [r3], #4
 800b520:	e7d8      	b.n	800b4d4 <__multiply+0x50>
 800b522:	f8b3 a000 	ldrh.w	sl, [r3]
 800b526:	f1ba 0f00 	cmp.w	sl, #0
 800b52a:	d024      	beq.n	800b576 <__multiply+0xf2>
 800b52c:	f104 0e14 	add.w	lr, r4, #20
 800b530:	46a9      	mov	r9, r5
 800b532:	f04f 0c00 	mov.w	ip, #0
 800b536:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b53a:	f8d9 1000 	ldr.w	r1, [r9]
 800b53e:	fa1f fb82 	uxth.w	fp, r2
 800b542:	b289      	uxth	r1, r1
 800b544:	fb0a 110b 	mla	r1, sl, fp, r1
 800b548:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b54c:	f8d9 2000 	ldr.w	r2, [r9]
 800b550:	4461      	add	r1, ip
 800b552:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b556:	fb0a c20b 	mla	r2, sl, fp, ip
 800b55a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b55e:	b289      	uxth	r1, r1
 800b560:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b564:	4577      	cmp	r7, lr
 800b566:	f849 1b04 	str.w	r1, [r9], #4
 800b56a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b56e:	d8e2      	bhi.n	800b536 <__multiply+0xb2>
 800b570:	9a01      	ldr	r2, [sp, #4]
 800b572:	f845 c002 	str.w	ip, [r5, r2]
 800b576:	9a03      	ldr	r2, [sp, #12]
 800b578:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b57c:	3304      	adds	r3, #4
 800b57e:	f1b9 0f00 	cmp.w	r9, #0
 800b582:	d020      	beq.n	800b5c6 <__multiply+0x142>
 800b584:	6829      	ldr	r1, [r5, #0]
 800b586:	f104 0c14 	add.w	ip, r4, #20
 800b58a:	46ae      	mov	lr, r5
 800b58c:	f04f 0a00 	mov.w	sl, #0
 800b590:	f8bc b000 	ldrh.w	fp, [ip]
 800b594:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b598:	fb09 220b 	mla	r2, r9, fp, r2
 800b59c:	4492      	add	sl, r2
 800b59e:	b289      	uxth	r1, r1
 800b5a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b5a4:	f84e 1b04 	str.w	r1, [lr], #4
 800b5a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b5ac:	f8be 1000 	ldrh.w	r1, [lr]
 800b5b0:	0c12      	lsrs	r2, r2, #16
 800b5b2:	fb09 1102 	mla	r1, r9, r2, r1
 800b5b6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b5ba:	4567      	cmp	r7, ip
 800b5bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b5c0:	d8e6      	bhi.n	800b590 <__multiply+0x10c>
 800b5c2:	9a01      	ldr	r2, [sp, #4]
 800b5c4:	50a9      	str	r1, [r5, r2]
 800b5c6:	3504      	adds	r5, #4
 800b5c8:	e79a      	b.n	800b500 <__multiply+0x7c>
 800b5ca:	3e01      	subs	r6, #1
 800b5cc:	e79c      	b.n	800b508 <__multiply+0x84>
 800b5ce:	bf00      	nop
 800b5d0:	0800cd5f 	.word	0x0800cd5f
 800b5d4:	0800cdec 	.word	0x0800cdec

0800b5d8 <__pow5mult>:
 800b5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5dc:	4615      	mov	r5, r2
 800b5de:	f012 0203 	ands.w	r2, r2, #3
 800b5e2:	4606      	mov	r6, r0
 800b5e4:	460f      	mov	r7, r1
 800b5e6:	d007      	beq.n	800b5f8 <__pow5mult+0x20>
 800b5e8:	4c25      	ldr	r4, [pc, #148]	; (800b680 <__pow5mult+0xa8>)
 800b5ea:	3a01      	subs	r2, #1
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5f2:	f7ff fe51 	bl	800b298 <__multadd>
 800b5f6:	4607      	mov	r7, r0
 800b5f8:	10ad      	asrs	r5, r5, #2
 800b5fa:	d03d      	beq.n	800b678 <__pow5mult+0xa0>
 800b5fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b5fe:	b97c      	cbnz	r4, 800b620 <__pow5mult+0x48>
 800b600:	2010      	movs	r0, #16
 800b602:	f7ff fdbf 	bl	800b184 <malloc>
 800b606:	4602      	mov	r2, r0
 800b608:	6270      	str	r0, [r6, #36]	; 0x24
 800b60a:	b928      	cbnz	r0, 800b618 <__pow5mult+0x40>
 800b60c:	4b1d      	ldr	r3, [pc, #116]	; (800b684 <__pow5mult+0xac>)
 800b60e:	481e      	ldr	r0, [pc, #120]	; (800b688 <__pow5mult+0xb0>)
 800b610:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b614:	f000 fd2e 	bl	800c074 <__assert_func>
 800b618:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b61c:	6004      	str	r4, [r0, #0]
 800b61e:	60c4      	str	r4, [r0, #12]
 800b620:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b624:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b628:	b94c      	cbnz	r4, 800b63e <__pow5mult+0x66>
 800b62a:	f240 2171 	movw	r1, #625	; 0x271
 800b62e:	4630      	mov	r0, r6
 800b630:	f7ff ff12 	bl	800b458 <__i2b>
 800b634:	2300      	movs	r3, #0
 800b636:	f8c8 0008 	str.w	r0, [r8, #8]
 800b63a:	4604      	mov	r4, r0
 800b63c:	6003      	str	r3, [r0, #0]
 800b63e:	f04f 0900 	mov.w	r9, #0
 800b642:	07eb      	lsls	r3, r5, #31
 800b644:	d50a      	bpl.n	800b65c <__pow5mult+0x84>
 800b646:	4639      	mov	r1, r7
 800b648:	4622      	mov	r2, r4
 800b64a:	4630      	mov	r0, r6
 800b64c:	f7ff ff1a 	bl	800b484 <__multiply>
 800b650:	4639      	mov	r1, r7
 800b652:	4680      	mov	r8, r0
 800b654:	4630      	mov	r0, r6
 800b656:	f7ff fdfd 	bl	800b254 <_Bfree>
 800b65a:	4647      	mov	r7, r8
 800b65c:	106d      	asrs	r5, r5, #1
 800b65e:	d00b      	beq.n	800b678 <__pow5mult+0xa0>
 800b660:	6820      	ldr	r0, [r4, #0]
 800b662:	b938      	cbnz	r0, 800b674 <__pow5mult+0x9c>
 800b664:	4622      	mov	r2, r4
 800b666:	4621      	mov	r1, r4
 800b668:	4630      	mov	r0, r6
 800b66a:	f7ff ff0b 	bl	800b484 <__multiply>
 800b66e:	6020      	str	r0, [r4, #0]
 800b670:	f8c0 9000 	str.w	r9, [r0]
 800b674:	4604      	mov	r4, r0
 800b676:	e7e4      	b.n	800b642 <__pow5mult+0x6a>
 800b678:	4638      	mov	r0, r7
 800b67a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b67e:	bf00      	nop
 800b680:	0800cf38 	.word	0x0800cf38
 800b684:	0800cced 	.word	0x0800cced
 800b688:	0800cdec 	.word	0x0800cdec

0800b68c <__lshift>:
 800b68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b690:	460c      	mov	r4, r1
 800b692:	6849      	ldr	r1, [r1, #4]
 800b694:	6923      	ldr	r3, [r4, #16]
 800b696:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b69a:	68a3      	ldr	r3, [r4, #8]
 800b69c:	4607      	mov	r7, r0
 800b69e:	4691      	mov	r9, r2
 800b6a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b6a4:	f108 0601 	add.w	r6, r8, #1
 800b6a8:	42b3      	cmp	r3, r6
 800b6aa:	db0b      	blt.n	800b6c4 <__lshift+0x38>
 800b6ac:	4638      	mov	r0, r7
 800b6ae:	f7ff fd91 	bl	800b1d4 <_Balloc>
 800b6b2:	4605      	mov	r5, r0
 800b6b4:	b948      	cbnz	r0, 800b6ca <__lshift+0x3e>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	4b2a      	ldr	r3, [pc, #168]	; (800b764 <__lshift+0xd8>)
 800b6ba:	482b      	ldr	r0, [pc, #172]	; (800b768 <__lshift+0xdc>)
 800b6bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b6c0:	f000 fcd8 	bl	800c074 <__assert_func>
 800b6c4:	3101      	adds	r1, #1
 800b6c6:	005b      	lsls	r3, r3, #1
 800b6c8:	e7ee      	b.n	800b6a8 <__lshift+0x1c>
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	f100 0114 	add.w	r1, r0, #20
 800b6d0:	f100 0210 	add.w	r2, r0, #16
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	4553      	cmp	r3, sl
 800b6d8:	db37      	blt.n	800b74a <__lshift+0xbe>
 800b6da:	6920      	ldr	r0, [r4, #16]
 800b6dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6e0:	f104 0314 	add.w	r3, r4, #20
 800b6e4:	f019 091f 	ands.w	r9, r9, #31
 800b6e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b6f0:	d02f      	beq.n	800b752 <__lshift+0xc6>
 800b6f2:	f1c9 0e20 	rsb	lr, r9, #32
 800b6f6:	468a      	mov	sl, r1
 800b6f8:	f04f 0c00 	mov.w	ip, #0
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	fa02 f209 	lsl.w	r2, r2, r9
 800b702:	ea42 020c 	orr.w	r2, r2, ip
 800b706:	f84a 2b04 	str.w	r2, [sl], #4
 800b70a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b70e:	4298      	cmp	r0, r3
 800b710:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b714:	d8f2      	bhi.n	800b6fc <__lshift+0x70>
 800b716:	1b03      	subs	r3, r0, r4
 800b718:	3b15      	subs	r3, #21
 800b71a:	f023 0303 	bic.w	r3, r3, #3
 800b71e:	3304      	adds	r3, #4
 800b720:	f104 0215 	add.w	r2, r4, #21
 800b724:	4290      	cmp	r0, r2
 800b726:	bf38      	it	cc
 800b728:	2304      	movcc	r3, #4
 800b72a:	f841 c003 	str.w	ip, [r1, r3]
 800b72e:	f1bc 0f00 	cmp.w	ip, #0
 800b732:	d001      	beq.n	800b738 <__lshift+0xac>
 800b734:	f108 0602 	add.w	r6, r8, #2
 800b738:	3e01      	subs	r6, #1
 800b73a:	4638      	mov	r0, r7
 800b73c:	612e      	str	r6, [r5, #16]
 800b73e:	4621      	mov	r1, r4
 800b740:	f7ff fd88 	bl	800b254 <_Bfree>
 800b744:	4628      	mov	r0, r5
 800b746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b74a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b74e:	3301      	adds	r3, #1
 800b750:	e7c1      	b.n	800b6d6 <__lshift+0x4a>
 800b752:	3904      	subs	r1, #4
 800b754:	f853 2b04 	ldr.w	r2, [r3], #4
 800b758:	f841 2f04 	str.w	r2, [r1, #4]!
 800b75c:	4298      	cmp	r0, r3
 800b75e:	d8f9      	bhi.n	800b754 <__lshift+0xc8>
 800b760:	e7ea      	b.n	800b738 <__lshift+0xac>
 800b762:	bf00      	nop
 800b764:	0800cd5f 	.word	0x0800cd5f
 800b768:	0800cdec 	.word	0x0800cdec

0800b76c <__mcmp>:
 800b76c:	b530      	push	{r4, r5, lr}
 800b76e:	6902      	ldr	r2, [r0, #16]
 800b770:	690c      	ldr	r4, [r1, #16]
 800b772:	1b12      	subs	r2, r2, r4
 800b774:	d10e      	bne.n	800b794 <__mcmp+0x28>
 800b776:	f100 0314 	add.w	r3, r0, #20
 800b77a:	3114      	adds	r1, #20
 800b77c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b780:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b784:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b788:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b78c:	42a5      	cmp	r5, r4
 800b78e:	d003      	beq.n	800b798 <__mcmp+0x2c>
 800b790:	d305      	bcc.n	800b79e <__mcmp+0x32>
 800b792:	2201      	movs	r2, #1
 800b794:	4610      	mov	r0, r2
 800b796:	bd30      	pop	{r4, r5, pc}
 800b798:	4283      	cmp	r3, r0
 800b79a:	d3f3      	bcc.n	800b784 <__mcmp+0x18>
 800b79c:	e7fa      	b.n	800b794 <__mcmp+0x28>
 800b79e:	f04f 32ff 	mov.w	r2, #4294967295
 800b7a2:	e7f7      	b.n	800b794 <__mcmp+0x28>

0800b7a4 <__mdiff>:
 800b7a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a8:	460c      	mov	r4, r1
 800b7aa:	4606      	mov	r6, r0
 800b7ac:	4611      	mov	r1, r2
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	4690      	mov	r8, r2
 800b7b2:	f7ff ffdb 	bl	800b76c <__mcmp>
 800b7b6:	1e05      	subs	r5, r0, #0
 800b7b8:	d110      	bne.n	800b7dc <__mdiff+0x38>
 800b7ba:	4629      	mov	r1, r5
 800b7bc:	4630      	mov	r0, r6
 800b7be:	f7ff fd09 	bl	800b1d4 <_Balloc>
 800b7c2:	b930      	cbnz	r0, 800b7d2 <__mdiff+0x2e>
 800b7c4:	4b3a      	ldr	r3, [pc, #232]	; (800b8b0 <__mdiff+0x10c>)
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	f240 2132 	movw	r1, #562	; 0x232
 800b7cc:	4839      	ldr	r0, [pc, #228]	; (800b8b4 <__mdiff+0x110>)
 800b7ce:	f000 fc51 	bl	800c074 <__assert_func>
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b7d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7dc:	bfa4      	itt	ge
 800b7de:	4643      	movge	r3, r8
 800b7e0:	46a0      	movge	r8, r4
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b7e8:	bfa6      	itte	ge
 800b7ea:	461c      	movge	r4, r3
 800b7ec:	2500      	movge	r5, #0
 800b7ee:	2501      	movlt	r5, #1
 800b7f0:	f7ff fcf0 	bl	800b1d4 <_Balloc>
 800b7f4:	b920      	cbnz	r0, 800b800 <__mdiff+0x5c>
 800b7f6:	4b2e      	ldr	r3, [pc, #184]	; (800b8b0 <__mdiff+0x10c>)
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b7fe:	e7e5      	b.n	800b7cc <__mdiff+0x28>
 800b800:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b804:	6926      	ldr	r6, [r4, #16]
 800b806:	60c5      	str	r5, [r0, #12]
 800b808:	f104 0914 	add.w	r9, r4, #20
 800b80c:	f108 0514 	add.w	r5, r8, #20
 800b810:	f100 0e14 	add.w	lr, r0, #20
 800b814:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b818:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b81c:	f108 0210 	add.w	r2, r8, #16
 800b820:	46f2      	mov	sl, lr
 800b822:	2100      	movs	r1, #0
 800b824:	f859 3b04 	ldr.w	r3, [r9], #4
 800b828:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b82c:	fa1f f883 	uxth.w	r8, r3
 800b830:	fa11 f18b 	uxtah	r1, r1, fp
 800b834:	0c1b      	lsrs	r3, r3, #16
 800b836:	eba1 0808 	sub.w	r8, r1, r8
 800b83a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b83e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b842:	fa1f f888 	uxth.w	r8, r8
 800b846:	1419      	asrs	r1, r3, #16
 800b848:	454e      	cmp	r6, r9
 800b84a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b84e:	f84a 3b04 	str.w	r3, [sl], #4
 800b852:	d8e7      	bhi.n	800b824 <__mdiff+0x80>
 800b854:	1b33      	subs	r3, r6, r4
 800b856:	3b15      	subs	r3, #21
 800b858:	f023 0303 	bic.w	r3, r3, #3
 800b85c:	3304      	adds	r3, #4
 800b85e:	3415      	adds	r4, #21
 800b860:	42a6      	cmp	r6, r4
 800b862:	bf38      	it	cc
 800b864:	2304      	movcc	r3, #4
 800b866:	441d      	add	r5, r3
 800b868:	4473      	add	r3, lr
 800b86a:	469e      	mov	lr, r3
 800b86c:	462e      	mov	r6, r5
 800b86e:	4566      	cmp	r6, ip
 800b870:	d30e      	bcc.n	800b890 <__mdiff+0xec>
 800b872:	f10c 0203 	add.w	r2, ip, #3
 800b876:	1b52      	subs	r2, r2, r5
 800b878:	f022 0203 	bic.w	r2, r2, #3
 800b87c:	3d03      	subs	r5, #3
 800b87e:	45ac      	cmp	ip, r5
 800b880:	bf38      	it	cc
 800b882:	2200      	movcc	r2, #0
 800b884:	441a      	add	r2, r3
 800b886:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b88a:	b17b      	cbz	r3, 800b8ac <__mdiff+0x108>
 800b88c:	6107      	str	r7, [r0, #16]
 800b88e:	e7a3      	b.n	800b7d8 <__mdiff+0x34>
 800b890:	f856 8b04 	ldr.w	r8, [r6], #4
 800b894:	fa11 f288 	uxtah	r2, r1, r8
 800b898:	1414      	asrs	r4, r2, #16
 800b89a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b89e:	b292      	uxth	r2, r2
 800b8a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b8a4:	f84e 2b04 	str.w	r2, [lr], #4
 800b8a8:	1421      	asrs	r1, r4, #16
 800b8aa:	e7e0      	b.n	800b86e <__mdiff+0xca>
 800b8ac:	3f01      	subs	r7, #1
 800b8ae:	e7ea      	b.n	800b886 <__mdiff+0xe2>
 800b8b0:	0800cd5f 	.word	0x0800cd5f
 800b8b4:	0800cdec 	.word	0x0800cdec

0800b8b8 <__ulp>:
 800b8b8:	b082      	sub	sp, #8
 800b8ba:	ed8d 0b00 	vstr	d0, [sp]
 800b8be:	9b01      	ldr	r3, [sp, #4]
 800b8c0:	4912      	ldr	r1, [pc, #72]	; (800b90c <__ulp+0x54>)
 800b8c2:	4019      	ands	r1, r3
 800b8c4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b8c8:	2900      	cmp	r1, #0
 800b8ca:	dd05      	ble.n	800b8d8 <__ulp+0x20>
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	ec43 2b10 	vmov	d0, r2, r3
 800b8d4:	b002      	add	sp, #8
 800b8d6:	4770      	bx	lr
 800b8d8:	4249      	negs	r1, r1
 800b8da:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b8de:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b8e2:	f04f 0200 	mov.w	r2, #0
 800b8e6:	f04f 0300 	mov.w	r3, #0
 800b8ea:	da04      	bge.n	800b8f6 <__ulp+0x3e>
 800b8ec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b8f0:	fa41 f300 	asr.w	r3, r1, r0
 800b8f4:	e7ec      	b.n	800b8d0 <__ulp+0x18>
 800b8f6:	f1a0 0114 	sub.w	r1, r0, #20
 800b8fa:	291e      	cmp	r1, #30
 800b8fc:	bfda      	itte	le
 800b8fe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b902:	fa20 f101 	lsrle.w	r1, r0, r1
 800b906:	2101      	movgt	r1, #1
 800b908:	460a      	mov	r2, r1
 800b90a:	e7e1      	b.n	800b8d0 <__ulp+0x18>
 800b90c:	7ff00000 	.word	0x7ff00000

0800b910 <__b2d>:
 800b910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b912:	6905      	ldr	r5, [r0, #16]
 800b914:	f100 0714 	add.w	r7, r0, #20
 800b918:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b91c:	1f2e      	subs	r6, r5, #4
 800b91e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b922:	4620      	mov	r0, r4
 800b924:	f7ff fd48 	bl	800b3b8 <__hi0bits>
 800b928:	f1c0 0320 	rsb	r3, r0, #32
 800b92c:	280a      	cmp	r0, #10
 800b92e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b9ac <__b2d+0x9c>
 800b932:	600b      	str	r3, [r1, #0]
 800b934:	dc14      	bgt.n	800b960 <__b2d+0x50>
 800b936:	f1c0 0e0b 	rsb	lr, r0, #11
 800b93a:	fa24 f10e 	lsr.w	r1, r4, lr
 800b93e:	42b7      	cmp	r7, r6
 800b940:	ea41 030c 	orr.w	r3, r1, ip
 800b944:	bf34      	ite	cc
 800b946:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b94a:	2100      	movcs	r1, #0
 800b94c:	3015      	adds	r0, #21
 800b94e:	fa04 f000 	lsl.w	r0, r4, r0
 800b952:	fa21 f10e 	lsr.w	r1, r1, lr
 800b956:	ea40 0201 	orr.w	r2, r0, r1
 800b95a:	ec43 2b10 	vmov	d0, r2, r3
 800b95e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b960:	42b7      	cmp	r7, r6
 800b962:	bf3a      	itte	cc
 800b964:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b968:	f1a5 0608 	subcc.w	r6, r5, #8
 800b96c:	2100      	movcs	r1, #0
 800b96e:	380b      	subs	r0, #11
 800b970:	d017      	beq.n	800b9a2 <__b2d+0x92>
 800b972:	f1c0 0c20 	rsb	ip, r0, #32
 800b976:	fa04 f500 	lsl.w	r5, r4, r0
 800b97a:	42be      	cmp	r6, r7
 800b97c:	fa21 f40c 	lsr.w	r4, r1, ip
 800b980:	ea45 0504 	orr.w	r5, r5, r4
 800b984:	bf8c      	ite	hi
 800b986:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b98a:	2400      	movls	r4, #0
 800b98c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b990:	fa01 f000 	lsl.w	r0, r1, r0
 800b994:	fa24 f40c 	lsr.w	r4, r4, ip
 800b998:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b99c:	ea40 0204 	orr.w	r2, r0, r4
 800b9a0:	e7db      	b.n	800b95a <__b2d+0x4a>
 800b9a2:	ea44 030c 	orr.w	r3, r4, ip
 800b9a6:	460a      	mov	r2, r1
 800b9a8:	e7d7      	b.n	800b95a <__b2d+0x4a>
 800b9aa:	bf00      	nop
 800b9ac:	3ff00000 	.word	0x3ff00000

0800b9b0 <__d2b>:
 800b9b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b9b4:	4689      	mov	r9, r1
 800b9b6:	2101      	movs	r1, #1
 800b9b8:	ec57 6b10 	vmov	r6, r7, d0
 800b9bc:	4690      	mov	r8, r2
 800b9be:	f7ff fc09 	bl	800b1d4 <_Balloc>
 800b9c2:	4604      	mov	r4, r0
 800b9c4:	b930      	cbnz	r0, 800b9d4 <__d2b+0x24>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	4b25      	ldr	r3, [pc, #148]	; (800ba60 <__d2b+0xb0>)
 800b9ca:	4826      	ldr	r0, [pc, #152]	; (800ba64 <__d2b+0xb4>)
 800b9cc:	f240 310a 	movw	r1, #778	; 0x30a
 800b9d0:	f000 fb50 	bl	800c074 <__assert_func>
 800b9d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b9d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b9dc:	bb35      	cbnz	r5, 800ba2c <__d2b+0x7c>
 800b9de:	2e00      	cmp	r6, #0
 800b9e0:	9301      	str	r3, [sp, #4]
 800b9e2:	d028      	beq.n	800ba36 <__d2b+0x86>
 800b9e4:	4668      	mov	r0, sp
 800b9e6:	9600      	str	r6, [sp, #0]
 800b9e8:	f7ff fd06 	bl	800b3f8 <__lo0bits>
 800b9ec:	9900      	ldr	r1, [sp, #0]
 800b9ee:	b300      	cbz	r0, 800ba32 <__d2b+0x82>
 800b9f0:	9a01      	ldr	r2, [sp, #4]
 800b9f2:	f1c0 0320 	rsb	r3, r0, #32
 800b9f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b9fa:	430b      	orrs	r3, r1
 800b9fc:	40c2      	lsrs	r2, r0
 800b9fe:	6163      	str	r3, [r4, #20]
 800ba00:	9201      	str	r2, [sp, #4]
 800ba02:	9b01      	ldr	r3, [sp, #4]
 800ba04:	61a3      	str	r3, [r4, #24]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	bf14      	ite	ne
 800ba0a:	2202      	movne	r2, #2
 800ba0c:	2201      	moveq	r2, #1
 800ba0e:	6122      	str	r2, [r4, #16]
 800ba10:	b1d5      	cbz	r5, 800ba48 <__d2b+0x98>
 800ba12:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ba16:	4405      	add	r5, r0
 800ba18:	f8c9 5000 	str.w	r5, [r9]
 800ba1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ba20:	f8c8 0000 	str.w	r0, [r8]
 800ba24:	4620      	mov	r0, r4
 800ba26:	b003      	add	sp, #12
 800ba28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba30:	e7d5      	b.n	800b9de <__d2b+0x2e>
 800ba32:	6161      	str	r1, [r4, #20]
 800ba34:	e7e5      	b.n	800ba02 <__d2b+0x52>
 800ba36:	a801      	add	r0, sp, #4
 800ba38:	f7ff fcde 	bl	800b3f8 <__lo0bits>
 800ba3c:	9b01      	ldr	r3, [sp, #4]
 800ba3e:	6163      	str	r3, [r4, #20]
 800ba40:	2201      	movs	r2, #1
 800ba42:	6122      	str	r2, [r4, #16]
 800ba44:	3020      	adds	r0, #32
 800ba46:	e7e3      	b.n	800ba10 <__d2b+0x60>
 800ba48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ba50:	f8c9 0000 	str.w	r0, [r9]
 800ba54:	6918      	ldr	r0, [r3, #16]
 800ba56:	f7ff fcaf 	bl	800b3b8 <__hi0bits>
 800ba5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba5e:	e7df      	b.n	800ba20 <__d2b+0x70>
 800ba60:	0800cd5f 	.word	0x0800cd5f
 800ba64:	0800cdec 	.word	0x0800cdec

0800ba68 <__ratio>:
 800ba68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba6c:	4688      	mov	r8, r1
 800ba6e:	4669      	mov	r1, sp
 800ba70:	4681      	mov	r9, r0
 800ba72:	f7ff ff4d 	bl	800b910 <__b2d>
 800ba76:	a901      	add	r1, sp, #4
 800ba78:	4640      	mov	r0, r8
 800ba7a:	ec55 4b10 	vmov	r4, r5, d0
 800ba7e:	f7ff ff47 	bl	800b910 <__b2d>
 800ba82:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba86:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ba8a:	eba3 0c02 	sub.w	ip, r3, r2
 800ba8e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ba92:	1a9b      	subs	r3, r3, r2
 800ba94:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ba98:	ec51 0b10 	vmov	r0, r1, d0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	bfd6      	itet	le
 800baa0:	460a      	movle	r2, r1
 800baa2:	462a      	movgt	r2, r5
 800baa4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800baa8:	468b      	mov	fp, r1
 800baaa:	462f      	mov	r7, r5
 800baac:	bfd4      	ite	le
 800baae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bab2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bab6:	4620      	mov	r0, r4
 800bab8:	ee10 2a10 	vmov	r2, s0
 800babc:	465b      	mov	r3, fp
 800babe:	4639      	mov	r1, r7
 800bac0:	f7f4 fee4 	bl	800088c <__aeabi_ddiv>
 800bac4:	ec41 0b10 	vmov	d0, r0, r1
 800bac8:	b003      	add	sp, #12
 800baca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bace <__copybits>:
 800bace:	3901      	subs	r1, #1
 800bad0:	b570      	push	{r4, r5, r6, lr}
 800bad2:	1149      	asrs	r1, r1, #5
 800bad4:	6914      	ldr	r4, [r2, #16]
 800bad6:	3101      	adds	r1, #1
 800bad8:	f102 0314 	add.w	r3, r2, #20
 800badc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bae0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bae4:	1f05      	subs	r5, r0, #4
 800bae6:	42a3      	cmp	r3, r4
 800bae8:	d30c      	bcc.n	800bb04 <__copybits+0x36>
 800baea:	1aa3      	subs	r3, r4, r2
 800baec:	3b11      	subs	r3, #17
 800baee:	f023 0303 	bic.w	r3, r3, #3
 800baf2:	3211      	adds	r2, #17
 800baf4:	42a2      	cmp	r2, r4
 800baf6:	bf88      	it	hi
 800baf8:	2300      	movhi	r3, #0
 800bafa:	4418      	add	r0, r3
 800bafc:	2300      	movs	r3, #0
 800bafe:	4288      	cmp	r0, r1
 800bb00:	d305      	bcc.n	800bb0e <__copybits+0x40>
 800bb02:	bd70      	pop	{r4, r5, r6, pc}
 800bb04:	f853 6b04 	ldr.w	r6, [r3], #4
 800bb08:	f845 6f04 	str.w	r6, [r5, #4]!
 800bb0c:	e7eb      	b.n	800bae6 <__copybits+0x18>
 800bb0e:	f840 3b04 	str.w	r3, [r0], #4
 800bb12:	e7f4      	b.n	800bafe <__copybits+0x30>

0800bb14 <__any_on>:
 800bb14:	f100 0214 	add.w	r2, r0, #20
 800bb18:	6900      	ldr	r0, [r0, #16]
 800bb1a:	114b      	asrs	r3, r1, #5
 800bb1c:	4298      	cmp	r0, r3
 800bb1e:	b510      	push	{r4, lr}
 800bb20:	db11      	blt.n	800bb46 <__any_on+0x32>
 800bb22:	dd0a      	ble.n	800bb3a <__any_on+0x26>
 800bb24:	f011 011f 	ands.w	r1, r1, #31
 800bb28:	d007      	beq.n	800bb3a <__any_on+0x26>
 800bb2a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bb2e:	fa24 f001 	lsr.w	r0, r4, r1
 800bb32:	fa00 f101 	lsl.w	r1, r0, r1
 800bb36:	428c      	cmp	r4, r1
 800bb38:	d10b      	bne.n	800bb52 <__any_on+0x3e>
 800bb3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d803      	bhi.n	800bb4a <__any_on+0x36>
 800bb42:	2000      	movs	r0, #0
 800bb44:	bd10      	pop	{r4, pc}
 800bb46:	4603      	mov	r3, r0
 800bb48:	e7f7      	b.n	800bb3a <__any_on+0x26>
 800bb4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb4e:	2900      	cmp	r1, #0
 800bb50:	d0f5      	beq.n	800bb3e <__any_on+0x2a>
 800bb52:	2001      	movs	r0, #1
 800bb54:	e7f6      	b.n	800bb44 <__any_on+0x30>

0800bb56 <_calloc_r>:
 800bb56:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb58:	fba1 2402 	umull	r2, r4, r1, r2
 800bb5c:	b94c      	cbnz	r4, 800bb72 <_calloc_r+0x1c>
 800bb5e:	4611      	mov	r1, r2
 800bb60:	9201      	str	r2, [sp, #4]
 800bb62:	f000 f87b 	bl	800bc5c <_malloc_r>
 800bb66:	9a01      	ldr	r2, [sp, #4]
 800bb68:	4605      	mov	r5, r0
 800bb6a:	b930      	cbnz	r0, 800bb7a <_calloc_r+0x24>
 800bb6c:	4628      	mov	r0, r5
 800bb6e:	b003      	add	sp, #12
 800bb70:	bd30      	pop	{r4, r5, pc}
 800bb72:	220c      	movs	r2, #12
 800bb74:	6002      	str	r2, [r0, #0]
 800bb76:	2500      	movs	r5, #0
 800bb78:	e7f8      	b.n	800bb6c <_calloc_r+0x16>
 800bb7a:	4621      	mov	r1, r4
 800bb7c:	f7fc fe3c 	bl	80087f8 <memset>
 800bb80:	e7f4      	b.n	800bb6c <_calloc_r+0x16>
	...

0800bb84 <_free_r>:
 800bb84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb86:	2900      	cmp	r1, #0
 800bb88:	d044      	beq.n	800bc14 <_free_r+0x90>
 800bb8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb8e:	9001      	str	r0, [sp, #4]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	f1a1 0404 	sub.w	r4, r1, #4
 800bb96:	bfb8      	it	lt
 800bb98:	18e4      	addlt	r4, r4, r3
 800bb9a:	f000 fab5 	bl	800c108 <__malloc_lock>
 800bb9e:	4a1e      	ldr	r2, [pc, #120]	; (800bc18 <_free_r+0x94>)
 800bba0:	9801      	ldr	r0, [sp, #4]
 800bba2:	6813      	ldr	r3, [r2, #0]
 800bba4:	b933      	cbnz	r3, 800bbb4 <_free_r+0x30>
 800bba6:	6063      	str	r3, [r4, #4]
 800bba8:	6014      	str	r4, [r2, #0]
 800bbaa:	b003      	add	sp, #12
 800bbac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bbb0:	f000 bab0 	b.w	800c114 <__malloc_unlock>
 800bbb4:	42a3      	cmp	r3, r4
 800bbb6:	d908      	bls.n	800bbca <_free_r+0x46>
 800bbb8:	6825      	ldr	r5, [r4, #0]
 800bbba:	1961      	adds	r1, r4, r5
 800bbbc:	428b      	cmp	r3, r1
 800bbbe:	bf01      	itttt	eq
 800bbc0:	6819      	ldreq	r1, [r3, #0]
 800bbc2:	685b      	ldreq	r3, [r3, #4]
 800bbc4:	1949      	addeq	r1, r1, r5
 800bbc6:	6021      	streq	r1, [r4, #0]
 800bbc8:	e7ed      	b.n	800bba6 <_free_r+0x22>
 800bbca:	461a      	mov	r2, r3
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	b10b      	cbz	r3, 800bbd4 <_free_r+0x50>
 800bbd0:	42a3      	cmp	r3, r4
 800bbd2:	d9fa      	bls.n	800bbca <_free_r+0x46>
 800bbd4:	6811      	ldr	r1, [r2, #0]
 800bbd6:	1855      	adds	r5, r2, r1
 800bbd8:	42a5      	cmp	r5, r4
 800bbda:	d10b      	bne.n	800bbf4 <_free_r+0x70>
 800bbdc:	6824      	ldr	r4, [r4, #0]
 800bbde:	4421      	add	r1, r4
 800bbe0:	1854      	adds	r4, r2, r1
 800bbe2:	42a3      	cmp	r3, r4
 800bbe4:	6011      	str	r1, [r2, #0]
 800bbe6:	d1e0      	bne.n	800bbaa <_free_r+0x26>
 800bbe8:	681c      	ldr	r4, [r3, #0]
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	6053      	str	r3, [r2, #4]
 800bbee:	4421      	add	r1, r4
 800bbf0:	6011      	str	r1, [r2, #0]
 800bbf2:	e7da      	b.n	800bbaa <_free_r+0x26>
 800bbf4:	d902      	bls.n	800bbfc <_free_r+0x78>
 800bbf6:	230c      	movs	r3, #12
 800bbf8:	6003      	str	r3, [r0, #0]
 800bbfa:	e7d6      	b.n	800bbaa <_free_r+0x26>
 800bbfc:	6825      	ldr	r5, [r4, #0]
 800bbfe:	1961      	adds	r1, r4, r5
 800bc00:	428b      	cmp	r3, r1
 800bc02:	bf04      	itt	eq
 800bc04:	6819      	ldreq	r1, [r3, #0]
 800bc06:	685b      	ldreq	r3, [r3, #4]
 800bc08:	6063      	str	r3, [r4, #4]
 800bc0a:	bf04      	itt	eq
 800bc0c:	1949      	addeq	r1, r1, r5
 800bc0e:	6021      	streq	r1, [r4, #0]
 800bc10:	6054      	str	r4, [r2, #4]
 800bc12:	e7ca      	b.n	800bbaa <_free_r+0x26>
 800bc14:	b003      	add	sp, #12
 800bc16:	bd30      	pop	{r4, r5, pc}
 800bc18:	20000b68 	.word	0x20000b68

0800bc1c <sbrk_aligned>:
 800bc1c:	b570      	push	{r4, r5, r6, lr}
 800bc1e:	4e0e      	ldr	r6, [pc, #56]	; (800bc58 <sbrk_aligned+0x3c>)
 800bc20:	460c      	mov	r4, r1
 800bc22:	6831      	ldr	r1, [r6, #0]
 800bc24:	4605      	mov	r5, r0
 800bc26:	b911      	cbnz	r1, 800bc2e <sbrk_aligned+0x12>
 800bc28:	f000 f9f2 	bl	800c010 <_sbrk_r>
 800bc2c:	6030      	str	r0, [r6, #0]
 800bc2e:	4621      	mov	r1, r4
 800bc30:	4628      	mov	r0, r5
 800bc32:	f000 f9ed 	bl	800c010 <_sbrk_r>
 800bc36:	1c43      	adds	r3, r0, #1
 800bc38:	d00a      	beq.n	800bc50 <sbrk_aligned+0x34>
 800bc3a:	1cc4      	adds	r4, r0, #3
 800bc3c:	f024 0403 	bic.w	r4, r4, #3
 800bc40:	42a0      	cmp	r0, r4
 800bc42:	d007      	beq.n	800bc54 <sbrk_aligned+0x38>
 800bc44:	1a21      	subs	r1, r4, r0
 800bc46:	4628      	mov	r0, r5
 800bc48:	f000 f9e2 	bl	800c010 <_sbrk_r>
 800bc4c:	3001      	adds	r0, #1
 800bc4e:	d101      	bne.n	800bc54 <sbrk_aligned+0x38>
 800bc50:	f04f 34ff 	mov.w	r4, #4294967295
 800bc54:	4620      	mov	r0, r4
 800bc56:	bd70      	pop	{r4, r5, r6, pc}
 800bc58:	20000b6c 	.word	0x20000b6c

0800bc5c <_malloc_r>:
 800bc5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc60:	1ccd      	adds	r5, r1, #3
 800bc62:	f025 0503 	bic.w	r5, r5, #3
 800bc66:	3508      	adds	r5, #8
 800bc68:	2d0c      	cmp	r5, #12
 800bc6a:	bf38      	it	cc
 800bc6c:	250c      	movcc	r5, #12
 800bc6e:	2d00      	cmp	r5, #0
 800bc70:	4607      	mov	r7, r0
 800bc72:	db01      	blt.n	800bc78 <_malloc_r+0x1c>
 800bc74:	42a9      	cmp	r1, r5
 800bc76:	d905      	bls.n	800bc84 <_malloc_r+0x28>
 800bc78:	230c      	movs	r3, #12
 800bc7a:	603b      	str	r3, [r7, #0]
 800bc7c:	2600      	movs	r6, #0
 800bc7e:	4630      	mov	r0, r6
 800bc80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc84:	4e2e      	ldr	r6, [pc, #184]	; (800bd40 <_malloc_r+0xe4>)
 800bc86:	f000 fa3f 	bl	800c108 <__malloc_lock>
 800bc8a:	6833      	ldr	r3, [r6, #0]
 800bc8c:	461c      	mov	r4, r3
 800bc8e:	bb34      	cbnz	r4, 800bcde <_malloc_r+0x82>
 800bc90:	4629      	mov	r1, r5
 800bc92:	4638      	mov	r0, r7
 800bc94:	f7ff ffc2 	bl	800bc1c <sbrk_aligned>
 800bc98:	1c43      	adds	r3, r0, #1
 800bc9a:	4604      	mov	r4, r0
 800bc9c:	d14d      	bne.n	800bd3a <_malloc_r+0xde>
 800bc9e:	6834      	ldr	r4, [r6, #0]
 800bca0:	4626      	mov	r6, r4
 800bca2:	2e00      	cmp	r6, #0
 800bca4:	d140      	bne.n	800bd28 <_malloc_r+0xcc>
 800bca6:	6823      	ldr	r3, [r4, #0]
 800bca8:	4631      	mov	r1, r6
 800bcaa:	4638      	mov	r0, r7
 800bcac:	eb04 0803 	add.w	r8, r4, r3
 800bcb0:	f000 f9ae 	bl	800c010 <_sbrk_r>
 800bcb4:	4580      	cmp	r8, r0
 800bcb6:	d13a      	bne.n	800bd2e <_malloc_r+0xd2>
 800bcb8:	6821      	ldr	r1, [r4, #0]
 800bcba:	3503      	adds	r5, #3
 800bcbc:	1a6d      	subs	r5, r5, r1
 800bcbe:	f025 0503 	bic.w	r5, r5, #3
 800bcc2:	3508      	adds	r5, #8
 800bcc4:	2d0c      	cmp	r5, #12
 800bcc6:	bf38      	it	cc
 800bcc8:	250c      	movcc	r5, #12
 800bcca:	4629      	mov	r1, r5
 800bccc:	4638      	mov	r0, r7
 800bcce:	f7ff ffa5 	bl	800bc1c <sbrk_aligned>
 800bcd2:	3001      	adds	r0, #1
 800bcd4:	d02b      	beq.n	800bd2e <_malloc_r+0xd2>
 800bcd6:	6823      	ldr	r3, [r4, #0]
 800bcd8:	442b      	add	r3, r5
 800bcda:	6023      	str	r3, [r4, #0]
 800bcdc:	e00e      	b.n	800bcfc <_malloc_r+0xa0>
 800bcde:	6822      	ldr	r2, [r4, #0]
 800bce0:	1b52      	subs	r2, r2, r5
 800bce2:	d41e      	bmi.n	800bd22 <_malloc_r+0xc6>
 800bce4:	2a0b      	cmp	r2, #11
 800bce6:	d916      	bls.n	800bd16 <_malloc_r+0xba>
 800bce8:	1961      	adds	r1, r4, r5
 800bcea:	42a3      	cmp	r3, r4
 800bcec:	6025      	str	r5, [r4, #0]
 800bcee:	bf18      	it	ne
 800bcf0:	6059      	strne	r1, [r3, #4]
 800bcf2:	6863      	ldr	r3, [r4, #4]
 800bcf4:	bf08      	it	eq
 800bcf6:	6031      	streq	r1, [r6, #0]
 800bcf8:	5162      	str	r2, [r4, r5]
 800bcfa:	604b      	str	r3, [r1, #4]
 800bcfc:	4638      	mov	r0, r7
 800bcfe:	f104 060b 	add.w	r6, r4, #11
 800bd02:	f000 fa07 	bl	800c114 <__malloc_unlock>
 800bd06:	f026 0607 	bic.w	r6, r6, #7
 800bd0a:	1d23      	adds	r3, r4, #4
 800bd0c:	1af2      	subs	r2, r6, r3
 800bd0e:	d0b6      	beq.n	800bc7e <_malloc_r+0x22>
 800bd10:	1b9b      	subs	r3, r3, r6
 800bd12:	50a3      	str	r3, [r4, r2]
 800bd14:	e7b3      	b.n	800bc7e <_malloc_r+0x22>
 800bd16:	6862      	ldr	r2, [r4, #4]
 800bd18:	42a3      	cmp	r3, r4
 800bd1a:	bf0c      	ite	eq
 800bd1c:	6032      	streq	r2, [r6, #0]
 800bd1e:	605a      	strne	r2, [r3, #4]
 800bd20:	e7ec      	b.n	800bcfc <_malloc_r+0xa0>
 800bd22:	4623      	mov	r3, r4
 800bd24:	6864      	ldr	r4, [r4, #4]
 800bd26:	e7b2      	b.n	800bc8e <_malloc_r+0x32>
 800bd28:	4634      	mov	r4, r6
 800bd2a:	6876      	ldr	r6, [r6, #4]
 800bd2c:	e7b9      	b.n	800bca2 <_malloc_r+0x46>
 800bd2e:	230c      	movs	r3, #12
 800bd30:	603b      	str	r3, [r7, #0]
 800bd32:	4638      	mov	r0, r7
 800bd34:	f000 f9ee 	bl	800c114 <__malloc_unlock>
 800bd38:	e7a1      	b.n	800bc7e <_malloc_r+0x22>
 800bd3a:	6025      	str	r5, [r4, #0]
 800bd3c:	e7de      	b.n	800bcfc <_malloc_r+0xa0>
 800bd3e:	bf00      	nop
 800bd40:	20000b68 	.word	0x20000b68

0800bd44 <__ssputs_r>:
 800bd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd48:	688e      	ldr	r6, [r1, #8]
 800bd4a:	429e      	cmp	r6, r3
 800bd4c:	4682      	mov	sl, r0
 800bd4e:	460c      	mov	r4, r1
 800bd50:	4690      	mov	r8, r2
 800bd52:	461f      	mov	r7, r3
 800bd54:	d838      	bhi.n	800bdc8 <__ssputs_r+0x84>
 800bd56:	898a      	ldrh	r2, [r1, #12]
 800bd58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd5c:	d032      	beq.n	800bdc4 <__ssputs_r+0x80>
 800bd5e:	6825      	ldr	r5, [r4, #0]
 800bd60:	6909      	ldr	r1, [r1, #16]
 800bd62:	eba5 0901 	sub.w	r9, r5, r1
 800bd66:	6965      	ldr	r5, [r4, #20]
 800bd68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd70:	3301      	adds	r3, #1
 800bd72:	444b      	add	r3, r9
 800bd74:	106d      	asrs	r5, r5, #1
 800bd76:	429d      	cmp	r5, r3
 800bd78:	bf38      	it	cc
 800bd7a:	461d      	movcc	r5, r3
 800bd7c:	0553      	lsls	r3, r2, #21
 800bd7e:	d531      	bpl.n	800bde4 <__ssputs_r+0xa0>
 800bd80:	4629      	mov	r1, r5
 800bd82:	f7ff ff6b 	bl	800bc5c <_malloc_r>
 800bd86:	4606      	mov	r6, r0
 800bd88:	b950      	cbnz	r0, 800bda0 <__ssputs_r+0x5c>
 800bd8a:	230c      	movs	r3, #12
 800bd8c:	f8ca 3000 	str.w	r3, [sl]
 800bd90:	89a3      	ldrh	r3, [r4, #12]
 800bd92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd96:	81a3      	strh	r3, [r4, #12]
 800bd98:	f04f 30ff 	mov.w	r0, #4294967295
 800bd9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bda0:	6921      	ldr	r1, [r4, #16]
 800bda2:	464a      	mov	r2, r9
 800bda4:	f7ff fa08 	bl	800b1b8 <memcpy>
 800bda8:	89a3      	ldrh	r3, [r4, #12]
 800bdaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bdae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdb2:	81a3      	strh	r3, [r4, #12]
 800bdb4:	6126      	str	r6, [r4, #16]
 800bdb6:	6165      	str	r5, [r4, #20]
 800bdb8:	444e      	add	r6, r9
 800bdba:	eba5 0509 	sub.w	r5, r5, r9
 800bdbe:	6026      	str	r6, [r4, #0]
 800bdc0:	60a5      	str	r5, [r4, #8]
 800bdc2:	463e      	mov	r6, r7
 800bdc4:	42be      	cmp	r6, r7
 800bdc6:	d900      	bls.n	800bdca <__ssputs_r+0x86>
 800bdc8:	463e      	mov	r6, r7
 800bdca:	6820      	ldr	r0, [r4, #0]
 800bdcc:	4632      	mov	r2, r6
 800bdce:	4641      	mov	r1, r8
 800bdd0:	f000 f980 	bl	800c0d4 <memmove>
 800bdd4:	68a3      	ldr	r3, [r4, #8]
 800bdd6:	1b9b      	subs	r3, r3, r6
 800bdd8:	60a3      	str	r3, [r4, #8]
 800bdda:	6823      	ldr	r3, [r4, #0]
 800bddc:	4433      	add	r3, r6
 800bdde:	6023      	str	r3, [r4, #0]
 800bde0:	2000      	movs	r0, #0
 800bde2:	e7db      	b.n	800bd9c <__ssputs_r+0x58>
 800bde4:	462a      	mov	r2, r5
 800bde6:	f000 f99b 	bl	800c120 <_realloc_r>
 800bdea:	4606      	mov	r6, r0
 800bdec:	2800      	cmp	r0, #0
 800bdee:	d1e1      	bne.n	800bdb4 <__ssputs_r+0x70>
 800bdf0:	6921      	ldr	r1, [r4, #16]
 800bdf2:	4650      	mov	r0, sl
 800bdf4:	f7ff fec6 	bl	800bb84 <_free_r>
 800bdf8:	e7c7      	b.n	800bd8a <__ssputs_r+0x46>
	...

0800bdfc <_svfiprintf_r>:
 800bdfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be00:	4698      	mov	r8, r3
 800be02:	898b      	ldrh	r3, [r1, #12]
 800be04:	061b      	lsls	r3, r3, #24
 800be06:	b09d      	sub	sp, #116	; 0x74
 800be08:	4607      	mov	r7, r0
 800be0a:	460d      	mov	r5, r1
 800be0c:	4614      	mov	r4, r2
 800be0e:	d50e      	bpl.n	800be2e <_svfiprintf_r+0x32>
 800be10:	690b      	ldr	r3, [r1, #16]
 800be12:	b963      	cbnz	r3, 800be2e <_svfiprintf_r+0x32>
 800be14:	2140      	movs	r1, #64	; 0x40
 800be16:	f7ff ff21 	bl	800bc5c <_malloc_r>
 800be1a:	6028      	str	r0, [r5, #0]
 800be1c:	6128      	str	r0, [r5, #16]
 800be1e:	b920      	cbnz	r0, 800be2a <_svfiprintf_r+0x2e>
 800be20:	230c      	movs	r3, #12
 800be22:	603b      	str	r3, [r7, #0]
 800be24:	f04f 30ff 	mov.w	r0, #4294967295
 800be28:	e0d1      	b.n	800bfce <_svfiprintf_r+0x1d2>
 800be2a:	2340      	movs	r3, #64	; 0x40
 800be2c:	616b      	str	r3, [r5, #20]
 800be2e:	2300      	movs	r3, #0
 800be30:	9309      	str	r3, [sp, #36]	; 0x24
 800be32:	2320      	movs	r3, #32
 800be34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be38:	f8cd 800c 	str.w	r8, [sp, #12]
 800be3c:	2330      	movs	r3, #48	; 0x30
 800be3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bfe8 <_svfiprintf_r+0x1ec>
 800be42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be46:	f04f 0901 	mov.w	r9, #1
 800be4a:	4623      	mov	r3, r4
 800be4c:	469a      	mov	sl, r3
 800be4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be52:	b10a      	cbz	r2, 800be58 <_svfiprintf_r+0x5c>
 800be54:	2a25      	cmp	r2, #37	; 0x25
 800be56:	d1f9      	bne.n	800be4c <_svfiprintf_r+0x50>
 800be58:	ebba 0b04 	subs.w	fp, sl, r4
 800be5c:	d00b      	beq.n	800be76 <_svfiprintf_r+0x7a>
 800be5e:	465b      	mov	r3, fp
 800be60:	4622      	mov	r2, r4
 800be62:	4629      	mov	r1, r5
 800be64:	4638      	mov	r0, r7
 800be66:	f7ff ff6d 	bl	800bd44 <__ssputs_r>
 800be6a:	3001      	adds	r0, #1
 800be6c:	f000 80aa 	beq.w	800bfc4 <_svfiprintf_r+0x1c8>
 800be70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be72:	445a      	add	r2, fp
 800be74:	9209      	str	r2, [sp, #36]	; 0x24
 800be76:	f89a 3000 	ldrb.w	r3, [sl]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	f000 80a2 	beq.w	800bfc4 <_svfiprintf_r+0x1c8>
 800be80:	2300      	movs	r3, #0
 800be82:	f04f 32ff 	mov.w	r2, #4294967295
 800be86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be8a:	f10a 0a01 	add.w	sl, sl, #1
 800be8e:	9304      	str	r3, [sp, #16]
 800be90:	9307      	str	r3, [sp, #28]
 800be92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be96:	931a      	str	r3, [sp, #104]	; 0x68
 800be98:	4654      	mov	r4, sl
 800be9a:	2205      	movs	r2, #5
 800be9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bea0:	4851      	ldr	r0, [pc, #324]	; (800bfe8 <_svfiprintf_r+0x1ec>)
 800bea2:	f7f4 f9bd 	bl	8000220 <memchr>
 800bea6:	9a04      	ldr	r2, [sp, #16]
 800bea8:	b9d8      	cbnz	r0, 800bee2 <_svfiprintf_r+0xe6>
 800beaa:	06d0      	lsls	r0, r2, #27
 800beac:	bf44      	itt	mi
 800beae:	2320      	movmi	r3, #32
 800beb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800beb4:	0711      	lsls	r1, r2, #28
 800beb6:	bf44      	itt	mi
 800beb8:	232b      	movmi	r3, #43	; 0x2b
 800beba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bebe:	f89a 3000 	ldrb.w	r3, [sl]
 800bec2:	2b2a      	cmp	r3, #42	; 0x2a
 800bec4:	d015      	beq.n	800bef2 <_svfiprintf_r+0xf6>
 800bec6:	9a07      	ldr	r2, [sp, #28]
 800bec8:	4654      	mov	r4, sl
 800beca:	2000      	movs	r0, #0
 800becc:	f04f 0c0a 	mov.w	ip, #10
 800bed0:	4621      	mov	r1, r4
 800bed2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bed6:	3b30      	subs	r3, #48	; 0x30
 800bed8:	2b09      	cmp	r3, #9
 800beda:	d94e      	bls.n	800bf7a <_svfiprintf_r+0x17e>
 800bedc:	b1b0      	cbz	r0, 800bf0c <_svfiprintf_r+0x110>
 800bede:	9207      	str	r2, [sp, #28]
 800bee0:	e014      	b.n	800bf0c <_svfiprintf_r+0x110>
 800bee2:	eba0 0308 	sub.w	r3, r0, r8
 800bee6:	fa09 f303 	lsl.w	r3, r9, r3
 800beea:	4313      	orrs	r3, r2
 800beec:	9304      	str	r3, [sp, #16]
 800beee:	46a2      	mov	sl, r4
 800bef0:	e7d2      	b.n	800be98 <_svfiprintf_r+0x9c>
 800bef2:	9b03      	ldr	r3, [sp, #12]
 800bef4:	1d19      	adds	r1, r3, #4
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	9103      	str	r1, [sp, #12]
 800befa:	2b00      	cmp	r3, #0
 800befc:	bfbb      	ittet	lt
 800befe:	425b      	neglt	r3, r3
 800bf00:	f042 0202 	orrlt.w	r2, r2, #2
 800bf04:	9307      	strge	r3, [sp, #28]
 800bf06:	9307      	strlt	r3, [sp, #28]
 800bf08:	bfb8      	it	lt
 800bf0a:	9204      	strlt	r2, [sp, #16]
 800bf0c:	7823      	ldrb	r3, [r4, #0]
 800bf0e:	2b2e      	cmp	r3, #46	; 0x2e
 800bf10:	d10c      	bne.n	800bf2c <_svfiprintf_r+0x130>
 800bf12:	7863      	ldrb	r3, [r4, #1]
 800bf14:	2b2a      	cmp	r3, #42	; 0x2a
 800bf16:	d135      	bne.n	800bf84 <_svfiprintf_r+0x188>
 800bf18:	9b03      	ldr	r3, [sp, #12]
 800bf1a:	1d1a      	adds	r2, r3, #4
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	9203      	str	r2, [sp, #12]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	bfb8      	it	lt
 800bf24:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf28:	3402      	adds	r4, #2
 800bf2a:	9305      	str	r3, [sp, #20]
 800bf2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bff8 <_svfiprintf_r+0x1fc>
 800bf30:	7821      	ldrb	r1, [r4, #0]
 800bf32:	2203      	movs	r2, #3
 800bf34:	4650      	mov	r0, sl
 800bf36:	f7f4 f973 	bl	8000220 <memchr>
 800bf3a:	b140      	cbz	r0, 800bf4e <_svfiprintf_r+0x152>
 800bf3c:	2340      	movs	r3, #64	; 0x40
 800bf3e:	eba0 000a 	sub.w	r0, r0, sl
 800bf42:	fa03 f000 	lsl.w	r0, r3, r0
 800bf46:	9b04      	ldr	r3, [sp, #16]
 800bf48:	4303      	orrs	r3, r0
 800bf4a:	3401      	adds	r4, #1
 800bf4c:	9304      	str	r3, [sp, #16]
 800bf4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf52:	4826      	ldr	r0, [pc, #152]	; (800bfec <_svfiprintf_r+0x1f0>)
 800bf54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf58:	2206      	movs	r2, #6
 800bf5a:	f7f4 f961 	bl	8000220 <memchr>
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	d038      	beq.n	800bfd4 <_svfiprintf_r+0x1d8>
 800bf62:	4b23      	ldr	r3, [pc, #140]	; (800bff0 <_svfiprintf_r+0x1f4>)
 800bf64:	bb1b      	cbnz	r3, 800bfae <_svfiprintf_r+0x1b2>
 800bf66:	9b03      	ldr	r3, [sp, #12]
 800bf68:	3307      	adds	r3, #7
 800bf6a:	f023 0307 	bic.w	r3, r3, #7
 800bf6e:	3308      	adds	r3, #8
 800bf70:	9303      	str	r3, [sp, #12]
 800bf72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf74:	4433      	add	r3, r6
 800bf76:	9309      	str	r3, [sp, #36]	; 0x24
 800bf78:	e767      	b.n	800be4a <_svfiprintf_r+0x4e>
 800bf7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf7e:	460c      	mov	r4, r1
 800bf80:	2001      	movs	r0, #1
 800bf82:	e7a5      	b.n	800bed0 <_svfiprintf_r+0xd4>
 800bf84:	2300      	movs	r3, #0
 800bf86:	3401      	adds	r4, #1
 800bf88:	9305      	str	r3, [sp, #20]
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	f04f 0c0a 	mov.w	ip, #10
 800bf90:	4620      	mov	r0, r4
 800bf92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf96:	3a30      	subs	r2, #48	; 0x30
 800bf98:	2a09      	cmp	r2, #9
 800bf9a:	d903      	bls.n	800bfa4 <_svfiprintf_r+0x1a8>
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d0c5      	beq.n	800bf2c <_svfiprintf_r+0x130>
 800bfa0:	9105      	str	r1, [sp, #20]
 800bfa2:	e7c3      	b.n	800bf2c <_svfiprintf_r+0x130>
 800bfa4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfa8:	4604      	mov	r4, r0
 800bfaa:	2301      	movs	r3, #1
 800bfac:	e7f0      	b.n	800bf90 <_svfiprintf_r+0x194>
 800bfae:	ab03      	add	r3, sp, #12
 800bfb0:	9300      	str	r3, [sp, #0]
 800bfb2:	462a      	mov	r2, r5
 800bfb4:	4b0f      	ldr	r3, [pc, #60]	; (800bff4 <_svfiprintf_r+0x1f8>)
 800bfb6:	a904      	add	r1, sp, #16
 800bfb8:	4638      	mov	r0, r7
 800bfba:	f7fc fcc5 	bl	8008948 <_printf_float>
 800bfbe:	1c42      	adds	r2, r0, #1
 800bfc0:	4606      	mov	r6, r0
 800bfc2:	d1d6      	bne.n	800bf72 <_svfiprintf_r+0x176>
 800bfc4:	89ab      	ldrh	r3, [r5, #12]
 800bfc6:	065b      	lsls	r3, r3, #25
 800bfc8:	f53f af2c 	bmi.w	800be24 <_svfiprintf_r+0x28>
 800bfcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfce:	b01d      	add	sp, #116	; 0x74
 800bfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfd4:	ab03      	add	r3, sp, #12
 800bfd6:	9300      	str	r3, [sp, #0]
 800bfd8:	462a      	mov	r2, r5
 800bfda:	4b06      	ldr	r3, [pc, #24]	; (800bff4 <_svfiprintf_r+0x1f8>)
 800bfdc:	a904      	add	r1, sp, #16
 800bfde:	4638      	mov	r0, r7
 800bfe0:	f7fc ff56 	bl	8008e90 <_printf_i>
 800bfe4:	e7eb      	b.n	800bfbe <_svfiprintf_r+0x1c2>
 800bfe6:	bf00      	nop
 800bfe8:	0800cf44 	.word	0x0800cf44
 800bfec:	0800cf4e 	.word	0x0800cf4e
 800bff0:	08008949 	.word	0x08008949
 800bff4:	0800bd45 	.word	0x0800bd45
 800bff8:	0800cf4a 	.word	0x0800cf4a
 800bffc:	00000000 	.word	0x00000000

0800c000 <nan>:
 800c000:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c008 <nan+0x8>
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	00000000 	.word	0x00000000
 800c00c:	7ff80000 	.word	0x7ff80000

0800c010 <_sbrk_r>:
 800c010:	b538      	push	{r3, r4, r5, lr}
 800c012:	4d06      	ldr	r5, [pc, #24]	; (800c02c <_sbrk_r+0x1c>)
 800c014:	2300      	movs	r3, #0
 800c016:	4604      	mov	r4, r0
 800c018:	4608      	mov	r0, r1
 800c01a:	602b      	str	r3, [r5, #0]
 800c01c:	f7f6 fcb8 	bl	8002990 <_sbrk>
 800c020:	1c43      	adds	r3, r0, #1
 800c022:	d102      	bne.n	800c02a <_sbrk_r+0x1a>
 800c024:	682b      	ldr	r3, [r5, #0]
 800c026:	b103      	cbz	r3, 800c02a <_sbrk_r+0x1a>
 800c028:	6023      	str	r3, [r4, #0]
 800c02a:	bd38      	pop	{r3, r4, r5, pc}
 800c02c:	20000b70 	.word	0x20000b70

0800c030 <strncmp>:
 800c030:	b510      	push	{r4, lr}
 800c032:	b17a      	cbz	r2, 800c054 <strncmp+0x24>
 800c034:	4603      	mov	r3, r0
 800c036:	3901      	subs	r1, #1
 800c038:	1884      	adds	r4, r0, r2
 800c03a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c03e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c042:	4290      	cmp	r0, r2
 800c044:	d101      	bne.n	800c04a <strncmp+0x1a>
 800c046:	42a3      	cmp	r3, r4
 800c048:	d101      	bne.n	800c04e <strncmp+0x1e>
 800c04a:	1a80      	subs	r0, r0, r2
 800c04c:	bd10      	pop	{r4, pc}
 800c04e:	2800      	cmp	r0, #0
 800c050:	d1f3      	bne.n	800c03a <strncmp+0xa>
 800c052:	e7fa      	b.n	800c04a <strncmp+0x1a>
 800c054:	4610      	mov	r0, r2
 800c056:	e7f9      	b.n	800c04c <strncmp+0x1c>

0800c058 <__ascii_wctomb>:
 800c058:	b149      	cbz	r1, 800c06e <__ascii_wctomb+0x16>
 800c05a:	2aff      	cmp	r2, #255	; 0xff
 800c05c:	bf85      	ittet	hi
 800c05e:	238a      	movhi	r3, #138	; 0x8a
 800c060:	6003      	strhi	r3, [r0, #0]
 800c062:	700a      	strbls	r2, [r1, #0]
 800c064:	f04f 30ff 	movhi.w	r0, #4294967295
 800c068:	bf98      	it	ls
 800c06a:	2001      	movls	r0, #1
 800c06c:	4770      	bx	lr
 800c06e:	4608      	mov	r0, r1
 800c070:	4770      	bx	lr
	...

0800c074 <__assert_func>:
 800c074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c076:	4614      	mov	r4, r2
 800c078:	461a      	mov	r2, r3
 800c07a:	4b09      	ldr	r3, [pc, #36]	; (800c0a0 <__assert_func+0x2c>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4605      	mov	r5, r0
 800c080:	68d8      	ldr	r0, [r3, #12]
 800c082:	b14c      	cbz	r4, 800c098 <__assert_func+0x24>
 800c084:	4b07      	ldr	r3, [pc, #28]	; (800c0a4 <__assert_func+0x30>)
 800c086:	9100      	str	r1, [sp, #0]
 800c088:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c08c:	4906      	ldr	r1, [pc, #24]	; (800c0a8 <__assert_func+0x34>)
 800c08e:	462b      	mov	r3, r5
 800c090:	f000 f80e 	bl	800c0b0 <fiprintf>
 800c094:	f000 fa8c 	bl	800c5b0 <abort>
 800c098:	4b04      	ldr	r3, [pc, #16]	; (800c0ac <__assert_func+0x38>)
 800c09a:	461c      	mov	r4, r3
 800c09c:	e7f3      	b.n	800c086 <__assert_func+0x12>
 800c09e:	bf00      	nop
 800c0a0:	2000001c 	.word	0x2000001c
 800c0a4:	0800cf55 	.word	0x0800cf55
 800c0a8:	0800cf62 	.word	0x0800cf62
 800c0ac:	0800cf90 	.word	0x0800cf90

0800c0b0 <fiprintf>:
 800c0b0:	b40e      	push	{r1, r2, r3}
 800c0b2:	b503      	push	{r0, r1, lr}
 800c0b4:	4601      	mov	r1, r0
 800c0b6:	ab03      	add	r3, sp, #12
 800c0b8:	4805      	ldr	r0, [pc, #20]	; (800c0d0 <fiprintf+0x20>)
 800c0ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0be:	6800      	ldr	r0, [r0, #0]
 800c0c0:	9301      	str	r3, [sp, #4]
 800c0c2:	f000 f885 	bl	800c1d0 <_vfiprintf_r>
 800c0c6:	b002      	add	sp, #8
 800c0c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0cc:	b003      	add	sp, #12
 800c0ce:	4770      	bx	lr
 800c0d0:	2000001c 	.word	0x2000001c

0800c0d4 <memmove>:
 800c0d4:	4288      	cmp	r0, r1
 800c0d6:	b510      	push	{r4, lr}
 800c0d8:	eb01 0402 	add.w	r4, r1, r2
 800c0dc:	d902      	bls.n	800c0e4 <memmove+0x10>
 800c0de:	4284      	cmp	r4, r0
 800c0e0:	4623      	mov	r3, r4
 800c0e2:	d807      	bhi.n	800c0f4 <memmove+0x20>
 800c0e4:	1e43      	subs	r3, r0, #1
 800c0e6:	42a1      	cmp	r1, r4
 800c0e8:	d008      	beq.n	800c0fc <memmove+0x28>
 800c0ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0f2:	e7f8      	b.n	800c0e6 <memmove+0x12>
 800c0f4:	4402      	add	r2, r0
 800c0f6:	4601      	mov	r1, r0
 800c0f8:	428a      	cmp	r2, r1
 800c0fa:	d100      	bne.n	800c0fe <memmove+0x2a>
 800c0fc:	bd10      	pop	{r4, pc}
 800c0fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c102:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c106:	e7f7      	b.n	800c0f8 <memmove+0x24>

0800c108 <__malloc_lock>:
 800c108:	4801      	ldr	r0, [pc, #4]	; (800c110 <__malloc_lock+0x8>)
 800c10a:	f000 bc11 	b.w	800c930 <__retarget_lock_acquire_recursive>
 800c10e:	bf00      	nop
 800c110:	20000b74 	.word	0x20000b74

0800c114 <__malloc_unlock>:
 800c114:	4801      	ldr	r0, [pc, #4]	; (800c11c <__malloc_unlock+0x8>)
 800c116:	f000 bc0c 	b.w	800c932 <__retarget_lock_release_recursive>
 800c11a:	bf00      	nop
 800c11c:	20000b74 	.word	0x20000b74

0800c120 <_realloc_r>:
 800c120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c124:	4680      	mov	r8, r0
 800c126:	4614      	mov	r4, r2
 800c128:	460e      	mov	r6, r1
 800c12a:	b921      	cbnz	r1, 800c136 <_realloc_r+0x16>
 800c12c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c130:	4611      	mov	r1, r2
 800c132:	f7ff bd93 	b.w	800bc5c <_malloc_r>
 800c136:	b92a      	cbnz	r2, 800c144 <_realloc_r+0x24>
 800c138:	f7ff fd24 	bl	800bb84 <_free_r>
 800c13c:	4625      	mov	r5, r4
 800c13e:	4628      	mov	r0, r5
 800c140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c144:	f000 fc5c 	bl	800ca00 <_malloc_usable_size_r>
 800c148:	4284      	cmp	r4, r0
 800c14a:	4607      	mov	r7, r0
 800c14c:	d802      	bhi.n	800c154 <_realloc_r+0x34>
 800c14e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c152:	d812      	bhi.n	800c17a <_realloc_r+0x5a>
 800c154:	4621      	mov	r1, r4
 800c156:	4640      	mov	r0, r8
 800c158:	f7ff fd80 	bl	800bc5c <_malloc_r>
 800c15c:	4605      	mov	r5, r0
 800c15e:	2800      	cmp	r0, #0
 800c160:	d0ed      	beq.n	800c13e <_realloc_r+0x1e>
 800c162:	42bc      	cmp	r4, r7
 800c164:	4622      	mov	r2, r4
 800c166:	4631      	mov	r1, r6
 800c168:	bf28      	it	cs
 800c16a:	463a      	movcs	r2, r7
 800c16c:	f7ff f824 	bl	800b1b8 <memcpy>
 800c170:	4631      	mov	r1, r6
 800c172:	4640      	mov	r0, r8
 800c174:	f7ff fd06 	bl	800bb84 <_free_r>
 800c178:	e7e1      	b.n	800c13e <_realloc_r+0x1e>
 800c17a:	4635      	mov	r5, r6
 800c17c:	e7df      	b.n	800c13e <_realloc_r+0x1e>

0800c17e <__sfputc_r>:
 800c17e:	6893      	ldr	r3, [r2, #8]
 800c180:	3b01      	subs	r3, #1
 800c182:	2b00      	cmp	r3, #0
 800c184:	b410      	push	{r4}
 800c186:	6093      	str	r3, [r2, #8]
 800c188:	da08      	bge.n	800c19c <__sfputc_r+0x1e>
 800c18a:	6994      	ldr	r4, [r2, #24]
 800c18c:	42a3      	cmp	r3, r4
 800c18e:	db01      	blt.n	800c194 <__sfputc_r+0x16>
 800c190:	290a      	cmp	r1, #10
 800c192:	d103      	bne.n	800c19c <__sfputc_r+0x1e>
 800c194:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c198:	f000 b94a 	b.w	800c430 <__swbuf_r>
 800c19c:	6813      	ldr	r3, [r2, #0]
 800c19e:	1c58      	adds	r0, r3, #1
 800c1a0:	6010      	str	r0, [r2, #0]
 800c1a2:	7019      	strb	r1, [r3, #0]
 800c1a4:	4608      	mov	r0, r1
 800c1a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1aa:	4770      	bx	lr

0800c1ac <__sfputs_r>:
 800c1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ae:	4606      	mov	r6, r0
 800c1b0:	460f      	mov	r7, r1
 800c1b2:	4614      	mov	r4, r2
 800c1b4:	18d5      	adds	r5, r2, r3
 800c1b6:	42ac      	cmp	r4, r5
 800c1b8:	d101      	bne.n	800c1be <__sfputs_r+0x12>
 800c1ba:	2000      	movs	r0, #0
 800c1bc:	e007      	b.n	800c1ce <__sfputs_r+0x22>
 800c1be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1c2:	463a      	mov	r2, r7
 800c1c4:	4630      	mov	r0, r6
 800c1c6:	f7ff ffda 	bl	800c17e <__sfputc_r>
 800c1ca:	1c43      	adds	r3, r0, #1
 800c1cc:	d1f3      	bne.n	800c1b6 <__sfputs_r+0xa>
 800c1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c1d0 <_vfiprintf_r>:
 800c1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d4:	460d      	mov	r5, r1
 800c1d6:	b09d      	sub	sp, #116	; 0x74
 800c1d8:	4614      	mov	r4, r2
 800c1da:	4698      	mov	r8, r3
 800c1dc:	4606      	mov	r6, r0
 800c1de:	b118      	cbz	r0, 800c1e8 <_vfiprintf_r+0x18>
 800c1e0:	6983      	ldr	r3, [r0, #24]
 800c1e2:	b90b      	cbnz	r3, 800c1e8 <_vfiprintf_r+0x18>
 800c1e4:	f000 fb06 	bl	800c7f4 <__sinit>
 800c1e8:	4b89      	ldr	r3, [pc, #548]	; (800c410 <_vfiprintf_r+0x240>)
 800c1ea:	429d      	cmp	r5, r3
 800c1ec:	d11b      	bne.n	800c226 <_vfiprintf_r+0x56>
 800c1ee:	6875      	ldr	r5, [r6, #4]
 800c1f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1f2:	07d9      	lsls	r1, r3, #31
 800c1f4:	d405      	bmi.n	800c202 <_vfiprintf_r+0x32>
 800c1f6:	89ab      	ldrh	r3, [r5, #12]
 800c1f8:	059a      	lsls	r2, r3, #22
 800c1fa:	d402      	bmi.n	800c202 <_vfiprintf_r+0x32>
 800c1fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1fe:	f000 fb97 	bl	800c930 <__retarget_lock_acquire_recursive>
 800c202:	89ab      	ldrh	r3, [r5, #12]
 800c204:	071b      	lsls	r3, r3, #28
 800c206:	d501      	bpl.n	800c20c <_vfiprintf_r+0x3c>
 800c208:	692b      	ldr	r3, [r5, #16]
 800c20a:	b9eb      	cbnz	r3, 800c248 <_vfiprintf_r+0x78>
 800c20c:	4629      	mov	r1, r5
 800c20e:	4630      	mov	r0, r6
 800c210:	f000 f960 	bl	800c4d4 <__swsetup_r>
 800c214:	b1c0      	cbz	r0, 800c248 <_vfiprintf_r+0x78>
 800c216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c218:	07dc      	lsls	r4, r3, #31
 800c21a:	d50e      	bpl.n	800c23a <_vfiprintf_r+0x6a>
 800c21c:	f04f 30ff 	mov.w	r0, #4294967295
 800c220:	b01d      	add	sp, #116	; 0x74
 800c222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c226:	4b7b      	ldr	r3, [pc, #492]	; (800c414 <_vfiprintf_r+0x244>)
 800c228:	429d      	cmp	r5, r3
 800c22a:	d101      	bne.n	800c230 <_vfiprintf_r+0x60>
 800c22c:	68b5      	ldr	r5, [r6, #8]
 800c22e:	e7df      	b.n	800c1f0 <_vfiprintf_r+0x20>
 800c230:	4b79      	ldr	r3, [pc, #484]	; (800c418 <_vfiprintf_r+0x248>)
 800c232:	429d      	cmp	r5, r3
 800c234:	bf08      	it	eq
 800c236:	68f5      	ldreq	r5, [r6, #12]
 800c238:	e7da      	b.n	800c1f0 <_vfiprintf_r+0x20>
 800c23a:	89ab      	ldrh	r3, [r5, #12]
 800c23c:	0598      	lsls	r0, r3, #22
 800c23e:	d4ed      	bmi.n	800c21c <_vfiprintf_r+0x4c>
 800c240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c242:	f000 fb76 	bl	800c932 <__retarget_lock_release_recursive>
 800c246:	e7e9      	b.n	800c21c <_vfiprintf_r+0x4c>
 800c248:	2300      	movs	r3, #0
 800c24a:	9309      	str	r3, [sp, #36]	; 0x24
 800c24c:	2320      	movs	r3, #32
 800c24e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c252:	f8cd 800c 	str.w	r8, [sp, #12]
 800c256:	2330      	movs	r3, #48	; 0x30
 800c258:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c41c <_vfiprintf_r+0x24c>
 800c25c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c260:	f04f 0901 	mov.w	r9, #1
 800c264:	4623      	mov	r3, r4
 800c266:	469a      	mov	sl, r3
 800c268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c26c:	b10a      	cbz	r2, 800c272 <_vfiprintf_r+0xa2>
 800c26e:	2a25      	cmp	r2, #37	; 0x25
 800c270:	d1f9      	bne.n	800c266 <_vfiprintf_r+0x96>
 800c272:	ebba 0b04 	subs.w	fp, sl, r4
 800c276:	d00b      	beq.n	800c290 <_vfiprintf_r+0xc0>
 800c278:	465b      	mov	r3, fp
 800c27a:	4622      	mov	r2, r4
 800c27c:	4629      	mov	r1, r5
 800c27e:	4630      	mov	r0, r6
 800c280:	f7ff ff94 	bl	800c1ac <__sfputs_r>
 800c284:	3001      	adds	r0, #1
 800c286:	f000 80aa 	beq.w	800c3de <_vfiprintf_r+0x20e>
 800c28a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c28c:	445a      	add	r2, fp
 800c28e:	9209      	str	r2, [sp, #36]	; 0x24
 800c290:	f89a 3000 	ldrb.w	r3, [sl]
 800c294:	2b00      	cmp	r3, #0
 800c296:	f000 80a2 	beq.w	800c3de <_vfiprintf_r+0x20e>
 800c29a:	2300      	movs	r3, #0
 800c29c:	f04f 32ff 	mov.w	r2, #4294967295
 800c2a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2a4:	f10a 0a01 	add.w	sl, sl, #1
 800c2a8:	9304      	str	r3, [sp, #16]
 800c2aa:	9307      	str	r3, [sp, #28]
 800c2ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2b0:	931a      	str	r3, [sp, #104]	; 0x68
 800c2b2:	4654      	mov	r4, sl
 800c2b4:	2205      	movs	r2, #5
 800c2b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ba:	4858      	ldr	r0, [pc, #352]	; (800c41c <_vfiprintf_r+0x24c>)
 800c2bc:	f7f3 ffb0 	bl	8000220 <memchr>
 800c2c0:	9a04      	ldr	r2, [sp, #16]
 800c2c2:	b9d8      	cbnz	r0, 800c2fc <_vfiprintf_r+0x12c>
 800c2c4:	06d1      	lsls	r1, r2, #27
 800c2c6:	bf44      	itt	mi
 800c2c8:	2320      	movmi	r3, #32
 800c2ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2ce:	0713      	lsls	r3, r2, #28
 800c2d0:	bf44      	itt	mi
 800c2d2:	232b      	movmi	r3, #43	; 0x2b
 800c2d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2d8:	f89a 3000 	ldrb.w	r3, [sl]
 800c2dc:	2b2a      	cmp	r3, #42	; 0x2a
 800c2de:	d015      	beq.n	800c30c <_vfiprintf_r+0x13c>
 800c2e0:	9a07      	ldr	r2, [sp, #28]
 800c2e2:	4654      	mov	r4, sl
 800c2e4:	2000      	movs	r0, #0
 800c2e6:	f04f 0c0a 	mov.w	ip, #10
 800c2ea:	4621      	mov	r1, r4
 800c2ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2f0:	3b30      	subs	r3, #48	; 0x30
 800c2f2:	2b09      	cmp	r3, #9
 800c2f4:	d94e      	bls.n	800c394 <_vfiprintf_r+0x1c4>
 800c2f6:	b1b0      	cbz	r0, 800c326 <_vfiprintf_r+0x156>
 800c2f8:	9207      	str	r2, [sp, #28]
 800c2fa:	e014      	b.n	800c326 <_vfiprintf_r+0x156>
 800c2fc:	eba0 0308 	sub.w	r3, r0, r8
 800c300:	fa09 f303 	lsl.w	r3, r9, r3
 800c304:	4313      	orrs	r3, r2
 800c306:	9304      	str	r3, [sp, #16]
 800c308:	46a2      	mov	sl, r4
 800c30a:	e7d2      	b.n	800c2b2 <_vfiprintf_r+0xe2>
 800c30c:	9b03      	ldr	r3, [sp, #12]
 800c30e:	1d19      	adds	r1, r3, #4
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	9103      	str	r1, [sp, #12]
 800c314:	2b00      	cmp	r3, #0
 800c316:	bfbb      	ittet	lt
 800c318:	425b      	neglt	r3, r3
 800c31a:	f042 0202 	orrlt.w	r2, r2, #2
 800c31e:	9307      	strge	r3, [sp, #28]
 800c320:	9307      	strlt	r3, [sp, #28]
 800c322:	bfb8      	it	lt
 800c324:	9204      	strlt	r2, [sp, #16]
 800c326:	7823      	ldrb	r3, [r4, #0]
 800c328:	2b2e      	cmp	r3, #46	; 0x2e
 800c32a:	d10c      	bne.n	800c346 <_vfiprintf_r+0x176>
 800c32c:	7863      	ldrb	r3, [r4, #1]
 800c32e:	2b2a      	cmp	r3, #42	; 0x2a
 800c330:	d135      	bne.n	800c39e <_vfiprintf_r+0x1ce>
 800c332:	9b03      	ldr	r3, [sp, #12]
 800c334:	1d1a      	adds	r2, r3, #4
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	9203      	str	r2, [sp, #12]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	bfb8      	it	lt
 800c33e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c342:	3402      	adds	r4, #2
 800c344:	9305      	str	r3, [sp, #20]
 800c346:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c42c <_vfiprintf_r+0x25c>
 800c34a:	7821      	ldrb	r1, [r4, #0]
 800c34c:	2203      	movs	r2, #3
 800c34e:	4650      	mov	r0, sl
 800c350:	f7f3 ff66 	bl	8000220 <memchr>
 800c354:	b140      	cbz	r0, 800c368 <_vfiprintf_r+0x198>
 800c356:	2340      	movs	r3, #64	; 0x40
 800c358:	eba0 000a 	sub.w	r0, r0, sl
 800c35c:	fa03 f000 	lsl.w	r0, r3, r0
 800c360:	9b04      	ldr	r3, [sp, #16]
 800c362:	4303      	orrs	r3, r0
 800c364:	3401      	adds	r4, #1
 800c366:	9304      	str	r3, [sp, #16]
 800c368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c36c:	482c      	ldr	r0, [pc, #176]	; (800c420 <_vfiprintf_r+0x250>)
 800c36e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c372:	2206      	movs	r2, #6
 800c374:	f7f3 ff54 	bl	8000220 <memchr>
 800c378:	2800      	cmp	r0, #0
 800c37a:	d03f      	beq.n	800c3fc <_vfiprintf_r+0x22c>
 800c37c:	4b29      	ldr	r3, [pc, #164]	; (800c424 <_vfiprintf_r+0x254>)
 800c37e:	bb1b      	cbnz	r3, 800c3c8 <_vfiprintf_r+0x1f8>
 800c380:	9b03      	ldr	r3, [sp, #12]
 800c382:	3307      	adds	r3, #7
 800c384:	f023 0307 	bic.w	r3, r3, #7
 800c388:	3308      	adds	r3, #8
 800c38a:	9303      	str	r3, [sp, #12]
 800c38c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c38e:	443b      	add	r3, r7
 800c390:	9309      	str	r3, [sp, #36]	; 0x24
 800c392:	e767      	b.n	800c264 <_vfiprintf_r+0x94>
 800c394:	fb0c 3202 	mla	r2, ip, r2, r3
 800c398:	460c      	mov	r4, r1
 800c39a:	2001      	movs	r0, #1
 800c39c:	e7a5      	b.n	800c2ea <_vfiprintf_r+0x11a>
 800c39e:	2300      	movs	r3, #0
 800c3a0:	3401      	adds	r4, #1
 800c3a2:	9305      	str	r3, [sp, #20]
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	f04f 0c0a 	mov.w	ip, #10
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3b0:	3a30      	subs	r2, #48	; 0x30
 800c3b2:	2a09      	cmp	r2, #9
 800c3b4:	d903      	bls.n	800c3be <_vfiprintf_r+0x1ee>
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d0c5      	beq.n	800c346 <_vfiprintf_r+0x176>
 800c3ba:	9105      	str	r1, [sp, #20]
 800c3bc:	e7c3      	b.n	800c346 <_vfiprintf_r+0x176>
 800c3be:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3c2:	4604      	mov	r4, r0
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	e7f0      	b.n	800c3aa <_vfiprintf_r+0x1da>
 800c3c8:	ab03      	add	r3, sp, #12
 800c3ca:	9300      	str	r3, [sp, #0]
 800c3cc:	462a      	mov	r2, r5
 800c3ce:	4b16      	ldr	r3, [pc, #88]	; (800c428 <_vfiprintf_r+0x258>)
 800c3d0:	a904      	add	r1, sp, #16
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	f7fc fab8 	bl	8008948 <_printf_float>
 800c3d8:	4607      	mov	r7, r0
 800c3da:	1c78      	adds	r0, r7, #1
 800c3dc:	d1d6      	bne.n	800c38c <_vfiprintf_r+0x1bc>
 800c3de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3e0:	07d9      	lsls	r1, r3, #31
 800c3e2:	d405      	bmi.n	800c3f0 <_vfiprintf_r+0x220>
 800c3e4:	89ab      	ldrh	r3, [r5, #12]
 800c3e6:	059a      	lsls	r2, r3, #22
 800c3e8:	d402      	bmi.n	800c3f0 <_vfiprintf_r+0x220>
 800c3ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3ec:	f000 faa1 	bl	800c932 <__retarget_lock_release_recursive>
 800c3f0:	89ab      	ldrh	r3, [r5, #12]
 800c3f2:	065b      	lsls	r3, r3, #25
 800c3f4:	f53f af12 	bmi.w	800c21c <_vfiprintf_r+0x4c>
 800c3f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3fa:	e711      	b.n	800c220 <_vfiprintf_r+0x50>
 800c3fc:	ab03      	add	r3, sp, #12
 800c3fe:	9300      	str	r3, [sp, #0]
 800c400:	462a      	mov	r2, r5
 800c402:	4b09      	ldr	r3, [pc, #36]	; (800c428 <_vfiprintf_r+0x258>)
 800c404:	a904      	add	r1, sp, #16
 800c406:	4630      	mov	r0, r6
 800c408:	f7fc fd42 	bl	8008e90 <_printf_i>
 800c40c:	e7e4      	b.n	800c3d8 <_vfiprintf_r+0x208>
 800c40e:	bf00      	nop
 800c410:	0800d0b4 	.word	0x0800d0b4
 800c414:	0800d0d4 	.word	0x0800d0d4
 800c418:	0800d094 	.word	0x0800d094
 800c41c:	0800cf44 	.word	0x0800cf44
 800c420:	0800cf4e 	.word	0x0800cf4e
 800c424:	08008949 	.word	0x08008949
 800c428:	0800c1ad 	.word	0x0800c1ad
 800c42c:	0800cf4a 	.word	0x0800cf4a

0800c430 <__swbuf_r>:
 800c430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c432:	460e      	mov	r6, r1
 800c434:	4614      	mov	r4, r2
 800c436:	4605      	mov	r5, r0
 800c438:	b118      	cbz	r0, 800c442 <__swbuf_r+0x12>
 800c43a:	6983      	ldr	r3, [r0, #24]
 800c43c:	b90b      	cbnz	r3, 800c442 <__swbuf_r+0x12>
 800c43e:	f000 f9d9 	bl	800c7f4 <__sinit>
 800c442:	4b21      	ldr	r3, [pc, #132]	; (800c4c8 <__swbuf_r+0x98>)
 800c444:	429c      	cmp	r4, r3
 800c446:	d12b      	bne.n	800c4a0 <__swbuf_r+0x70>
 800c448:	686c      	ldr	r4, [r5, #4]
 800c44a:	69a3      	ldr	r3, [r4, #24]
 800c44c:	60a3      	str	r3, [r4, #8]
 800c44e:	89a3      	ldrh	r3, [r4, #12]
 800c450:	071a      	lsls	r2, r3, #28
 800c452:	d52f      	bpl.n	800c4b4 <__swbuf_r+0x84>
 800c454:	6923      	ldr	r3, [r4, #16]
 800c456:	b36b      	cbz	r3, 800c4b4 <__swbuf_r+0x84>
 800c458:	6923      	ldr	r3, [r4, #16]
 800c45a:	6820      	ldr	r0, [r4, #0]
 800c45c:	1ac0      	subs	r0, r0, r3
 800c45e:	6963      	ldr	r3, [r4, #20]
 800c460:	b2f6      	uxtb	r6, r6
 800c462:	4283      	cmp	r3, r0
 800c464:	4637      	mov	r7, r6
 800c466:	dc04      	bgt.n	800c472 <__swbuf_r+0x42>
 800c468:	4621      	mov	r1, r4
 800c46a:	4628      	mov	r0, r5
 800c46c:	f000 f92e 	bl	800c6cc <_fflush_r>
 800c470:	bb30      	cbnz	r0, 800c4c0 <__swbuf_r+0x90>
 800c472:	68a3      	ldr	r3, [r4, #8]
 800c474:	3b01      	subs	r3, #1
 800c476:	60a3      	str	r3, [r4, #8]
 800c478:	6823      	ldr	r3, [r4, #0]
 800c47a:	1c5a      	adds	r2, r3, #1
 800c47c:	6022      	str	r2, [r4, #0]
 800c47e:	701e      	strb	r6, [r3, #0]
 800c480:	6963      	ldr	r3, [r4, #20]
 800c482:	3001      	adds	r0, #1
 800c484:	4283      	cmp	r3, r0
 800c486:	d004      	beq.n	800c492 <__swbuf_r+0x62>
 800c488:	89a3      	ldrh	r3, [r4, #12]
 800c48a:	07db      	lsls	r3, r3, #31
 800c48c:	d506      	bpl.n	800c49c <__swbuf_r+0x6c>
 800c48e:	2e0a      	cmp	r6, #10
 800c490:	d104      	bne.n	800c49c <__swbuf_r+0x6c>
 800c492:	4621      	mov	r1, r4
 800c494:	4628      	mov	r0, r5
 800c496:	f000 f919 	bl	800c6cc <_fflush_r>
 800c49a:	b988      	cbnz	r0, 800c4c0 <__swbuf_r+0x90>
 800c49c:	4638      	mov	r0, r7
 800c49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4a0:	4b0a      	ldr	r3, [pc, #40]	; (800c4cc <__swbuf_r+0x9c>)
 800c4a2:	429c      	cmp	r4, r3
 800c4a4:	d101      	bne.n	800c4aa <__swbuf_r+0x7a>
 800c4a6:	68ac      	ldr	r4, [r5, #8]
 800c4a8:	e7cf      	b.n	800c44a <__swbuf_r+0x1a>
 800c4aa:	4b09      	ldr	r3, [pc, #36]	; (800c4d0 <__swbuf_r+0xa0>)
 800c4ac:	429c      	cmp	r4, r3
 800c4ae:	bf08      	it	eq
 800c4b0:	68ec      	ldreq	r4, [r5, #12]
 800c4b2:	e7ca      	b.n	800c44a <__swbuf_r+0x1a>
 800c4b4:	4621      	mov	r1, r4
 800c4b6:	4628      	mov	r0, r5
 800c4b8:	f000 f80c 	bl	800c4d4 <__swsetup_r>
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	d0cb      	beq.n	800c458 <__swbuf_r+0x28>
 800c4c0:	f04f 37ff 	mov.w	r7, #4294967295
 800c4c4:	e7ea      	b.n	800c49c <__swbuf_r+0x6c>
 800c4c6:	bf00      	nop
 800c4c8:	0800d0b4 	.word	0x0800d0b4
 800c4cc:	0800d0d4 	.word	0x0800d0d4
 800c4d0:	0800d094 	.word	0x0800d094

0800c4d4 <__swsetup_r>:
 800c4d4:	4b32      	ldr	r3, [pc, #200]	; (800c5a0 <__swsetup_r+0xcc>)
 800c4d6:	b570      	push	{r4, r5, r6, lr}
 800c4d8:	681d      	ldr	r5, [r3, #0]
 800c4da:	4606      	mov	r6, r0
 800c4dc:	460c      	mov	r4, r1
 800c4de:	b125      	cbz	r5, 800c4ea <__swsetup_r+0x16>
 800c4e0:	69ab      	ldr	r3, [r5, #24]
 800c4e2:	b913      	cbnz	r3, 800c4ea <__swsetup_r+0x16>
 800c4e4:	4628      	mov	r0, r5
 800c4e6:	f000 f985 	bl	800c7f4 <__sinit>
 800c4ea:	4b2e      	ldr	r3, [pc, #184]	; (800c5a4 <__swsetup_r+0xd0>)
 800c4ec:	429c      	cmp	r4, r3
 800c4ee:	d10f      	bne.n	800c510 <__swsetup_r+0x3c>
 800c4f0:	686c      	ldr	r4, [r5, #4]
 800c4f2:	89a3      	ldrh	r3, [r4, #12]
 800c4f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4f8:	0719      	lsls	r1, r3, #28
 800c4fa:	d42c      	bmi.n	800c556 <__swsetup_r+0x82>
 800c4fc:	06dd      	lsls	r5, r3, #27
 800c4fe:	d411      	bmi.n	800c524 <__swsetup_r+0x50>
 800c500:	2309      	movs	r3, #9
 800c502:	6033      	str	r3, [r6, #0]
 800c504:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c508:	81a3      	strh	r3, [r4, #12]
 800c50a:	f04f 30ff 	mov.w	r0, #4294967295
 800c50e:	e03e      	b.n	800c58e <__swsetup_r+0xba>
 800c510:	4b25      	ldr	r3, [pc, #148]	; (800c5a8 <__swsetup_r+0xd4>)
 800c512:	429c      	cmp	r4, r3
 800c514:	d101      	bne.n	800c51a <__swsetup_r+0x46>
 800c516:	68ac      	ldr	r4, [r5, #8]
 800c518:	e7eb      	b.n	800c4f2 <__swsetup_r+0x1e>
 800c51a:	4b24      	ldr	r3, [pc, #144]	; (800c5ac <__swsetup_r+0xd8>)
 800c51c:	429c      	cmp	r4, r3
 800c51e:	bf08      	it	eq
 800c520:	68ec      	ldreq	r4, [r5, #12]
 800c522:	e7e6      	b.n	800c4f2 <__swsetup_r+0x1e>
 800c524:	0758      	lsls	r0, r3, #29
 800c526:	d512      	bpl.n	800c54e <__swsetup_r+0x7a>
 800c528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c52a:	b141      	cbz	r1, 800c53e <__swsetup_r+0x6a>
 800c52c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c530:	4299      	cmp	r1, r3
 800c532:	d002      	beq.n	800c53a <__swsetup_r+0x66>
 800c534:	4630      	mov	r0, r6
 800c536:	f7ff fb25 	bl	800bb84 <_free_r>
 800c53a:	2300      	movs	r3, #0
 800c53c:	6363      	str	r3, [r4, #52]	; 0x34
 800c53e:	89a3      	ldrh	r3, [r4, #12]
 800c540:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c544:	81a3      	strh	r3, [r4, #12]
 800c546:	2300      	movs	r3, #0
 800c548:	6063      	str	r3, [r4, #4]
 800c54a:	6923      	ldr	r3, [r4, #16]
 800c54c:	6023      	str	r3, [r4, #0]
 800c54e:	89a3      	ldrh	r3, [r4, #12]
 800c550:	f043 0308 	orr.w	r3, r3, #8
 800c554:	81a3      	strh	r3, [r4, #12]
 800c556:	6923      	ldr	r3, [r4, #16]
 800c558:	b94b      	cbnz	r3, 800c56e <__swsetup_r+0x9a>
 800c55a:	89a3      	ldrh	r3, [r4, #12]
 800c55c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c564:	d003      	beq.n	800c56e <__swsetup_r+0x9a>
 800c566:	4621      	mov	r1, r4
 800c568:	4630      	mov	r0, r6
 800c56a:	f000 fa09 	bl	800c980 <__smakebuf_r>
 800c56e:	89a0      	ldrh	r0, [r4, #12]
 800c570:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c574:	f010 0301 	ands.w	r3, r0, #1
 800c578:	d00a      	beq.n	800c590 <__swsetup_r+0xbc>
 800c57a:	2300      	movs	r3, #0
 800c57c:	60a3      	str	r3, [r4, #8]
 800c57e:	6963      	ldr	r3, [r4, #20]
 800c580:	425b      	negs	r3, r3
 800c582:	61a3      	str	r3, [r4, #24]
 800c584:	6923      	ldr	r3, [r4, #16]
 800c586:	b943      	cbnz	r3, 800c59a <__swsetup_r+0xc6>
 800c588:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c58c:	d1ba      	bne.n	800c504 <__swsetup_r+0x30>
 800c58e:	bd70      	pop	{r4, r5, r6, pc}
 800c590:	0781      	lsls	r1, r0, #30
 800c592:	bf58      	it	pl
 800c594:	6963      	ldrpl	r3, [r4, #20]
 800c596:	60a3      	str	r3, [r4, #8]
 800c598:	e7f4      	b.n	800c584 <__swsetup_r+0xb0>
 800c59a:	2000      	movs	r0, #0
 800c59c:	e7f7      	b.n	800c58e <__swsetup_r+0xba>
 800c59e:	bf00      	nop
 800c5a0:	2000001c 	.word	0x2000001c
 800c5a4:	0800d0b4 	.word	0x0800d0b4
 800c5a8:	0800d0d4 	.word	0x0800d0d4
 800c5ac:	0800d094 	.word	0x0800d094

0800c5b0 <abort>:
 800c5b0:	b508      	push	{r3, lr}
 800c5b2:	2006      	movs	r0, #6
 800c5b4:	f000 fa54 	bl	800ca60 <raise>
 800c5b8:	2001      	movs	r0, #1
 800c5ba:	f7f6 f971 	bl	80028a0 <_exit>
	...

0800c5c0 <__sflush_r>:
 800c5c0:	898a      	ldrh	r2, [r1, #12]
 800c5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5c6:	4605      	mov	r5, r0
 800c5c8:	0710      	lsls	r0, r2, #28
 800c5ca:	460c      	mov	r4, r1
 800c5cc:	d458      	bmi.n	800c680 <__sflush_r+0xc0>
 800c5ce:	684b      	ldr	r3, [r1, #4]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	dc05      	bgt.n	800c5e0 <__sflush_r+0x20>
 800c5d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	dc02      	bgt.n	800c5e0 <__sflush_r+0x20>
 800c5da:	2000      	movs	r0, #0
 800c5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c5e2:	2e00      	cmp	r6, #0
 800c5e4:	d0f9      	beq.n	800c5da <__sflush_r+0x1a>
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c5ec:	682f      	ldr	r7, [r5, #0]
 800c5ee:	602b      	str	r3, [r5, #0]
 800c5f0:	d032      	beq.n	800c658 <__sflush_r+0x98>
 800c5f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c5f4:	89a3      	ldrh	r3, [r4, #12]
 800c5f6:	075a      	lsls	r2, r3, #29
 800c5f8:	d505      	bpl.n	800c606 <__sflush_r+0x46>
 800c5fa:	6863      	ldr	r3, [r4, #4]
 800c5fc:	1ac0      	subs	r0, r0, r3
 800c5fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c600:	b10b      	cbz	r3, 800c606 <__sflush_r+0x46>
 800c602:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c604:	1ac0      	subs	r0, r0, r3
 800c606:	2300      	movs	r3, #0
 800c608:	4602      	mov	r2, r0
 800c60a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c60c:	6a21      	ldr	r1, [r4, #32]
 800c60e:	4628      	mov	r0, r5
 800c610:	47b0      	blx	r6
 800c612:	1c43      	adds	r3, r0, #1
 800c614:	89a3      	ldrh	r3, [r4, #12]
 800c616:	d106      	bne.n	800c626 <__sflush_r+0x66>
 800c618:	6829      	ldr	r1, [r5, #0]
 800c61a:	291d      	cmp	r1, #29
 800c61c:	d82c      	bhi.n	800c678 <__sflush_r+0xb8>
 800c61e:	4a2a      	ldr	r2, [pc, #168]	; (800c6c8 <__sflush_r+0x108>)
 800c620:	40ca      	lsrs	r2, r1
 800c622:	07d6      	lsls	r6, r2, #31
 800c624:	d528      	bpl.n	800c678 <__sflush_r+0xb8>
 800c626:	2200      	movs	r2, #0
 800c628:	6062      	str	r2, [r4, #4]
 800c62a:	04d9      	lsls	r1, r3, #19
 800c62c:	6922      	ldr	r2, [r4, #16]
 800c62e:	6022      	str	r2, [r4, #0]
 800c630:	d504      	bpl.n	800c63c <__sflush_r+0x7c>
 800c632:	1c42      	adds	r2, r0, #1
 800c634:	d101      	bne.n	800c63a <__sflush_r+0x7a>
 800c636:	682b      	ldr	r3, [r5, #0]
 800c638:	b903      	cbnz	r3, 800c63c <__sflush_r+0x7c>
 800c63a:	6560      	str	r0, [r4, #84]	; 0x54
 800c63c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c63e:	602f      	str	r7, [r5, #0]
 800c640:	2900      	cmp	r1, #0
 800c642:	d0ca      	beq.n	800c5da <__sflush_r+0x1a>
 800c644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c648:	4299      	cmp	r1, r3
 800c64a:	d002      	beq.n	800c652 <__sflush_r+0x92>
 800c64c:	4628      	mov	r0, r5
 800c64e:	f7ff fa99 	bl	800bb84 <_free_r>
 800c652:	2000      	movs	r0, #0
 800c654:	6360      	str	r0, [r4, #52]	; 0x34
 800c656:	e7c1      	b.n	800c5dc <__sflush_r+0x1c>
 800c658:	6a21      	ldr	r1, [r4, #32]
 800c65a:	2301      	movs	r3, #1
 800c65c:	4628      	mov	r0, r5
 800c65e:	47b0      	blx	r6
 800c660:	1c41      	adds	r1, r0, #1
 800c662:	d1c7      	bne.n	800c5f4 <__sflush_r+0x34>
 800c664:	682b      	ldr	r3, [r5, #0]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d0c4      	beq.n	800c5f4 <__sflush_r+0x34>
 800c66a:	2b1d      	cmp	r3, #29
 800c66c:	d001      	beq.n	800c672 <__sflush_r+0xb2>
 800c66e:	2b16      	cmp	r3, #22
 800c670:	d101      	bne.n	800c676 <__sflush_r+0xb6>
 800c672:	602f      	str	r7, [r5, #0]
 800c674:	e7b1      	b.n	800c5da <__sflush_r+0x1a>
 800c676:	89a3      	ldrh	r3, [r4, #12]
 800c678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c67c:	81a3      	strh	r3, [r4, #12]
 800c67e:	e7ad      	b.n	800c5dc <__sflush_r+0x1c>
 800c680:	690f      	ldr	r7, [r1, #16]
 800c682:	2f00      	cmp	r7, #0
 800c684:	d0a9      	beq.n	800c5da <__sflush_r+0x1a>
 800c686:	0793      	lsls	r3, r2, #30
 800c688:	680e      	ldr	r6, [r1, #0]
 800c68a:	bf08      	it	eq
 800c68c:	694b      	ldreq	r3, [r1, #20]
 800c68e:	600f      	str	r7, [r1, #0]
 800c690:	bf18      	it	ne
 800c692:	2300      	movne	r3, #0
 800c694:	eba6 0807 	sub.w	r8, r6, r7
 800c698:	608b      	str	r3, [r1, #8]
 800c69a:	f1b8 0f00 	cmp.w	r8, #0
 800c69e:	dd9c      	ble.n	800c5da <__sflush_r+0x1a>
 800c6a0:	6a21      	ldr	r1, [r4, #32]
 800c6a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c6a4:	4643      	mov	r3, r8
 800c6a6:	463a      	mov	r2, r7
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	47b0      	blx	r6
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	dc06      	bgt.n	800c6be <__sflush_r+0xfe>
 800c6b0:	89a3      	ldrh	r3, [r4, #12]
 800c6b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6b6:	81a3      	strh	r3, [r4, #12]
 800c6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6bc:	e78e      	b.n	800c5dc <__sflush_r+0x1c>
 800c6be:	4407      	add	r7, r0
 800c6c0:	eba8 0800 	sub.w	r8, r8, r0
 800c6c4:	e7e9      	b.n	800c69a <__sflush_r+0xda>
 800c6c6:	bf00      	nop
 800c6c8:	20400001 	.word	0x20400001

0800c6cc <_fflush_r>:
 800c6cc:	b538      	push	{r3, r4, r5, lr}
 800c6ce:	690b      	ldr	r3, [r1, #16]
 800c6d0:	4605      	mov	r5, r0
 800c6d2:	460c      	mov	r4, r1
 800c6d4:	b913      	cbnz	r3, 800c6dc <_fflush_r+0x10>
 800c6d6:	2500      	movs	r5, #0
 800c6d8:	4628      	mov	r0, r5
 800c6da:	bd38      	pop	{r3, r4, r5, pc}
 800c6dc:	b118      	cbz	r0, 800c6e6 <_fflush_r+0x1a>
 800c6de:	6983      	ldr	r3, [r0, #24]
 800c6e0:	b90b      	cbnz	r3, 800c6e6 <_fflush_r+0x1a>
 800c6e2:	f000 f887 	bl	800c7f4 <__sinit>
 800c6e6:	4b14      	ldr	r3, [pc, #80]	; (800c738 <_fflush_r+0x6c>)
 800c6e8:	429c      	cmp	r4, r3
 800c6ea:	d11b      	bne.n	800c724 <_fflush_r+0x58>
 800c6ec:	686c      	ldr	r4, [r5, #4]
 800c6ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d0ef      	beq.n	800c6d6 <_fflush_r+0xa>
 800c6f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c6f8:	07d0      	lsls	r0, r2, #31
 800c6fa:	d404      	bmi.n	800c706 <_fflush_r+0x3a>
 800c6fc:	0599      	lsls	r1, r3, #22
 800c6fe:	d402      	bmi.n	800c706 <_fflush_r+0x3a>
 800c700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c702:	f000 f915 	bl	800c930 <__retarget_lock_acquire_recursive>
 800c706:	4628      	mov	r0, r5
 800c708:	4621      	mov	r1, r4
 800c70a:	f7ff ff59 	bl	800c5c0 <__sflush_r>
 800c70e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c710:	07da      	lsls	r2, r3, #31
 800c712:	4605      	mov	r5, r0
 800c714:	d4e0      	bmi.n	800c6d8 <_fflush_r+0xc>
 800c716:	89a3      	ldrh	r3, [r4, #12]
 800c718:	059b      	lsls	r3, r3, #22
 800c71a:	d4dd      	bmi.n	800c6d8 <_fflush_r+0xc>
 800c71c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c71e:	f000 f908 	bl	800c932 <__retarget_lock_release_recursive>
 800c722:	e7d9      	b.n	800c6d8 <_fflush_r+0xc>
 800c724:	4b05      	ldr	r3, [pc, #20]	; (800c73c <_fflush_r+0x70>)
 800c726:	429c      	cmp	r4, r3
 800c728:	d101      	bne.n	800c72e <_fflush_r+0x62>
 800c72a:	68ac      	ldr	r4, [r5, #8]
 800c72c:	e7df      	b.n	800c6ee <_fflush_r+0x22>
 800c72e:	4b04      	ldr	r3, [pc, #16]	; (800c740 <_fflush_r+0x74>)
 800c730:	429c      	cmp	r4, r3
 800c732:	bf08      	it	eq
 800c734:	68ec      	ldreq	r4, [r5, #12]
 800c736:	e7da      	b.n	800c6ee <_fflush_r+0x22>
 800c738:	0800d0b4 	.word	0x0800d0b4
 800c73c:	0800d0d4 	.word	0x0800d0d4
 800c740:	0800d094 	.word	0x0800d094

0800c744 <std>:
 800c744:	2300      	movs	r3, #0
 800c746:	b510      	push	{r4, lr}
 800c748:	4604      	mov	r4, r0
 800c74a:	e9c0 3300 	strd	r3, r3, [r0]
 800c74e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c752:	6083      	str	r3, [r0, #8]
 800c754:	8181      	strh	r1, [r0, #12]
 800c756:	6643      	str	r3, [r0, #100]	; 0x64
 800c758:	81c2      	strh	r2, [r0, #14]
 800c75a:	6183      	str	r3, [r0, #24]
 800c75c:	4619      	mov	r1, r3
 800c75e:	2208      	movs	r2, #8
 800c760:	305c      	adds	r0, #92	; 0x5c
 800c762:	f7fc f849 	bl	80087f8 <memset>
 800c766:	4b05      	ldr	r3, [pc, #20]	; (800c77c <std+0x38>)
 800c768:	6263      	str	r3, [r4, #36]	; 0x24
 800c76a:	4b05      	ldr	r3, [pc, #20]	; (800c780 <std+0x3c>)
 800c76c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c76e:	4b05      	ldr	r3, [pc, #20]	; (800c784 <std+0x40>)
 800c770:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c772:	4b05      	ldr	r3, [pc, #20]	; (800c788 <std+0x44>)
 800c774:	6224      	str	r4, [r4, #32]
 800c776:	6323      	str	r3, [r4, #48]	; 0x30
 800c778:	bd10      	pop	{r4, pc}
 800c77a:	bf00      	nop
 800c77c:	0800ca99 	.word	0x0800ca99
 800c780:	0800cabb 	.word	0x0800cabb
 800c784:	0800caf3 	.word	0x0800caf3
 800c788:	0800cb17 	.word	0x0800cb17

0800c78c <_cleanup_r>:
 800c78c:	4901      	ldr	r1, [pc, #4]	; (800c794 <_cleanup_r+0x8>)
 800c78e:	f000 b8af 	b.w	800c8f0 <_fwalk_reent>
 800c792:	bf00      	nop
 800c794:	0800c6cd 	.word	0x0800c6cd

0800c798 <__sfmoreglue>:
 800c798:	b570      	push	{r4, r5, r6, lr}
 800c79a:	2268      	movs	r2, #104	; 0x68
 800c79c:	1e4d      	subs	r5, r1, #1
 800c79e:	4355      	muls	r5, r2
 800c7a0:	460e      	mov	r6, r1
 800c7a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c7a6:	f7ff fa59 	bl	800bc5c <_malloc_r>
 800c7aa:	4604      	mov	r4, r0
 800c7ac:	b140      	cbz	r0, 800c7c0 <__sfmoreglue+0x28>
 800c7ae:	2100      	movs	r1, #0
 800c7b0:	e9c0 1600 	strd	r1, r6, [r0]
 800c7b4:	300c      	adds	r0, #12
 800c7b6:	60a0      	str	r0, [r4, #8]
 800c7b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c7bc:	f7fc f81c 	bl	80087f8 <memset>
 800c7c0:	4620      	mov	r0, r4
 800c7c2:	bd70      	pop	{r4, r5, r6, pc}

0800c7c4 <__sfp_lock_acquire>:
 800c7c4:	4801      	ldr	r0, [pc, #4]	; (800c7cc <__sfp_lock_acquire+0x8>)
 800c7c6:	f000 b8b3 	b.w	800c930 <__retarget_lock_acquire_recursive>
 800c7ca:	bf00      	nop
 800c7cc:	20000b75 	.word	0x20000b75

0800c7d0 <__sfp_lock_release>:
 800c7d0:	4801      	ldr	r0, [pc, #4]	; (800c7d8 <__sfp_lock_release+0x8>)
 800c7d2:	f000 b8ae 	b.w	800c932 <__retarget_lock_release_recursive>
 800c7d6:	bf00      	nop
 800c7d8:	20000b75 	.word	0x20000b75

0800c7dc <__sinit_lock_acquire>:
 800c7dc:	4801      	ldr	r0, [pc, #4]	; (800c7e4 <__sinit_lock_acquire+0x8>)
 800c7de:	f000 b8a7 	b.w	800c930 <__retarget_lock_acquire_recursive>
 800c7e2:	bf00      	nop
 800c7e4:	20000b76 	.word	0x20000b76

0800c7e8 <__sinit_lock_release>:
 800c7e8:	4801      	ldr	r0, [pc, #4]	; (800c7f0 <__sinit_lock_release+0x8>)
 800c7ea:	f000 b8a2 	b.w	800c932 <__retarget_lock_release_recursive>
 800c7ee:	bf00      	nop
 800c7f0:	20000b76 	.word	0x20000b76

0800c7f4 <__sinit>:
 800c7f4:	b510      	push	{r4, lr}
 800c7f6:	4604      	mov	r4, r0
 800c7f8:	f7ff fff0 	bl	800c7dc <__sinit_lock_acquire>
 800c7fc:	69a3      	ldr	r3, [r4, #24]
 800c7fe:	b11b      	cbz	r3, 800c808 <__sinit+0x14>
 800c800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c804:	f7ff bff0 	b.w	800c7e8 <__sinit_lock_release>
 800c808:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c80c:	6523      	str	r3, [r4, #80]	; 0x50
 800c80e:	4b13      	ldr	r3, [pc, #76]	; (800c85c <__sinit+0x68>)
 800c810:	4a13      	ldr	r2, [pc, #76]	; (800c860 <__sinit+0x6c>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	62a2      	str	r2, [r4, #40]	; 0x28
 800c816:	42a3      	cmp	r3, r4
 800c818:	bf04      	itt	eq
 800c81a:	2301      	moveq	r3, #1
 800c81c:	61a3      	streq	r3, [r4, #24]
 800c81e:	4620      	mov	r0, r4
 800c820:	f000 f820 	bl	800c864 <__sfp>
 800c824:	6060      	str	r0, [r4, #4]
 800c826:	4620      	mov	r0, r4
 800c828:	f000 f81c 	bl	800c864 <__sfp>
 800c82c:	60a0      	str	r0, [r4, #8]
 800c82e:	4620      	mov	r0, r4
 800c830:	f000 f818 	bl	800c864 <__sfp>
 800c834:	2200      	movs	r2, #0
 800c836:	60e0      	str	r0, [r4, #12]
 800c838:	2104      	movs	r1, #4
 800c83a:	6860      	ldr	r0, [r4, #4]
 800c83c:	f7ff ff82 	bl	800c744 <std>
 800c840:	68a0      	ldr	r0, [r4, #8]
 800c842:	2201      	movs	r2, #1
 800c844:	2109      	movs	r1, #9
 800c846:	f7ff ff7d 	bl	800c744 <std>
 800c84a:	68e0      	ldr	r0, [r4, #12]
 800c84c:	2202      	movs	r2, #2
 800c84e:	2112      	movs	r1, #18
 800c850:	f7ff ff78 	bl	800c744 <std>
 800c854:	2301      	movs	r3, #1
 800c856:	61a3      	str	r3, [r4, #24]
 800c858:	e7d2      	b.n	800c800 <__sinit+0xc>
 800c85a:	bf00      	nop
 800c85c:	0800cc54 	.word	0x0800cc54
 800c860:	0800c78d 	.word	0x0800c78d

0800c864 <__sfp>:
 800c864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c866:	4607      	mov	r7, r0
 800c868:	f7ff ffac 	bl	800c7c4 <__sfp_lock_acquire>
 800c86c:	4b1e      	ldr	r3, [pc, #120]	; (800c8e8 <__sfp+0x84>)
 800c86e:	681e      	ldr	r6, [r3, #0]
 800c870:	69b3      	ldr	r3, [r6, #24]
 800c872:	b913      	cbnz	r3, 800c87a <__sfp+0x16>
 800c874:	4630      	mov	r0, r6
 800c876:	f7ff ffbd 	bl	800c7f4 <__sinit>
 800c87a:	3648      	adds	r6, #72	; 0x48
 800c87c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c880:	3b01      	subs	r3, #1
 800c882:	d503      	bpl.n	800c88c <__sfp+0x28>
 800c884:	6833      	ldr	r3, [r6, #0]
 800c886:	b30b      	cbz	r3, 800c8cc <__sfp+0x68>
 800c888:	6836      	ldr	r6, [r6, #0]
 800c88a:	e7f7      	b.n	800c87c <__sfp+0x18>
 800c88c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c890:	b9d5      	cbnz	r5, 800c8c8 <__sfp+0x64>
 800c892:	4b16      	ldr	r3, [pc, #88]	; (800c8ec <__sfp+0x88>)
 800c894:	60e3      	str	r3, [r4, #12]
 800c896:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c89a:	6665      	str	r5, [r4, #100]	; 0x64
 800c89c:	f000 f847 	bl	800c92e <__retarget_lock_init_recursive>
 800c8a0:	f7ff ff96 	bl	800c7d0 <__sfp_lock_release>
 800c8a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c8a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c8ac:	6025      	str	r5, [r4, #0]
 800c8ae:	61a5      	str	r5, [r4, #24]
 800c8b0:	2208      	movs	r2, #8
 800c8b2:	4629      	mov	r1, r5
 800c8b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c8b8:	f7fb ff9e 	bl	80087f8 <memset>
 800c8bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c8c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8c8:	3468      	adds	r4, #104	; 0x68
 800c8ca:	e7d9      	b.n	800c880 <__sfp+0x1c>
 800c8cc:	2104      	movs	r1, #4
 800c8ce:	4638      	mov	r0, r7
 800c8d0:	f7ff ff62 	bl	800c798 <__sfmoreglue>
 800c8d4:	4604      	mov	r4, r0
 800c8d6:	6030      	str	r0, [r6, #0]
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	d1d5      	bne.n	800c888 <__sfp+0x24>
 800c8dc:	f7ff ff78 	bl	800c7d0 <__sfp_lock_release>
 800c8e0:	230c      	movs	r3, #12
 800c8e2:	603b      	str	r3, [r7, #0]
 800c8e4:	e7ee      	b.n	800c8c4 <__sfp+0x60>
 800c8e6:	bf00      	nop
 800c8e8:	0800cc54 	.word	0x0800cc54
 800c8ec:	ffff0001 	.word	0xffff0001

0800c8f0 <_fwalk_reent>:
 800c8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8f4:	4606      	mov	r6, r0
 800c8f6:	4688      	mov	r8, r1
 800c8f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c8fc:	2700      	movs	r7, #0
 800c8fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c902:	f1b9 0901 	subs.w	r9, r9, #1
 800c906:	d505      	bpl.n	800c914 <_fwalk_reent+0x24>
 800c908:	6824      	ldr	r4, [r4, #0]
 800c90a:	2c00      	cmp	r4, #0
 800c90c:	d1f7      	bne.n	800c8fe <_fwalk_reent+0xe>
 800c90e:	4638      	mov	r0, r7
 800c910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c914:	89ab      	ldrh	r3, [r5, #12]
 800c916:	2b01      	cmp	r3, #1
 800c918:	d907      	bls.n	800c92a <_fwalk_reent+0x3a>
 800c91a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c91e:	3301      	adds	r3, #1
 800c920:	d003      	beq.n	800c92a <_fwalk_reent+0x3a>
 800c922:	4629      	mov	r1, r5
 800c924:	4630      	mov	r0, r6
 800c926:	47c0      	blx	r8
 800c928:	4307      	orrs	r7, r0
 800c92a:	3568      	adds	r5, #104	; 0x68
 800c92c:	e7e9      	b.n	800c902 <_fwalk_reent+0x12>

0800c92e <__retarget_lock_init_recursive>:
 800c92e:	4770      	bx	lr

0800c930 <__retarget_lock_acquire_recursive>:
 800c930:	4770      	bx	lr

0800c932 <__retarget_lock_release_recursive>:
 800c932:	4770      	bx	lr

0800c934 <__swhatbuf_r>:
 800c934:	b570      	push	{r4, r5, r6, lr}
 800c936:	460e      	mov	r6, r1
 800c938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c93c:	2900      	cmp	r1, #0
 800c93e:	b096      	sub	sp, #88	; 0x58
 800c940:	4614      	mov	r4, r2
 800c942:	461d      	mov	r5, r3
 800c944:	da08      	bge.n	800c958 <__swhatbuf_r+0x24>
 800c946:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c94a:	2200      	movs	r2, #0
 800c94c:	602a      	str	r2, [r5, #0]
 800c94e:	061a      	lsls	r2, r3, #24
 800c950:	d410      	bmi.n	800c974 <__swhatbuf_r+0x40>
 800c952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c956:	e00e      	b.n	800c976 <__swhatbuf_r+0x42>
 800c958:	466a      	mov	r2, sp
 800c95a:	f000 f903 	bl	800cb64 <_fstat_r>
 800c95e:	2800      	cmp	r0, #0
 800c960:	dbf1      	blt.n	800c946 <__swhatbuf_r+0x12>
 800c962:	9a01      	ldr	r2, [sp, #4]
 800c964:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c968:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c96c:	425a      	negs	r2, r3
 800c96e:	415a      	adcs	r2, r3
 800c970:	602a      	str	r2, [r5, #0]
 800c972:	e7ee      	b.n	800c952 <__swhatbuf_r+0x1e>
 800c974:	2340      	movs	r3, #64	; 0x40
 800c976:	2000      	movs	r0, #0
 800c978:	6023      	str	r3, [r4, #0]
 800c97a:	b016      	add	sp, #88	; 0x58
 800c97c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c980 <__smakebuf_r>:
 800c980:	898b      	ldrh	r3, [r1, #12]
 800c982:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c984:	079d      	lsls	r5, r3, #30
 800c986:	4606      	mov	r6, r0
 800c988:	460c      	mov	r4, r1
 800c98a:	d507      	bpl.n	800c99c <__smakebuf_r+0x1c>
 800c98c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c990:	6023      	str	r3, [r4, #0]
 800c992:	6123      	str	r3, [r4, #16]
 800c994:	2301      	movs	r3, #1
 800c996:	6163      	str	r3, [r4, #20]
 800c998:	b002      	add	sp, #8
 800c99a:	bd70      	pop	{r4, r5, r6, pc}
 800c99c:	ab01      	add	r3, sp, #4
 800c99e:	466a      	mov	r2, sp
 800c9a0:	f7ff ffc8 	bl	800c934 <__swhatbuf_r>
 800c9a4:	9900      	ldr	r1, [sp, #0]
 800c9a6:	4605      	mov	r5, r0
 800c9a8:	4630      	mov	r0, r6
 800c9aa:	f7ff f957 	bl	800bc5c <_malloc_r>
 800c9ae:	b948      	cbnz	r0, 800c9c4 <__smakebuf_r+0x44>
 800c9b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9b4:	059a      	lsls	r2, r3, #22
 800c9b6:	d4ef      	bmi.n	800c998 <__smakebuf_r+0x18>
 800c9b8:	f023 0303 	bic.w	r3, r3, #3
 800c9bc:	f043 0302 	orr.w	r3, r3, #2
 800c9c0:	81a3      	strh	r3, [r4, #12]
 800c9c2:	e7e3      	b.n	800c98c <__smakebuf_r+0xc>
 800c9c4:	4b0d      	ldr	r3, [pc, #52]	; (800c9fc <__smakebuf_r+0x7c>)
 800c9c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c9c8:	89a3      	ldrh	r3, [r4, #12]
 800c9ca:	6020      	str	r0, [r4, #0]
 800c9cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9d0:	81a3      	strh	r3, [r4, #12]
 800c9d2:	9b00      	ldr	r3, [sp, #0]
 800c9d4:	6163      	str	r3, [r4, #20]
 800c9d6:	9b01      	ldr	r3, [sp, #4]
 800c9d8:	6120      	str	r0, [r4, #16]
 800c9da:	b15b      	cbz	r3, 800c9f4 <__smakebuf_r+0x74>
 800c9dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9e0:	4630      	mov	r0, r6
 800c9e2:	f000 f8d1 	bl	800cb88 <_isatty_r>
 800c9e6:	b128      	cbz	r0, 800c9f4 <__smakebuf_r+0x74>
 800c9e8:	89a3      	ldrh	r3, [r4, #12]
 800c9ea:	f023 0303 	bic.w	r3, r3, #3
 800c9ee:	f043 0301 	orr.w	r3, r3, #1
 800c9f2:	81a3      	strh	r3, [r4, #12]
 800c9f4:	89a0      	ldrh	r0, [r4, #12]
 800c9f6:	4305      	orrs	r5, r0
 800c9f8:	81a5      	strh	r5, [r4, #12]
 800c9fa:	e7cd      	b.n	800c998 <__smakebuf_r+0x18>
 800c9fc:	0800c78d 	.word	0x0800c78d

0800ca00 <_malloc_usable_size_r>:
 800ca00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca04:	1f18      	subs	r0, r3, #4
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	bfbc      	itt	lt
 800ca0a:	580b      	ldrlt	r3, [r1, r0]
 800ca0c:	18c0      	addlt	r0, r0, r3
 800ca0e:	4770      	bx	lr

0800ca10 <_raise_r>:
 800ca10:	291f      	cmp	r1, #31
 800ca12:	b538      	push	{r3, r4, r5, lr}
 800ca14:	4604      	mov	r4, r0
 800ca16:	460d      	mov	r5, r1
 800ca18:	d904      	bls.n	800ca24 <_raise_r+0x14>
 800ca1a:	2316      	movs	r3, #22
 800ca1c:	6003      	str	r3, [r0, #0]
 800ca1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca22:	bd38      	pop	{r3, r4, r5, pc}
 800ca24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ca26:	b112      	cbz	r2, 800ca2e <_raise_r+0x1e>
 800ca28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca2c:	b94b      	cbnz	r3, 800ca42 <_raise_r+0x32>
 800ca2e:	4620      	mov	r0, r4
 800ca30:	f000 f830 	bl	800ca94 <_getpid_r>
 800ca34:	462a      	mov	r2, r5
 800ca36:	4601      	mov	r1, r0
 800ca38:	4620      	mov	r0, r4
 800ca3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca3e:	f000 b817 	b.w	800ca70 <_kill_r>
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	d00a      	beq.n	800ca5c <_raise_r+0x4c>
 800ca46:	1c59      	adds	r1, r3, #1
 800ca48:	d103      	bne.n	800ca52 <_raise_r+0x42>
 800ca4a:	2316      	movs	r3, #22
 800ca4c:	6003      	str	r3, [r0, #0]
 800ca4e:	2001      	movs	r0, #1
 800ca50:	e7e7      	b.n	800ca22 <_raise_r+0x12>
 800ca52:	2400      	movs	r4, #0
 800ca54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ca58:	4628      	mov	r0, r5
 800ca5a:	4798      	blx	r3
 800ca5c:	2000      	movs	r0, #0
 800ca5e:	e7e0      	b.n	800ca22 <_raise_r+0x12>

0800ca60 <raise>:
 800ca60:	4b02      	ldr	r3, [pc, #8]	; (800ca6c <raise+0xc>)
 800ca62:	4601      	mov	r1, r0
 800ca64:	6818      	ldr	r0, [r3, #0]
 800ca66:	f7ff bfd3 	b.w	800ca10 <_raise_r>
 800ca6a:	bf00      	nop
 800ca6c:	2000001c 	.word	0x2000001c

0800ca70 <_kill_r>:
 800ca70:	b538      	push	{r3, r4, r5, lr}
 800ca72:	4d07      	ldr	r5, [pc, #28]	; (800ca90 <_kill_r+0x20>)
 800ca74:	2300      	movs	r3, #0
 800ca76:	4604      	mov	r4, r0
 800ca78:	4608      	mov	r0, r1
 800ca7a:	4611      	mov	r1, r2
 800ca7c:	602b      	str	r3, [r5, #0]
 800ca7e:	f7f5 feff 	bl	8002880 <_kill>
 800ca82:	1c43      	adds	r3, r0, #1
 800ca84:	d102      	bne.n	800ca8c <_kill_r+0x1c>
 800ca86:	682b      	ldr	r3, [r5, #0]
 800ca88:	b103      	cbz	r3, 800ca8c <_kill_r+0x1c>
 800ca8a:	6023      	str	r3, [r4, #0]
 800ca8c:	bd38      	pop	{r3, r4, r5, pc}
 800ca8e:	bf00      	nop
 800ca90:	20000b70 	.word	0x20000b70

0800ca94 <_getpid_r>:
 800ca94:	f7f5 beec 	b.w	8002870 <_getpid>

0800ca98 <__sread>:
 800ca98:	b510      	push	{r4, lr}
 800ca9a:	460c      	mov	r4, r1
 800ca9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caa0:	f000 f894 	bl	800cbcc <_read_r>
 800caa4:	2800      	cmp	r0, #0
 800caa6:	bfab      	itete	ge
 800caa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800caaa:	89a3      	ldrhlt	r3, [r4, #12]
 800caac:	181b      	addge	r3, r3, r0
 800caae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cab2:	bfac      	ite	ge
 800cab4:	6563      	strge	r3, [r4, #84]	; 0x54
 800cab6:	81a3      	strhlt	r3, [r4, #12]
 800cab8:	bd10      	pop	{r4, pc}

0800caba <__swrite>:
 800caba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cabe:	461f      	mov	r7, r3
 800cac0:	898b      	ldrh	r3, [r1, #12]
 800cac2:	05db      	lsls	r3, r3, #23
 800cac4:	4605      	mov	r5, r0
 800cac6:	460c      	mov	r4, r1
 800cac8:	4616      	mov	r6, r2
 800caca:	d505      	bpl.n	800cad8 <__swrite+0x1e>
 800cacc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cad0:	2302      	movs	r3, #2
 800cad2:	2200      	movs	r2, #0
 800cad4:	f000 f868 	bl	800cba8 <_lseek_r>
 800cad8:	89a3      	ldrh	r3, [r4, #12]
 800cada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cae2:	81a3      	strh	r3, [r4, #12]
 800cae4:	4632      	mov	r2, r6
 800cae6:	463b      	mov	r3, r7
 800cae8:	4628      	mov	r0, r5
 800caea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800caee:	f000 b817 	b.w	800cb20 <_write_r>

0800caf2 <__sseek>:
 800caf2:	b510      	push	{r4, lr}
 800caf4:	460c      	mov	r4, r1
 800caf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cafa:	f000 f855 	bl	800cba8 <_lseek_r>
 800cafe:	1c43      	adds	r3, r0, #1
 800cb00:	89a3      	ldrh	r3, [r4, #12]
 800cb02:	bf15      	itete	ne
 800cb04:	6560      	strne	r0, [r4, #84]	; 0x54
 800cb06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cb0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cb0e:	81a3      	strheq	r3, [r4, #12]
 800cb10:	bf18      	it	ne
 800cb12:	81a3      	strhne	r3, [r4, #12]
 800cb14:	bd10      	pop	{r4, pc}

0800cb16 <__sclose>:
 800cb16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb1a:	f000 b813 	b.w	800cb44 <_close_r>
	...

0800cb20 <_write_r>:
 800cb20:	b538      	push	{r3, r4, r5, lr}
 800cb22:	4d07      	ldr	r5, [pc, #28]	; (800cb40 <_write_r+0x20>)
 800cb24:	4604      	mov	r4, r0
 800cb26:	4608      	mov	r0, r1
 800cb28:	4611      	mov	r1, r2
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	602a      	str	r2, [r5, #0]
 800cb2e:	461a      	mov	r2, r3
 800cb30:	f7f5 fedd 	bl	80028ee <_write>
 800cb34:	1c43      	adds	r3, r0, #1
 800cb36:	d102      	bne.n	800cb3e <_write_r+0x1e>
 800cb38:	682b      	ldr	r3, [r5, #0]
 800cb3a:	b103      	cbz	r3, 800cb3e <_write_r+0x1e>
 800cb3c:	6023      	str	r3, [r4, #0]
 800cb3e:	bd38      	pop	{r3, r4, r5, pc}
 800cb40:	20000b70 	.word	0x20000b70

0800cb44 <_close_r>:
 800cb44:	b538      	push	{r3, r4, r5, lr}
 800cb46:	4d06      	ldr	r5, [pc, #24]	; (800cb60 <_close_r+0x1c>)
 800cb48:	2300      	movs	r3, #0
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	4608      	mov	r0, r1
 800cb4e:	602b      	str	r3, [r5, #0]
 800cb50:	f7f5 fee9 	bl	8002926 <_close>
 800cb54:	1c43      	adds	r3, r0, #1
 800cb56:	d102      	bne.n	800cb5e <_close_r+0x1a>
 800cb58:	682b      	ldr	r3, [r5, #0]
 800cb5a:	b103      	cbz	r3, 800cb5e <_close_r+0x1a>
 800cb5c:	6023      	str	r3, [r4, #0]
 800cb5e:	bd38      	pop	{r3, r4, r5, pc}
 800cb60:	20000b70 	.word	0x20000b70

0800cb64 <_fstat_r>:
 800cb64:	b538      	push	{r3, r4, r5, lr}
 800cb66:	4d07      	ldr	r5, [pc, #28]	; (800cb84 <_fstat_r+0x20>)
 800cb68:	2300      	movs	r3, #0
 800cb6a:	4604      	mov	r4, r0
 800cb6c:	4608      	mov	r0, r1
 800cb6e:	4611      	mov	r1, r2
 800cb70:	602b      	str	r3, [r5, #0]
 800cb72:	f7f5 fee4 	bl	800293e <_fstat>
 800cb76:	1c43      	adds	r3, r0, #1
 800cb78:	d102      	bne.n	800cb80 <_fstat_r+0x1c>
 800cb7a:	682b      	ldr	r3, [r5, #0]
 800cb7c:	b103      	cbz	r3, 800cb80 <_fstat_r+0x1c>
 800cb7e:	6023      	str	r3, [r4, #0]
 800cb80:	bd38      	pop	{r3, r4, r5, pc}
 800cb82:	bf00      	nop
 800cb84:	20000b70 	.word	0x20000b70

0800cb88 <_isatty_r>:
 800cb88:	b538      	push	{r3, r4, r5, lr}
 800cb8a:	4d06      	ldr	r5, [pc, #24]	; (800cba4 <_isatty_r+0x1c>)
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	4604      	mov	r4, r0
 800cb90:	4608      	mov	r0, r1
 800cb92:	602b      	str	r3, [r5, #0]
 800cb94:	f7f5 fee3 	bl	800295e <_isatty>
 800cb98:	1c43      	adds	r3, r0, #1
 800cb9a:	d102      	bne.n	800cba2 <_isatty_r+0x1a>
 800cb9c:	682b      	ldr	r3, [r5, #0]
 800cb9e:	b103      	cbz	r3, 800cba2 <_isatty_r+0x1a>
 800cba0:	6023      	str	r3, [r4, #0]
 800cba2:	bd38      	pop	{r3, r4, r5, pc}
 800cba4:	20000b70 	.word	0x20000b70

0800cba8 <_lseek_r>:
 800cba8:	b538      	push	{r3, r4, r5, lr}
 800cbaa:	4d07      	ldr	r5, [pc, #28]	; (800cbc8 <_lseek_r+0x20>)
 800cbac:	4604      	mov	r4, r0
 800cbae:	4608      	mov	r0, r1
 800cbb0:	4611      	mov	r1, r2
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	602a      	str	r2, [r5, #0]
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	f7f5 fedc 	bl	8002974 <_lseek>
 800cbbc:	1c43      	adds	r3, r0, #1
 800cbbe:	d102      	bne.n	800cbc6 <_lseek_r+0x1e>
 800cbc0:	682b      	ldr	r3, [r5, #0]
 800cbc2:	b103      	cbz	r3, 800cbc6 <_lseek_r+0x1e>
 800cbc4:	6023      	str	r3, [r4, #0]
 800cbc6:	bd38      	pop	{r3, r4, r5, pc}
 800cbc8:	20000b70 	.word	0x20000b70

0800cbcc <_read_r>:
 800cbcc:	b538      	push	{r3, r4, r5, lr}
 800cbce:	4d07      	ldr	r5, [pc, #28]	; (800cbec <_read_r+0x20>)
 800cbd0:	4604      	mov	r4, r0
 800cbd2:	4608      	mov	r0, r1
 800cbd4:	4611      	mov	r1, r2
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	602a      	str	r2, [r5, #0]
 800cbda:	461a      	mov	r2, r3
 800cbdc:	f7f5 fe6a 	bl	80028b4 <_read>
 800cbe0:	1c43      	adds	r3, r0, #1
 800cbe2:	d102      	bne.n	800cbea <_read_r+0x1e>
 800cbe4:	682b      	ldr	r3, [r5, #0]
 800cbe6:	b103      	cbz	r3, 800cbea <_read_r+0x1e>
 800cbe8:	6023      	str	r3, [r4, #0]
 800cbea:	bd38      	pop	{r3, r4, r5, pc}
 800cbec:	20000b70 	.word	0x20000b70

0800cbf0 <_init>:
 800cbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbf2:	bf00      	nop
 800cbf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbf6:	bc08      	pop	{r3}
 800cbf8:	469e      	mov	lr, r3
 800cbfa:	4770      	bx	lr

0800cbfc <_fini>:
 800cbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbfe:	bf00      	nop
 800cc00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc02:	bc08      	pop	{r3}
 800cc04:	469e      	mov	lr, r3
 800cc06:	4770      	bx	lr
