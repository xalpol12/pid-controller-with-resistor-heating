
pomiary_grzanie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800a2c8  0800a2c8  0001a2c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6d4  0800a6d4  0002031c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6d4  0800a6d4  0001a6d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6dc  0800a6dc  0002031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6dc  0800a6dc  0001a6dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6e0  0800a6e0  0001a6e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a6e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001dc  0800a8c0  000201dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000027c  0800a960  0002027c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000830  2000031c  0800aa00  0002031c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000b4c  0800aa00  00020b4c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b8e2  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002fac  00000000  00000000  0003bc2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001640  00000000  00000000  0003ebe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001508  00000000  00000000  00040220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002919f  00000000  00000000  00041728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a5bc  00000000  00000000  0006a8c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fc487  00000000  00000000  00084e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0018130a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000721c  00000000  00000000  0018135c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000031c 	.word	0x2000031c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a2b0 	.word	0x0800a2b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000320 	.word	0x20000320
 800020c:	0800a2b0 	.word	0x0800a2b0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_ldivmod>:
 8000be8:	b97b      	cbnz	r3, 8000c0a <__aeabi_ldivmod+0x22>
 8000bea:	b972      	cbnz	r2, 8000c0a <__aeabi_ldivmod+0x22>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bfbe      	ittt	lt
 8000bf0:	2000      	movlt	r0, #0
 8000bf2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bf6:	e006      	blt.n	8000c06 <__aeabi_ldivmod+0x1e>
 8000bf8:	bf08      	it	eq
 8000bfa:	2800      	cmpeq	r0, #0
 8000bfc:	bf1c      	itt	ne
 8000bfe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c02:	f04f 30ff 	movne.w	r0, #4294967295
 8000c06:	f000 b9bf 	b.w	8000f88 <__aeabi_idiv0>
 8000c0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c12:	2900      	cmp	r1, #0
 8000c14:	db09      	blt.n	8000c2a <__aeabi_ldivmod+0x42>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db1a      	blt.n	8000c50 <__aeabi_ldivmod+0x68>
 8000c1a:	f000 f84d 	bl	8000cb8 <__udivmoddi4>
 8000c1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c26:	b004      	add	sp, #16
 8000c28:	4770      	bx	lr
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db1b      	blt.n	8000c6c <__aeabi_ldivmod+0x84>
 8000c34:	f000 f840 	bl	8000cb8 <__udivmoddi4>
 8000c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c40:	b004      	add	sp, #16
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	4252      	negs	r2, r2
 8000c4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4e:	4770      	bx	lr
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	f000 f82f 	bl	8000cb8 <__udivmoddi4>
 8000c5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c62:	b004      	add	sp, #16
 8000c64:	4240      	negs	r0, r0
 8000c66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6a:	4770      	bx	lr
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c72:	f000 f821 	bl	8000cb8 <__udivmoddi4>
 8000c76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7e:	b004      	add	sp, #16
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af04      	add	r7, sp, #16
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <BMP280_Read8+0x38>)
 8000f9c:	6818      	ldr	r0, [r3, #0]
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	230a      	movs	r3, #10
 8000fa4:	9302      	str	r3, [sp, #8]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	9301      	str	r3, [sp, #4]
 8000faa:	f107 030f 	add.w	r3, r7, #15
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	21ec      	movs	r1, #236	; 0xec
 8000fb4:	f002 fb9a 	bl	80036ec <HAL_I2C_Mem_Read>
  return tmp;
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000338 	.word	0x20000338

08000fc8 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af04      	add	r7, sp, #16
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <BMP280_Read16+0x40>)
 8000fd4:	6818      	ldr	r0, [r3, #0]
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	230a      	movs	r3, #10
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	2302      	movs	r3, #2
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	21ec      	movs	r1, #236	; 0xec
 8000fec:	f002 fb7e 	bl	80036ec <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8000ff0:	7b3b      	ldrb	r3, [r7, #12]
 8000ff2:	021b      	lsls	r3, r3, #8
 8000ff4:	b21a      	sxth	r2, r3
 8000ff6:	7b7b      	ldrb	r3, [r7, #13]
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000338 	.word	0x20000338

0800100c <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ffd5 	bl	8000fc8 <BMP280_Read16>
 800101e:	4603      	mov	r3, r0
 8001020:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8001022:	89fb      	ldrh	r3, [r7, #14]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	b29b      	uxth	r3, r3
 8001028:	b21a      	sxth	r2, r3
 800102a:	89fb      	ldrh	r3, [r7, #14]
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	b21b      	sxth	r3, r3
 8001030:	4313      	orrs	r3, r2
 8001032:	b21b      	sxth	r3, r3
 8001034:	b29b      	uxth	r3, r3
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af04      	add	r7, sp, #16
 8001046:	4603      	mov	r3, r0
 8001048:	460a      	mov	r2, r1
 800104a:	71fb      	strb	r3, [r7, #7]
 800104c:	4613      	mov	r3, r2
 800104e:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <BMP280_Write8+0x34>)
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	b29a      	uxth	r2, r3
 8001058:	230a      	movs	r3, #10
 800105a:	9302      	str	r3, [sp, #8]
 800105c:	2301      	movs	r3, #1
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	1dbb      	adds	r3, r7, #6
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2301      	movs	r3, #1
 8001066:	21ec      	movs	r1, #236	; 0xec
 8001068:	f002 fa2c 	bl	80034c4 <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000338 	.word	0x20000338

08001078 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af04      	add	r7, sp, #16
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <BMP280_Read24+0x40>)
 8001084:	6818      	ldr	r0, [r3, #0]
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	b29a      	uxth	r2, r3
 800108a:	230a      	movs	r3, #10
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	2303      	movs	r3, #3
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2301      	movs	r3, #1
 800109a:	21ec      	movs	r1, #236	; 0xec
 800109c:	f002 fb26 	bl	80036ec <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 80010a0:	7b3b      	ldrb	r3, [r7, #12]
 80010a2:	041a      	lsls	r2, r3, #16
 80010a4:	7b7b      	ldrb	r3, [r7, #13]
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	4313      	orrs	r3, r2
 80010aa:	7bba      	ldrb	r2, [r7, #14]
 80010ac:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000338 	.word	0x20000338

080010bc <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	4608      	mov	r0, r1
 80010c6:	4611      	mov	r1, r2
 80010c8:	461a      	mov	r2, r3
 80010ca:	4603      	mov	r3, r0
 80010cc:	70fb      	strb	r3, [r7, #3]
 80010ce:	460b      	mov	r3, r1
 80010d0:	70bb      	strb	r3, [r7, #2]
 80010d2:	4613      	mov	r3, r2
 80010d4:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 80010d6:	4a48      	ldr	r2, [pc, #288]	; (80011f8 <BMP280_Init+0x13c>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 80010dc:	787b      	ldrb	r3, [r7, #1]
 80010de:	2b03      	cmp	r3, #3
 80010e0:	d901      	bls.n	80010e6 <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 80010e2:	2303      	movs	r3, #3
 80010e4:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 80010e6:	4a45      	ldr	r2, [pc, #276]	; (80011fc <BMP280_Init+0x140>)
 80010e8:	787b      	ldrb	r3, [r7, #1]
 80010ea:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 80010ec:	787b      	ldrb	r3, [r7, #1]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d101      	bne.n	80010f6 <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80010f6:	78fb      	ldrb	r3, [r7, #3]
 80010f8:	2b05      	cmp	r3, #5
 80010fa:	d901      	bls.n	8001100 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 80010fc:	2305      	movs	r3, #5
 80010fe:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8001100:	4a3f      	ldr	r2, [pc, #252]	; (8001200 <BMP280_Init+0x144>)
 8001102:	78fb      	ldrb	r3, [r7, #3]
 8001104:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 8001106:	78bb      	ldrb	r3, [r7, #2]
 8001108:	2b05      	cmp	r3, #5
 800110a:	d901      	bls.n	8001110 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 800110c:	2305      	movs	r3, #5
 800110e:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8001110:	4a3c      	ldr	r2, [pc, #240]	; (8001204 <BMP280_Init+0x148>)
 8001112:	78bb      	ldrb	r3, [r7, #2]
 8001114:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 8001116:	bf00      	nop
 8001118:	20d0      	movs	r0, #208	; 0xd0
 800111a:	f7ff ff37 	bl	8000f8c <BMP280_Read8>
 800111e:	4603      	mov	r3, r0
 8001120:	2b58      	cmp	r3, #88	; 0x58
 8001122:	d1f9      	bne.n	8001118 <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8001124:	2088      	movs	r0, #136	; 0x88
 8001126:	f7ff ff71 	bl	800100c <BMP280_Read16LE>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b36      	ldr	r3, [pc, #216]	; (8001208 <BMP280_Init+0x14c>)
 8001130:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8001132:	208a      	movs	r0, #138	; 0x8a
 8001134:	f7ff ff6a 	bl	800100c <BMP280_Read16LE>
 8001138:	4603      	mov	r3, r0
 800113a:	b21a      	sxth	r2, r3
 800113c:	4b33      	ldr	r3, [pc, #204]	; (800120c <BMP280_Init+0x150>)
 800113e:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8001140:	208c      	movs	r0, #140	; 0x8c
 8001142:	f7ff ff63 	bl	800100c <BMP280_Read16LE>
 8001146:	4603      	mov	r3, r0
 8001148:	b21a      	sxth	r2, r3
 800114a:	4b31      	ldr	r3, [pc, #196]	; (8001210 <BMP280_Init+0x154>)
 800114c:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 800114e:	208e      	movs	r0, #142	; 0x8e
 8001150:	f7ff ff5c 	bl	800100c <BMP280_Read16LE>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	4b2e      	ldr	r3, [pc, #184]	; (8001214 <BMP280_Init+0x158>)
 800115a:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 800115c:	2090      	movs	r0, #144	; 0x90
 800115e:	f7ff ff55 	bl	800100c <BMP280_Read16LE>
 8001162:	4603      	mov	r3, r0
 8001164:	b21a      	sxth	r2, r3
 8001166:	4b2c      	ldr	r3, [pc, #176]	; (8001218 <BMP280_Init+0x15c>)
 8001168:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 800116a:	2092      	movs	r0, #146	; 0x92
 800116c:	f7ff ff4e 	bl	800100c <BMP280_Read16LE>
 8001170:	4603      	mov	r3, r0
 8001172:	b21a      	sxth	r2, r3
 8001174:	4b29      	ldr	r3, [pc, #164]	; (800121c <BMP280_Init+0x160>)
 8001176:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8001178:	2094      	movs	r0, #148	; 0x94
 800117a:	f7ff ff47 	bl	800100c <BMP280_Read16LE>
 800117e:	4603      	mov	r3, r0
 8001180:	b21a      	sxth	r2, r3
 8001182:	4b27      	ldr	r3, [pc, #156]	; (8001220 <BMP280_Init+0x164>)
 8001184:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 8001186:	2096      	movs	r0, #150	; 0x96
 8001188:	f7ff ff40 	bl	800100c <BMP280_Read16LE>
 800118c:	4603      	mov	r3, r0
 800118e:	b21a      	sxth	r2, r3
 8001190:	4b24      	ldr	r3, [pc, #144]	; (8001224 <BMP280_Init+0x168>)
 8001192:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001194:	2098      	movs	r0, #152	; 0x98
 8001196:	f7ff ff39 	bl	800100c <BMP280_Read16LE>
 800119a:	4603      	mov	r3, r0
 800119c:	b21a      	sxth	r2, r3
 800119e:	4b22      	ldr	r3, [pc, #136]	; (8001228 <BMP280_Init+0x16c>)
 80011a0:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 80011a2:	209a      	movs	r0, #154	; 0x9a
 80011a4:	f7ff ff32 	bl	800100c <BMP280_Read16LE>
 80011a8:	4603      	mov	r3, r0
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	4b1f      	ldr	r3, [pc, #124]	; (800122c <BMP280_Init+0x170>)
 80011ae:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 80011b0:	209c      	movs	r0, #156	; 0x9c
 80011b2:	f7ff ff2b 	bl	800100c <BMP280_Read16LE>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b21a      	sxth	r2, r3
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <BMP280_Init+0x174>)
 80011bc:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 80011be:	209e      	movs	r0, #158	; 0x9e
 80011c0:	f7ff ff24 	bl	800100c <BMP280_Read16LE>
 80011c4:	4603      	mov	r3, r0
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <BMP280_Init+0x178>)
 80011ca:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	015b      	lsls	r3, r3, #5
 80011d0:	b25a      	sxtb	r2, r3
 80011d2:	78bb      	ldrb	r3, [r7, #2]
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	4313      	orrs	r3, r2
 80011da:	b25a      	sxtb	r2, r3
 80011dc:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	4619      	mov	r1, r3
 80011e8:	20f4      	movs	r0, #244	; 0xf4
 80011ea:	f7ff ff29 	bl	8001040 <BMP280_Write8>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000338 	.word	0x20000338
 80011fc:	2000033e 	.word	0x2000033e
 8001200:	2000033c 	.word	0x2000033c
 8001204:	2000033d 	.word	0x2000033d
 8001208:	20000354 	.word	0x20000354
 800120c:	20000340 	.word	0x20000340
 8001210:	20000342 	.word	0x20000342
 8001214:	20000356 	.word	0x20000356
 8001218:	20000344 	.word	0x20000344
 800121c:	20000346 	.word	0x20000346
 8001220:	20000348 	.word	0x20000348
 8001224:	2000034a 	.word	0x2000034a
 8001228:	2000034c 	.word	0x2000034c
 800122c:	2000034e 	.word	0x2000034e
 8001230:	20000350 	.word	0x20000350
 8001234:	20000352 	.word	0x20000352

08001238 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 800123e:	4b3d      	ldr	r3, [pc, #244]	; (8001334 <BMP280_ReadTemperature+0xfc>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d16d      	bne.n	8001322 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 8001246:	20f4      	movs	r0, #244	; 0xf4
 8001248:	f7ff fea0 	bl	8000f8c <BMP280_Read8>
 800124c:	4603      	mov	r3, r0
 800124e:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	f023 0303 	bic.w	r3, r3, #3
 8001256:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8001258:	7dfb      	ldrb	r3, [r7, #23]
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001260:	7dfb      	ldrb	r3, [r7, #23]
 8001262:	4619      	mov	r1, r3
 8001264:	20f4      	movs	r0, #244	; 0xf4
 8001266:	f7ff feeb 	bl	8001040 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 800126a:	20f4      	movs	r0, #244	; 0xf4
 800126c:	f7ff fe8e 	bl	8000f8c <BMP280_Read8>
 8001270:	4603      	mov	r3, r0
 8001272:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001274:	7dbb      	ldrb	r3, [r7, #22]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 800127c:	7dbb      	ldrb	r3, [r7, #22]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d14f      	bne.n	8001322 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001282:	20f4      	movs	r0, #244	; 0xf4
 8001284:	f7ff fe82 	bl	8000f8c <BMP280_Read8>
 8001288:	4603      	mov	r3, r0
 800128a:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 800128c:	7dbb      	ldrb	r3, [r7, #22]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001294:	7dbb      	ldrb	r3, [r7, #22]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d000      	beq.n	800129c <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800129a:	e7f2      	b.n	8001282 <BMP280_ReadTemperature+0x4a>
				  break;
 800129c:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 800129e:	20fa      	movs	r0, #250	; 0xfa
 80012a0:	f7ff feea 	bl	8001078 <BMP280_Read24>
 80012a4:	4603      	mov	r3, r0
 80012a6:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	111b      	asrs	r3, r3, #4
 80012ac:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	10da      	asrs	r2, r3, #3
 80012b2:	4b21      	ldr	r3, [pc, #132]	; (8001338 <BMP280_ReadTemperature+0x100>)
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 80012ba:	4a20      	ldr	r2, [pc, #128]	; (800133c <BMP280_ReadTemperature+0x104>)
 80012bc:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80012c0:	fb02 f303 	mul.w	r3, r2, r3
 80012c4:	12db      	asrs	r3, r3, #11
 80012c6:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	111b      	asrs	r3, r3, #4
 80012cc:	4a1a      	ldr	r2, [pc, #104]	; (8001338 <BMP280_ReadTemperature+0x100>)
 80012ce:	8812      	ldrh	r2, [r2, #0]
 80012d0:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	1112      	asrs	r2, r2, #4
 80012d6:	4918      	ldr	r1, [pc, #96]	; (8001338 <BMP280_ReadTemperature+0x100>)
 80012d8:	8809      	ldrh	r1, [r1, #0]
 80012da:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012dc:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012e0:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80012e2:	4a17      	ldr	r2, [pc, #92]	; (8001340 <BMP280_ReadTemperature+0x108>)
 80012e4:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012e8:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012ec:	139b      	asrs	r3, r3, #14
 80012ee:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	4413      	add	r3, r2
 80012f6:	4a13      	ldr	r2, [pc, #76]	; (8001344 <BMP280_ReadTemperature+0x10c>)
 80012f8:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <BMP280_ReadTemperature+0x10c>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	3380      	adds	r3, #128	; 0x80
 8001306:	121b      	asrs	r3, r3, #8
 8001308:	ee07 3a90 	vmov	s15, r3
 800130c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001310:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8001314:	edd7 7a01 	vldr	s15, [r7, #4]
 8001318:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001348 <BMP280_ReadTemperature+0x110>
 800131c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001320:	e001      	b.n	8001326 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8001322:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800134c <BMP280_ReadTemperature+0x114>
}
 8001326:	eef0 7a47 	vmov.f32	s15, s14
 800132a:	eeb0 0a67 	vmov.f32	s0, s15
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	2000033e 	.word	0x2000033e
 8001338:	20000354 	.word	0x20000354
 800133c:	20000340 	.word	0x20000340
 8001340:	20000342 	.word	0x20000342
 8001344:	20000358 	.word	0x20000358
 8001348:	42c80000 	.word	0x42c80000
 800134c:	c2c60000 	.word	0xc2c60000

08001350 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 8001350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001354:	b0cc      	sub	sp, #304	; 0x130
 8001356:	af00      	add	r7, sp, #0
 8001358:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800135c:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 8001360:	f7ff ff6a 	bl	8001238 <BMP280_ReadTemperature>
 8001364:	eef0 7a40 	vmov.f32	s15, s0
 8001368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800136c:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 8001370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8001648 <BMP280_ReadTemperatureAndPressure+0x2f8>
 800137c:	eef4 7a47 	vcmp.f32	s15, s14
 8001380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001384:	d101      	bne.n	800138a <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 8001386:	23ff      	movs	r3, #255	; 0xff
 8001388:	e2bf      	b.n	800190a <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 800138a:	20f7      	movs	r0, #247	; 0xf7
 800138c:	f7ff fe74 	bl	8001078 <BMP280_Read24>
 8001390:	4603      	mov	r3, r0
 8001392:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  adc_P >>= 4;
 8001396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800139a:	111b      	asrs	r3, r3, #4
 800139c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 80013a0:	4baa      	ldr	r3, [pc, #680]	; (800164c <BMP280_ReadTemperatureAndPressure+0x2fc>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	17da      	asrs	r2, r3, #31
 80013a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80013aa:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80013ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80013b2:	460b      	mov	r3, r1
 80013b4:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 80013b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80013ba:	4613      	mov	r3, r2
 80013bc:	f143 33ff 	adc.w	r3, r3, #4294967295
 80013c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80013c6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 80013ca:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80013ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013d2:	fb03 f102 	mul.w	r1, r3, r2
 80013d6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80013da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013de:	fb02 f303 	mul.w	r3, r2, r3
 80013e2:	18ca      	adds	r2, r1, r3
 80013e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013e8:	fba3 4503 	umull	r4, r5, r3, r3
 80013ec:	1953      	adds	r3, r2, r5
 80013ee:	461d      	mov	r5, r3
 80013f0:	4b97      	ldr	r3, [pc, #604]	; (8001650 <BMP280_ReadTemperatureAndPressure+0x300>)
 80013f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	17da      	asrs	r2, r3, #31
 80013fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80013fe:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001402:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001406:	4603      	mov	r3, r0
 8001408:	fb03 f205 	mul.w	r2, r3, r5
 800140c:	460b      	mov	r3, r1
 800140e:	fb04 f303 	mul.w	r3, r4, r3
 8001412:	4413      	add	r3, r2
 8001414:	4602      	mov	r2, r0
 8001416:	fba4 8902 	umull	r8, r9, r4, r2
 800141a:	444b      	add	r3, r9
 800141c:	4699      	mov	r9, r3
 800141e:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 8001422:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 8001426:	4b8b      	ldr	r3, [pc, #556]	; (8001654 <BMP280_ReadTemperatureAndPressure+0x304>)
 8001428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142c:	b21b      	sxth	r3, r3
 800142e:	17da      	asrs	r2, r3, #31
 8001430:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001434:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001438:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800143c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001440:	462a      	mov	r2, r5
 8001442:	fb02 f203 	mul.w	r2, r2, r3
 8001446:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800144a:	4621      	mov	r1, r4
 800144c:	fb01 f303 	mul.w	r3, r1, r3
 8001450:	441a      	add	r2, r3
 8001452:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001456:	4621      	mov	r1, r4
 8001458:	fba3 ab01 	umull	sl, fp, r3, r1
 800145c:	eb02 030b 	add.w	r3, r2, fp
 8001460:	469b      	mov	fp, r3
 8001462:	f04f 0000 	mov.w	r0, #0
 8001466:	f04f 0100 	mov.w	r1, #0
 800146a:	ea4f 414b 	mov.w	r1, fp, lsl #17
 800146e:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001472:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001476:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800147a:	1814      	adds	r4, r2, r0
 800147c:	643c      	str	r4, [r7, #64]	; 0x40
 800147e:	414b      	adcs	r3, r1
 8001480:	647b      	str	r3, [r7, #68]	; 0x44
 8001482:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001486:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 800148a:	4b73      	ldr	r3, [pc, #460]	; (8001658 <BMP280_ReadTemperatureAndPressure+0x308>)
 800148c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001490:	b21b      	sxth	r3, r3
 8001492:	17da      	asrs	r2, r3, #31
 8001494:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001498:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800149c:	f04f 0000 	mov.w	r0, #0
 80014a0:	f04f 0100 	mov.w	r1, #0
 80014a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80014a8:	00d9      	lsls	r1, r3, #3
 80014aa:	2000      	movs	r0, #0
 80014ac:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80014b0:	1814      	adds	r4, r2, r0
 80014b2:	63bc      	str	r4, [r7, #56]	; 0x38
 80014b4:	414b      	adcs	r3, r1
 80014b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014b8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80014bc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80014c0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80014c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014c8:	fb03 f102 	mul.w	r1, r3, r2
 80014cc:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80014d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014d4:	fb02 f303 	mul.w	r3, r2, r3
 80014d8:	18ca      	adds	r2, r1, r3
 80014da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014de:	fba3 1303 	umull	r1, r3, r3, r3
 80014e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014e6:	460b      	mov	r3, r1
 80014e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80014ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80014f0:	18d3      	adds	r3, r2, r3
 80014f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014f6:	4b59      	ldr	r3, [pc, #356]	; (800165c <BMP280_ReadTemperatureAndPressure+0x30c>)
 80014f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	17da      	asrs	r2, r3, #31
 8001500:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001504:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001508:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800150c:	462b      	mov	r3, r5
 800150e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001512:	4642      	mov	r2, r8
 8001514:	fb02 f203 	mul.w	r2, r2, r3
 8001518:	464b      	mov	r3, r9
 800151a:	4621      	mov	r1, r4
 800151c:	fb01 f303 	mul.w	r3, r1, r3
 8001520:	4413      	add	r3, r2
 8001522:	4622      	mov	r2, r4
 8001524:	4641      	mov	r1, r8
 8001526:	fba2 1201 	umull	r1, r2, r2, r1
 800152a:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800152e:	460a      	mov	r2, r1
 8001530:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8001534:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001538:	4413      	add	r3, r2
 800153a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800153e:	f04f 0000 	mov.w	r0, #0
 8001542:	f04f 0100 	mov.w	r1, #0
 8001546:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800154a:	4623      	mov	r3, r4
 800154c:	0a18      	lsrs	r0, r3, #8
 800154e:	462b      	mov	r3, r5
 8001550:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001554:	462b      	mov	r3, r5
 8001556:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 8001558:	4b41      	ldr	r3, [pc, #260]	; (8001660 <BMP280_ReadTemperatureAndPressure+0x310>)
 800155a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155e:	b21b      	sxth	r3, r3
 8001560:	17da      	asrs	r2, r3, #31
 8001562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001566:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800156a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800156e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001572:	464a      	mov	r2, r9
 8001574:	fb02 f203 	mul.w	r2, r2, r3
 8001578:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800157c:	4644      	mov	r4, r8
 800157e:	fb04 f303 	mul.w	r3, r4, r3
 8001582:	441a      	add	r2, r3
 8001584:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001588:	4644      	mov	r4, r8
 800158a:	fba3 4304 	umull	r4, r3, r3, r4
 800158e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001592:	4623      	mov	r3, r4
 8001594:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800159c:	18d3      	adds	r3, r2, r3
 800159e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80015ae:	464c      	mov	r4, r9
 80015b0:	0323      	lsls	r3, r4, #12
 80015b2:	4644      	mov	r4, r8
 80015b4:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80015b8:	4644      	mov	r4, r8
 80015ba:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80015bc:	1884      	adds	r4, r0, r2
 80015be:	633c      	str	r4, [r7, #48]	; 0x30
 80015c0:	eb41 0303 	adc.w	r3, r1, r3
 80015c4:	637b      	str	r3, [r7, #52]	; 0x34
 80015c6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80015ca:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 80015ce:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80015d2:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80015d6:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 80015da:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80015de:	4b21      	ldr	r3, [pc, #132]	; (8001664 <BMP280_ReadTemperatureAndPressure+0x314>)
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	2200      	movs	r2, #0
 80015e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80015ee:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80015f2:	462b      	mov	r3, r5
 80015f4:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80015f8:	4642      	mov	r2, r8
 80015fa:	fb02 f203 	mul.w	r2, r2, r3
 80015fe:	464b      	mov	r3, r9
 8001600:	4621      	mov	r1, r4
 8001602:	fb01 f303 	mul.w	r3, r1, r3
 8001606:	4413      	add	r3, r2
 8001608:	4622      	mov	r2, r4
 800160a:	4641      	mov	r1, r8
 800160c:	fba2 1201 	umull	r1, r2, r2, r1
 8001610:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001614:	460a      	mov	r2, r1
 8001616:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800161a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800161e:	4413      	add	r3, r2
 8001620:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001630:	4629      	mov	r1, r5
 8001632:	104a      	asrs	r2, r1, #1
 8001634:	4629      	mov	r1, r5
 8001636:	17cb      	asrs	r3, r1, #31
 8001638:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	  if (var1 == 0) {
 800163c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001640:	4313      	orrs	r3, r2
 8001642:	d111      	bne.n	8001668 <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 8001644:	2300      	movs	r3, #0
 8001646:	e160      	b.n	800190a <BMP280_ReadTemperatureAndPressure+0x5ba>
 8001648:	c2c60000 	.word	0xc2c60000
 800164c:	20000358 	.word	0x20000358
 8001650:	2000034c 	.word	0x2000034c
 8001654:	2000034a 	.word	0x2000034a
 8001658:	20000348 	.word	0x20000348
 800165c:	20000346 	.word	0x20000346
 8001660:	20000344 	.word	0x20000344
 8001664:	20000356 	.word	0x20000356
	  }
	  p = 1048576 - adc_P;
 8001668:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800166c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001670:	17da      	asrs	r2, r3, #31
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
 8001674:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001676:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800167a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 800167e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001682:	105b      	asrs	r3, r3, #1
 8001684:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001688:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800168c:	07db      	lsls	r3, r3, #31
 800168e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001692:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001696:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800169a:	4621      	mov	r1, r4
 800169c:	1a89      	subs	r1, r1, r2
 800169e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80016a2:	4629      	mov	r1, r5
 80016a4:	eb61 0303 	sbc.w	r3, r1, r3
 80016a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80016ac:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80016b0:	4622      	mov	r2, r4
 80016b2:	462b      	mov	r3, r5
 80016b4:	1891      	adds	r1, r2, r2
 80016b6:	6239      	str	r1, [r7, #32]
 80016b8:	415b      	adcs	r3, r3
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
 80016bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016c0:	4621      	mov	r1, r4
 80016c2:	1851      	adds	r1, r2, r1
 80016c4:	61b9      	str	r1, [r7, #24]
 80016c6:	4629      	mov	r1, r5
 80016c8:	414b      	adcs	r3, r1
 80016ca:	61fb      	str	r3, [r7, #28]
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80016d8:	4649      	mov	r1, r9
 80016da:	018b      	lsls	r3, r1, #6
 80016dc:	4641      	mov	r1, r8
 80016de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016e2:	4641      	mov	r1, r8
 80016e4:	018a      	lsls	r2, r1, #6
 80016e6:	4641      	mov	r1, r8
 80016e8:	1889      	adds	r1, r1, r2
 80016ea:	6139      	str	r1, [r7, #16]
 80016ec:	4649      	mov	r1, r9
 80016ee:	eb43 0101 	adc.w	r1, r3, r1
 80016f2:	6179      	str	r1, [r7, #20]
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001700:	4649      	mov	r1, r9
 8001702:	008b      	lsls	r3, r1, #2
 8001704:	4641      	mov	r1, r8
 8001706:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800170a:	4641      	mov	r1, r8
 800170c:	008a      	lsls	r2, r1, #2
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	4603      	mov	r3, r0
 8001714:	4622      	mov	r2, r4
 8001716:	189b      	adds	r3, r3, r2
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	460b      	mov	r3, r1
 800171c:	462a      	mov	r2, r5
 800171e:	eb42 0303 	adc.w	r3, r2, r3
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001730:	4649      	mov	r1, r9
 8001732:	008b      	lsls	r3, r1, #2
 8001734:	4641      	mov	r1, r8
 8001736:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800173a:	4641      	mov	r1, r8
 800173c:	008a      	lsls	r2, r1, #2
 800173e:	4610      	mov	r0, r2
 8001740:	4619      	mov	r1, r3
 8001742:	4603      	mov	r3, r0
 8001744:	4622      	mov	r2, r4
 8001746:	189b      	adds	r3, r3, r2
 8001748:	67bb      	str	r3, [r7, #120]	; 0x78
 800174a:	462b      	mov	r3, r5
 800174c:	460a      	mov	r2, r1
 800174e:	eb42 0303 	adc.w	r3, r2, r3
 8001752:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001754:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001758:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800175c:	f7ff fa44 	bl	8000be8 <__aeabi_ldivmod>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001768:	4b6b      	ldr	r3, [pc, #428]	; (8001918 <BMP280_ReadTemperatureAndPressure+0x5c8>)
 800176a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800176e:	b21b      	sxth	r3, r3
 8001770:	17da      	asrs	r2, r3, #31
 8001772:	673b      	str	r3, [r7, #112]	; 0x70
 8001774:	677a      	str	r2, [r7, #116]	; 0x74
 8001776:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800177a:	f04f 0000 	mov.w	r0, #0
 800177e:	f04f 0100 	mov.w	r1, #0
 8001782:	0b50      	lsrs	r0, r2, #13
 8001784:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001788:	1359      	asrs	r1, r3, #13
 800178a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800178e:	462b      	mov	r3, r5
 8001790:	fb00 f203 	mul.w	r2, r0, r3
 8001794:	4623      	mov	r3, r4
 8001796:	fb03 f301 	mul.w	r3, r3, r1
 800179a:	4413      	add	r3, r2
 800179c:	4622      	mov	r2, r4
 800179e:	fba2 1200 	umull	r1, r2, r2, r0
 80017a2:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80017a6:	460a      	mov	r2, r1
 80017a8:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80017ac:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80017b0:	4413      	add	r3, r2
 80017b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80017b6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80017ba:	f04f 0000 	mov.w	r0, #0
 80017be:	f04f 0100 	mov.w	r1, #0
 80017c2:	0b50      	lsrs	r0, r2, #13
 80017c4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80017c8:	1359      	asrs	r1, r3, #13
 80017ca:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80017ce:	462b      	mov	r3, r5
 80017d0:	fb00 f203 	mul.w	r2, r0, r3
 80017d4:	4623      	mov	r3, r4
 80017d6:	fb03 f301 	mul.w	r3, r3, r1
 80017da:	4413      	add	r3, r2
 80017dc:	4622      	mov	r2, r4
 80017de:	fba2 1200 	umull	r1, r2, r2, r0
 80017e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80017e6:	460a      	mov	r2, r1
 80017e8:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80017ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80017f0:	4413      	add	r3, r2
 80017f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001802:	4621      	mov	r1, r4
 8001804:	0e4a      	lsrs	r2, r1, #25
 8001806:	4629      	mov	r1, r5
 8001808:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800180c:	4629      	mov	r1, r5
 800180e:	164b      	asrs	r3, r1, #25
 8001810:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 8001814:	4b41      	ldr	r3, [pc, #260]	; (800191c <BMP280_ReadTemperatureAndPressure+0x5cc>)
 8001816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800181a:	b21b      	sxth	r3, r3
 800181c:	17da      	asrs	r2, r3, #31
 800181e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001820:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001822:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001826:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800182a:	462a      	mov	r2, r5
 800182c:	fb02 f203 	mul.w	r2, r2, r3
 8001830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001834:	4621      	mov	r1, r4
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	4413      	add	r3, r2
 800183c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001840:	4621      	mov	r1, r4
 8001842:	fba2 1201 	umull	r1, r2, r2, r1
 8001846:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800184a:	460a      	mov	r2, r1
 800184c:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001850:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001854:	4413      	add	r3, r2
 8001856:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001866:	4621      	mov	r1, r4
 8001868:	0cca      	lsrs	r2, r1, #19
 800186a:	4629      	mov	r1, r5
 800186c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001870:	4629      	mov	r1, r5
 8001872:	14cb      	asrs	r3, r1, #19
 8001874:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001878:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800187c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001880:	1884      	adds	r4, r0, r2
 8001882:	663c      	str	r4, [r7, #96]	; 0x60
 8001884:	eb41 0303 	adc.w	r3, r1, r3
 8001888:	667b      	str	r3, [r7, #100]	; 0x64
 800188a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800188e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001892:	4621      	mov	r1, r4
 8001894:	1889      	adds	r1, r1, r2
 8001896:	65b9      	str	r1, [r7, #88]	; 0x58
 8001898:	4629      	mov	r1, r5
 800189a:	eb43 0101 	adc.w	r1, r3, r1
 800189e:	65f9      	str	r1, [r7, #92]	; 0x5c
 80018a0:	f04f 0000 	mov.w	r0, #0
 80018a4:	f04f 0100 	mov.w	r1, #0
 80018a8:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80018ac:	4623      	mov	r3, r4
 80018ae:	0a18      	lsrs	r0, r3, #8
 80018b0:	462b      	mov	r3, r5
 80018b2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80018b6:	462b      	mov	r3, r5
 80018b8:	1219      	asrs	r1, r3, #8
 80018ba:	4b19      	ldr	r3, [pc, #100]	; (8001920 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 80018bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c0:	b21b      	sxth	r3, r3
 80018c2:	17da      	asrs	r2, r3, #31
 80018c4:	653b      	str	r3, [r7, #80]	; 0x50
 80018c6:	657a      	str	r2, [r7, #84]	; 0x54
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80018d4:	464c      	mov	r4, r9
 80018d6:	0123      	lsls	r3, r4, #4
 80018d8:	4644      	mov	r4, r8
 80018da:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80018de:	4644      	mov	r4, r8
 80018e0:	0122      	lsls	r2, r4, #4
 80018e2:	1884      	adds	r4, r0, r2
 80018e4:	603c      	str	r4, [r7, #0]
 80018e6:	eb41 0303 	adc.w	r3, r1, r3
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	e9d7 3400 	ldrd	r3, r4, [r7]
 80018f0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  *pressure = (int32_t)p/256;
 80018f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	da00      	bge.n	80018fe <BMP280_ReadTemperatureAndPressure+0x5ae>
 80018fc:	33ff      	adds	r3, #255	; 0xff
 80018fe:	121b      	asrs	r3, r3, #8
 8001900:	461a      	mov	r2, r3
 8001902:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001906:	601a      	str	r2, [r3, #0]

	  return 0;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001910:	46bd      	mov	sp, r7
 8001912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001916:	bf00      	nop
 8001918:	20000352 	.word	0x20000352
 800191c:	20000350 	.word	0x20000350
 8001920:	2000034e 	.word	0x2000034e

08001924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001928:	f000 febd 	bl	80026a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800192c:	f000 f81c 	bl	8001968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001930:	f000 fa18 	bl	8001d64 <MX_GPIO_Init>
  MX_ETH_Init();
 8001934:	f000 f880 	bl	8001a38 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001938:	f000 f9b6 	bl	8001ca8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800193c:	f000 f9e4 	bl	8001d08 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001940:	f000 f8c8 	bl	8001ad4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001944:	f000 f954 	bl	8001bf0 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001948:	f000 f904 	bl	8001b54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim2);
 800194c:	4804      	ldr	r0, [pc, #16]	; (8001960 <main+0x3c>)
 800194e:	f003 fd83 	bl	8005458 <HAL_TIM_Base_Start_IT>
  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8001952:	2301      	movs	r3, #1
 8001954:	2203      	movs	r2, #3
 8001956:	2101      	movs	r1, #1
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <main+0x40>)
 800195a:	f7ff fbaf 	bl	80010bc <BMP280_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800195e:	e7fe      	b.n	800195e <main+0x3a>
 8001960:	20000498 	.word	0x20000498
 8001964:	20000444 	.word	0x20000444

08001968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b094      	sub	sp, #80	; 0x50
 800196c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196e:	f107 0320 	add.w	r3, r7, #32
 8001972:	2230      	movs	r2, #48	; 0x30
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f005 fd9a 	bl	80074b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800197c:	f107 030c 	add.w	r3, r7, #12
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800198c:	f002 fc42 	bl	8004214 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001990:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <SystemClock_Config+0xc8>)
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	4a26      	ldr	r2, [pc, #152]	; (8001a30 <SystemClock_Config+0xc8>)
 8001996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199a:	6413      	str	r3, [r2, #64]	; 0x40
 800199c:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <SystemClock_Config+0xc8>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019a8:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <SystemClock_Config+0xcc>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019b0:	4a20      	ldr	r2, [pc, #128]	; (8001a34 <SystemClock_Config+0xcc>)
 80019b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <SystemClock_Config+0xcc>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019c4:	2301      	movs	r3, #1
 80019c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ce:	2302      	movs	r3, #2
 80019d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019d8:	2304      	movs	r3, #4
 80019da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80019dc:	2348      	movs	r3, #72	; 0x48
 80019de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019e0:	2302      	movs	r3, #2
 80019e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80019e4:	2303      	movs	r3, #3
 80019e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e8:	f107 0320 	add.w	r3, r7, #32
 80019ec:	4618      	mov	r0, r3
 80019ee:	f002 fc21 	bl	8004234 <HAL_RCC_OscConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019f8:	f000 fa88 	bl	8001f0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019fc:	230f      	movs	r3, #15
 80019fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a00:	2302      	movs	r3, #2
 8001a02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a12:	f107 030c 	add.w	r3, r7, #12
 8001a16:	2102      	movs	r1, #2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f002 feaf 	bl	800477c <HAL_RCC_ClockConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a24:	f000 fa72 	bl	8001f0c <Error_Handler>
  }
}
 8001a28:	bf00      	nop
 8001a2a:	3750      	adds	r7, #80	; 0x50
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40007000 	.word	0x40007000

08001a38 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001a3c:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <MX_ETH_Init+0x84>)
 8001a3e:	4a20      	ldr	r2, [pc, #128]	; (8001ac0 <MX_ETH_Init+0x88>)
 8001a40:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <MX_ETH_Init+0x8c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001a48:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <MX_ETH_Init+0x8c>)
 8001a4a:	2280      	movs	r2, #128	; 0x80
 8001a4c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <MX_ETH_Init+0x8c>)
 8001a50:	22e1      	movs	r2, #225	; 0xe1
 8001a52:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <MX_ETH_Init+0x8c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <MX_ETH_Init+0x8c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001a60:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <MX_ETH_Init+0x8c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <MX_ETH_Init+0x84>)
 8001a68:	4a16      	ldr	r2, [pc, #88]	; (8001ac4 <MX_ETH_Init+0x8c>)
 8001a6a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <MX_ETH_Init+0x84>)
 8001a6e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a72:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <MX_ETH_Init+0x84>)
 8001a76:	4a14      	ldr	r2, [pc, #80]	; (8001ac8 <MX_ETH_Init+0x90>)
 8001a78:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <MX_ETH_Init+0x84>)
 8001a7c:	4a13      	ldr	r2, [pc, #76]	; (8001acc <MX_ETH_Init+0x94>)
 8001a7e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001a80:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <MX_ETH_Init+0x84>)
 8001a82:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a86:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001a88:	480c      	ldr	r0, [pc, #48]	; (8001abc <MX_ETH_Init+0x84>)
 8001a8a:	f000 ff9f 	bl	80029cc <HAL_ETH_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001a94:	f000 fa3a 	bl	8001f0c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001a98:	2238      	movs	r2, #56	; 0x38
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	480c      	ldr	r0, [pc, #48]	; (8001ad0 <MX_ETH_Init+0x98>)
 8001a9e:	f005 fd07 	bl	80074b0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <MX_ETH_Init+0x98>)
 8001aa4:	2221      	movs	r2, #33	; 0x21
 8001aa6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <MX_ETH_Init+0x98>)
 8001aaa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001aae:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <MX_ETH_Init+0x98>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000394 	.word	0x20000394
 8001ac0:	40028000 	.word	0x40028000
 8001ac4:	20000b2c 	.word	0x20000b2c
 8001ac8:	2000027c 	.word	0x2000027c
 8001acc:	200001dc 	.word	0x200001dc
 8001ad0:	2000035c 	.word	0x2000035c

08001ad4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <MX_I2C1_Init+0x74>)
 8001ada:	4a1c      	ldr	r2, [pc, #112]	; (8001b4c <MX_I2C1_Init+0x78>)
 8001adc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <MX_I2C1_Init+0x74>)
 8001ae0:	4a1b      	ldr	r2, [pc, #108]	; (8001b50 <MX_I2C1_Init+0x7c>)
 8001ae2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <MX_I2C1_Init+0x74>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aea:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <MX_I2C1_Init+0x74>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <MX_I2C1_Init+0x74>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001af6:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <MX_I2C1_Init+0x74>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <MX_I2C1_Init+0x74>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <MX_I2C1_Init+0x74>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <MX_I2C1_Init+0x74>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b0e:	480e      	ldr	r0, [pc, #56]	; (8001b48 <MX_I2C1_Init+0x74>)
 8001b10:	f001 fc48 	bl	80033a4 <HAL_I2C_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b1a:	f000 f9f7 	bl	8001f0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4809      	ldr	r0, [pc, #36]	; (8001b48 <MX_I2C1_Init+0x74>)
 8001b22:	f002 f997 	bl	8003e54 <HAL_I2CEx_ConfigAnalogFilter>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b2c:	f000 f9ee 	bl	8001f0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b30:	2100      	movs	r1, #0
 8001b32:	4805      	ldr	r0, [pc, #20]	; (8001b48 <MX_I2C1_Init+0x74>)
 8001b34:	f002 f9d9 	bl	8003eea <HAL_I2CEx_ConfigDigitalFilter>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b3e:	f000 f9e5 	bl	8001f0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000444 	.word	0x20000444
 8001b4c:	40005400 	.word	0x40005400
 8001b50:	00808cd2 	.word	0x00808cd2

08001b54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b5a:	f107 0310 	add.w	r3, r7, #16
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b72:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <MX_TIM2_Init+0x94>)
 8001b74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <MX_TIM2_Init+0x94>)
 8001b7c:	2247      	movs	r2, #71	; 0x47
 8001b7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <MX_TIM2_Init+0x94>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8001b86:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <MX_TIM2_Init+0x94>)
 8001b88:	4a18      	ldr	r2, [pc, #96]	; (8001bec <MX_TIM2_Init+0x98>)
 8001b8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8c:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <MX_TIM2_Init+0x94>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <MX_TIM2_Init+0x94>)
 8001b94:	2280      	movs	r2, #128	; 0x80
 8001b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b98:	4813      	ldr	r0, [pc, #76]	; (8001be8 <MX_TIM2_Init+0x94>)
 8001b9a:	f003 fc05 	bl	80053a8 <HAL_TIM_Base_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ba4:	f000 f9b2 	bl	8001f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bae:	f107 0310 	add.w	r3, r7, #16
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	480c      	ldr	r0, [pc, #48]	; (8001be8 <MX_TIM2_Init+0x94>)
 8001bb6:	f003 ff51 	bl	8005a5c <HAL_TIM_ConfigClockSource>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001bc0:	f000 f9a4 	bl	8001f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4805      	ldr	r0, [pc, #20]	; (8001be8 <MX_TIM2_Init+0x94>)
 8001bd2:	f004 fbcd 	bl	8006370 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001bdc:	f000 f996 	bl	8001f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001be0:	bf00      	nop
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000498 	.word	0x20000498
 8001bec:	000f4240 	.word	0x000f4240

08001bf0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf6:	f107 031c 	add.w	r3, r7, #28
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c02:	463b      	mov	r3, r7
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
 8001c10:	615a      	str	r2, [r3, #20]
 8001c12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c14:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <MX_TIM3_Init+0xb0>)
 8001c16:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <MX_TIM3_Init+0xb4>)
 8001c18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001c1a:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <MX_TIM3_Init+0xb0>)
 8001c1c:	2247      	movs	r2, #71	; 0x47
 8001c1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c20:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <MX_TIM3_Init+0xb0>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001c26:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <MX_TIM3_Init+0xb0>)
 8001c28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <MX_TIM3_Init+0xb0>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c34:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <MX_TIM3_Init+0xb0>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c3a:	4819      	ldr	r0, [pc, #100]	; (8001ca0 <MX_TIM3_Init+0xb0>)
 8001c3c:	f003 fc84 	bl	8005548 <HAL_TIM_PWM_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001c46:	f000 f961 	bl	8001f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c52:	f107 031c 	add.w	r3, r7, #28
 8001c56:	4619      	mov	r1, r3
 8001c58:	4811      	ldr	r0, [pc, #68]	; (8001ca0 <MX_TIM3_Init+0xb0>)
 8001c5a:	f004 fb89 	bl	8006370 <HAL_TIMEx_MasterConfigSynchronization>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001c64:	f000 f952 	bl	8001f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c68:	2360      	movs	r3, #96	; 0x60
 8001c6a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 900;
 8001c6c:	f44f 7361 	mov.w	r3, #900	; 0x384
 8001c70:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4807      	ldr	r0, [pc, #28]	; (8001ca0 <MX_TIM3_Init+0xb0>)
 8001c82:	f003 fdd7 	bl	8005834 <HAL_TIM_PWM_ConfigChannel>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001c8c:	f000 f93e 	bl	8001f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c90:	4803      	ldr	r0, [pc, #12]	; (8001ca0 <MX_TIM3_Init+0xb0>)
 8001c92:	f000 fac1 	bl	8002218 <HAL_TIM_MspPostInit>

}
 8001c96:	bf00      	nop
 8001c98:	3728      	adds	r7, #40	; 0x28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200004e4 	.word	0x200004e4
 8001ca4:	40000400 	.word	0x40000400

08001ca8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cac:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <MX_USART3_UART_Init+0x58>)
 8001cae:	4a15      	ldr	r2, [pc, #84]	; (8001d04 <MX_USART3_UART_Init+0x5c>)
 8001cb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <MX_USART3_UART_Init+0x58>)
 8001cb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cba:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <MX_USART3_UART_Init+0x58>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <MX_USART3_UART_Init+0x58>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <MX_USART3_UART_Init+0x58>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <MX_USART3_UART_Init+0x58>)
 8001cce:	220c      	movs	r2, #12
 8001cd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <MX_USART3_UART_Init+0x58>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <MX_USART3_UART_Init+0x58>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <MX_USART3_UART_Init+0x58>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <MX_USART3_UART_Init+0x58>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cea:	4805      	ldr	r0, [pc, #20]	; (8001d00 <MX_USART3_UART_Init+0x58>)
 8001cec:	f004 fbec 	bl	80064c8 <HAL_UART_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001cf6:	f000 f909 	bl	8001f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000530 	.word	0x20000530
 8001d04:	40004800 	.word	0x40004800

08001d08 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001d14:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d16:	2206      	movs	r2, #6
 8001d18:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001d1a:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d20:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d28:	2202      	movs	r2, #2
 8001d2a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d4c:	f002 f919 	bl	8003f82 <HAL_PCD_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001d56:	f000 f8d9 	bl	8001f0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200005b8 	.word	0x200005b8

08001d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08c      	sub	sp, #48	; 0x30
 8001d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6a:	f107 031c 	add.w	r3, r7, #28
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	60da      	str	r2, [r3, #12]
 8001d78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7a:	4b47      	ldr	r3, [pc, #284]	; (8001e98 <MX_GPIO_Init+0x134>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a46      	ldr	r2, [pc, #280]	; (8001e98 <MX_GPIO_Init+0x134>)
 8001d80:	f043 0304 	orr.w	r3, r3, #4
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b44      	ldr	r3, [pc, #272]	; (8001e98 <MX_GPIO_Init+0x134>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	61bb      	str	r3, [r7, #24]
 8001d90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d92:	4b41      	ldr	r3, [pc, #260]	; (8001e98 <MX_GPIO_Init+0x134>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a40      	ldr	r2, [pc, #256]	; (8001e98 <MX_GPIO_Init+0x134>)
 8001d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b3e      	ldr	r3, [pc, #248]	; (8001e98 <MX_GPIO_Init+0x134>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	4b3b      	ldr	r3, [pc, #236]	; (8001e98 <MX_GPIO_Init+0x134>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a3a      	ldr	r2, [pc, #232]	; (8001e98 <MX_GPIO_Init+0x134>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b38      	ldr	r3, [pc, #224]	; (8001e98 <MX_GPIO_Init+0x134>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc2:	4b35      	ldr	r3, [pc, #212]	; (8001e98 <MX_GPIO_Init+0x134>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a34      	ldr	r2, [pc, #208]	; (8001e98 <MX_GPIO_Init+0x134>)
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b32      	ldr	r3, [pc, #200]	; (8001e98 <MX_GPIO_Init+0x134>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dda:	4b2f      	ldr	r3, [pc, #188]	; (8001e98 <MX_GPIO_Init+0x134>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a2e      	ldr	r2, [pc, #184]	; (8001e98 <MX_GPIO_Init+0x134>)
 8001de0:	f043 0308 	orr.w	r3, r3, #8
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b2c      	ldr	r3, [pc, #176]	; (8001e98 <MX_GPIO_Init+0x134>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001df2:	4b29      	ldr	r3, [pc, #164]	; (8001e98 <MX_GPIO_Init+0x134>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4a28      	ldr	r2, [pc, #160]	; (8001e98 <MX_GPIO_Init+0x134>)
 8001df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfe:	4b26      	ldr	r3, [pc, #152]	; (8001e98 <MX_GPIO_Init+0x134>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001e10:	4822      	ldr	r0, [pc, #136]	; (8001e9c <MX_GPIO_Init+0x138>)
 8001e12:	f001 faad 	bl	8003370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2140      	movs	r1, #64	; 0x40
 8001e1a:	4821      	ldr	r0, [pc, #132]	; (8001ea0 <MX_GPIO_Init+0x13c>)
 8001e1c:	f001 faa8 	bl	8003370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e26:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	4619      	mov	r1, r3
 8001e36:	481b      	ldr	r0, [pc, #108]	; (8001ea4 <MX_GPIO_Init+0x140>)
 8001e38:	f001 f8ee 	bl	8003018 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001e3c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e42:	2301      	movs	r3, #1
 8001e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4e:	f107 031c 	add.w	r3, r7, #28
 8001e52:	4619      	mov	r1, r3
 8001e54:	4811      	ldr	r0, [pc, #68]	; (8001e9c <MX_GPIO_Init+0x138>)
 8001e56:	f001 f8df 	bl	8003018 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001e5a:	2340      	movs	r3, #64	; 0x40
 8001e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e66:	2300      	movs	r3, #0
 8001e68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e6a:	f107 031c 	add.w	r3, r7, #28
 8001e6e:	4619      	mov	r1, r3
 8001e70:	480b      	ldr	r0, [pc, #44]	; (8001ea0 <MX_GPIO_Init+0x13c>)
 8001e72:	f001 f8d1 	bl	8003018 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001e76:	2380      	movs	r3, #128	; 0x80
 8001e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e82:	f107 031c 	add.w	r3, r7, #28
 8001e86:	4619      	mov	r1, r3
 8001e88:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <MX_GPIO_Init+0x13c>)
 8001e8a:	f001 f8c5 	bl	8003018 <HAL_GPIO_Init>

}
 8001e8e:	bf00      	nop
 8001e90:	3730      	adds	r7, #48	; 0x30
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40020400 	.word	0x40020400
 8001ea0:	40021800 	.word	0x40021800
 8001ea4:	40020800 	.word	0x40020800

08001ea8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	6078      	str	r0, [r7, #4]
	  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8001eb0:	4911      	ldr	r1, [pc, #68]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001eb2:	4812      	ldr	r0, [pc, #72]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001eb4:	f7ff fa4c 	bl	8001350 <BMP280_ReadTemperatureAndPressure>
	  snprintf(text, sizeof(text), "{\"temperature\":\"%.2f\"}\n", temperature);
 8001eb8:	4b10      	ldr	r3, [pc, #64]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fb63 	bl	8000588 <__aeabi_f2d>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	e9cd 2300 	strd	r2, r3, [sp]
 8001eca:	4a0d      	ldr	r2, [pc, #52]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001ecc:	2164      	movs	r1, #100	; 0x64
 8001ece:	480d      	ldr	r0, [pc, #52]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001ed0:	f005 ff60 	bl	8007d94 <sniprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)text, strlen(text), 1000);
 8001ed4:	480b      	ldr	r0, [pc, #44]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001ed6:	f7fe f99b 	bl	8000210 <strlen>
 8001eda:	4603      	mov	r3, r0
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ee2:	4908      	ldr	r1, [pc, #32]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001ee4:	4808      	ldr	r0, [pc, #32]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001ee6:	f004 fb3d 	bl	8006564 <HAL_UART_Transmit>
	  text[0] = 0;
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
}
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000ac4 	.word	0x20000ac4
 8001efc:	20000ac0 	.word	0x20000ac0
 8001f00:	0800a2c8 	.word	0x0800a2c8
 8001f04:	20000ac8 	.word	0x20000ac8
 8001f08:	20000530 	.word	0x20000530

08001f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f10:	b672      	cpsid	i
}
 8001f12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <Error_Handler+0x8>
	...

08001f18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <HAL_MspInit+0x44>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	4a0e      	ldr	r2, [pc, #56]	; (8001f5c <HAL_MspInit+0x44>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f28:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2a:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <HAL_MspInit+0x44>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	607b      	str	r3, [r7, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_MspInit+0x44>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	4a08      	ldr	r2, [pc, #32]	; (8001f5c <HAL_MspInit+0x44>)
 8001f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f40:	6453      	str	r3, [r2, #68]	; 0x44
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_MspInit+0x44>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4a:	603b      	str	r3, [r7, #0]
 8001f4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800

08001f60 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08e      	sub	sp, #56	; 0x38
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a4e      	ldr	r2, [pc, #312]	; (80020b8 <HAL_ETH_MspInit+0x158>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	f040 8096 	bne.w	80020b0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001f84:	4b4d      	ldr	r3, [pc, #308]	; (80020bc <HAL_ETH_MspInit+0x15c>)
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	4a4c      	ldr	r2, [pc, #304]	; (80020bc <HAL_ETH_MspInit+0x15c>)
 8001f8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f90:	4b4a      	ldr	r3, [pc, #296]	; (80020bc <HAL_ETH_MspInit+0x15c>)
 8001f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f98:	623b      	str	r3, [r7, #32]
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	4b47      	ldr	r3, [pc, #284]	; (80020bc <HAL_ETH_MspInit+0x15c>)
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	4a46      	ldr	r2, [pc, #280]	; (80020bc <HAL_ETH_MspInit+0x15c>)
 8001fa2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa8:	4b44      	ldr	r3, [pc, #272]	; (80020bc <HAL_ETH_MspInit+0x15c>)
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	4b41      	ldr	r3, [pc, #260]	; (80020bc <HAL_ETH_MspInit+0x15c>)
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb8:	4a40      	ldr	r2, [pc, #256]	; (80020bc <HAL_ETH_MspInit+0x15c>)
 8001fba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc0:	4b3e      	ldr	r3, [pc, #248]	; (80020bc <HAL_ETH_MspInit+0x15c>)
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fc8:	61bb      	str	r3, [r7, #24]
 8001fca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fcc:	4b3b      	ldr	r3, [pc, #236]	; (80020bc <HAL_ETH_MspInit+0x15c>)
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	4a3a      	ldr	r2, [pc, #232]	; (80020bc <HAL_ETH_MspInit+0x15c>)
 8001fd2:	f043 0304 	orr.w	r3, r3, #4
 8001fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd8:	4b38      	ldr	r3, [pc, #224]	; (80020bc <HAL_ETH_MspInit+0x15c>)
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe4:	4b35      	ldr	r3, [pc, #212]	; (80020bc <HAL_ETH_MspInit+0x15c>)
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	4a34      	ldr	r2, [pc, #208]	; (80020bc <HAL_ETH_MspInit+0x15c>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff0:	4b32      	ldr	r3, [pc, #200]	; (80020bc <HAL_ETH_MspInit+0x15c>)
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffc:	4b2f      	ldr	r3, [pc, #188]	; (80020bc <HAL_ETH_MspInit+0x15c>)
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002000:	4a2e      	ldr	r2, [pc, #184]	; (80020bc <HAL_ETH_MspInit+0x15c>)
 8002002:	f043 0302 	orr.w	r3, r3, #2
 8002006:	6313      	str	r3, [r2, #48]	; 0x30
 8002008:	4b2c      	ldr	r3, [pc, #176]	; (80020bc <HAL_ETH_MspInit+0x15c>)
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002014:	4b29      	ldr	r3, [pc, #164]	; (80020bc <HAL_ETH_MspInit+0x15c>)
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	4a28      	ldr	r2, [pc, #160]	; (80020bc <HAL_ETH_MspInit+0x15c>)
 800201a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800201e:	6313      	str	r3, [r2, #48]	; 0x30
 8002020:	4b26      	ldr	r3, [pc, #152]	; (80020bc <HAL_ETH_MspInit+0x15c>)
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800202c:	2332      	movs	r3, #50	; 0x32
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002030:	2302      	movs	r3, #2
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002038:	2303      	movs	r3, #3
 800203a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800203c:	230b      	movs	r3, #11
 800203e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002044:	4619      	mov	r1, r3
 8002046:	481e      	ldr	r0, [pc, #120]	; (80020c0 <HAL_ETH_MspInit+0x160>)
 8002048:	f000 ffe6 	bl	8003018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800204c:	2386      	movs	r3, #134	; 0x86
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002058:	2303      	movs	r3, #3
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800205c:	230b      	movs	r3, #11
 800205e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002064:	4619      	mov	r1, r3
 8002066:	4817      	ldr	r0, [pc, #92]	; (80020c4 <HAL_ETH_MspInit+0x164>)
 8002068:	f000 ffd6 	bl	8003018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800206c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207a:	2303      	movs	r3, #3
 800207c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800207e:	230b      	movs	r3, #11
 8002080:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002086:	4619      	mov	r1, r3
 8002088:	480f      	ldr	r0, [pc, #60]	; (80020c8 <HAL_ETH_MspInit+0x168>)
 800208a:	f000 ffc5 	bl	8003018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800208e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002094:	2302      	movs	r3, #2
 8002096:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209c:	2303      	movs	r3, #3
 800209e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020a0:	230b      	movs	r3, #11
 80020a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a8:	4619      	mov	r1, r3
 80020aa:	4808      	ldr	r0, [pc, #32]	; (80020cc <HAL_ETH_MspInit+0x16c>)
 80020ac:	f000 ffb4 	bl	8003018 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80020b0:	bf00      	nop
 80020b2:	3738      	adds	r7, #56	; 0x38
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40028000 	.word	0x40028000
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40020800 	.word	0x40020800
 80020c4:	40020000 	.word	0x40020000
 80020c8:	40020400 	.word	0x40020400
 80020cc:	40021800 	.word	0x40021800

080020d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b0aa      	sub	sp, #168	; 0xa8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020e8:	f107 0310 	add.w	r3, r7, #16
 80020ec:	2284      	movs	r2, #132	; 0x84
 80020ee:	2100      	movs	r1, #0
 80020f0:	4618      	mov	r0, r3
 80020f2:	f005 f9dd 	bl	80074b0 <memset>
  if(hi2c->Instance==I2C1)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a22      	ldr	r2, [pc, #136]	; (8002184 <HAL_I2C_MspInit+0xb4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d13c      	bne.n	800217a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002100:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002104:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002106:	2300      	movs	r3, #0
 8002108:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800210a:	f107 0310 	add.w	r3, r7, #16
 800210e:	4618      	mov	r0, r3
 8002110:	f002 fd5a 	bl	8004bc8 <HAL_RCCEx_PeriphCLKConfig>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800211a:	f7ff fef7 	bl	8001f0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211e:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <HAL_I2C_MspInit+0xb8>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a19      	ldr	r2, [pc, #100]	; (8002188 <HAL_I2C_MspInit+0xb8>)
 8002124:	f043 0302 	orr.w	r3, r3, #2
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b17      	ldr	r3, [pc, #92]	; (8002188 <HAL_I2C_MspInit+0xb8>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002136:	f44f 7310 	mov.w	r3, #576	; 0x240
 800213a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800213e:	2312      	movs	r3, #18
 8002140:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214a:	2303      	movs	r3, #3
 800214c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002150:	2304      	movs	r3, #4
 8002152:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002156:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800215a:	4619      	mov	r1, r3
 800215c:	480b      	ldr	r0, [pc, #44]	; (800218c <HAL_I2C_MspInit+0xbc>)
 800215e:	f000 ff5b 	bl	8003018 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <HAL_I2C_MspInit+0xb8>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	4a08      	ldr	r2, [pc, #32]	; (8002188 <HAL_I2C_MspInit+0xb8>)
 8002168:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800216c:	6413      	str	r3, [r2, #64]	; 0x40
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_I2C_MspInit+0xb8>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800217a:	bf00      	nop
 800217c:	37a8      	adds	r7, #168	; 0xa8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40005400 	.word	0x40005400
 8002188:	40023800 	.word	0x40023800
 800218c:	40020400 	.word	0x40020400

08002190 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a0:	d113      	bne.n	80021ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021a2:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <HAL_TIM_Base_MspInit+0x44>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <HAL_TIM_Base_MspInit+0x44>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6413      	str	r3, [r2, #64]	; 0x40
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_TIM_Base_MspInit+0x44>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	201c      	movs	r0, #28
 80021c0:	f000 fbcd 	bl	800295e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021c4:	201c      	movs	r0, #28
 80021c6:	f000 fbe6 	bl	8002996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800

080021d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <HAL_TIM_PWM_MspInit+0x38>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d10b      	bne.n	8002202 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <HAL_TIM_PWM_MspInit+0x3c>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	4a09      	ldr	r2, [pc, #36]	; (8002214 <HAL_TIM_PWM_MspInit+0x3c>)
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	6413      	str	r3, [r2, #64]	; 0x40
 80021f6:	4b07      	ldr	r3, [pc, #28]	; (8002214 <HAL_TIM_PWM_MspInit+0x3c>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40000400 	.word	0x40000400
 8002214:	40023800 	.word	0x40023800

08002218 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002220:	f107 030c 	add.w	r3, r7, #12
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a11      	ldr	r2, [pc, #68]	; (800227c <HAL_TIM_MspPostInit+0x64>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d11b      	bne.n	8002272 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HAL_TIM_MspPostInit+0x68>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a10      	ldr	r2, [pc, #64]	; (8002280 <HAL_TIM_MspPostInit+0x68>)
 8002240:	f043 0304 	orr.w	r3, r3, #4
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <HAL_TIM_MspPostInit+0x68>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002252:	2340      	movs	r3, #64	; 0x40
 8002254:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	2300      	movs	r3, #0
 8002260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002262:	2302      	movs	r3, #2
 8002264:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002266:	f107 030c 	add.w	r3, r7, #12
 800226a:	4619      	mov	r1, r3
 800226c:	4805      	ldr	r0, [pc, #20]	; (8002284 <HAL_TIM_MspPostInit+0x6c>)
 800226e:	f000 fed3 	bl	8003018 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002272:	bf00      	nop
 8002274:	3720      	adds	r7, #32
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40000400 	.word	0x40000400
 8002280:	40023800 	.word	0x40023800
 8002284:	40020800 	.word	0x40020800

08002288 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b0aa      	sub	sp, #168	; 0xa8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022a0:	f107 0310 	add.w	r3, r7, #16
 80022a4:	2284      	movs	r2, #132	; 0x84
 80022a6:	2100      	movs	r1, #0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f005 f901 	bl	80074b0 <memset>
  if(huart->Instance==USART3)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a22      	ldr	r2, [pc, #136]	; (800233c <HAL_UART_MspInit+0xb4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d13c      	bne.n	8002332 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80022be:	2300      	movs	r3, #0
 80022c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022c2:	f107 0310 	add.w	r3, r7, #16
 80022c6:	4618      	mov	r0, r3
 80022c8:	f002 fc7e 	bl	8004bc8 <HAL_RCCEx_PeriphCLKConfig>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80022d2:	f7ff fe1b 	bl	8001f0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80022d6:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <HAL_UART_MspInit+0xb8>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	4a19      	ldr	r2, [pc, #100]	; (8002340 <HAL_UART_MspInit+0xb8>)
 80022dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e0:	6413      	str	r3, [r2, #64]	; 0x40
 80022e2:	4b17      	ldr	r3, [pc, #92]	; (8002340 <HAL_UART_MspInit+0xb8>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ee:	4b14      	ldr	r3, [pc, #80]	; (8002340 <HAL_UART_MspInit+0xb8>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4a13      	ldr	r2, [pc, #76]	; (8002340 <HAL_UART_MspInit+0xb8>)
 80022f4:	f043 0308 	orr.w	r3, r3, #8
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
 80022fa:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HAL_UART_MspInit+0xb8>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002306:	f44f 7340 	mov.w	r3, #768	; 0x300
 800230a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002314:	2301      	movs	r3, #1
 8002316:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231a:	2303      	movs	r3, #3
 800231c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002320:	2307      	movs	r3, #7
 8002322:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002326:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800232a:	4619      	mov	r1, r3
 800232c:	4805      	ldr	r0, [pc, #20]	; (8002344 <HAL_UART_MspInit+0xbc>)
 800232e:	f000 fe73 	bl	8003018 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002332:	bf00      	nop
 8002334:	37a8      	adds	r7, #168	; 0xa8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40004800 	.word	0x40004800
 8002340:	40023800 	.word	0x40023800
 8002344:	40020c00 	.word	0x40020c00

08002348 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b0ac      	sub	sp, #176	; 0xb0
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002360:	f107 0318 	add.w	r3, r7, #24
 8002364:	2284      	movs	r2, #132	; 0x84
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f005 f8a1 	bl	80074b0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002376:	d159      	bne.n	800242c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002378:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800237c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800237e:	2300      	movs	r3, #0
 8002380:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002384:	f107 0318 	add.w	r3, r7, #24
 8002388:	4618      	mov	r0, r3
 800238a:	f002 fc1d 	bl	8004bc8 <HAL_RCCEx_PeriphCLKConfig>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002394:	f7ff fdba 	bl	8001f0c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002398:	4b26      	ldr	r3, [pc, #152]	; (8002434 <HAL_PCD_MspInit+0xec>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	4a25      	ldr	r2, [pc, #148]	; (8002434 <HAL_PCD_MspInit+0xec>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6313      	str	r3, [r2, #48]	; 0x30
 80023a4:	4b23      	ldr	r3, [pc, #140]	; (8002434 <HAL_PCD_MspInit+0xec>)
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80023b0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80023b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	2302      	movs	r3, #2
 80023ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c4:	2303      	movs	r3, #3
 80023c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80023ca:	230a      	movs	r3, #10
 80023cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023d4:	4619      	mov	r1, r3
 80023d6:	4818      	ldr	r0, [pc, #96]	; (8002438 <HAL_PCD_MspInit+0xf0>)
 80023d8:	f000 fe1e 	bl	8003018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80023dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e4:	2300      	movs	r3, #0
 80023e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023f4:	4619      	mov	r1, r3
 80023f6:	4810      	ldr	r0, [pc, #64]	; (8002438 <HAL_PCD_MspInit+0xf0>)
 80023f8:	f000 fe0e 	bl	8003018 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80023fc:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <HAL_PCD_MspInit+0xec>)
 80023fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002400:	4a0c      	ldr	r2, [pc, #48]	; (8002434 <HAL_PCD_MspInit+0xec>)
 8002402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002406:	6353      	str	r3, [r2, #52]	; 0x34
 8002408:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <HAL_PCD_MspInit+0xec>)
 800240a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4b07      	ldr	r3, [pc, #28]	; (8002434 <HAL_PCD_MspInit+0xec>)
 8002416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002418:	4a06      	ldr	r2, [pc, #24]	; (8002434 <HAL_PCD_MspInit+0xec>)
 800241a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800241e:	6453      	str	r3, [r2, #68]	; 0x44
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <HAL_PCD_MspInit+0xec>)
 8002422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800242c:	bf00      	nop
 800242e:	37b0      	adds	r7, #176	; 0xb0
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40023800 	.word	0x40023800
 8002438:	40020000 	.word	0x40020000

0800243c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002440:	e7fe      	b.n	8002440 <NMI_Handler+0x4>

08002442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002446:	e7fe      	b.n	8002446 <HardFault_Handler+0x4>

08002448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800244c:	e7fe      	b.n	800244c <MemManage_Handler+0x4>

0800244e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002452:	e7fe      	b.n	8002452 <BusFault_Handler+0x4>

08002454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002458:	e7fe      	b.n	8002458 <UsageFault_Handler+0x4>

0800245a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002488:	f000 f94a 	bl	8002720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}

08002490 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <TIM2_IRQHandler+0x10>)
 8002496:	f003 f8ae 	bl	80055f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000498 	.word	0x20000498

080024a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return 1;
 80024a8:	2301      	movs	r3, #1
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <_kill>:

int _kill(int pid, int sig)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024be:	f004 ffcd 	bl	800745c <__errno>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2216      	movs	r2, #22
 80024c6:	601a      	str	r2, [r3, #0]
  return -1;
 80024c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <_exit>:

void _exit (int status)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024dc:	f04f 31ff 	mov.w	r1, #4294967295
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff ffe7 	bl	80024b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024e6:	e7fe      	b.n	80024e6 <_exit+0x12>

080024e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	e00a      	b.n	8002510 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024fa:	f3af 8000 	nop.w
 80024fe:	4601      	mov	r1, r0
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	60ba      	str	r2, [r7, #8]
 8002506:	b2ca      	uxtb	r2, r1
 8002508:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	3301      	adds	r3, #1
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	429a      	cmp	r2, r3
 8002516:	dbf0      	blt.n	80024fa <_read+0x12>
  }

  return len;
 8002518:	687b      	ldr	r3, [r7, #4]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b086      	sub	sp, #24
 8002526:	af00      	add	r7, sp, #0
 8002528:	60f8      	str	r0, [r7, #12]
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	e009      	b.n	8002548 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	60ba      	str	r2, [r7, #8]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	3301      	adds	r3, #1
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	429a      	cmp	r2, r3
 800254e:	dbf1      	blt.n	8002534 <_write+0x12>
  }
  return len;
 8002550:	687b      	ldr	r3, [r7, #4]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <_close>:

int _close(int file)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002562:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002566:	4618      	mov	r0, r3
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002582:	605a      	str	r2, [r3, #4]
  return 0;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <_isatty>:

int _isatty(int file)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800259a:	2301      	movs	r3, #1
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025cc:	4a14      	ldr	r2, [pc, #80]	; (8002620 <_sbrk+0x5c>)
 80025ce:	4b15      	ldr	r3, [pc, #84]	; (8002624 <_sbrk+0x60>)
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025d8:	4b13      	ldr	r3, [pc, #76]	; (8002628 <_sbrk+0x64>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d102      	bne.n	80025e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025e0:	4b11      	ldr	r3, [pc, #68]	; (8002628 <_sbrk+0x64>)
 80025e2:	4a12      	ldr	r2, [pc, #72]	; (800262c <_sbrk+0x68>)
 80025e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025e6:	4b10      	ldr	r3, [pc, #64]	; (8002628 <_sbrk+0x64>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d207      	bcs.n	8002604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025f4:	f004 ff32 	bl	800745c <__errno>
 80025f8:	4603      	mov	r3, r0
 80025fa:	220c      	movs	r2, #12
 80025fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002602:	e009      	b.n	8002618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <_sbrk+0x64>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <_sbrk+0x64>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	4a05      	ldr	r2, [pc, #20]	; (8002628 <_sbrk+0x64>)
 8002614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002616:	68fb      	ldr	r3, [r7, #12]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20050000 	.word	0x20050000
 8002624:	00000400 	.word	0x00000400
 8002628:	20000b34 	.word	0x20000b34
 800262c:	20000b50 	.word	0x20000b50

08002630 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <SystemInit+0x20>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263a:	4a05      	ldr	r2, [pc, #20]	; (8002650 <SystemInit+0x20>)
 800263c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002640:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800268c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002658:	480d      	ldr	r0, [pc, #52]	; (8002690 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800265a:	490e      	ldr	r1, [pc, #56]	; (8002694 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800265c:	4a0e      	ldr	r2, [pc, #56]	; (8002698 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800265e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002660:	e002      	b.n	8002668 <LoopCopyDataInit>

08002662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002666:	3304      	adds	r3, #4

08002668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800266a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800266c:	d3f9      	bcc.n	8002662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800266e:	4a0b      	ldr	r2, [pc, #44]	; (800269c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002670:	4c0b      	ldr	r4, [pc, #44]	; (80026a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002674:	e001      	b.n	800267a <LoopFillZerobss>

08002676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002678:	3204      	adds	r2, #4

0800267a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800267a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800267c:	d3fb      	bcc.n	8002676 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800267e:	f7ff ffd7 	bl	8002630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002682:	f004 fef1 	bl	8007468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002686:	f7ff f94d 	bl	8001924 <main>
  bx  lr    
 800268a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800268c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002694:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002698:	0800a6e4 	.word	0x0800a6e4
  ldr r2, =_sbss
 800269c:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 80026a0:	20000b4c 	.word	0x20000b4c

080026a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026a4:	e7fe      	b.n	80026a4 <ADC_IRQHandler>

080026a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026aa:	2003      	movs	r0, #3
 80026ac:	f000 f94c 	bl	8002948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026b0:	2000      	movs	r0, #0
 80026b2:	f000 f805 	bl	80026c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026b6:	f7ff fc2f 	bl	8001f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_InitTick+0x54>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b12      	ldr	r3, [pc, #72]	; (8002718 <HAL_InitTick+0x58>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	4619      	mov	r1, r3
 80026d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026da:	fbb2 f3f3 	udiv	r3, r2, r3
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 f967 	bl	80029b2 <HAL_SYSTICK_Config>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e00e      	b.n	800270c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b0f      	cmp	r3, #15
 80026f2:	d80a      	bhi.n	800270a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f4:	2200      	movs	r2, #0
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	f04f 30ff 	mov.w	r0, #4294967295
 80026fc:	f000 f92f 	bl	800295e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002700:	4a06      	ldr	r2, [pc, #24]	; (800271c <HAL_InitTick+0x5c>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	e000      	b.n	800270c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000000 	.word	0x20000000
 8002718:	20000008 	.word	0x20000008
 800271c:	20000004 	.word	0x20000004

08002720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_IncTick+0x20>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_IncTick+0x24>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4413      	add	r3, r2
 8002730:	4a04      	ldr	r2, [pc, #16]	; (8002744 <HAL_IncTick+0x24>)
 8002732:	6013      	str	r3, [r2, #0]
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000008 	.word	0x20000008
 8002744:	20000b38 	.word	0x20000b38

08002748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return uwTick;
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <HAL_GetTick+0x14>)
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000b38 	.word	0x20000b38

08002760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002768:	f7ff ffee 	bl	8002748 <HAL_GetTick>
 800276c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d005      	beq.n	8002786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800277a:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <HAL_Delay+0x44>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4413      	add	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002786:	bf00      	nop
 8002788:	f7ff ffde 	bl	8002748 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	429a      	cmp	r2, r3
 8002796:	d8f7      	bhi.n	8002788 <HAL_Delay+0x28>
  {
  }
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000008 	.word	0x20000008

080027a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <__NVIC_SetPriorityGrouping+0x40>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027c4:	4013      	ands	r3, r2
 80027c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <__NVIC_SetPriorityGrouping+0x44>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d6:	4a04      	ldr	r2, [pc, #16]	; (80027e8 <__NVIC_SetPriorityGrouping+0x40>)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	60d3      	str	r3, [r2, #12]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000ed00 	.word	0xe000ed00
 80027ec:	05fa0000 	.word	0x05fa0000

080027f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f4:	4b04      	ldr	r3, [pc, #16]	; (8002808 <__NVIC_GetPriorityGrouping+0x18>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	0a1b      	lsrs	r3, r3, #8
 80027fa:	f003 0307 	and.w	r3, r3, #7
}
 80027fe:	4618      	mov	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	2b00      	cmp	r3, #0
 800281c:	db0b      	blt.n	8002836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	f003 021f 	and.w	r2, r3, #31
 8002824:	4907      	ldr	r1, [pc, #28]	; (8002844 <__NVIC_EnableIRQ+0x38>)
 8002826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	2001      	movs	r0, #1
 800282e:	fa00 f202 	lsl.w	r2, r0, r2
 8002832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	e000e100 	.word	0xe000e100

08002848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	6039      	str	r1, [r7, #0]
 8002852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002858:	2b00      	cmp	r3, #0
 800285a:	db0a      	blt.n	8002872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	b2da      	uxtb	r2, r3
 8002860:	490c      	ldr	r1, [pc, #48]	; (8002894 <__NVIC_SetPriority+0x4c>)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	0112      	lsls	r2, r2, #4
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	440b      	add	r3, r1
 800286c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002870:	e00a      	b.n	8002888 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	b2da      	uxtb	r2, r3
 8002876:	4908      	ldr	r1, [pc, #32]	; (8002898 <__NVIC_SetPriority+0x50>)
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	3b04      	subs	r3, #4
 8002880:	0112      	lsls	r2, r2, #4
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	440b      	add	r3, r1
 8002886:	761a      	strb	r2, [r3, #24]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000e100 	.word	0xe000e100
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800289c:	b480      	push	{r7}
 800289e:	b089      	sub	sp, #36	; 0x24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f1c3 0307 	rsb	r3, r3, #7
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	bf28      	it	cs
 80028ba:	2304      	movcs	r3, #4
 80028bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3304      	adds	r3, #4
 80028c2:	2b06      	cmp	r3, #6
 80028c4:	d902      	bls.n	80028cc <NVIC_EncodePriority+0x30>
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3b03      	subs	r3, #3
 80028ca:	e000      	b.n	80028ce <NVIC_EncodePriority+0x32>
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d0:	f04f 32ff 	mov.w	r2, #4294967295
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43da      	mvns	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	401a      	ands	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e4:	f04f 31ff 	mov.w	r1, #4294967295
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	fa01 f303 	lsl.w	r3, r1, r3
 80028ee:	43d9      	mvns	r1, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f4:	4313      	orrs	r3, r2
         );
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3724      	adds	r7, #36	; 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3b01      	subs	r3, #1
 8002910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002914:	d301      	bcc.n	800291a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002916:	2301      	movs	r3, #1
 8002918:	e00f      	b.n	800293a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800291a:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <SysTick_Config+0x40>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3b01      	subs	r3, #1
 8002920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002922:	210f      	movs	r1, #15
 8002924:	f04f 30ff 	mov.w	r0, #4294967295
 8002928:	f7ff ff8e 	bl	8002848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <SysTick_Config+0x40>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002932:	4b04      	ldr	r3, [pc, #16]	; (8002944 <SysTick_Config+0x40>)
 8002934:	2207      	movs	r2, #7
 8002936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	e000e010 	.word	0xe000e010

08002948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff ff29 	bl	80027a8 <__NVIC_SetPriorityGrouping>
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800295e:	b580      	push	{r7, lr}
 8002960:	b086      	sub	sp, #24
 8002962:	af00      	add	r7, sp, #0
 8002964:	4603      	mov	r3, r0
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002970:	f7ff ff3e 	bl	80027f0 <__NVIC_GetPriorityGrouping>
 8002974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	6978      	ldr	r0, [r7, #20]
 800297c:	f7ff ff8e 	bl	800289c <NVIC_EncodePriority>
 8002980:	4602      	mov	r2, r0
 8002982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ff5d 	bl	8002848 <__NVIC_SetPriority>
}
 800298e:	bf00      	nop
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	4603      	mov	r3, r0
 800299e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff31 	bl	800280c <__NVIC_EnableIRQ>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff ffa2 	bl	8002904 <SysTick_Config>
 80029c0:	4603      	mov	r3, r0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e06a      	b.n	8002ab4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d106      	bne.n	80029f6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2223      	movs	r2, #35	; 0x23
 80029ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff fab5 	bl	8001f60 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f6:	4b31      	ldr	r3, [pc, #196]	; (8002abc <HAL_ETH_Init+0xf0>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	4a30      	ldr	r2, [pc, #192]	; (8002abc <HAL_ETH_Init+0xf0>)
 80029fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a00:	6453      	str	r3, [r2, #68]	; 0x44
 8002a02:	4b2e      	ldr	r3, [pc, #184]	; (8002abc <HAL_ETH_Init+0xf0>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002a0e:	4b2c      	ldr	r3, [pc, #176]	; (8002ac0 <HAL_ETH_Init+0xf4>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4a2b      	ldr	r2, [pc, #172]	; (8002ac0 <HAL_ETH_Init+0xf4>)
 8002a14:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a18:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002a1a:	4b29      	ldr	r3, [pc, #164]	; (8002ac0 <HAL_ETH_Init+0xf4>)
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	4927      	ldr	r1, [pc, #156]	; (8002ac0 <HAL_ETH_Init+0xf4>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002a28:	4b25      	ldr	r3, [pc, #148]	; (8002ac0 <HAL_ETH_Init+0xf4>)
 8002a2a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a42:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a44:	f7ff fe80 	bl	8002748 <HAL_GetTick>
 8002a48:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002a4a:	e011      	b.n	8002a70 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002a4c:	f7ff fe7c 	bl	8002748 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a5a:	d909      	bls.n	8002a70 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2204      	movs	r2, #4
 8002a60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	22e0      	movs	r2, #224	; 0xe0
 8002a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e021      	b.n	8002ab4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1e4      	bne.n	8002a4c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f958 	bl	8002d38 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f9ff 	bl	8002e8c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fa55 	bl	8002f3e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f9bd 	bl	8002e1c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2210      	movs	r2, #16
 8002aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40013800 	.word	0x40013800

08002ac4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	4b51      	ldr	r3, [pc, #324]	; (8002c20 <ETH_SetMACConfig+0x15c>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	7c1b      	ldrb	r3, [r3, #16]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d102      	bne.n	8002aec <ETH_SetMACConfig+0x28>
 8002ae6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002aea:	e000      	b.n	8002aee <ETH_SetMACConfig+0x2a>
 8002aec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	7c5b      	ldrb	r3, [r3, #17]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d102      	bne.n	8002afc <ETH_SetMACConfig+0x38>
 8002af6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002afa:	e000      	b.n	8002afe <ETH_SetMACConfig+0x3a>
 8002afc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002afe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002b04:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	7fdb      	ldrb	r3, [r3, #31]
 8002b0a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002b0c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002b12:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	7f92      	ldrb	r2, [r2, #30]
 8002b18:	2a00      	cmp	r2, #0
 8002b1a:	d102      	bne.n	8002b22 <ETH_SetMACConfig+0x5e>
 8002b1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b20:	e000      	b.n	8002b24 <ETH_SetMACConfig+0x60>
 8002b22:	2200      	movs	r2, #0
                        macconf->Speed |
 8002b24:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	7f1b      	ldrb	r3, [r3, #28]
 8002b2a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002b2c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002b32:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	791b      	ldrb	r3, [r3, #4]
 8002b38:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002b3a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002b42:	2a00      	cmp	r2, #0
 8002b44:	d102      	bne.n	8002b4c <ETH_SetMACConfig+0x88>
 8002b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b4a:	e000      	b.n	8002b4e <ETH_SetMACConfig+0x8a>
 8002b4c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002b4e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	7bdb      	ldrb	r3, [r3, #15]
 8002b54:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002b56:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002b5c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b64:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002b66:	4313      	orrs	r3, r2
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b7e:	2001      	movs	r0, #1
 8002b80:	f7ff fdee 	bl	8002760 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002baa:	2a00      	cmp	r2, #0
 8002bac:	d101      	bne.n	8002bb2 <ETH_SetMACConfig+0xee>
 8002bae:	2280      	movs	r2, #128	; 0x80
 8002bb0:	e000      	b.n	8002bb4 <ETH_SetMACConfig+0xf0>
 8002bb2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002bb4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002bba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002bc2:	2a01      	cmp	r2, #1
 8002bc4:	d101      	bne.n	8002bca <ETH_SetMACConfig+0x106>
 8002bc6:	2208      	movs	r2, #8
 8002bc8:	e000      	b.n	8002bcc <ETH_SetMACConfig+0x108>
 8002bca:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002bcc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002bd4:	2a01      	cmp	r2, #1
 8002bd6:	d101      	bne.n	8002bdc <ETH_SetMACConfig+0x118>
 8002bd8:	2204      	movs	r2, #4
 8002bda:	e000      	b.n	8002bde <ETH_SetMACConfig+0x11a>
 8002bdc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002bde:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002be6:	2a01      	cmp	r2, #1
 8002be8:	d101      	bne.n	8002bee <ETH_SetMACConfig+0x12a>
 8002bea:	2202      	movs	r2, #2
 8002bec:	e000      	b.n	8002bf0 <ETH_SetMACConfig+0x12c>
 8002bee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c08:	2001      	movs	r0, #1
 8002c0a:	f7ff fda9 	bl	8002760 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	619a      	str	r2, [r3, #24]
}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	ff20810f 	.word	0xff20810f

08002c24 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4b3d      	ldr	r3, [pc, #244]	; (8002d34 <ETH_SetDMAConfig+0x110>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	7b1b      	ldrb	r3, [r3, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d102      	bne.n	8002c50 <ETH_SetDMAConfig+0x2c>
 8002c4a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c4e:	e000      	b.n	8002c52 <ETH_SetDMAConfig+0x2e>
 8002c50:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	7b5b      	ldrb	r3, [r3, #13]
 8002c56:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c58:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	7f52      	ldrb	r2, [r2, #29]
 8002c5e:	2a00      	cmp	r2, #0
 8002c60:	d102      	bne.n	8002c68 <ETH_SetDMAConfig+0x44>
 8002c62:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c66:	e000      	b.n	8002c6a <ETH_SetDMAConfig+0x46>
 8002c68:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002c6a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	7b9b      	ldrb	r3, [r3, #14]
 8002c70:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002c72:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002c78:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	7f1b      	ldrb	r3, [r3, #28]
 8002c7e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002c80:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	7f9b      	ldrb	r3, [r3, #30]
 8002c86:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002c88:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c8e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c96:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ca8:	461a      	mov	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cba:	2001      	movs	r0, #1
 8002cbc:	f7ff fd50 	bl	8002760 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cc8:	461a      	mov	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	791b      	ldrb	r3, [r3, #4]
 8002cd2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002cd8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002cde:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ce4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cec:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002cee:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002cf6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002cfc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d0a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d18:	2001      	movs	r0, #1
 8002d1a:	f7ff fd21 	bl	8002760 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d26:	461a      	mov	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6013      	str	r3, [r2, #0]
}
 8002d2c:	bf00      	nop
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	f8de3f23 	.word	0xf8de3f23

08002d38 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b0a6      	sub	sp, #152	; 0x98
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002d40:	2301      	movs	r3, #1
 8002d42:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002d46:	2301      	movs	r3, #1
 8002d48:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002d62:	2301      	movs	r3, #1
 8002d64:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002d74:	2300      	movs	r3, #0
 8002d76:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002d82:	2300      	movs	r3, #0
 8002d84:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002d94:	2300      	movs	r3, #0
 8002d96:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002d9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d9e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002da0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002da4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002da6:	2300      	movs	r3, #0
 8002da8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002dac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002db0:	4619      	mov	r1, r3
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff fe86 	bl	8002ac4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002db8:	2301      	movs	r3, #1
 8002dba:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002dde:	2301      	movs	r3, #1
 8002de0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002de4:	2301      	movs	r3, #1
 8002de6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002de8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dec:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002dee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002df2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002df4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002df8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002e04:	2300      	movs	r3, #0
 8002e06:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002e08:	f107 0308 	add.w	r3, r7, #8
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7ff ff08 	bl	8002c24 <ETH_SetDMAConfig>
}
 8002e14:	bf00      	nop
 8002e16:	3798      	adds	r7, #152	; 0x98
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3305      	adds	r3, #5
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	3204      	adds	r2, #4
 8002e34:	7812      	ldrb	r2, [r2, #0]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <ETH_MACAddressConfig+0x68>)
 8002e3e:	4413      	add	r3, r2
 8002e40:	461a      	mov	r2, r3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3303      	adds	r3, #3
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	061a      	lsls	r2, r3, #24
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3302      	adds	r3, #2
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	041b      	lsls	r3, r3, #16
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	021b      	lsls	r3, r3, #8
 8002e60:	4313      	orrs	r3, r2
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	7812      	ldrb	r2, [r2, #0]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <ETH_MACAddressConfig+0x6c>)
 8002e6e:	4413      	add	r3, r2
 8002e70:	461a      	mov	r2, r3
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	6013      	str	r3, [r2, #0]
}
 8002e76:	bf00      	nop
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40028040 	.word	0x40028040
 8002e88:	40028044 	.word	0x40028044

08002e8c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	e03e      	b.n	8002f18 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68d9      	ldr	r1, [r3, #12]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	440b      	add	r3, r1
 8002eaa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	3206      	adds	r2, #6
 8002ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d80c      	bhi.n	8002efc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68d9      	ldr	r1, [r3, #12]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	440b      	add	r3, r1
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	60da      	str	r2, [r3, #12]
 8002efa:	e004      	b.n	8002f06 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	461a      	mov	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	3301      	adds	r3, #1
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	d9bd      	bls.n	8002e9a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f30:	611a      	str	r2, [r3, #16]
}
 8002f32:	bf00      	nop
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b085      	sub	sp, #20
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	e046      	b.n	8002fda <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6919      	ldr	r1, [r3, #16]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	440b      	add	r3, r1
 8002f5c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2200      	movs	r2, #0
 8002f68:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2200      	movs	r2, #0
 8002f74:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f88:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002f90:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	3212      	adds	r2, #18
 8002fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d80c      	bhi.n	8002fca <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6919      	ldr	r1, [r3, #16]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	440b      	add	r3, r1
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	60da      	str	r2, [r3, #12]
 8002fc8:	e004      	b.n	8002fd4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d9b5      	bls.n	8002f4c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691a      	ldr	r2, [r3, #16]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800300a:	60da      	str	r2, [r3, #12]
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003018:	b480      	push	{r7}
 800301a:	b089      	sub	sp, #36	; 0x24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800302a:	2300      	movs	r3, #0
 800302c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800302e:	2300      	movs	r3, #0
 8003030:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
 8003036:	e175      	b.n	8003324 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003038:	2201      	movs	r2, #1
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4013      	ands	r3, r2
 800304a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	429a      	cmp	r2, r3
 8003052:	f040 8164 	bne.w	800331e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	2b01      	cmp	r3, #1
 8003060:	d005      	beq.n	800306e <HAL_GPIO_Init+0x56>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d130      	bne.n	80030d0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	2203      	movs	r2, #3
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4013      	ands	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4313      	orrs	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030a4:	2201      	movs	r2, #1
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	f003 0201 	and.w	r2, r3, #1
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d017      	beq.n	800310c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	2203      	movs	r2, #3
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4013      	ands	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4313      	orrs	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d123      	bne.n	8003160 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	08da      	lsrs	r2, r3, #3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3208      	adds	r2, #8
 8003120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	220f      	movs	r2, #15
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4313      	orrs	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	08da      	lsrs	r2, r3, #3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3208      	adds	r2, #8
 800315a:	69b9      	ldr	r1, [r7, #24]
 800315c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	2203      	movs	r2, #3
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 0203 	and.w	r2, r3, #3
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80be 	beq.w	800331e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a2:	4b66      	ldr	r3, [pc, #408]	; (800333c <HAL_GPIO_Init+0x324>)
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	4a65      	ldr	r2, [pc, #404]	; (800333c <HAL_GPIO_Init+0x324>)
 80031a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031ac:	6453      	str	r3, [r2, #68]	; 0x44
 80031ae:	4b63      	ldr	r3, [pc, #396]	; (800333c <HAL_GPIO_Init+0x324>)
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031ba:	4a61      	ldr	r2, [pc, #388]	; (8003340 <HAL_GPIO_Init+0x328>)
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	089b      	lsrs	r3, r3, #2
 80031c0:	3302      	adds	r3, #2
 80031c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	220f      	movs	r2, #15
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a58      	ldr	r2, [pc, #352]	; (8003344 <HAL_GPIO_Init+0x32c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d037      	beq.n	8003256 <HAL_GPIO_Init+0x23e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a57      	ldr	r2, [pc, #348]	; (8003348 <HAL_GPIO_Init+0x330>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d031      	beq.n	8003252 <HAL_GPIO_Init+0x23a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a56      	ldr	r2, [pc, #344]	; (800334c <HAL_GPIO_Init+0x334>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d02b      	beq.n	800324e <HAL_GPIO_Init+0x236>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a55      	ldr	r2, [pc, #340]	; (8003350 <HAL_GPIO_Init+0x338>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d025      	beq.n	800324a <HAL_GPIO_Init+0x232>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a54      	ldr	r2, [pc, #336]	; (8003354 <HAL_GPIO_Init+0x33c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d01f      	beq.n	8003246 <HAL_GPIO_Init+0x22e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a53      	ldr	r2, [pc, #332]	; (8003358 <HAL_GPIO_Init+0x340>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d019      	beq.n	8003242 <HAL_GPIO_Init+0x22a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a52      	ldr	r2, [pc, #328]	; (800335c <HAL_GPIO_Init+0x344>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d013      	beq.n	800323e <HAL_GPIO_Init+0x226>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a51      	ldr	r2, [pc, #324]	; (8003360 <HAL_GPIO_Init+0x348>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d00d      	beq.n	800323a <HAL_GPIO_Init+0x222>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a50      	ldr	r2, [pc, #320]	; (8003364 <HAL_GPIO_Init+0x34c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d007      	beq.n	8003236 <HAL_GPIO_Init+0x21e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a4f      	ldr	r2, [pc, #316]	; (8003368 <HAL_GPIO_Init+0x350>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d101      	bne.n	8003232 <HAL_GPIO_Init+0x21a>
 800322e:	2309      	movs	r3, #9
 8003230:	e012      	b.n	8003258 <HAL_GPIO_Init+0x240>
 8003232:	230a      	movs	r3, #10
 8003234:	e010      	b.n	8003258 <HAL_GPIO_Init+0x240>
 8003236:	2308      	movs	r3, #8
 8003238:	e00e      	b.n	8003258 <HAL_GPIO_Init+0x240>
 800323a:	2307      	movs	r3, #7
 800323c:	e00c      	b.n	8003258 <HAL_GPIO_Init+0x240>
 800323e:	2306      	movs	r3, #6
 8003240:	e00a      	b.n	8003258 <HAL_GPIO_Init+0x240>
 8003242:	2305      	movs	r3, #5
 8003244:	e008      	b.n	8003258 <HAL_GPIO_Init+0x240>
 8003246:	2304      	movs	r3, #4
 8003248:	e006      	b.n	8003258 <HAL_GPIO_Init+0x240>
 800324a:	2303      	movs	r3, #3
 800324c:	e004      	b.n	8003258 <HAL_GPIO_Init+0x240>
 800324e:	2302      	movs	r3, #2
 8003250:	e002      	b.n	8003258 <HAL_GPIO_Init+0x240>
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <HAL_GPIO_Init+0x240>
 8003256:	2300      	movs	r3, #0
 8003258:	69fa      	ldr	r2, [r7, #28]
 800325a:	f002 0203 	and.w	r2, r2, #3
 800325e:	0092      	lsls	r2, r2, #2
 8003260:	4093      	lsls	r3, r2
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4313      	orrs	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003268:	4935      	ldr	r1, [pc, #212]	; (8003340 <HAL_GPIO_Init+0x328>)
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	089b      	lsrs	r3, r3, #2
 800326e:	3302      	adds	r3, #2
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003276:	4b3d      	ldr	r3, [pc, #244]	; (800336c <HAL_GPIO_Init+0x354>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	43db      	mvns	r3, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4013      	ands	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800329a:	4a34      	ldr	r2, [pc, #208]	; (800336c <HAL_GPIO_Init+0x354>)
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032a0:	4b32      	ldr	r3, [pc, #200]	; (800336c <HAL_GPIO_Init+0x354>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032c4:	4a29      	ldr	r2, [pc, #164]	; (800336c <HAL_GPIO_Init+0x354>)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032ca:	4b28      	ldr	r3, [pc, #160]	; (800336c <HAL_GPIO_Init+0x354>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	43db      	mvns	r3, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4013      	ands	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032ee:	4a1f      	ldr	r2, [pc, #124]	; (800336c <HAL_GPIO_Init+0x354>)
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032f4:	4b1d      	ldr	r3, [pc, #116]	; (800336c <HAL_GPIO_Init+0x354>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	43db      	mvns	r3, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003318:	4a14      	ldr	r2, [pc, #80]	; (800336c <HAL_GPIO_Init+0x354>)
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	3301      	adds	r3, #1
 8003322:	61fb      	str	r3, [r7, #28]
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	2b0f      	cmp	r3, #15
 8003328:	f67f ae86 	bls.w	8003038 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800332c:	bf00      	nop
 800332e:	bf00      	nop
 8003330:	3724      	adds	r7, #36	; 0x24
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40023800 	.word	0x40023800
 8003340:	40013800 	.word	0x40013800
 8003344:	40020000 	.word	0x40020000
 8003348:	40020400 	.word	0x40020400
 800334c:	40020800 	.word	0x40020800
 8003350:	40020c00 	.word	0x40020c00
 8003354:	40021000 	.word	0x40021000
 8003358:	40021400 	.word	0x40021400
 800335c:	40021800 	.word	0x40021800
 8003360:	40021c00 	.word	0x40021c00
 8003364:	40022000 	.word	0x40022000
 8003368:	40022400 	.word	0x40022400
 800336c:	40013c00 	.word	0x40013c00

08003370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	807b      	strh	r3, [r7, #2]
 800337c:	4613      	mov	r3, r2
 800337e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003380:	787b      	ldrb	r3, [r7, #1]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003386:	887a      	ldrh	r2, [r7, #2]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800338c:	e003      	b.n	8003396 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800338e:	887b      	ldrh	r3, [r7, #2]
 8003390:	041a      	lsls	r2, r3, #16
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	619a      	str	r2, [r3, #24]
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
	...

080033a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e07f      	b.n	80034b6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7fe fe80 	bl	80020d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2224      	movs	r2, #36	; 0x24
 80033d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0201 	bic.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003404:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d107      	bne.n	800341e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	e006      	b.n	800342c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800342a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b02      	cmp	r3, #2
 8003432:	d104      	bne.n	800343e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800343c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6859      	ldr	r1, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <HAL_I2C_Init+0x11c>)
 800344a:	430b      	orrs	r3, r1
 800344c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800345c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691a      	ldr	r2, [r3, #16]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	69d9      	ldr	r1, [r3, #28]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a1a      	ldr	r2, [r3, #32]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	02008000 	.word	0x02008000

080034c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b088      	sub	sp, #32
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	4608      	mov	r0, r1
 80034ce:	4611      	mov	r1, r2
 80034d0:	461a      	mov	r2, r3
 80034d2:	4603      	mov	r3, r0
 80034d4:	817b      	strh	r3, [r7, #10]
 80034d6:	460b      	mov	r3, r1
 80034d8:	813b      	strh	r3, [r7, #8]
 80034da:	4613      	mov	r3, r2
 80034dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	f040 80f9 	bne.w	80036de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <HAL_I2C_Mem_Write+0x34>
 80034f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d105      	bne.n	8003504 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0ed      	b.n	80036e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800350a:	2b01      	cmp	r3, #1
 800350c:	d101      	bne.n	8003512 <HAL_I2C_Mem_Write+0x4e>
 800350e:	2302      	movs	r3, #2
 8003510:	e0e6      	b.n	80036e0 <HAL_I2C_Mem_Write+0x21c>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800351a:	f7ff f915 	bl	8002748 <HAL_GetTick>
 800351e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	2319      	movs	r3, #25
 8003526:	2201      	movs	r2, #1
 8003528:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 fac3 	bl	8003ab8 <I2C_WaitOnFlagUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e0d1      	b.n	80036e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2221      	movs	r2, #33	; 0x21
 8003540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2240      	movs	r2, #64	; 0x40
 8003548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a3a      	ldr	r2, [r7, #32]
 8003556:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800355c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003564:	88f8      	ldrh	r0, [r7, #6]
 8003566:	893a      	ldrh	r2, [r7, #8]
 8003568:	8979      	ldrh	r1, [r7, #10]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	9301      	str	r3, [sp, #4]
 800356e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	4603      	mov	r3, r0
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 f9d3 	bl	8003920 <I2C_RequestMemoryWrite>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0a9      	b.n	80036e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003590:	b29b      	uxth	r3, r3
 8003592:	2bff      	cmp	r3, #255	; 0xff
 8003594:	d90e      	bls.n	80035b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	22ff      	movs	r2, #255	; 0xff
 800359a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	8979      	ldrh	r1, [r7, #10]
 80035a4:	2300      	movs	r3, #0
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 fc1f 	bl	8003df0 <I2C_TransferConfig>
 80035b2:	e00f      	b.n	80035d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	8979      	ldrh	r1, [r7, #10]
 80035c6:	2300      	movs	r3, #0
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 fc0e 	bl	8003df0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 faad 	bl	8003b38 <I2C_WaitOnTXISFlagUntilTimeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e07b      	b.n	80036e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	781a      	ldrb	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361c:	b29b      	uxth	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d034      	beq.n	800368c <HAL_I2C_Mem_Write+0x1c8>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003626:	2b00      	cmp	r3, #0
 8003628:	d130      	bne.n	800368c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003630:	2200      	movs	r2, #0
 8003632:	2180      	movs	r1, #128	; 0x80
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 fa3f 	bl	8003ab8 <I2C_WaitOnFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e04d      	b.n	80036e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003648:	b29b      	uxth	r3, r3
 800364a:	2bff      	cmp	r3, #255	; 0xff
 800364c:	d90e      	bls.n	800366c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	22ff      	movs	r2, #255	; 0xff
 8003652:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003658:	b2da      	uxtb	r2, r3
 800365a:	8979      	ldrh	r1, [r7, #10]
 800365c:	2300      	movs	r3, #0
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 fbc3 	bl	8003df0 <I2C_TransferConfig>
 800366a:	e00f      	b.n	800368c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367a:	b2da      	uxtb	r2, r3
 800367c:	8979      	ldrh	r1, [r7, #10]
 800367e:	2300      	movs	r3, #0
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 fbb2 	bl	8003df0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003690:	b29b      	uxth	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d19e      	bne.n	80035d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 fa8c 	bl	8003bb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e01a      	b.n	80036e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2220      	movs	r2, #32
 80036b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6859      	ldr	r1, [r3, #4]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <HAL_I2C_Mem_Write+0x224>)
 80036be:	400b      	ands	r3, r1
 80036c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	e000      	b.n	80036e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80036de:	2302      	movs	r3, #2
  }
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	fe00e800 	.word	0xfe00e800

080036ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	4608      	mov	r0, r1
 80036f6:	4611      	mov	r1, r2
 80036f8:	461a      	mov	r2, r3
 80036fa:	4603      	mov	r3, r0
 80036fc:	817b      	strh	r3, [r7, #10]
 80036fe:	460b      	mov	r3, r1
 8003700:	813b      	strh	r3, [r7, #8]
 8003702:	4613      	mov	r3, r2
 8003704:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b20      	cmp	r3, #32
 8003710:	f040 80fd 	bne.w	800390e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <HAL_I2C_Mem_Read+0x34>
 800371a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800371c:	2b00      	cmp	r3, #0
 800371e:	d105      	bne.n	800372c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003726:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0f1      	b.n	8003910 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_I2C_Mem_Read+0x4e>
 8003736:	2302      	movs	r3, #2
 8003738:	e0ea      	b.n	8003910 <HAL_I2C_Mem_Read+0x224>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003742:	f7ff f801 	bl	8002748 <HAL_GetTick>
 8003746:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	2319      	movs	r3, #25
 800374e:	2201      	movs	r2, #1
 8003750:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f9af 	bl	8003ab8 <I2C_WaitOnFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0d5      	b.n	8003910 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2222      	movs	r2, #34	; 0x22
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2240      	movs	r2, #64	; 0x40
 8003770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a3a      	ldr	r2, [r7, #32]
 800377e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003784:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800378c:	88f8      	ldrh	r0, [r7, #6]
 800378e:	893a      	ldrh	r2, [r7, #8]
 8003790:	8979      	ldrh	r1, [r7, #10]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	9301      	str	r3, [sp, #4]
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	4603      	mov	r3, r0
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 f913 	bl	80039c8 <I2C_RequestMemoryRead>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0ad      	b.n	8003910 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2bff      	cmp	r3, #255	; 0xff
 80037bc:	d90e      	bls.n	80037dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	22ff      	movs	r2, #255	; 0xff
 80037c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	8979      	ldrh	r1, [r7, #10]
 80037cc:	4b52      	ldr	r3, [pc, #328]	; (8003918 <HAL_I2C_Mem_Read+0x22c>)
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 fb0b 	bl	8003df0 <I2C_TransferConfig>
 80037da:	e00f      	b.n	80037fc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	8979      	ldrh	r1, [r7, #10]
 80037ee:	4b4a      	ldr	r3, [pc, #296]	; (8003918 <HAL_I2C_Mem_Read+0x22c>)
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 fafa 	bl	8003df0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003802:	2200      	movs	r2, #0
 8003804:	2104      	movs	r1, #4
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f956 	bl	8003ab8 <I2C_WaitOnFlagUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e07c      	b.n	8003910 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003832:	3b01      	subs	r3, #1
 8003834:	b29a      	uxth	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d034      	beq.n	80038bc <HAL_I2C_Mem_Read+0x1d0>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003856:	2b00      	cmp	r3, #0
 8003858:	d130      	bne.n	80038bc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003860:	2200      	movs	r2, #0
 8003862:	2180      	movs	r1, #128	; 0x80
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 f927 	bl	8003ab8 <I2C_WaitOnFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e04d      	b.n	8003910 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003878:	b29b      	uxth	r3, r3
 800387a:	2bff      	cmp	r3, #255	; 0xff
 800387c:	d90e      	bls.n	800389c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	22ff      	movs	r2, #255	; 0xff
 8003882:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003888:	b2da      	uxtb	r2, r3
 800388a:	8979      	ldrh	r1, [r7, #10]
 800388c:	2300      	movs	r3, #0
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 faab 	bl	8003df0 <I2C_TransferConfig>
 800389a:	e00f      	b.n	80038bc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	8979      	ldrh	r1, [r7, #10]
 80038ae:	2300      	movs	r3, #0
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 fa9a 	bl	8003df0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d19a      	bne.n	80037fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 f974 	bl	8003bb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e01a      	b.n	8003910 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2220      	movs	r2, #32
 80038e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6859      	ldr	r1, [r3, #4]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	4b0b      	ldr	r3, [pc, #44]	; (800391c <HAL_I2C_Mem_Read+0x230>)
 80038ee:	400b      	ands	r3, r1
 80038f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	e000      	b.n	8003910 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800390e:	2302      	movs	r3, #2
  }
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	80002400 	.word	0x80002400
 800391c:	fe00e800 	.word	0xfe00e800

08003920 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af02      	add	r7, sp, #8
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	4608      	mov	r0, r1
 800392a:	4611      	mov	r1, r2
 800392c:	461a      	mov	r2, r3
 800392e:	4603      	mov	r3, r0
 8003930:	817b      	strh	r3, [r7, #10]
 8003932:	460b      	mov	r3, r1
 8003934:	813b      	strh	r3, [r7, #8]
 8003936:	4613      	mov	r3, r2
 8003938:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	b2da      	uxtb	r2, r3
 800393e:	8979      	ldrh	r1, [r7, #10]
 8003940:	4b20      	ldr	r3, [pc, #128]	; (80039c4 <I2C_RequestMemoryWrite+0xa4>)
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 fa51 	bl	8003df0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800394e:	69fa      	ldr	r2, [r7, #28]
 8003950:	69b9      	ldr	r1, [r7, #24]
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f8f0 	bl	8003b38 <I2C_WaitOnTXISFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e02c      	b.n	80039bc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003962:	88fb      	ldrh	r3, [r7, #6]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d105      	bne.n	8003974 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003968:	893b      	ldrh	r3, [r7, #8]
 800396a:	b2da      	uxtb	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	629a      	str	r2, [r3, #40]	; 0x28
 8003972:	e015      	b.n	80039a0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003974:	893b      	ldrh	r3, [r7, #8]
 8003976:	0a1b      	lsrs	r3, r3, #8
 8003978:	b29b      	uxth	r3, r3
 800397a:	b2da      	uxtb	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	69b9      	ldr	r1, [r7, #24]
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 f8d6 	bl	8003b38 <I2C_WaitOnTXISFlagUntilTimeout>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e012      	b.n	80039bc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003996:	893b      	ldrh	r3, [r7, #8]
 8003998:	b2da      	uxtb	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	2200      	movs	r2, #0
 80039a8:	2180      	movs	r1, #128	; 0x80
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f000 f884 	bl	8003ab8 <I2C_WaitOnFlagUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	80002000 	.word	0x80002000

080039c8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af02      	add	r7, sp, #8
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	4608      	mov	r0, r1
 80039d2:	4611      	mov	r1, r2
 80039d4:	461a      	mov	r2, r3
 80039d6:	4603      	mov	r3, r0
 80039d8:	817b      	strh	r3, [r7, #10]
 80039da:	460b      	mov	r3, r1
 80039dc:	813b      	strh	r3, [r7, #8]
 80039de:	4613      	mov	r3, r2
 80039e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80039e2:	88fb      	ldrh	r3, [r7, #6]
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	8979      	ldrh	r1, [r7, #10]
 80039e8:	4b20      	ldr	r3, [pc, #128]	; (8003a6c <I2C_RequestMemoryRead+0xa4>)
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	2300      	movs	r3, #0
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 f9fe 	bl	8003df0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039f4:	69fa      	ldr	r2, [r7, #28]
 80039f6:	69b9      	ldr	r1, [r7, #24]
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f89d 	bl	8003b38 <I2C_WaitOnTXISFlagUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e02c      	b.n	8003a62 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a08:	88fb      	ldrh	r3, [r7, #6]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d105      	bne.n	8003a1a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a0e:	893b      	ldrh	r3, [r7, #8]
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	629a      	str	r2, [r3, #40]	; 0x28
 8003a18:	e015      	b.n	8003a46 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a1a:	893b      	ldrh	r3, [r7, #8]
 8003a1c:	0a1b      	lsrs	r3, r3, #8
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a28:	69fa      	ldr	r2, [r7, #28]
 8003a2a:	69b9      	ldr	r1, [r7, #24]
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 f883 	bl	8003b38 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e012      	b.n	8003a62 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a3c:	893b      	ldrh	r3, [r7, #8]
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2140      	movs	r1, #64	; 0x40
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f831 	bl	8003ab8 <I2C_WaitOnFlagUntilTimeout>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	80002000 	.word	0x80002000

08003a70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d103      	bne.n	8003a8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d007      	beq.n	8003aac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0201 	orr.w	r2, r2, #1
 8003aaa:	619a      	str	r2, [r3, #24]
  }
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	603b      	str	r3, [r7, #0]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ac8:	e022      	b.n	8003b10 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad0:	d01e      	beq.n	8003b10 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad2:	f7fe fe39 	bl	8002748 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d302      	bcc.n	8003ae8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d113      	bne.n	8003b10 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aec:	f043 0220 	orr.w	r2, r3, #32
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e00f      	b.n	8003b30 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699a      	ldr	r2, [r3, #24]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	bf0c      	ite	eq
 8003b20:	2301      	moveq	r3, #1
 8003b22:	2300      	movne	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	461a      	mov	r2, r3
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d0cd      	beq.n	8003aca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b44:	e02c      	b.n	8003ba0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 f870 	bl	8003c30 <I2C_IsErrorOccurred>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e02a      	b.n	8003bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b60:	d01e      	beq.n	8003ba0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b62:	f7fe fdf1 	bl	8002748 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d302      	bcc.n	8003b78 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d113      	bne.n	8003ba0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7c:	f043 0220 	orr.w	r2, r3, #32
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e007      	b.n	8003bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d1cb      	bne.n	8003b46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bc4:	e028      	b.n	8003c18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	68b9      	ldr	r1, [r7, #8]
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 f830 	bl	8003c30 <I2C_IsErrorOccurred>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e026      	b.n	8003c28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bda:	f7fe fdb5 	bl	8002748 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d302      	bcc.n	8003bf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d113      	bne.n	8003c18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf4:	f043 0220 	orr.w	r2, r3, #32
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e007      	b.n	8003c28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d1cf      	bne.n	8003bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08a      	sub	sp, #40	; 0x28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	f003 0310 	and.w	r3, r3, #16
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d068      	beq.n	8003d2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2210      	movs	r2, #16
 8003c62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c64:	e049      	b.n	8003cfa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6c:	d045      	beq.n	8003cfa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c6e:	f7fe fd6b 	bl	8002748 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d302      	bcc.n	8003c84 <I2C_IsErrorOccurred+0x54>
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d13a      	bne.n	8003cfa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca6:	d121      	bne.n	8003cec <I2C_IsErrorOccurred+0xbc>
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cae:	d01d      	beq.n	8003cec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003cb0:	7cfb      	ldrb	r3, [r7, #19]
 8003cb2:	2b20      	cmp	r3, #32
 8003cb4:	d01a      	beq.n	8003cec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cc4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003cc6:	f7fe fd3f 	bl	8002748 <HAL_GetTick>
 8003cca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ccc:	e00e      	b.n	8003cec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003cce:	f7fe fd3b 	bl	8002748 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b19      	cmp	r3, #25
 8003cda:	d907      	bls.n	8003cec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	f043 0320 	orr.w	r3, r3, #32
 8003ce2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003cea:	e006      	b.n	8003cfa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	d1e9      	bne.n	8003cce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	f003 0320 	and.w	r3, r3, #32
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	d003      	beq.n	8003d10 <I2C_IsErrorOccurred+0xe0>
 8003d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0aa      	beq.n	8003c66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d103      	bne.n	8003d20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	f043 0304 	orr.w	r3, r3, #4
 8003d26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00b      	beq.n	8003d58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00b      	beq.n	8003d7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	f043 0308 	orr.w	r3, r3, #8
 8003d68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00b      	beq.n	8003d9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	f043 0302 	orr.w	r3, r3, #2
 8003d8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d01c      	beq.n	8003dde <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f7ff fe63 	bl	8003a70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6859      	ldr	r1, [r3, #4]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <I2C_IsErrorOccurred+0x1bc>)
 8003db6:	400b      	ands	r3, r1
 8003db8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003dde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3728      	adds	r7, #40	; 0x28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	fe00e800 	.word	0xfe00e800

08003df0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	607b      	str	r3, [r7, #4]
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	817b      	strh	r3, [r7, #10]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e02:	897b      	ldrh	r3, [r7, #10]
 8003e04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e08:	7a7b      	ldrb	r3, [r7, #9]
 8003e0a:	041b      	lsls	r3, r3, #16
 8003e0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	0d5b      	lsrs	r3, r3, #21
 8003e2a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003e2e:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <I2C_TransferConfig+0x60>)
 8003e30:	430b      	orrs	r3, r1
 8003e32:	43db      	mvns	r3, r3
 8003e34:	ea02 0103 	and.w	r1, r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	03ff63ff 	.word	0x03ff63ff

08003e54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	d138      	bne.n	8003edc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e032      	b.n	8003ede <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2224      	movs	r2, #36	; 0x24
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0201 	bic.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ea6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6819      	ldr	r1, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e000      	b.n	8003ede <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003edc:	2302      	movs	r3, #2
  }
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b085      	sub	sp, #20
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	d139      	bne.n	8003f74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e033      	b.n	8003f76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2224      	movs	r2, #36	; 0x24
 8003f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0201 	bic.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	e000      	b.n	8003f76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f74:	2302      	movs	r3, #2
  }
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f84:	b08f      	sub	sp, #60	; 0x3c
 8003f86:	af0a      	add	r7, sp, #40	; 0x28
 8003f88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e116      	b.n	80041c2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fe f9ca 	bl	8002348 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d102      	bne.n	8003fce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f002 ffa6 	bl	8006f24 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	603b      	str	r3, [r7, #0]
 8003fde:	687e      	ldr	r6, [r7, #4]
 8003fe0:	466d      	mov	r5, sp
 8003fe2:	f106 0410 	add.w	r4, r6, #16
 8003fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ff2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ff6:	1d33      	adds	r3, r6, #4
 8003ff8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ffa:	6838      	ldr	r0, [r7, #0]
 8003ffc:	f002 ff3a 	bl	8006e74 <USB_CoreInit>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d005      	beq.n	8004012 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2202      	movs	r2, #2
 800400a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e0d7      	b.n	80041c2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2100      	movs	r1, #0
 8004018:	4618      	mov	r0, r3
 800401a:	f002 ff94 	bl	8006f46 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800401e:	2300      	movs	r3, #0
 8004020:	73fb      	strb	r3, [r7, #15]
 8004022:	e04a      	b.n	80040ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004024:	7bfa      	ldrb	r2, [r7, #15]
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	4613      	mov	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	333d      	adds	r3, #61	; 0x3d
 8004034:	2201      	movs	r2, #1
 8004036:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004038:	7bfa      	ldrb	r2, [r7, #15]
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	4613      	mov	r3, r2
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4413      	add	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	333c      	adds	r3, #60	; 0x3c
 8004048:	7bfa      	ldrb	r2, [r7, #15]
 800404a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800404c:	7bfa      	ldrb	r2, [r7, #15]
 800404e:	7bfb      	ldrb	r3, [r7, #15]
 8004050:	b298      	uxth	r0, r3
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	3344      	adds	r3, #68	; 0x44
 8004060:	4602      	mov	r2, r0
 8004062:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004064:	7bfa      	ldrb	r2, [r7, #15]
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	4613      	mov	r3, r2
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	4413      	add	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	3340      	adds	r3, #64	; 0x40
 8004074:	2200      	movs	r2, #0
 8004076:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004078:	7bfa      	ldrb	r2, [r7, #15]
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	4613      	mov	r3, r2
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	4413      	add	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	3348      	adds	r3, #72	; 0x48
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800408c:	7bfa      	ldrb	r2, [r7, #15]
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	4613      	mov	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	334c      	adds	r3, #76	; 0x4c
 800409c:	2200      	movs	r2, #0
 800409e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040a0:	7bfa      	ldrb	r2, [r7, #15]
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	4413      	add	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	3354      	adds	r3, #84	; 0x54
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	3301      	adds	r3, #1
 80040b8:	73fb      	strb	r3, [r7, #15]
 80040ba:	7bfa      	ldrb	r2, [r7, #15]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d3af      	bcc.n	8004024 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040c4:	2300      	movs	r3, #0
 80040c6:	73fb      	strb	r3, [r7, #15]
 80040c8:	e044      	b.n	8004154 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040ca:	7bfa      	ldrb	r2, [r7, #15]
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	440b      	add	r3, r1
 80040d8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80040dc:	2200      	movs	r2, #0
 80040de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80040e0:	7bfa      	ldrb	r2, [r7, #15]
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	4613      	mov	r3, r2
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	4413      	add	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80040f2:	7bfa      	ldrb	r2, [r7, #15]
 80040f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040f6:	7bfa      	ldrb	r2, [r7, #15]
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	4613      	mov	r3, r2
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	4413      	add	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004108:	2200      	movs	r2, #0
 800410a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800410c:	7bfa      	ldrb	r2, [r7, #15]
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	4613      	mov	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004122:	7bfa      	ldrb	r2, [r7, #15]
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	4613      	mov	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004138:	7bfa      	ldrb	r2, [r7, #15]
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	4613      	mov	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	4413      	add	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	3301      	adds	r3, #1
 8004152:	73fb      	strb	r3, [r7, #15]
 8004154:	7bfa      	ldrb	r2, [r7, #15]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	429a      	cmp	r2, r3
 800415c:	d3b5      	bcc.n	80040ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	687e      	ldr	r6, [r7, #4]
 8004166:	466d      	mov	r5, sp
 8004168:	f106 0410 	add.w	r4, r6, #16
 800416c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800416e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004174:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004178:	e885 0003 	stmia.w	r5, {r0, r1}
 800417c:	1d33      	adds	r3, r6, #4
 800417e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004180:	6838      	ldr	r0, [r7, #0]
 8004182:	f002 ff2d 	bl	8006fe0 <USB_DevInit>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e014      	b.n	80041c2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d102      	bne.n	80041b6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f80b 	bl	80041cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f003 f8eb 	bl	8007396 <USB_DevDisconnect>

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080041cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041fa:	4b05      	ldr	r3, [pc, #20]	; (8004210 <HAL_PCDEx_ActivateLPM+0x44>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	10000003 	.word	0x10000003

08004214 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004218:	4b05      	ldr	r3, [pc, #20]	; (8004230 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a04      	ldr	r2, [pc, #16]	; (8004230 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800421e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004222:	6013      	str	r3, [r2, #0]
}
 8004224:	bf00      	nop
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40007000 	.word	0x40007000

08004234 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800423c:	2300      	movs	r3, #0
 800423e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e291      	b.n	800476e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 8087 	beq.w	8004366 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004258:	4b96      	ldr	r3, [pc, #600]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 030c 	and.w	r3, r3, #12
 8004260:	2b04      	cmp	r3, #4
 8004262:	d00c      	beq.n	800427e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004264:	4b93      	ldr	r3, [pc, #588]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 030c 	and.w	r3, r3, #12
 800426c:	2b08      	cmp	r3, #8
 800426e:	d112      	bne.n	8004296 <HAL_RCC_OscConfig+0x62>
 8004270:	4b90      	ldr	r3, [pc, #576]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004278:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800427c:	d10b      	bne.n	8004296 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800427e:	4b8d      	ldr	r3, [pc, #564]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d06c      	beq.n	8004364 <HAL_RCC_OscConfig+0x130>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d168      	bne.n	8004364 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e26b      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429e:	d106      	bne.n	80042ae <HAL_RCC_OscConfig+0x7a>
 80042a0:	4b84      	ldr	r3, [pc, #528]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a83      	ldr	r2, [pc, #524]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	e02e      	b.n	800430c <HAL_RCC_OscConfig+0xd8>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10c      	bne.n	80042d0 <HAL_RCC_OscConfig+0x9c>
 80042b6:	4b7f      	ldr	r3, [pc, #508]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a7e      	ldr	r2, [pc, #504]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	4b7c      	ldr	r3, [pc, #496]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a7b      	ldr	r2, [pc, #492]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	e01d      	b.n	800430c <HAL_RCC_OscConfig+0xd8>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042d8:	d10c      	bne.n	80042f4 <HAL_RCC_OscConfig+0xc0>
 80042da:	4b76      	ldr	r3, [pc, #472]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a75      	ldr	r2, [pc, #468]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	4b73      	ldr	r3, [pc, #460]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a72      	ldr	r2, [pc, #456]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	e00b      	b.n	800430c <HAL_RCC_OscConfig+0xd8>
 80042f4:	4b6f      	ldr	r3, [pc, #444]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a6e      	ldr	r2, [pc, #440]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	4b6c      	ldr	r3, [pc, #432]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a6b      	ldr	r2, [pc, #428]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800430a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d013      	beq.n	800433c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fe fa18 	bl	8002748 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800431c:	f7fe fa14 	bl	8002748 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	; 0x64
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e21f      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	4b61      	ldr	r3, [pc, #388]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCC_OscConfig+0xe8>
 800433a:	e014      	b.n	8004366 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fe fa04 	bl	8002748 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004344:	f7fe fa00 	bl	8002748 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b64      	cmp	r3, #100	; 0x64
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e20b      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004356:	4b57      	ldr	r3, [pc, #348]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x110>
 8004362:	e000      	b.n	8004366 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d069      	beq.n	8004446 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004372:	4b50      	ldr	r3, [pc, #320]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800437e:	4b4d      	ldr	r3, [pc, #308]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 030c 	and.w	r3, r3, #12
 8004386:	2b08      	cmp	r3, #8
 8004388:	d11c      	bne.n	80043c4 <HAL_RCC_OscConfig+0x190>
 800438a:	4b4a      	ldr	r3, [pc, #296]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d116      	bne.n	80043c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004396:	4b47      	ldr	r3, [pc, #284]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d005      	beq.n	80043ae <HAL_RCC_OscConfig+0x17a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d001      	beq.n	80043ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e1df      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ae:	4b41      	ldr	r3, [pc, #260]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	493d      	ldr	r1, [pc, #244]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c2:	e040      	b.n	8004446 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d023      	beq.n	8004414 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043cc:	4b39      	ldr	r3, [pc, #228]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a38      	ldr	r2, [pc, #224]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d8:	f7fe f9b6 	bl	8002748 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043e0:	f7fe f9b2 	bl	8002748 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e1bd      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f2:	4b30      	ldr	r3, [pc, #192]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fe:	4b2d      	ldr	r3, [pc, #180]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	4929      	ldr	r1, [pc, #164]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 800440e:	4313      	orrs	r3, r2
 8004410:	600b      	str	r3, [r1, #0]
 8004412:	e018      	b.n	8004446 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004414:	4b27      	ldr	r3, [pc, #156]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a26      	ldr	r2, [pc, #152]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7fe f992 	bl	8002748 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004428:	f7fe f98e 	bl	8002748 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e199      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800443a:	4b1e      	ldr	r3, [pc, #120]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	2b00      	cmp	r3, #0
 8004450:	d038      	beq.n	80044c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d019      	beq.n	800448e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800445a:	4b16      	ldr	r3, [pc, #88]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 800445c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445e:	4a15      	ldr	r2, [pc, #84]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004466:	f7fe f96f 	bl	8002748 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800446e:	f7fe f96b 	bl	8002748 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e176      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004480:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0f0      	beq.n	800446e <HAL_RCC_OscConfig+0x23a>
 800448c:	e01a      	b.n	80044c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800448e:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004492:	4a08      	ldr	r2, [pc, #32]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004494:	f023 0301 	bic.w	r3, r3, #1
 8004498:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449a:	f7fe f955 	bl	8002748 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a0:	e00a      	b.n	80044b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a2:	f7fe f951 	bl	8002748 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d903      	bls.n	80044b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e15c      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
 80044b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b8:	4b91      	ldr	r3, [pc, #580]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80044ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1ee      	bne.n	80044a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 80a4 	beq.w	800461a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044d2:	4b8b      	ldr	r3, [pc, #556]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10d      	bne.n	80044fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80044de:	4b88      	ldr	r3, [pc, #544]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	4a87      	ldr	r2, [pc, #540]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80044e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e8:	6413      	str	r3, [r2, #64]	; 0x40
 80044ea:	4b85      	ldr	r3, [pc, #532]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f2:	60bb      	str	r3, [r7, #8]
 80044f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044f6:	2301      	movs	r3, #1
 80044f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044fa:	4b82      	ldr	r3, [pc, #520]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004502:	2b00      	cmp	r3, #0
 8004504:	d118      	bne.n	8004538 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004506:	4b7f      	ldr	r3, [pc, #508]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a7e      	ldr	r2, [pc, #504]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800450c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004512:	f7fe f919 	bl	8002748 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800451a:	f7fe f915 	bl	8002748 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b64      	cmp	r3, #100	; 0x64
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e120      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800452c:	4b75      	ldr	r3, [pc, #468]	; (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f0      	beq.n	800451a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d106      	bne.n	800454e <HAL_RCC_OscConfig+0x31a>
 8004540:	4b6f      	ldr	r3, [pc, #444]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004544:	4a6e      	ldr	r2, [pc, #440]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	6713      	str	r3, [r2, #112]	; 0x70
 800454c:	e02d      	b.n	80045aa <HAL_RCC_OscConfig+0x376>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10c      	bne.n	8004570 <HAL_RCC_OscConfig+0x33c>
 8004556:	4b6a      	ldr	r3, [pc, #424]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455a:	4a69      	ldr	r2, [pc, #420]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 800455c:	f023 0301 	bic.w	r3, r3, #1
 8004560:	6713      	str	r3, [r2, #112]	; 0x70
 8004562:	4b67      	ldr	r3, [pc, #412]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	4a66      	ldr	r2, [pc, #408]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004568:	f023 0304 	bic.w	r3, r3, #4
 800456c:	6713      	str	r3, [r2, #112]	; 0x70
 800456e:	e01c      	b.n	80045aa <HAL_RCC_OscConfig+0x376>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2b05      	cmp	r3, #5
 8004576:	d10c      	bne.n	8004592 <HAL_RCC_OscConfig+0x35e>
 8004578:	4b61      	ldr	r3, [pc, #388]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 800457a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457c:	4a60      	ldr	r2, [pc, #384]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 800457e:	f043 0304 	orr.w	r3, r3, #4
 8004582:	6713      	str	r3, [r2, #112]	; 0x70
 8004584:	4b5e      	ldr	r3, [pc, #376]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004588:	4a5d      	ldr	r2, [pc, #372]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	6713      	str	r3, [r2, #112]	; 0x70
 8004590:	e00b      	b.n	80045aa <HAL_RCC_OscConfig+0x376>
 8004592:	4b5b      	ldr	r3, [pc, #364]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	4a5a      	ldr	r2, [pc, #360]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	6713      	str	r3, [r2, #112]	; 0x70
 800459e:	4b58      	ldr	r3, [pc, #352]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80045a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a2:	4a57      	ldr	r2, [pc, #348]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80045a4:	f023 0304 	bic.w	r3, r3, #4
 80045a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d015      	beq.n	80045de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b2:	f7fe f8c9 	bl	8002748 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b8:	e00a      	b.n	80045d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ba:	f7fe f8c5 	bl	8002748 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e0ce      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d0:	4b4b      	ldr	r3, [pc, #300]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0ee      	beq.n	80045ba <HAL_RCC_OscConfig+0x386>
 80045dc:	e014      	b.n	8004608 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045de:	f7fe f8b3 	bl	8002748 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e4:	e00a      	b.n	80045fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e6:	f7fe f8af 	bl	8002748 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e0b8      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fc:	4b40      	ldr	r3, [pc, #256]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80045fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1ee      	bne.n	80045e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d105      	bne.n	800461a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800460e:	4b3c      	ldr	r3, [pc, #240]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	4a3b      	ldr	r2, [pc, #236]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004618:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 80a4 	beq.w	800476c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004624:	4b36      	ldr	r3, [pc, #216]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	2b08      	cmp	r3, #8
 800462e:	d06b      	beq.n	8004708 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d149      	bne.n	80046cc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004638:	4b31      	ldr	r3, [pc, #196]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a30      	ldr	r2, [pc, #192]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 800463e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fe f880 	bl	8002748 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464c:	f7fe f87c 	bl	8002748 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e087      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465e:	4b28      	ldr	r3, [pc, #160]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69da      	ldr	r2, [r3, #28]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	019b      	lsls	r3, r3, #6
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	085b      	lsrs	r3, r3, #1
 8004682:	3b01      	subs	r3, #1
 8004684:	041b      	lsls	r3, r3, #16
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	061b      	lsls	r3, r3, #24
 800468e:	4313      	orrs	r3, r2
 8004690:	4a1b      	ldr	r2, [pc, #108]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004692:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004696:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004698:	4b19      	ldr	r3, [pc, #100]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a18      	ldr	r2, [pc, #96]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 800469e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fe f850 	bl	8002748 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ac:	f7fe f84c 	bl	8002748 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e057      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046be:	4b10      	ldr	r3, [pc, #64]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0f0      	beq.n	80046ac <HAL_RCC_OscConfig+0x478>
 80046ca:	e04f      	b.n	800476c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046cc:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a0b      	ldr	r2, [pc, #44]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80046d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d8:	f7fe f836 	bl	8002748 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e0:	f7fe f832 	bl	8002748 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e03d      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f2:	4b03      	ldr	r3, [pc, #12]	; (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x4ac>
 80046fe:	e035      	b.n	800476c <HAL_RCC_OscConfig+0x538>
 8004700:	40023800 	.word	0x40023800
 8004704:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004708:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <HAL_RCC_OscConfig+0x544>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d028      	beq.n	8004768 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004720:	429a      	cmp	r2, r3
 8004722:	d121      	bne.n	8004768 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800472e:	429a      	cmp	r2, r3
 8004730:	d11a      	bne.n	8004768 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004738:	4013      	ands	r3, r2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800473e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004740:	4293      	cmp	r3, r2
 8004742:	d111      	bne.n	8004768 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474e:	085b      	lsrs	r3, r3, #1
 8004750:	3b01      	subs	r3, #1
 8004752:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004754:	429a      	cmp	r2, r3
 8004756:	d107      	bne.n	8004768 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004764:	429a      	cmp	r2, r3
 8004766:	d001      	beq.n	800476c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40023800 	.word	0x40023800

0800477c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e0d0      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004794:	4b6a      	ldr	r3, [pc, #424]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 030f 	and.w	r3, r3, #15
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d910      	bls.n	80047c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a2:	4b67      	ldr	r3, [pc, #412]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f023 020f 	bic.w	r2, r3, #15
 80047aa:	4965      	ldr	r1, [pc, #404]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b2:	4b63      	ldr	r3, [pc, #396]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d001      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e0b8      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d020      	beq.n	8004812 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047dc:	4b59      	ldr	r3, [pc, #356]	; (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	4a58      	ldr	r2, [pc, #352]	; (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 80047e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0308 	and.w	r3, r3, #8
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047f4:	4b53      	ldr	r3, [pc, #332]	; (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	4a52      	ldr	r2, [pc, #328]	; (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 80047fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004800:	4b50      	ldr	r3, [pc, #320]	; (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	494d      	ldr	r1, [pc, #308]	; (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 800480e:	4313      	orrs	r3, r2
 8004810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d040      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d107      	bne.n	8004836 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004826:	4b47      	ldr	r3, [pc, #284]	; (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d115      	bne.n	800485e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e07f      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b02      	cmp	r3, #2
 800483c:	d107      	bne.n	800484e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800483e:	4b41      	ldr	r3, [pc, #260]	; (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d109      	bne.n	800485e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e073      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800484e:	4b3d      	ldr	r3, [pc, #244]	; (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e06b      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800485e:	4b39      	ldr	r3, [pc, #228]	; (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f023 0203 	bic.w	r2, r3, #3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	4936      	ldr	r1, [pc, #216]	; (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 800486c:	4313      	orrs	r3, r2
 800486e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004870:	f7fd ff6a 	bl	8002748 <HAL_GetTick>
 8004874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004876:	e00a      	b.n	800488e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004878:	f7fd ff66 	bl	8002748 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	f241 3288 	movw	r2, #5000	; 0x1388
 8004886:	4293      	cmp	r3, r2
 8004888:	d901      	bls.n	800488e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e053      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488e:	4b2d      	ldr	r3, [pc, #180]	; (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 020c 	and.w	r2, r3, #12
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	429a      	cmp	r2, r3
 800489e:	d1eb      	bne.n	8004878 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048a0:	4b27      	ldr	r3, [pc, #156]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 030f 	and.w	r3, r3, #15
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d210      	bcs.n	80048d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ae:	4b24      	ldr	r3, [pc, #144]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f023 020f 	bic.w	r2, r3, #15
 80048b6:	4922      	ldr	r1, [pc, #136]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048be:	4b20      	ldr	r3, [pc, #128]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d001      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e032      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d008      	beq.n	80048ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048dc:	4b19      	ldr	r3, [pc, #100]	; (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	4916      	ldr	r1, [pc, #88]	; (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d009      	beq.n	800490e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048fa:	4b12      	ldr	r3, [pc, #72]	; (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	490e      	ldr	r1, [pc, #56]	; (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 800490a:	4313      	orrs	r3, r2
 800490c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800490e:	f000 f821 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8004912:	4602      	mov	r2, r0
 8004914:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	091b      	lsrs	r3, r3, #4
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	490a      	ldr	r1, [pc, #40]	; (8004948 <HAL_RCC_ClockConfig+0x1cc>)
 8004920:	5ccb      	ldrb	r3, [r1, r3]
 8004922:	fa22 f303 	lsr.w	r3, r2, r3
 8004926:	4a09      	ldr	r2, [pc, #36]	; (800494c <HAL_RCC_ClockConfig+0x1d0>)
 8004928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800492a:	4b09      	ldr	r3, [pc, #36]	; (8004950 <HAL_RCC_ClockConfig+0x1d4>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fd fec6 	bl	80026c0 <HAL_InitTick>

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40023c00 	.word	0x40023c00
 8004944:	40023800 	.word	0x40023800
 8004948:	0800a2e0 	.word	0x0800a2e0
 800494c:	20000000 	.word	0x20000000
 8004950:	20000004 	.word	0x20000004

08004954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004958:	b094      	sub	sp, #80	; 0x50
 800495a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800495c:	2300      	movs	r3, #0
 800495e:	647b      	str	r3, [r7, #68]	; 0x44
 8004960:	2300      	movs	r3, #0
 8004962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004964:	2300      	movs	r3, #0
 8004966:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004968:	2300      	movs	r3, #0
 800496a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800496c:	4b79      	ldr	r3, [pc, #484]	; (8004b54 <HAL_RCC_GetSysClockFreq+0x200>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f003 030c 	and.w	r3, r3, #12
 8004974:	2b08      	cmp	r3, #8
 8004976:	d00d      	beq.n	8004994 <HAL_RCC_GetSysClockFreq+0x40>
 8004978:	2b08      	cmp	r3, #8
 800497a:	f200 80e1 	bhi.w	8004b40 <HAL_RCC_GetSysClockFreq+0x1ec>
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <HAL_RCC_GetSysClockFreq+0x34>
 8004982:	2b04      	cmp	r3, #4
 8004984:	d003      	beq.n	800498e <HAL_RCC_GetSysClockFreq+0x3a>
 8004986:	e0db      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004988:	4b73      	ldr	r3, [pc, #460]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x204>)
 800498a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800498c:	e0db      	b.n	8004b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800498e:	4b73      	ldr	r3, [pc, #460]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x208>)
 8004990:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004992:	e0d8      	b.n	8004b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004994:	4b6f      	ldr	r3, [pc, #444]	; (8004b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800499c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800499e:	4b6d      	ldr	r3, [pc, #436]	; (8004b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d063      	beq.n	8004a72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049aa:	4b6a      	ldr	r3, [pc, #424]	; (8004b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	099b      	lsrs	r3, r3, #6
 80049b0:	2200      	movs	r2, #0
 80049b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80049b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049bc:	633b      	str	r3, [r7, #48]	; 0x30
 80049be:	2300      	movs	r3, #0
 80049c0:	637b      	str	r3, [r7, #52]	; 0x34
 80049c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049c6:	4622      	mov	r2, r4
 80049c8:	462b      	mov	r3, r5
 80049ca:	f04f 0000 	mov.w	r0, #0
 80049ce:	f04f 0100 	mov.w	r1, #0
 80049d2:	0159      	lsls	r1, r3, #5
 80049d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049d8:	0150      	lsls	r0, r2, #5
 80049da:	4602      	mov	r2, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	4621      	mov	r1, r4
 80049e0:	1a51      	subs	r1, r2, r1
 80049e2:	6139      	str	r1, [r7, #16]
 80049e4:	4629      	mov	r1, r5
 80049e6:	eb63 0301 	sbc.w	r3, r3, r1
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	f04f 0300 	mov.w	r3, #0
 80049f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049f8:	4659      	mov	r1, fp
 80049fa:	018b      	lsls	r3, r1, #6
 80049fc:	4651      	mov	r1, sl
 80049fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a02:	4651      	mov	r1, sl
 8004a04:	018a      	lsls	r2, r1, #6
 8004a06:	4651      	mov	r1, sl
 8004a08:	ebb2 0801 	subs.w	r8, r2, r1
 8004a0c:	4659      	mov	r1, fp
 8004a0e:	eb63 0901 	sbc.w	r9, r3, r1
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a26:	4690      	mov	r8, r2
 8004a28:	4699      	mov	r9, r3
 8004a2a:	4623      	mov	r3, r4
 8004a2c:	eb18 0303 	adds.w	r3, r8, r3
 8004a30:	60bb      	str	r3, [r7, #8]
 8004a32:	462b      	mov	r3, r5
 8004a34:	eb49 0303 	adc.w	r3, r9, r3
 8004a38:	60fb      	str	r3, [r7, #12]
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	f04f 0300 	mov.w	r3, #0
 8004a42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a46:	4629      	mov	r1, r5
 8004a48:	024b      	lsls	r3, r1, #9
 8004a4a:	4621      	mov	r1, r4
 8004a4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a50:	4621      	mov	r1, r4
 8004a52:	024a      	lsls	r2, r1, #9
 8004a54:	4610      	mov	r0, r2
 8004a56:	4619      	mov	r1, r3
 8004a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a64:	f7fc f910 	bl	8000c88 <__aeabi_uldivmod>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a70:	e058      	b.n	8004b24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a72:	4b38      	ldr	r3, [pc, #224]	; (8004b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	099b      	lsrs	r3, r3, #6
 8004a78:	2200      	movs	r2, #0
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a82:	623b      	str	r3, [r7, #32]
 8004a84:	2300      	movs	r3, #0
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
 8004a88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	464b      	mov	r3, r9
 8004a90:	f04f 0000 	mov.w	r0, #0
 8004a94:	f04f 0100 	mov.w	r1, #0
 8004a98:	0159      	lsls	r1, r3, #5
 8004a9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a9e:	0150      	lsls	r0, r2, #5
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4641      	mov	r1, r8
 8004aa6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004aaa:	4649      	mov	r1, r9
 8004aac:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004abc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ac0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ac4:	ebb2 040a 	subs.w	r4, r2, sl
 8004ac8:	eb63 050b 	sbc.w	r5, r3, fp
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	00eb      	lsls	r3, r5, #3
 8004ad6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ada:	00e2      	lsls	r2, r4, #3
 8004adc:	4614      	mov	r4, r2
 8004ade:	461d      	mov	r5, r3
 8004ae0:	4643      	mov	r3, r8
 8004ae2:	18e3      	adds	r3, r4, r3
 8004ae4:	603b      	str	r3, [r7, #0]
 8004ae6:	464b      	mov	r3, r9
 8004ae8:	eb45 0303 	adc.w	r3, r5, r3
 8004aec:	607b      	str	r3, [r7, #4]
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004afa:	4629      	mov	r1, r5
 8004afc:	028b      	lsls	r3, r1, #10
 8004afe:	4621      	mov	r1, r4
 8004b00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b04:	4621      	mov	r1, r4
 8004b06:	028a      	lsls	r2, r1, #10
 8004b08:	4610      	mov	r0, r2
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b0e:	2200      	movs	r2, #0
 8004b10:	61bb      	str	r3, [r7, #24]
 8004b12:	61fa      	str	r2, [r7, #28]
 8004b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b18:	f7fc f8b6 	bl	8000c88 <__aeabi_uldivmod>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4613      	mov	r3, r2
 8004b22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004b24:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	0c1b      	lsrs	r3, r3, #16
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	3301      	adds	r3, #1
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004b34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b3e:	e002      	b.n	8004b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b40:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3750      	adds	r7, #80	; 0x50
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b52:	bf00      	nop
 8004b54:	40023800 	.word	0x40023800
 8004b58:	00f42400 	.word	0x00f42400
 8004b5c:	007a1200 	.word	0x007a1200

08004b60 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b64:	4b03      	ldr	r3, [pc, #12]	; (8004b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b66:	681b      	ldr	r3, [r3, #0]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	20000000 	.word	0x20000000

08004b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b7c:	f7ff fff0 	bl	8004b60 <HAL_RCC_GetHCLKFreq>
 8004b80:	4602      	mov	r2, r0
 8004b82:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	0a9b      	lsrs	r3, r3, #10
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	4903      	ldr	r1, [pc, #12]	; (8004b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b8e:	5ccb      	ldrb	r3, [r1, r3]
 8004b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40023800 	.word	0x40023800
 8004b9c:	0800a2f0 	.word	0x0800a2f0

08004ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ba4:	f7ff ffdc 	bl	8004b60 <HAL_RCC_GetHCLKFreq>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	0b5b      	lsrs	r3, r3, #13
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	4903      	ldr	r1, [pc, #12]	; (8004bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bb6:	5ccb      	ldrb	r3, [r1, r3]
 8004bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	0800a2f0 	.word	0x0800a2f0

08004bc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b088      	sub	sp, #32
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004be0:	2300      	movs	r3, #0
 8004be2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d012      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004bf0:	4b69      	ldr	r3, [pc, #420]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	4a68      	ldr	r2, [pc, #416]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004bfa:	6093      	str	r3, [r2, #8]
 8004bfc:	4b66      	ldr	r3, [pc, #408]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c04:	4964      	ldr	r1, [pc, #400]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004c12:	2301      	movs	r3, #1
 8004c14:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d017      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c22:	4b5d      	ldr	r3, [pc, #372]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c30:	4959      	ldr	r1, [pc, #356]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c40:	d101      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004c42:	2301      	movs	r3, #1
 8004c44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d017      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c5e:	4b4e      	ldr	r3, [pc, #312]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	494a      	ldr	r1, [pc, #296]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c7c:	d101      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0320 	and.w	r3, r3, #32
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f000 808b 	beq.w	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cac:	4b3a      	ldr	r3, [pc, #232]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	4a39      	ldr	r2, [pc, #228]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb6:	6413      	str	r3, [r2, #64]	; 0x40
 8004cb8:	4b37      	ldr	r3, [pc, #220]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc0:	60bb      	str	r3, [r7, #8]
 8004cc2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004cc4:	4b35      	ldr	r3, [pc, #212]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a34      	ldr	r2, [pc, #208]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cd0:	f7fd fd3a 	bl	8002748 <HAL_GetTick>
 8004cd4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004cd6:	e008      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cd8:	f7fd fd36 	bl	8002748 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b64      	cmp	r3, #100	; 0x64
 8004ce4:	d901      	bls.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e357      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004cea:	4b2c      	ldr	r3, [pc, #176]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0f0      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cf6:	4b28      	ldr	r3, [pc, #160]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cfe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d035      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d02e      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d14:	4b20      	ldr	r3, [pc, #128]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d1c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d1e:	4b1e      	ldr	r3, [pc, #120]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d22:	4a1d      	ldr	r2, [pc, #116]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d28:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d2a:	4b1b      	ldr	r3, [pc, #108]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2e:	4a1a      	ldr	r2, [pc, #104]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d34:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004d36:	4a18      	ldr	r2, [pc, #96]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d3c:	4b16      	ldr	r3, [pc, #88]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d114      	bne.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d48:	f7fd fcfe 	bl	8002748 <HAL_GetTick>
 8004d4c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4e:	e00a      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d50:	f7fd fcfa 	bl	8002748 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e319      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d66:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0ee      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d7e:	d111      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004d80:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d8c:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d8e:	400b      	ands	r3, r1
 8004d90:	4901      	ldr	r1, [pc, #4]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	608b      	str	r3, [r1, #8]
 8004d96:	e00b      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	40007000 	.word	0x40007000
 8004da0:	0ffffcff 	.word	0x0ffffcff
 8004da4:	4baa      	ldr	r3, [pc, #680]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	4aa9      	ldr	r2, [pc, #676]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004daa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dae:	6093      	str	r3, [r2, #8]
 8004db0:	4ba7      	ldr	r3, [pc, #668]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004db2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dbc:	49a4      	ldr	r1, [pc, #656]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0310 	and.w	r3, r3, #16
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d010      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dce:	4ba0      	ldr	r3, [pc, #640]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dd4:	4a9e      	ldr	r2, [pc, #632]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dda:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004dde:	4b9c      	ldr	r3, [pc, #624]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004de0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de8:	4999      	ldr	r1, [pc, #612]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dfc:	4b94      	ldr	r3, [pc, #592]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e0a:	4991      	ldr	r1, [pc, #580]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e1e:	4b8c      	ldr	r3, [pc, #560]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e2c:	4988      	ldr	r1, [pc, #544]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00a      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e40:	4b83      	ldr	r3, [pc, #524]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e4e:	4980      	ldr	r1, [pc, #512]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00a      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e62:	4b7b      	ldr	r3, [pc, #492]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e70:	4977      	ldr	r1, [pc, #476]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00a      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e84:	4b72      	ldr	r3, [pc, #456]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8a:	f023 0203 	bic.w	r2, r3, #3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e92:	496f      	ldr	r1, [pc, #444]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00a      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ea6:	4b6a      	ldr	r3, [pc, #424]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eac:	f023 020c 	bic.w	r2, r3, #12
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb4:	4966      	ldr	r1, [pc, #408]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00a      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ec8:	4b61      	ldr	r3, [pc, #388]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ece:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed6:	495e      	ldr	r1, [pc, #376]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00a      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004eea:	4b59      	ldr	r3, [pc, #356]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef8:	4955      	ldr	r1, [pc, #340]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00a      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f0c:	4b50      	ldr	r3, [pc, #320]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1a:	494d      	ldr	r1, [pc, #308]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00a      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004f2e:	4b48      	ldr	r3, [pc, #288]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f34:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3c:	4944      	ldr	r1, [pc, #272]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00a      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004f50:	4b3f      	ldr	r3, [pc, #252]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f56:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f5e:	493c      	ldr	r1, [pc, #240]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004f72:	4b37      	ldr	r3, [pc, #220]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f80:	4933      	ldr	r1, [pc, #204]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00a      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f94:	4b2e      	ldr	r3, [pc, #184]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fa2:	492b      	ldr	r1, [pc, #172]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d011      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004fb6:	4b26      	ldr	r3, [pc, #152]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fc4:	4922      	ldr	r1, [pc, #136]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fd4:	d101      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ff6:	4b16      	ldr	r3, [pc, #88]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005004:	4912      	ldr	r1, [pc, #72]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00b      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005018:	4b0d      	ldr	r3, [pc, #52]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800501a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005028:	4909      	ldr	r1, [pc, #36]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800502a:	4313      	orrs	r3, r2
 800502c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d006      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 80d9 	beq.w	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005044:	4b02      	ldr	r3, [pc, #8]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a01      	ldr	r2, [pc, #4]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800504a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800504e:	e001      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005050:	40023800 	.word	0x40023800
 8005054:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005056:	f7fd fb77 	bl	8002748 <HAL_GetTick>
 800505a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800505c:	e008      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800505e:	f7fd fb73 	bl	8002748 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b64      	cmp	r3, #100	; 0x64
 800506a:	d901      	bls.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e194      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005070:	4b6c      	ldr	r3, [pc, #432]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1f0      	bne.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	2b00      	cmp	r3, #0
 8005086:	d021      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508c:	2b00      	cmp	r3, #0
 800508e:	d11d      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005090:	4b64      	ldr	r3, [pc, #400]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005096:	0c1b      	lsrs	r3, r3, #16
 8005098:	f003 0303 	and.w	r3, r3, #3
 800509c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800509e:	4b61      	ldr	r3, [pc, #388]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050a4:	0e1b      	lsrs	r3, r3, #24
 80050a6:	f003 030f 	and.w	r3, r3, #15
 80050aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	019a      	lsls	r2, r3, #6
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	041b      	lsls	r3, r3, #16
 80050b6:	431a      	orrs	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	061b      	lsls	r3, r3, #24
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	071b      	lsls	r3, r3, #28
 80050c4:	4957      	ldr	r1, [pc, #348]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d004      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050e0:	d00a      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d02e      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050f6:	d129      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80050f8:	4b4a      	ldr	r3, [pc, #296]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050fe:	0c1b      	lsrs	r3, r3, #16
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005106:	4b47      	ldr	r3, [pc, #284]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800510c:	0f1b      	lsrs	r3, r3, #28
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	019a      	lsls	r2, r3, #6
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	041b      	lsls	r3, r3, #16
 800511e:	431a      	orrs	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	061b      	lsls	r3, r3, #24
 8005126:	431a      	orrs	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	071b      	lsls	r3, r3, #28
 800512c:	493d      	ldr	r1, [pc, #244]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005134:	4b3b      	ldr	r3, [pc, #236]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800513a:	f023 021f 	bic.w	r2, r3, #31
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	3b01      	subs	r3, #1
 8005144:	4937      	ldr	r1, [pc, #220]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005146:	4313      	orrs	r3, r2
 8005148:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d01d      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005158:	4b32      	ldr	r3, [pc, #200]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800515a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800515e:	0e1b      	lsrs	r3, r3, #24
 8005160:	f003 030f 	and.w	r3, r3, #15
 8005164:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005166:	4b2f      	ldr	r3, [pc, #188]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800516c:	0f1b      	lsrs	r3, r3, #28
 800516e:	f003 0307 	and.w	r3, r3, #7
 8005172:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	019a      	lsls	r2, r3, #6
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	041b      	lsls	r3, r3, #16
 8005180:	431a      	orrs	r2, r3
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	061b      	lsls	r3, r3, #24
 8005186:	431a      	orrs	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	071b      	lsls	r3, r3, #28
 800518c:	4925      	ldr	r1, [pc, #148]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d011      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	019a      	lsls	r2, r3, #6
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	041b      	lsls	r3, r3, #16
 80051ac:	431a      	orrs	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	061b      	lsls	r3, r3, #24
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	071b      	lsls	r3, r3, #28
 80051bc:	4919      	ldr	r1, [pc, #100]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051c4:	4b17      	ldr	r3, [pc, #92]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a16      	ldr	r2, [pc, #88]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051d0:	f7fd faba 	bl	8002748 <HAL_GetTick>
 80051d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051d6:	e008      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051d8:	f7fd fab6 	bl	8002748 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b64      	cmp	r3, #100	; 0x64
 80051e4:	d901      	bls.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e0d7      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051ea:	4b0e      	ldr	r3, [pc, #56]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0f0      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	f040 80cd 	bne.w	8005398 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80051fe:	4b09      	ldr	r3, [pc, #36]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a08      	ldr	r2, [pc, #32]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005208:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800520a:	f7fd fa9d 	bl	8002748 <HAL_GetTick>
 800520e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005210:	e00a      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005212:	f7fd fa99 	bl	8002748 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b64      	cmp	r3, #100	; 0x64
 800521e:	d903      	bls.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e0ba      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005224:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005228:	4b5e      	ldr	r3, [pc, #376]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005234:	d0ed      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005252:	2b00      	cmp	r3, #0
 8005254:	d02e      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	2b00      	cmp	r3, #0
 800525c:	d12a      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800525e:	4b51      	ldr	r3, [pc, #324]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005264:	0c1b      	lsrs	r3, r3, #16
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800526c:	4b4d      	ldr	r3, [pc, #308]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800526e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005272:	0f1b      	lsrs	r3, r3, #28
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	019a      	lsls	r2, r3, #6
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	041b      	lsls	r3, r3, #16
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	061b      	lsls	r3, r3, #24
 800528c:	431a      	orrs	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	071b      	lsls	r3, r3, #28
 8005292:	4944      	ldr	r1, [pc, #272]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005294:	4313      	orrs	r3, r2
 8005296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800529a:	4b42      	ldr	r3, [pc, #264]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800529c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a8:	3b01      	subs	r3, #1
 80052aa:	021b      	lsls	r3, r3, #8
 80052ac:	493d      	ldr	r1, [pc, #244]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d022      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052c8:	d11d      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052ca:	4b36      	ldr	r3, [pc, #216]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d0:	0e1b      	lsrs	r3, r3, #24
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052d8:	4b32      	ldr	r3, [pc, #200]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052de:	0f1b      	lsrs	r3, r3, #28
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	019a      	lsls	r2, r3, #6
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	041b      	lsls	r3, r3, #16
 80052f2:	431a      	orrs	r2, r3
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	061b      	lsls	r3, r3, #24
 80052f8:	431a      	orrs	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	071b      	lsls	r3, r3, #28
 80052fe:	4929      	ldr	r1, [pc, #164]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005300:	4313      	orrs	r3, r2
 8005302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	2b00      	cmp	r3, #0
 8005310:	d028      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005312:	4b24      	ldr	r3, [pc, #144]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005318:	0e1b      	lsrs	r3, r3, #24
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005320:	4b20      	ldr	r3, [pc, #128]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005326:	0c1b      	lsrs	r3, r3, #16
 8005328:	f003 0303 	and.w	r3, r3, #3
 800532c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	019a      	lsls	r2, r3, #6
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	041b      	lsls	r3, r3, #16
 8005338:	431a      	orrs	r2, r3
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	061b      	lsls	r3, r3, #24
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	071b      	lsls	r3, r3, #28
 8005346:	4917      	ldr	r1, [pc, #92]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005348:	4313      	orrs	r3, r2
 800534a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800534e:	4b15      	ldr	r3, [pc, #84]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005354:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	4911      	ldr	r1, [pc, #68]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005364:	4b0f      	ldr	r3, [pc, #60]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a0e      	ldr	r2, [pc, #56]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800536a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800536e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005370:	f7fd f9ea 	bl	8002748 <HAL_GetTick>
 8005374:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005376:	e008      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005378:	f7fd f9e6 	bl	8002748 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b64      	cmp	r3, #100	; 0x64
 8005384:	d901      	bls.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e007      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800538a:	4b06      	ldr	r3, [pc, #24]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005396:	d1ef      	bne.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3720      	adds	r7, #32
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	40023800 	.word	0x40023800

080053a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e049      	b.n	800544e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d106      	bne.n	80053d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7fc fede 	bl	8002190 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3304      	adds	r3, #4
 80053e4:	4619      	mov	r1, r3
 80053e6:	4610      	mov	r0, r2
 80053e8:	f000 fc2a 	bl	8005c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b01      	cmp	r3, #1
 800546a:	d001      	beq.n	8005470 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e054      	b.n	800551a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0201 	orr.w	r2, r2, #1
 8005486:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a26      	ldr	r2, [pc, #152]	; (8005528 <HAL_TIM_Base_Start_IT+0xd0>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d022      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x80>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800549a:	d01d      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x80>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a22      	ldr	r2, [pc, #136]	; (800552c <HAL_TIM_Base_Start_IT+0xd4>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d018      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x80>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a21      	ldr	r2, [pc, #132]	; (8005530 <HAL_TIM_Base_Start_IT+0xd8>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d013      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x80>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a1f      	ldr	r2, [pc, #124]	; (8005534 <HAL_TIM_Base_Start_IT+0xdc>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00e      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x80>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a1e      	ldr	r2, [pc, #120]	; (8005538 <HAL_TIM_Base_Start_IT+0xe0>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d009      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x80>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a1c      	ldr	r2, [pc, #112]	; (800553c <HAL_TIM_Base_Start_IT+0xe4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d004      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x80>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a1b      	ldr	r2, [pc, #108]	; (8005540 <HAL_TIM_Base_Start_IT+0xe8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d115      	bne.n	8005504 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689a      	ldr	r2, [r3, #8]
 80054de:	4b19      	ldr	r3, [pc, #100]	; (8005544 <HAL_TIM_Base_Start_IT+0xec>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2b06      	cmp	r3, #6
 80054e8:	d015      	beq.n	8005516 <HAL_TIM_Base_Start_IT+0xbe>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f0:	d011      	beq.n	8005516 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f042 0201 	orr.w	r2, r2, #1
 8005500:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005502:	e008      	b.n	8005516 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0201 	orr.w	r2, r2, #1
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	e000      	b.n	8005518 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005516:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	40010000 	.word	0x40010000
 800552c:	40000400 	.word	0x40000400
 8005530:	40000800 	.word	0x40000800
 8005534:	40000c00 	.word	0x40000c00
 8005538:	40010400 	.word	0x40010400
 800553c:	40014000 	.word	0x40014000
 8005540:	40001800 	.word	0x40001800
 8005544:	00010007 	.word	0x00010007

08005548 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e049      	b.n	80055ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fc fe32 	bl	80021d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2202      	movs	r2, #2
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3304      	adds	r3, #4
 8005584:	4619      	mov	r1, r3
 8005586:	4610      	mov	r0, r2
 8005588:	f000 fb5a 	bl	8005c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b082      	sub	sp, #8
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b02      	cmp	r3, #2
 800560a:	d122      	bne.n	8005652 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b02      	cmp	r3, #2
 8005618:	d11b      	bne.n	8005652 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f06f 0202 	mvn.w	r2, #2
 8005622:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	f003 0303 	and.w	r3, r3, #3
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 fae3 	bl	8005c04 <HAL_TIM_IC_CaptureCallback>
 800563e:	e005      	b.n	800564c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 fad5 	bl	8005bf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fae6 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b04      	cmp	r3, #4
 800565e:	d122      	bne.n	80056a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b04      	cmp	r3, #4
 800566c:	d11b      	bne.n	80056a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f06f 0204 	mvn.w	r2, #4
 8005676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2202      	movs	r2, #2
 800567c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fab9 	bl	8005c04 <HAL_TIM_IC_CaptureCallback>
 8005692:	e005      	b.n	80056a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 faab 	bl	8005bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fabc 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	f003 0308 	and.w	r3, r3, #8
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	d122      	bne.n	80056fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f003 0308 	and.w	r3, r3, #8
 80056be:	2b08      	cmp	r3, #8
 80056c0:	d11b      	bne.n	80056fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f06f 0208 	mvn.w	r2, #8
 80056ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2204      	movs	r2, #4
 80056d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	f003 0303 	and.w	r3, r3, #3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fa8f 	bl	8005c04 <HAL_TIM_IC_CaptureCallback>
 80056e6:	e005      	b.n	80056f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fa81 	bl	8005bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fa92 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	f003 0310 	and.w	r3, r3, #16
 8005704:	2b10      	cmp	r3, #16
 8005706:	d122      	bne.n	800574e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f003 0310 	and.w	r3, r3, #16
 8005712:	2b10      	cmp	r3, #16
 8005714:	d11b      	bne.n	800574e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f06f 0210 	mvn.w	r2, #16
 800571e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2208      	movs	r2, #8
 8005724:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fa65 	bl	8005c04 <HAL_TIM_IC_CaptureCallback>
 800573a:	e005      	b.n	8005748 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fa57 	bl	8005bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fa68 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b01      	cmp	r3, #1
 800575a:	d10e      	bne.n	800577a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b01      	cmp	r3, #1
 8005768:	d107      	bne.n	800577a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f06f 0201 	mvn.w	r2, #1
 8005772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7fc fb97 	bl	8001ea8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005784:	2b80      	cmp	r3, #128	; 0x80
 8005786:	d10e      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005792:	2b80      	cmp	r3, #128	; 0x80
 8005794:	d107      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800579e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fe7d 	bl	80064a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b4:	d10e      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c0:	2b80      	cmp	r3, #128	; 0x80
 80057c2:	d107      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fe70 	bl	80064b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057de:	2b40      	cmp	r3, #64	; 0x40
 80057e0:	d10e      	bne.n	8005800 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ec:	2b40      	cmp	r3, #64	; 0x40
 80057ee:	d107      	bne.n	8005800 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fa16 	bl	8005c2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b20      	cmp	r3, #32
 800580c:	d10e      	bne.n	800582c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f003 0320 	and.w	r3, r3, #32
 8005818:	2b20      	cmp	r3, #32
 800581a:	d107      	bne.n	800582c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f06f 0220 	mvn.w	r2, #32
 8005824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fe30 	bl	800648c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800582c:	bf00      	nop
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800584e:	2302      	movs	r3, #2
 8005850:	e0ff      	b.n	8005a52 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b14      	cmp	r3, #20
 800585e:	f200 80f0 	bhi.w	8005a42 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005862:	a201      	add	r2, pc, #4	; (adr r2, 8005868 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005868:	080058bd 	.word	0x080058bd
 800586c:	08005a43 	.word	0x08005a43
 8005870:	08005a43 	.word	0x08005a43
 8005874:	08005a43 	.word	0x08005a43
 8005878:	080058fd 	.word	0x080058fd
 800587c:	08005a43 	.word	0x08005a43
 8005880:	08005a43 	.word	0x08005a43
 8005884:	08005a43 	.word	0x08005a43
 8005888:	0800593f 	.word	0x0800593f
 800588c:	08005a43 	.word	0x08005a43
 8005890:	08005a43 	.word	0x08005a43
 8005894:	08005a43 	.word	0x08005a43
 8005898:	0800597f 	.word	0x0800597f
 800589c:	08005a43 	.word	0x08005a43
 80058a0:	08005a43 	.word	0x08005a43
 80058a4:	08005a43 	.word	0x08005a43
 80058a8:	080059c1 	.word	0x080059c1
 80058ac:	08005a43 	.word	0x08005a43
 80058b0:	08005a43 	.word	0x08005a43
 80058b4:	08005a43 	.word	0x08005a43
 80058b8:	08005a01 	.word	0x08005a01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68b9      	ldr	r1, [r7, #8]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fa5c 	bl	8005d80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699a      	ldr	r2, [r3, #24]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0208 	orr.w	r2, r2, #8
 80058d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699a      	ldr	r2, [r3, #24]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0204 	bic.w	r2, r2, #4
 80058e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6999      	ldr	r1, [r3, #24]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	691a      	ldr	r2, [r3, #16]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	619a      	str	r2, [r3, #24]
      break;
 80058fa:	e0a5      	b.n	8005a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68b9      	ldr	r1, [r7, #8]
 8005902:	4618      	mov	r0, r3
 8005904:	f000 faae 	bl	8005e64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	699a      	ldr	r2, [r3, #24]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699a      	ldr	r2, [r3, #24]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6999      	ldr	r1, [r3, #24]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	021a      	lsls	r2, r3, #8
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	619a      	str	r2, [r3, #24]
      break;
 800593c:	e084      	b.n	8005a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68b9      	ldr	r1, [r7, #8]
 8005944:	4618      	mov	r0, r3
 8005946:	f000 fb05 	bl	8005f54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69da      	ldr	r2, [r3, #28]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0208 	orr.w	r2, r2, #8
 8005958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69da      	ldr	r2, [r3, #28]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0204 	bic.w	r2, r2, #4
 8005968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69d9      	ldr	r1, [r3, #28]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	691a      	ldr	r2, [r3, #16]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	61da      	str	r2, [r3, #28]
      break;
 800597c:	e064      	b.n	8005a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68b9      	ldr	r1, [r7, #8]
 8005984:	4618      	mov	r0, r3
 8005986:	f000 fb5b 	bl	8006040 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69da      	ldr	r2, [r3, #28]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69da      	ldr	r2, [r3, #28]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	69d9      	ldr	r1, [r3, #28]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	021a      	lsls	r2, r3, #8
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	61da      	str	r2, [r3, #28]
      break;
 80059be:	e043      	b.n	8005a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68b9      	ldr	r1, [r7, #8]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 fb92 	bl	80060f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0208 	orr.w	r2, r2, #8
 80059da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 0204 	bic.w	r2, r2, #4
 80059ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	691a      	ldr	r2, [r3, #16]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80059fe:	e023      	b.n	8005a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68b9      	ldr	r1, [r7, #8]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 fbc4 	bl	8006194 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	021a      	lsls	r2, r3, #8
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a40:	e002      	b.n	8005a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	75fb      	strb	r3, [r7, #23]
      break;
 8005a46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3718      	adds	r7, #24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop

08005a5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_TIM_ConfigClockSource+0x1c>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e0b4      	b.n	8005be2 <HAL_TIM_ConfigClockSource+0x186>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	4b56      	ldr	r3, [pc, #344]	; (8005bec <HAL_TIM_ConfigClockSource+0x190>)
 8005a94:	4013      	ands	r3, r2
 8005a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ab0:	d03e      	beq.n	8005b30 <HAL_TIM_ConfigClockSource+0xd4>
 8005ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ab6:	f200 8087 	bhi.w	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005abe:	f000 8086 	beq.w	8005bce <HAL_TIM_ConfigClockSource+0x172>
 8005ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac6:	d87f      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ac8:	2b70      	cmp	r3, #112	; 0x70
 8005aca:	d01a      	beq.n	8005b02 <HAL_TIM_ConfigClockSource+0xa6>
 8005acc:	2b70      	cmp	r3, #112	; 0x70
 8005ace:	d87b      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad0:	2b60      	cmp	r3, #96	; 0x60
 8005ad2:	d050      	beq.n	8005b76 <HAL_TIM_ConfigClockSource+0x11a>
 8005ad4:	2b60      	cmp	r3, #96	; 0x60
 8005ad6:	d877      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad8:	2b50      	cmp	r3, #80	; 0x50
 8005ada:	d03c      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0xfa>
 8005adc:	2b50      	cmp	r3, #80	; 0x50
 8005ade:	d873      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae0:	2b40      	cmp	r3, #64	; 0x40
 8005ae2:	d058      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0x13a>
 8005ae4:	2b40      	cmp	r3, #64	; 0x40
 8005ae6:	d86f      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae8:	2b30      	cmp	r3, #48	; 0x30
 8005aea:	d064      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8005aec:	2b30      	cmp	r3, #48	; 0x30
 8005aee:	d86b      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005af0:	2b20      	cmp	r3, #32
 8005af2:	d060      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d867      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d05c      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8005afc:	2b10      	cmp	r3, #16
 8005afe:	d05a      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b00:	e062      	b.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6818      	ldr	r0, [r3, #0]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	6899      	ldr	r1, [r3, #8]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f000 fc0d 	bl	8006330 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	609a      	str	r2, [r3, #8]
      break;
 8005b2e:	e04f      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6818      	ldr	r0, [r3, #0]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	6899      	ldr	r1, [r3, #8]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f000 fbf6 	bl	8006330 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b52:	609a      	str	r2, [r3, #8]
      break;
 8005b54:	e03c      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6818      	ldr	r0, [r3, #0]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	6859      	ldr	r1, [r3, #4]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	461a      	mov	r2, r3
 8005b64:	f000 fb6a 	bl	800623c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2150      	movs	r1, #80	; 0x50
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fbc3 	bl	80062fa <TIM_ITRx_SetConfig>
      break;
 8005b74:	e02c      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6818      	ldr	r0, [r3, #0]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	6859      	ldr	r1, [r3, #4]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f000 fb89 	bl	800629a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2160      	movs	r1, #96	; 0x60
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 fbb3 	bl	80062fa <TIM_ITRx_SetConfig>
      break;
 8005b94:	e01c      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6818      	ldr	r0, [r3, #0]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	6859      	ldr	r1, [r3, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f000 fb4a 	bl	800623c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2140      	movs	r1, #64	; 0x40
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 fba3 	bl	80062fa <TIM_ITRx_SetConfig>
      break;
 8005bb4:	e00c      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	f000 fb9a 	bl	80062fa <TIM_ITRx_SetConfig>
      break;
 8005bc6:	e003      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	73fb      	strb	r3, [r7, #15]
      break;
 8005bcc:	e000      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	fffeff88 	.word	0xfffeff88

08005bf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a40      	ldr	r2, [pc, #256]	; (8005d54 <TIM_Base_SetConfig+0x114>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d013      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c5e:	d00f      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a3d      	ldr	r2, [pc, #244]	; (8005d58 <TIM_Base_SetConfig+0x118>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00b      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a3c      	ldr	r2, [pc, #240]	; (8005d5c <TIM_Base_SetConfig+0x11c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d007      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a3b      	ldr	r2, [pc, #236]	; (8005d60 <TIM_Base_SetConfig+0x120>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d003      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a3a      	ldr	r2, [pc, #232]	; (8005d64 <TIM_Base_SetConfig+0x124>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d108      	bne.n	8005c92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a2f      	ldr	r2, [pc, #188]	; (8005d54 <TIM_Base_SetConfig+0x114>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d02b      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca0:	d027      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a2c      	ldr	r2, [pc, #176]	; (8005d58 <TIM_Base_SetConfig+0x118>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d023      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a2b      	ldr	r2, [pc, #172]	; (8005d5c <TIM_Base_SetConfig+0x11c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d01f      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a2a      	ldr	r2, [pc, #168]	; (8005d60 <TIM_Base_SetConfig+0x120>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d01b      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a29      	ldr	r2, [pc, #164]	; (8005d64 <TIM_Base_SetConfig+0x124>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d017      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a28      	ldr	r2, [pc, #160]	; (8005d68 <TIM_Base_SetConfig+0x128>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d013      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a27      	ldr	r2, [pc, #156]	; (8005d6c <TIM_Base_SetConfig+0x12c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d00f      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a26      	ldr	r2, [pc, #152]	; (8005d70 <TIM_Base_SetConfig+0x130>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00b      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a25      	ldr	r2, [pc, #148]	; (8005d74 <TIM_Base_SetConfig+0x134>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d007      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a24      	ldr	r2, [pc, #144]	; (8005d78 <TIM_Base_SetConfig+0x138>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d003      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a23      	ldr	r2, [pc, #140]	; (8005d7c <TIM_Base_SetConfig+0x13c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d108      	bne.n	8005d04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a0a      	ldr	r2, [pc, #40]	; (8005d54 <TIM_Base_SetConfig+0x114>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d003      	beq.n	8005d38 <TIM_Base_SetConfig+0xf8>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a0c      	ldr	r2, [pc, #48]	; (8005d64 <TIM_Base_SetConfig+0x124>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d103      	bne.n	8005d40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	615a      	str	r2, [r3, #20]
}
 8005d46:	bf00      	nop
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	40010000 	.word	0x40010000
 8005d58:	40000400 	.word	0x40000400
 8005d5c:	40000800 	.word	0x40000800
 8005d60:	40000c00 	.word	0x40000c00
 8005d64:	40010400 	.word	0x40010400
 8005d68:	40014000 	.word	0x40014000
 8005d6c:	40014400 	.word	0x40014400
 8005d70:	40014800 	.word	0x40014800
 8005d74:	40001800 	.word	0x40001800
 8005d78:	40001c00 	.word	0x40001c00
 8005d7c:	40002000 	.word	0x40002000

08005d80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	f023 0201 	bic.w	r2, r3, #1
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	4b2b      	ldr	r3, [pc, #172]	; (8005e58 <TIM_OC1_SetConfig+0xd8>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 0303 	bic.w	r3, r3, #3
 8005db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f023 0302 	bic.w	r3, r3, #2
 8005dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a21      	ldr	r2, [pc, #132]	; (8005e5c <TIM_OC1_SetConfig+0xdc>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d003      	beq.n	8005de4 <TIM_OC1_SetConfig+0x64>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a20      	ldr	r2, [pc, #128]	; (8005e60 <TIM_OC1_SetConfig+0xe0>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d10c      	bne.n	8005dfe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f023 0308 	bic.w	r3, r3, #8
 8005dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f023 0304 	bic.w	r3, r3, #4
 8005dfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a16      	ldr	r2, [pc, #88]	; (8005e5c <TIM_OC1_SetConfig+0xdc>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d003      	beq.n	8005e0e <TIM_OC1_SetConfig+0x8e>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a15      	ldr	r2, [pc, #84]	; (8005e60 <TIM_OC1_SetConfig+0xe0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d111      	bne.n	8005e32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	621a      	str	r2, [r3, #32]
}
 8005e4c:	bf00      	nop
 8005e4e:	371c      	adds	r7, #28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	fffeff8f 	.word	0xfffeff8f
 8005e5c:	40010000 	.word	0x40010000
 8005e60:	40010400 	.word	0x40010400

08005e64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	f023 0210 	bic.w	r2, r3, #16
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	4b2e      	ldr	r3, [pc, #184]	; (8005f48 <TIM_OC2_SetConfig+0xe4>)
 8005e90:	4013      	ands	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	021b      	lsls	r3, r3, #8
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f023 0320 	bic.w	r3, r3, #32
 8005eae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	011b      	lsls	r3, r3, #4
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a23      	ldr	r2, [pc, #140]	; (8005f4c <TIM_OC2_SetConfig+0xe8>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d003      	beq.n	8005ecc <TIM_OC2_SetConfig+0x68>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a22      	ldr	r2, [pc, #136]	; (8005f50 <TIM_OC2_SetConfig+0xec>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d10d      	bne.n	8005ee8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	011b      	lsls	r3, r3, #4
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ee6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a18      	ldr	r2, [pc, #96]	; (8005f4c <TIM_OC2_SetConfig+0xe8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d003      	beq.n	8005ef8 <TIM_OC2_SetConfig+0x94>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a17      	ldr	r2, [pc, #92]	; (8005f50 <TIM_OC2_SetConfig+0xec>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d113      	bne.n	8005f20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005efe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	621a      	str	r2, [r3, #32]
}
 8005f3a:	bf00      	nop
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	feff8fff 	.word	0xfeff8fff
 8005f4c:	40010000 	.word	0x40010000
 8005f50:	40010400 	.word	0x40010400

08005f54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4b2d      	ldr	r3, [pc, #180]	; (8006034 <TIM_OC3_SetConfig+0xe0>)
 8005f80:	4013      	ands	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0303 	bic.w	r3, r3, #3
 8005f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	021b      	lsls	r3, r3, #8
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a22      	ldr	r2, [pc, #136]	; (8006038 <TIM_OC3_SetConfig+0xe4>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d003      	beq.n	8005fba <TIM_OC3_SetConfig+0x66>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a21      	ldr	r2, [pc, #132]	; (800603c <TIM_OC3_SetConfig+0xe8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d10d      	bne.n	8005fd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	021b      	lsls	r3, r3, #8
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a17      	ldr	r2, [pc, #92]	; (8006038 <TIM_OC3_SetConfig+0xe4>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d003      	beq.n	8005fe6 <TIM_OC3_SetConfig+0x92>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a16      	ldr	r2, [pc, #88]	; (800603c <TIM_OC3_SetConfig+0xe8>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d113      	bne.n	800600e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	011b      	lsls	r3, r3, #4
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	011b      	lsls	r3, r3, #4
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	4313      	orrs	r3, r2
 800600c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	621a      	str	r2, [r3, #32]
}
 8006028:	bf00      	nop
 800602a:	371c      	adds	r7, #28
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	fffeff8f 	.word	0xfffeff8f
 8006038:	40010000 	.word	0x40010000
 800603c:	40010400 	.word	0x40010400

08006040 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	4b1e      	ldr	r3, [pc, #120]	; (80060e4 <TIM_OC4_SetConfig+0xa4>)
 800606c:	4013      	ands	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	021b      	lsls	r3, r3, #8
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4313      	orrs	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800608a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	031b      	lsls	r3, r3, #12
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	4313      	orrs	r3, r2
 8006096:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a13      	ldr	r2, [pc, #76]	; (80060e8 <TIM_OC4_SetConfig+0xa8>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d003      	beq.n	80060a8 <TIM_OC4_SetConfig+0x68>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a12      	ldr	r2, [pc, #72]	; (80060ec <TIM_OC4_SetConfig+0xac>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d109      	bne.n	80060bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	019b      	lsls	r3, r3, #6
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	621a      	str	r2, [r3, #32]
}
 80060d6:	bf00      	nop
 80060d8:	371c      	adds	r7, #28
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	feff8fff 	.word	0xfeff8fff
 80060e8:	40010000 	.word	0x40010000
 80060ec:	40010400 	.word	0x40010400

080060f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	4b1b      	ldr	r3, [pc, #108]	; (8006188 <TIM_OC5_SetConfig+0x98>)
 800611c:	4013      	ands	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	4313      	orrs	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006130:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	041b      	lsls	r3, r3, #16
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	4313      	orrs	r3, r2
 800613c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a12      	ldr	r2, [pc, #72]	; (800618c <TIM_OC5_SetConfig+0x9c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d003      	beq.n	800614e <TIM_OC5_SetConfig+0x5e>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a11      	ldr	r2, [pc, #68]	; (8006190 <TIM_OC5_SetConfig+0xa0>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d109      	bne.n	8006162 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006154:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	021b      	lsls	r3, r3, #8
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	4313      	orrs	r3, r2
 8006160:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	621a      	str	r2, [r3, #32]
}
 800617c:	bf00      	nop
 800617e:	371c      	adds	r7, #28
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	fffeff8f 	.word	0xfffeff8f
 800618c:	40010000 	.word	0x40010000
 8006190:	40010400 	.word	0x40010400

08006194 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	4b1c      	ldr	r3, [pc, #112]	; (8006230 <TIM_OC6_SetConfig+0x9c>)
 80061c0:	4013      	ands	r3, r2
 80061c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	021b      	lsls	r3, r3, #8
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	051b      	lsls	r3, r3, #20
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a13      	ldr	r2, [pc, #76]	; (8006234 <TIM_OC6_SetConfig+0xa0>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d003      	beq.n	80061f4 <TIM_OC6_SetConfig+0x60>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a12      	ldr	r2, [pc, #72]	; (8006238 <TIM_OC6_SetConfig+0xa4>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d109      	bne.n	8006208 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	029b      	lsls	r3, r3, #10
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4313      	orrs	r3, r2
 8006206:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	621a      	str	r2, [r3, #32]
}
 8006222:	bf00      	nop
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	feff8fff 	.word	0xfeff8fff
 8006234:	40010000 	.word	0x40010000
 8006238:	40010400 	.word	0x40010400

0800623c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	f023 0201 	bic.w	r2, r3, #1
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	011b      	lsls	r3, r3, #4
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	4313      	orrs	r3, r2
 8006270:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f023 030a 	bic.w	r3, r3, #10
 8006278:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4313      	orrs	r3, r2
 8006280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	621a      	str	r2, [r3, #32]
}
 800628e:	bf00      	nop
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800629a:	b480      	push	{r7}
 800629c:	b087      	sub	sp, #28
 800629e:	af00      	add	r7, sp, #0
 80062a0:	60f8      	str	r0, [r7, #12]
 80062a2:	60b9      	str	r1, [r7, #8]
 80062a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	f023 0210 	bic.w	r2, r3, #16
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	031b      	lsls	r3, r3, #12
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	011b      	lsls	r3, r3, #4
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	4313      	orrs	r3, r2
 80062e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	621a      	str	r2, [r3, #32]
}
 80062ee:	bf00      	nop
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b085      	sub	sp, #20
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006310:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4313      	orrs	r3, r2
 8006318:	f043 0307 	orr.w	r3, r3, #7
 800631c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	609a      	str	r2, [r3, #8]
}
 8006324:	bf00      	nop
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
 800633c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800634a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	021a      	lsls	r2, r3, #8
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	431a      	orrs	r2, r3
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	4313      	orrs	r3, r2
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	4313      	orrs	r3, r2
 800635c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	609a      	str	r2, [r3, #8]
}
 8006364:	bf00      	nop
 8006366:	371c      	adds	r7, #28
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006380:	2b01      	cmp	r3, #1
 8006382:	d101      	bne.n	8006388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006384:	2302      	movs	r3, #2
 8006386:	e06d      	b.n	8006464 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2202      	movs	r2, #2
 8006394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a30      	ldr	r2, [pc, #192]	; (8006470 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d004      	beq.n	80063bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a2f      	ldr	r2, [pc, #188]	; (8006474 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d108      	bne.n	80063ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80063c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4313      	orrs	r3, r2
 80063de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a20      	ldr	r2, [pc, #128]	; (8006470 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d022      	beq.n	8006438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063fa:	d01d      	beq.n	8006438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a1d      	ldr	r2, [pc, #116]	; (8006478 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d018      	beq.n	8006438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a1c      	ldr	r2, [pc, #112]	; (800647c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d013      	beq.n	8006438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a1a      	ldr	r2, [pc, #104]	; (8006480 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d00e      	beq.n	8006438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a15      	ldr	r2, [pc, #84]	; (8006474 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d009      	beq.n	8006438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a16      	ldr	r2, [pc, #88]	; (8006484 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d004      	beq.n	8006438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a15      	ldr	r2, [pc, #84]	; (8006488 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d10c      	bne.n	8006452 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800643e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	4313      	orrs	r3, r2
 8006448:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	40010000 	.word	0x40010000
 8006474:	40010400 	.word	0x40010400
 8006478:	40000400 	.word	0x40000400
 800647c:	40000800 	.word	0x40000800
 8006480:	40000c00 	.word	0x40000c00
 8006484:	40014000 	.word	0x40014000
 8006488:	40001800 	.word	0x40001800

0800648c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e040      	b.n	800655c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d106      	bne.n	80064f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7fb fecc 	bl	8002288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2224      	movs	r2, #36	; 0x24
 80064f4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 0201 	bic.w	r2, r2, #1
 8006504:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f8b0 	bl	800666c <UART_SetConfig>
 800650c:	4603      	mov	r3, r0
 800650e:	2b01      	cmp	r3, #1
 8006510:	d101      	bne.n	8006516 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e022      	b.n	800655c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	2b00      	cmp	r3, #0
 800651c:	d002      	beq.n	8006524 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fb08 	bl	8006b34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006532:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689a      	ldr	r2, [r3, #8]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006542:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f042 0201 	orr.w	r2, r2, #1
 8006552:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fb8f 	bl	8006c78 <UART_CheckIdleState>
 800655a:	4603      	mov	r3, r0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b08a      	sub	sp, #40	; 0x28
 8006568:	af02      	add	r7, sp, #8
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	603b      	str	r3, [r7, #0]
 8006570:	4613      	mov	r3, r2
 8006572:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006578:	2b20      	cmp	r3, #32
 800657a:	d171      	bne.n	8006660 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <HAL_UART_Transmit+0x24>
 8006582:	88fb      	ldrh	r3, [r7, #6]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e06a      	b.n	8006662 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2221      	movs	r2, #33	; 0x21
 8006598:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800659a:	f7fc f8d5 	bl	8002748 <HAL_GetTick>
 800659e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	88fa      	ldrh	r2, [r7, #6]
 80065a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	88fa      	ldrh	r2, [r7, #6]
 80065ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b8:	d108      	bne.n	80065cc <HAL_UART_Transmit+0x68>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d104      	bne.n	80065cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80065c2:	2300      	movs	r3, #0
 80065c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	61bb      	str	r3, [r7, #24]
 80065ca:	e003      	b.n	80065d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065d0:	2300      	movs	r3, #0
 80065d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065d4:	e02c      	b.n	8006630 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2200      	movs	r2, #0
 80065de:	2180      	movs	r1, #128	; 0x80
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 fb80 	bl	8006ce6 <UART_WaitOnFlagUntilTimeout>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e038      	b.n	8006662 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10b      	bne.n	800660e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	461a      	mov	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006604:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	3302      	adds	r3, #2
 800660a:	61bb      	str	r3, [r7, #24]
 800660c:	e007      	b.n	800661e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	781a      	ldrb	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	3301      	adds	r3, #1
 800661c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006624:	b29b      	uxth	r3, r3
 8006626:	3b01      	subs	r3, #1
 8006628:	b29a      	uxth	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006636:	b29b      	uxth	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1cc      	bne.n	80065d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	2200      	movs	r2, #0
 8006644:	2140      	movs	r1, #64	; 0x40
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 fb4d 	bl	8006ce6 <UART_WaitOnFlagUntilTimeout>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e005      	b.n	8006662 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2220      	movs	r2, #32
 800665a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	e000      	b.n	8006662 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006660:	2302      	movs	r3, #2
  }
}
 8006662:	4618      	mov	r0, r3
 8006664:	3720      	adds	r7, #32
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
	...

0800666c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b088      	sub	sp, #32
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006674:	2300      	movs	r3, #0
 8006676:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689a      	ldr	r2, [r3, #8]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	431a      	orrs	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	4313      	orrs	r3, r2
 800668e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	4ba6      	ldr	r3, [pc, #664]	; (8006930 <UART_SetConfig+0x2c4>)
 8006698:	4013      	ands	r3, r2
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6812      	ldr	r2, [r2, #0]
 800669e:	6979      	ldr	r1, [r7, #20]
 80066a0:	430b      	orrs	r3, r1
 80066a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68da      	ldr	r2, [r3, #12]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	430a      	orrs	r2, r1
 80066b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	430a      	orrs	r2, r1
 80066dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a94      	ldr	r2, [pc, #592]	; (8006934 <UART_SetConfig+0x2c8>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d120      	bne.n	800672a <UART_SetConfig+0xbe>
 80066e8:	4b93      	ldr	r3, [pc, #588]	; (8006938 <UART_SetConfig+0x2cc>)
 80066ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ee:	f003 0303 	and.w	r3, r3, #3
 80066f2:	2b03      	cmp	r3, #3
 80066f4:	d816      	bhi.n	8006724 <UART_SetConfig+0xb8>
 80066f6:	a201      	add	r2, pc, #4	; (adr r2, 80066fc <UART_SetConfig+0x90>)
 80066f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fc:	0800670d 	.word	0x0800670d
 8006700:	08006719 	.word	0x08006719
 8006704:	08006713 	.word	0x08006713
 8006708:	0800671f 	.word	0x0800671f
 800670c:	2301      	movs	r3, #1
 800670e:	77fb      	strb	r3, [r7, #31]
 8006710:	e150      	b.n	80069b4 <UART_SetConfig+0x348>
 8006712:	2302      	movs	r3, #2
 8006714:	77fb      	strb	r3, [r7, #31]
 8006716:	e14d      	b.n	80069b4 <UART_SetConfig+0x348>
 8006718:	2304      	movs	r3, #4
 800671a:	77fb      	strb	r3, [r7, #31]
 800671c:	e14a      	b.n	80069b4 <UART_SetConfig+0x348>
 800671e:	2308      	movs	r3, #8
 8006720:	77fb      	strb	r3, [r7, #31]
 8006722:	e147      	b.n	80069b4 <UART_SetConfig+0x348>
 8006724:	2310      	movs	r3, #16
 8006726:	77fb      	strb	r3, [r7, #31]
 8006728:	e144      	b.n	80069b4 <UART_SetConfig+0x348>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a83      	ldr	r2, [pc, #524]	; (800693c <UART_SetConfig+0x2d0>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d132      	bne.n	800679a <UART_SetConfig+0x12e>
 8006734:	4b80      	ldr	r3, [pc, #512]	; (8006938 <UART_SetConfig+0x2cc>)
 8006736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800673a:	f003 030c 	and.w	r3, r3, #12
 800673e:	2b0c      	cmp	r3, #12
 8006740:	d828      	bhi.n	8006794 <UART_SetConfig+0x128>
 8006742:	a201      	add	r2, pc, #4	; (adr r2, 8006748 <UART_SetConfig+0xdc>)
 8006744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006748:	0800677d 	.word	0x0800677d
 800674c:	08006795 	.word	0x08006795
 8006750:	08006795 	.word	0x08006795
 8006754:	08006795 	.word	0x08006795
 8006758:	08006789 	.word	0x08006789
 800675c:	08006795 	.word	0x08006795
 8006760:	08006795 	.word	0x08006795
 8006764:	08006795 	.word	0x08006795
 8006768:	08006783 	.word	0x08006783
 800676c:	08006795 	.word	0x08006795
 8006770:	08006795 	.word	0x08006795
 8006774:	08006795 	.word	0x08006795
 8006778:	0800678f 	.word	0x0800678f
 800677c:	2300      	movs	r3, #0
 800677e:	77fb      	strb	r3, [r7, #31]
 8006780:	e118      	b.n	80069b4 <UART_SetConfig+0x348>
 8006782:	2302      	movs	r3, #2
 8006784:	77fb      	strb	r3, [r7, #31]
 8006786:	e115      	b.n	80069b4 <UART_SetConfig+0x348>
 8006788:	2304      	movs	r3, #4
 800678a:	77fb      	strb	r3, [r7, #31]
 800678c:	e112      	b.n	80069b4 <UART_SetConfig+0x348>
 800678e:	2308      	movs	r3, #8
 8006790:	77fb      	strb	r3, [r7, #31]
 8006792:	e10f      	b.n	80069b4 <UART_SetConfig+0x348>
 8006794:	2310      	movs	r3, #16
 8006796:	77fb      	strb	r3, [r7, #31]
 8006798:	e10c      	b.n	80069b4 <UART_SetConfig+0x348>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a68      	ldr	r2, [pc, #416]	; (8006940 <UART_SetConfig+0x2d4>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d120      	bne.n	80067e6 <UART_SetConfig+0x17a>
 80067a4:	4b64      	ldr	r3, [pc, #400]	; (8006938 <UART_SetConfig+0x2cc>)
 80067a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067ae:	2b30      	cmp	r3, #48	; 0x30
 80067b0:	d013      	beq.n	80067da <UART_SetConfig+0x16e>
 80067b2:	2b30      	cmp	r3, #48	; 0x30
 80067b4:	d814      	bhi.n	80067e0 <UART_SetConfig+0x174>
 80067b6:	2b20      	cmp	r3, #32
 80067b8:	d009      	beq.n	80067ce <UART_SetConfig+0x162>
 80067ba:	2b20      	cmp	r3, #32
 80067bc:	d810      	bhi.n	80067e0 <UART_SetConfig+0x174>
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <UART_SetConfig+0x15c>
 80067c2:	2b10      	cmp	r3, #16
 80067c4:	d006      	beq.n	80067d4 <UART_SetConfig+0x168>
 80067c6:	e00b      	b.n	80067e0 <UART_SetConfig+0x174>
 80067c8:	2300      	movs	r3, #0
 80067ca:	77fb      	strb	r3, [r7, #31]
 80067cc:	e0f2      	b.n	80069b4 <UART_SetConfig+0x348>
 80067ce:	2302      	movs	r3, #2
 80067d0:	77fb      	strb	r3, [r7, #31]
 80067d2:	e0ef      	b.n	80069b4 <UART_SetConfig+0x348>
 80067d4:	2304      	movs	r3, #4
 80067d6:	77fb      	strb	r3, [r7, #31]
 80067d8:	e0ec      	b.n	80069b4 <UART_SetConfig+0x348>
 80067da:	2308      	movs	r3, #8
 80067dc:	77fb      	strb	r3, [r7, #31]
 80067de:	e0e9      	b.n	80069b4 <UART_SetConfig+0x348>
 80067e0:	2310      	movs	r3, #16
 80067e2:	77fb      	strb	r3, [r7, #31]
 80067e4:	e0e6      	b.n	80069b4 <UART_SetConfig+0x348>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a56      	ldr	r2, [pc, #344]	; (8006944 <UART_SetConfig+0x2d8>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d120      	bne.n	8006832 <UART_SetConfig+0x1c6>
 80067f0:	4b51      	ldr	r3, [pc, #324]	; (8006938 <UART_SetConfig+0x2cc>)
 80067f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80067fa:	2bc0      	cmp	r3, #192	; 0xc0
 80067fc:	d013      	beq.n	8006826 <UART_SetConfig+0x1ba>
 80067fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006800:	d814      	bhi.n	800682c <UART_SetConfig+0x1c0>
 8006802:	2b80      	cmp	r3, #128	; 0x80
 8006804:	d009      	beq.n	800681a <UART_SetConfig+0x1ae>
 8006806:	2b80      	cmp	r3, #128	; 0x80
 8006808:	d810      	bhi.n	800682c <UART_SetConfig+0x1c0>
 800680a:	2b00      	cmp	r3, #0
 800680c:	d002      	beq.n	8006814 <UART_SetConfig+0x1a8>
 800680e:	2b40      	cmp	r3, #64	; 0x40
 8006810:	d006      	beq.n	8006820 <UART_SetConfig+0x1b4>
 8006812:	e00b      	b.n	800682c <UART_SetConfig+0x1c0>
 8006814:	2300      	movs	r3, #0
 8006816:	77fb      	strb	r3, [r7, #31]
 8006818:	e0cc      	b.n	80069b4 <UART_SetConfig+0x348>
 800681a:	2302      	movs	r3, #2
 800681c:	77fb      	strb	r3, [r7, #31]
 800681e:	e0c9      	b.n	80069b4 <UART_SetConfig+0x348>
 8006820:	2304      	movs	r3, #4
 8006822:	77fb      	strb	r3, [r7, #31]
 8006824:	e0c6      	b.n	80069b4 <UART_SetConfig+0x348>
 8006826:	2308      	movs	r3, #8
 8006828:	77fb      	strb	r3, [r7, #31]
 800682a:	e0c3      	b.n	80069b4 <UART_SetConfig+0x348>
 800682c:	2310      	movs	r3, #16
 800682e:	77fb      	strb	r3, [r7, #31]
 8006830:	e0c0      	b.n	80069b4 <UART_SetConfig+0x348>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a44      	ldr	r2, [pc, #272]	; (8006948 <UART_SetConfig+0x2dc>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d125      	bne.n	8006888 <UART_SetConfig+0x21c>
 800683c:	4b3e      	ldr	r3, [pc, #248]	; (8006938 <UART_SetConfig+0x2cc>)
 800683e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006846:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800684a:	d017      	beq.n	800687c <UART_SetConfig+0x210>
 800684c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006850:	d817      	bhi.n	8006882 <UART_SetConfig+0x216>
 8006852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006856:	d00b      	beq.n	8006870 <UART_SetConfig+0x204>
 8006858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800685c:	d811      	bhi.n	8006882 <UART_SetConfig+0x216>
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <UART_SetConfig+0x1fe>
 8006862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006866:	d006      	beq.n	8006876 <UART_SetConfig+0x20a>
 8006868:	e00b      	b.n	8006882 <UART_SetConfig+0x216>
 800686a:	2300      	movs	r3, #0
 800686c:	77fb      	strb	r3, [r7, #31]
 800686e:	e0a1      	b.n	80069b4 <UART_SetConfig+0x348>
 8006870:	2302      	movs	r3, #2
 8006872:	77fb      	strb	r3, [r7, #31]
 8006874:	e09e      	b.n	80069b4 <UART_SetConfig+0x348>
 8006876:	2304      	movs	r3, #4
 8006878:	77fb      	strb	r3, [r7, #31]
 800687a:	e09b      	b.n	80069b4 <UART_SetConfig+0x348>
 800687c:	2308      	movs	r3, #8
 800687e:	77fb      	strb	r3, [r7, #31]
 8006880:	e098      	b.n	80069b4 <UART_SetConfig+0x348>
 8006882:	2310      	movs	r3, #16
 8006884:	77fb      	strb	r3, [r7, #31]
 8006886:	e095      	b.n	80069b4 <UART_SetConfig+0x348>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a2f      	ldr	r2, [pc, #188]	; (800694c <UART_SetConfig+0x2e0>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d125      	bne.n	80068de <UART_SetConfig+0x272>
 8006892:	4b29      	ldr	r3, [pc, #164]	; (8006938 <UART_SetConfig+0x2cc>)
 8006894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006898:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800689c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068a0:	d017      	beq.n	80068d2 <UART_SetConfig+0x266>
 80068a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068a6:	d817      	bhi.n	80068d8 <UART_SetConfig+0x26c>
 80068a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068ac:	d00b      	beq.n	80068c6 <UART_SetConfig+0x25a>
 80068ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068b2:	d811      	bhi.n	80068d8 <UART_SetConfig+0x26c>
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d003      	beq.n	80068c0 <UART_SetConfig+0x254>
 80068b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068bc:	d006      	beq.n	80068cc <UART_SetConfig+0x260>
 80068be:	e00b      	b.n	80068d8 <UART_SetConfig+0x26c>
 80068c0:	2301      	movs	r3, #1
 80068c2:	77fb      	strb	r3, [r7, #31]
 80068c4:	e076      	b.n	80069b4 <UART_SetConfig+0x348>
 80068c6:	2302      	movs	r3, #2
 80068c8:	77fb      	strb	r3, [r7, #31]
 80068ca:	e073      	b.n	80069b4 <UART_SetConfig+0x348>
 80068cc:	2304      	movs	r3, #4
 80068ce:	77fb      	strb	r3, [r7, #31]
 80068d0:	e070      	b.n	80069b4 <UART_SetConfig+0x348>
 80068d2:	2308      	movs	r3, #8
 80068d4:	77fb      	strb	r3, [r7, #31]
 80068d6:	e06d      	b.n	80069b4 <UART_SetConfig+0x348>
 80068d8:	2310      	movs	r3, #16
 80068da:	77fb      	strb	r3, [r7, #31]
 80068dc:	e06a      	b.n	80069b4 <UART_SetConfig+0x348>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a1b      	ldr	r2, [pc, #108]	; (8006950 <UART_SetConfig+0x2e4>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d138      	bne.n	800695a <UART_SetConfig+0x2ee>
 80068e8:	4b13      	ldr	r3, [pc, #76]	; (8006938 <UART_SetConfig+0x2cc>)
 80068ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80068f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068f6:	d017      	beq.n	8006928 <UART_SetConfig+0x2bc>
 80068f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068fc:	d82a      	bhi.n	8006954 <UART_SetConfig+0x2e8>
 80068fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006902:	d00b      	beq.n	800691c <UART_SetConfig+0x2b0>
 8006904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006908:	d824      	bhi.n	8006954 <UART_SetConfig+0x2e8>
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <UART_SetConfig+0x2aa>
 800690e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006912:	d006      	beq.n	8006922 <UART_SetConfig+0x2b6>
 8006914:	e01e      	b.n	8006954 <UART_SetConfig+0x2e8>
 8006916:	2300      	movs	r3, #0
 8006918:	77fb      	strb	r3, [r7, #31]
 800691a:	e04b      	b.n	80069b4 <UART_SetConfig+0x348>
 800691c:	2302      	movs	r3, #2
 800691e:	77fb      	strb	r3, [r7, #31]
 8006920:	e048      	b.n	80069b4 <UART_SetConfig+0x348>
 8006922:	2304      	movs	r3, #4
 8006924:	77fb      	strb	r3, [r7, #31]
 8006926:	e045      	b.n	80069b4 <UART_SetConfig+0x348>
 8006928:	2308      	movs	r3, #8
 800692a:	77fb      	strb	r3, [r7, #31]
 800692c:	e042      	b.n	80069b4 <UART_SetConfig+0x348>
 800692e:	bf00      	nop
 8006930:	efff69f3 	.word	0xefff69f3
 8006934:	40011000 	.word	0x40011000
 8006938:	40023800 	.word	0x40023800
 800693c:	40004400 	.word	0x40004400
 8006940:	40004800 	.word	0x40004800
 8006944:	40004c00 	.word	0x40004c00
 8006948:	40005000 	.word	0x40005000
 800694c:	40011400 	.word	0x40011400
 8006950:	40007800 	.word	0x40007800
 8006954:	2310      	movs	r3, #16
 8006956:	77fb      	strb	r3, [r7, #31]
 8006958:	e02c      	b.n	80069b4 <UART_SetConfig+0x348>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a72      	ldr	r2, [pc, #456]	; (8006b28 <UART_SetConfig+0x4bc>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d125      	bne.n	80069b0 <UART_SetConfig+0x344>
 8006964:	4b71      	ldr	r3, [pc, #452]	; (8006b2c <UART_SetConfig+0x4c0>)
 8006966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800696a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800696e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006972:	d017      	beq.n	80069a4 <UART_SetConfig+0x338>
 8006974:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006978:	d817      	bhi.n	80069aa <UART_SetConfig+0x33e>
 800697a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800697e:	d00b      	beq.n	8006998 <UART_SetConfig+0x32c>
 8006980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006984:	d811      	bhi.n	80069aa <UART_SetConfig+0x33e>
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <UART_SetConfig+0x326>
 800698a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800698e:	d006      	beq.n	800699e <UART_SetConfig+0x332>
 8006990:	e00b      	b.n	80069aa <UART_SetConfig+0x33e>
 8006992:	2300      	movs	r3, #0
 8006994:	77fb      	strb	r3, [r7, #31]
 8006996:	e00d      	b.n	80069b4 <UART_SetConfig+0x348>
 8006998:	2302      	movs	r3, #2
 800699a:	77fb      	strb	r3, [r7, #31]
 800699c:	e00a      	b.n	80069b4 <UART_SetConfig+0x348>
 800699e:	2304      	movs	r3, #4
 80069a0:	77fb      	strb	r3, [r7, #31]
 80069a2:	e007      	b.n	80069b4 <UART_SetConfig+0x348>
 80069a4:	2308      	movs	r3, #8
 80069a6:	77fb      	strb	r3, [r7, #31]
 80069a8:	e004      	b.n	80069b4 <UART_SetConfig+0x348>
 80069aa:	2310      	movs	r3, #16
 80069ac:	77fb      	strb	r3, [r7, #31]
 80069ae:	e001      	b.n	80069b4 <UART_SetConfig+0x348>
 80069b0:	2310      	movs	r3, #16
 80069b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	69db      	ldr	r3, [r3, #28]
 80069b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069bc:	d15b      	bne.n	8006a76 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80069be:	7ffb      	ldrb	r3, [r7, #31]
 80069c0:	2b08      	cmp	r3, #8
 80069c2:	d828      	bhi.n	8006a16 <UART_SetConfig+0x3aa>
 80069c4:	a201      	add	r2, pc, #4	; (adr r2, 80069cc <UART_SetConfig+0x360>)
 80069c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ca:	bf00      	nop
 80069cc:	080069f1 	.word	0x080069f1
 80069d0:	080069f9 	.word	0x080069f9
 80069d4:	08006a01 	.word	0x08006a01
 80069d8:	08006a17 	.word	0x08006a17
 80069dc:	08006a07 	.word	0x08006a07
 80069e0:	08006a17 	.word	0x08006a17
 80069e4:	08006a17 	.word	0x08006a17
 80069e8:	08006a17 	.word	0x08006a17
 80069ec:	08006a0f 	.word	0x08006a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069f0:	f7fe f8c2 	bl	8004b78 <HAL_RCC_GetPCLK1Freq>
 80069f4:	61b8      	str	r0, [r7, #24]
        break;
 80069f6:	e013      	b.n	8006a20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069f8:	f7fe f8d2 	bl	8004ba0 <HAL_RCC_GetPCLK2Freq>
 80069fc:	61b8      	str	r0, [r7, #24]
        break;
 80069fe:	e00f      	b.n	8006a20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a00:	4b4b      	ldr	r3, [pc, #300]	; (8006b30 <UART_SetConfig+0x4c4>)
 8006a02:	61bb      	str	r3, [r7, #24]
        break;
 8006a04:	e00c      	b.n	8006a20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a06:	f7fd ffa5 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8006a0a:	61b8      	str	r0, [r7, #24]
        break;
 8006a0c:	e008      	b.n	8006a20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a12:	61bb      	str	r3, [r7, #24]
        break;
 8006a14:	e004      	b.n	8006a20 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	77bb      	strb	r3, [r7, #30]
        break;
 8006a1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d074      	beq.n	8006b10 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	005a      	lsls	r2, r3, #1
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	085b      	lsrs	r3, r3, #1
 8006a30:	441a      	add	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	2b0f      	cmp	r3, #15
 8006a40:	d916      	bls.n	8006a70 <UART_SetConfig+0x404>
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a48:	d212      	bcs.n	8006a70 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	f023 030f 	bic.w	r3, r3, #15
 8006a52:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	085b      	lsrs	r3, r3, #1
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	f003 0307 	and.w	r3, r3, #7
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	89fb      	ldrh	r3, [r7, #14]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	89fa      	ldrh	r2, [r7, #14]
 8006a6c:	60da      	str	r2, [r3, #12]
 8006a6e:	e04f      	b.n	8006b10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	77bb      	strb	r3, [r7, #30]
 8006a74:	e04c      	b.n	8006b10 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a76:	7ffb      	ldrb	r3, [r7, #31]
 8006a78:	2b08      	cmp	r3, #8
 8006a7a:	d828      	bhi.n	8006ace <UART_SetConfig+0x462>
 8006a7c:	a201      	add	r2, pc, #4	; (adr r2, 8006a84 <UART_SetConfig+0x418>)
 8006a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a82:	bf00      	nop
 8006a84:	08006aa9 	.word	0x08006aa9
 8006a88:	08006ab1 	.word	0x08006ab1
 8006a8c:	08006ab9 	.word	0x08006ab9
 8006a90:	08006acf 	.word	0x08006acf
 8006a94:	08006abf 	.word	0x08006abf
 8006a98:	08006acf 	.word	0x08006acf
 8006a9c:	08006acf 	.word	0x08006acf
 8006aa0:	08006acf 	.word	0x08006acf
 8006aa4:	08006ac7 	.word	0x08006ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aa8:	f7fe f866 	bl	8004b78 <HAL_RCC_GetPCLK1Freq>
 8006aac:	61b8      	str	r0, [r7, #24]
        break;
 8006aae:	e013      	b.n	8006ad8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ab0:	f7fe f876 	bl	8004ba0 <HAL_RCC_GetPCLK2Freq>
 8006ab4:	61b8      	str	r0, [r7, #24]
        break;
 8006ab6:	e00f      	b.n	8006ad8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ab8:	4b1d      	ldr	r3, [pc, #116]	; (8006b30 <UART_SetConfig+0x4c4>)
 8006aba:	61bb      	str	r3, [r7, #24]
        break;
 8006abc:	e00c      	b.n	8006ad8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006abe:	f7fd ff49 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8006ac2:	61b8      	str	r0, [r7, #24]
        break;
 8006ac4:	e008      	b.n	8006ad8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aca:	61bb      	str	r3, [r7, #24]
        break;
 8006acc:	e004      	b.n	8006ad8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	77bb      	strb	r3, [r7, #30]
        break;
 8006ad6:	bf00      	nop
    }

    if (pclk != 0U)
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d018      	beq.n	8006b10 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	085a      	lsrs	r2, r3, #1
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	441a      	add	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	2b0f      	cmp	r3, #15
 8006af6:	d909      	bls.n	8006b0c <UART_SetConfig+0x4a0>
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006afe:	d205      	bcs.n	8006b0c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	60da      	str	r2, [r3, #12]
 8006b0a:	e001      	b.n	8006b10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006b1c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3720      	adds	r7, #32
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	40007c00 	.word	0x40007c00
 8006b2c:	40023800 	.word	0x40023800
 8006b30:	00f42400 	.word	0x00f42400

08006b34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00a      	beq.n	8006b5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00a      	beq.n	8006b80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	f003 0304 	and.w	r3, r3, #4
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00a      	beq.n	8006ba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba6:	f003 0308 	and.w	r3, r3, #8
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00a      	beq.n	8006bc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc8:	f003 0310 	and.w	r3, r3, #16
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00a      	beq.n	8006be6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	430a      	orrs	r2, r1
 8006be4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bea:	f003 0320 	and.w	r3, r3, #32
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00a      	beq.n	8006c08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	430a      	orrs	r2, r1
 8006c06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d01a      	beq.n	8006c4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	430a      	orrs	r2, r1
 8006c28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c32:	d10a      	bne.n	8006c4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00a      	beq.n	8006c6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	605a      	str	r2, [r3, #4]
  }
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af02      	add	r7, sp, #8
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c88:	f7fb fd5e 	bl	8002748 <HAL_GetTick>
 8006c8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0308 	and.w	r3, r3, #8
 8006c98:	2b08      	cmp	r3, #8
 8006c9a:	d10e      	bne.n	8006cba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f81b 	bl	8006ce6 <UART_WaitOnFlagUntilTimeout>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e011      	b.n	8006cde <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b09c      	sub	sp, #112	; 0x70
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	60f8      	str	r0, [r7, #12]
 8006cee:	60b9      	str	r1, [r7, #8]
 8006cf0:	603b      	str	r3, [r7, #0]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cf6:	e0a7      	b.n	8006e48 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfe:	f000 80a3 	beq.w	8006e48 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d02:	f7fb fd21 	bl	8002748 <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d302      	bcc.n	8006d18 <UART_WaitOnFlagUntilTimeout+0x32>
 8006d12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d13f      	bne.n	8006d98 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d20:	e853 3f00 	ldrex	r3, [r3]
 8006d24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d2c:	667b      	str	r3, [r7, #100]	; 0x64
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	461a      	mov	r2, r3
 8006d34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d38:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d3e:	e841 2300 	strex	r3, r2, [r1]
 8006d42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1e6      	bne.n	8006d18 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	3308      	adds	r3, #8
 8006d50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d54:	e853 3f00 	ldrex	r3, [r3]
 8006d58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5c:	f023 0301 	bic.w	r3, r3, #1
 8006d60:	663b      	str	r3, [r7, #96]	; 0x60
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	3308      	adds	r3, #8
 8006d68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d72:	e841 2300 	strex	r3, r2, [r1]
 8006d76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1e5      	bne.n	8006d4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2220      	movs	r2, #32
 8006d82:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2220      	movs	r2, #32
 8006d88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e068      	b.n	8006e6a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0304 	and.w	r3, r3, #4
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d050      	beq.n	8006e48 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006db4:	d148      	bne.n	8006e48 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dbe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc8:	e853 3f00 	ldrex	r3, [r3]
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006dd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dde:	637b      	str	r3, [r7, #52]	; 0x34
 8006de0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006de4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006de6:	e841 2300 	strex	r3, r2, [r1]
 8006dea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1e6      	bne.n	8006dc0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3308      	adds	r3, #8
 8006df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	e853 3f00 	ldrex	r3, [r3]
 8006e00:	613b      	str	r3, [r7, #16]
   return(result);
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f023 0301 	bic.w	r3, r3, #1
 8006e08:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	3308      	adds	r3, #8
 8006e10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e12:	623a      	str	r2, [r7, #32]
 8006e14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e16:	69f9      	ldr	r1, [r7, #28]
 8006e18:	6a3a      	ldr	r2, [r7, #32]
 8006e1a:	e841 2300 	strex	r3, r2, [r1]
 8006e1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1e5      	bne.n	8006df2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2220      	movs	r2, #32
 8006e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e010      	b.n	8006e6a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	69da      	ldr	r2, [r3, #28]
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	4013      	ands	r3, r2
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	bf0c      	ite	eq
 8006e58:	2301      	moveq	r3, #1
 8006e5a:	2300      	movne	r3, #0
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	461a      	mov	r2, r3
 8006e60:	79fb      	ldrb	r3, [r7, #7]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	f43f af48 	beq.w	8006cf8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3770      	adds	r7, #112	; 0x70
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
	...

08006e74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e74:	b084      	sub	sp, #16
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b084      	sub	sp, #16
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	f107 001c 	add.w	r0, r7, #28
 8006e82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d120      	bne.n	8006ece <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68da      	ldr	r2, [r3, #12]
 8006e9c:	4b20      	ldr	r3, [pc, #128]	; (8006f20 <USB_CoreInit+0xac>)
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d105      	bne.n	8006ec2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fa96 	bl	80073f4 <USB_CoreReset>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	73fb      	strb	r3, [r7, #15]
 8006ecc:	e010      	b.n	8006ef0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fa8a 	bl	80073f4 <USB_CoreReset>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d10b      	bne.n	8006f0e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f043 0206 	orr.w	r2, r3, #6
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f043 0220 	orr.w	r2, r3, #32
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f1a:	b004      	add	sp, #16
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	ffbdffbf 	.word	0xffbdffbf

08006f24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f023 0201 	bic.w	r2, r3, #1
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b084      	sub	sp, #16
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	460b      	mov	r3, r1
 8006f50:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f62:	78fb      	ldrb	r3, [r7, #3]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d115      	bne.n	8006f94 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f74:	2001      	movs	r0, #1
 8006f76:	f7fb fbf3 	bl	8002760 <HAL_Delay>
      ms++;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fa29 	bl	80073d8 <USB_GetMode>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d01e      	beq.n	8006fca <USB_SetCurrentMode+0x84>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2b31      	cmp	r3, #49	; 0x31
 8006f90:	d9f0      	bls.n	8006f74 <USB_SetCurrentMode+0x2e>
 8006f92:	e01a      	b.n	8006fca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f94:	78fb      	ldrb	r3, [r7, #3]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d115      	bne.n	8006fc6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006fa6:	2001      	movs	r0, #1
 8006fa8:	f7fb fbda 	bl	8002760 <HAL_Delay>
      ms++;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fa10 	bl	80073d8 <USB_GetMode>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d005      	beq.n	8006fca <USB_SetCurrentMode+0x84>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2b31      	cmp	r3, #49	; 0x31
 8006fc2:	d9f0      	bls.n	8006fa6 <USB_SetCurrentMode+0x60>
 8006fc4:	e001      	b.n	8006fca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e005      	b.n	8006fd6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2b32      	cmp	r3, #50	; 0x32
 8006fce:	d101      	bne.n	8006fd4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e000      	b.n	8006fd6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
	...

08006fe0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b086      	sub	sp, #24
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006fee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	613b      	str	r3, [r7, #16]
 8006ffe:	e009      	b.n	8007014 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	3340      	adds	r3, #64	; 0x40
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4413      	add	r3, r2
 800700a:	2200      	movs	r2, #0
 800700c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	3301      	adds	r3, #1
 8007012:	613b      	str	r3, [r7, #16]
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	2b0e      	cmp	r3, #14
 8007018:	d9f2      	bls.n	8007000 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800701a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800701c:	2b00      	cmp	r3, #0
 800701e:	d11c      	bne.n	800705a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800702e:	f043 0302 	orr.w	r3, r3, #2
 8007032:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007038:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	601a      	str	r2, [r3, #0]
 8007058:	e005      	b.n	8007066 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800706c:	461a      	mov	r2, r3
 800706e:	2300      	movs	r3, #0
 8007070:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007078:	4619      	mov	r1, r3
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007080:	461a      	mov	r2, r3
 8007082:	680b      	ldr	r3, [r1, #0]
 8007084:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007088:	2b01      	cmp	r3, #1
 800708a:	d10c      	bne.n	80070a6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800708c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708e:	2b00      	cmp	r3, #0
 8007090:	d104      	bne.n	800709c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007092:	2100      	movs	r1, #0
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 f965 	bl	8007364 <USB_SetDevSpeed>
 800709a:	e008      	b.n	80070ae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800709c:	2101      	movs	r1, #1
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f960 	bl	8007364 <USB_SetDevSpeed>
 80070a4:	e003      	b.n	80070ae <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80070a6:	2103      	movs	r1, #3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 f95b 	bl	8007364 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80070ae:	2110      	movs	r1, #16
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f8f3 	bl	800729c <USB_FlushTxFifo>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d001      	beq.n	80070c0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f91f 	bl	8007304 <USB_FlushRxFifo>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d001      	beq.n	80070d0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d6:	461a      	mov	r2, r3
 80070d8:	2300      	movs	r3, #0
 80070da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e2:	461a      	mov	r2, r3
 80070e4:	2300      	movs	r3, #0
 80070e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ee:	461a      	mov	r2, r3
 80070f0:	2300      	movs	r3, #0
 80070f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070f4:	2300      	movs	r3, #0
 80070f6:	613b      	str	r3, [r7, #16]
 80070f8:	e043      	b.n	8007182 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	4413      	add	r3, r2
 8007102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800710c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007110:	d118      	bne.n	8007144 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10a      	bne.n	800712e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	4413      	add	r3, r2
 8007120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007124:	461a      	mov	r2, r3
 8007126:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800712a:	6013      	str	r3, [r2, #0]
 800712c:	e013      	b.n	8007156 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	4413      	add	r3, r2
 8007136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800713a:	461a      	mov	r2, r3
 800713c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	e008      	b.n	8007156 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	015a      	lsls	r2, r3, #5
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	4413      	add	r3, r2
 800714c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007150:	461a      	mov	r2, r3
 8007152:	2300      	movs	r3, #0
 8007154:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	015a      	lsls	r2, r3, #5
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	4413      	add	r3, r2
 800715e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007162:	461a      	mov	r2, r3
 8007164:	2300      	movs	r3, #0
 8007166:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007174:	461a      	mov	r2, r3
 8007176:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800717a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	3301      	adds	r3, #1
 8007180:	613b      	str	r3, [r7, #16]
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	429a      	cmp	r2, r3
 8007188:	d3b7      	bcc.n	80070fa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800718a:	2300      	movs	r3, #0
 800718c:	613b      	str	r3, [r7, #16]
 800718e:	e043      	b.n	8007218 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	015a      	lsls	r2, r3, #5
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	4413      	add	r3, r2
 8007198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071a6:	d118      	bne.n	80071da <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10a      	bne.n	80071c4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	015a      	lsls	r2, r3, #5
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	4413      	add	r3, r2
 80071b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ba:	461a      	mov	r2, r3
 80071bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80071c0:	6013      	str	r3, [r2, #0]
 80071c2:	e013      	b.n	80071ec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d0:	461a      	mov	r2, r3
 80071d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80071d6:	6013      	str	r3, [r2, #0]
 80071d8:	e008      	b.n	80071ec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	015a      	lsls	r2, r3, #5
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	4413      	add	r3, r2
 80071e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e6:	461a      	mov	r2, r3
 80071e8:	2300      	movs	r3, #0
 80071ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	015a      	lsls	r2, r3, #5
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f8:	461a      	mov	r2, r3
 80071fa:	2300      	movs	r3, #0
 80071fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	015a      	lsls	r2, r3, #5
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	4413      	add	r3, r2
 8007206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800720a:	461a      	mov	r2, r3
 800720c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007210:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	3301      	adds	r3, #1
 8007216:	613b      	str	r3, [r7, #16]
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	429a      	cmp	r2, r3
 800721e:	d3b7      	bcc.n	8007190 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800722e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007232:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007240:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	2b00      	cmp	r3, #0
 8007246:	d105      	bne.n	8007254 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	f043 0210 	orr.w	r2, r3, #16
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	699a      	ldr	r2, [r3, #24]
 8007258:	4b0e      	ldr	r3, [pc, #56]	; (8007294 <USB_DevInit+0x2b4>)
 800725a:	4313      	orrs	r3, r2
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007262:	2b00      	cmp	r3, #0
 8007264:	d005      	beq.n	8007272 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	f043 0208 	orr.w	r2, r3, #8
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007274:	2b01      	cmp	r3, #1
 8007276:	d105      	bne.n	8007284 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	699a      	ldr	r2, [r3, #24]
 800727c:	4b06      	ldr	r3, [pc, #24]	; (8007298 <USB_DevInit+0x2b8>)
 800727e:	4313      	orrs	r3, r2
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007284:	7dfb      	ldrb	r3, [r7, #23]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007290:	b004      	add	sp, #16
 8007292:	4770      	bx	lr
 8007294:	803c3800 	.word	0x803c3800
 8007298:	40000004 	.word	0x40000004

0800729c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	3301      	adds	r3, #1
 80072ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4a13      	ldr	r2, [pc, #76]	; (8007300 <USB_FlushTxFifo+0x64>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d901      	bls.n	80072bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e01b      	b.n	80072f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	daf2      	bge.n	80072aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80072c4:	2300      	movs	r3, #0
 80072c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	019b      	lsls	r3, r3, #6
 80072cc:	f043 0220 	orr.w	r2, r3, #32
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	3301      	adds	r3, #1
 80072d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	4a08      	ldr	r2, [pc, #32]	; (8007300 <USB_FlushTxFifo+0x64>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d901      	bls.n	80072e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e006      	b.n	80072f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	f003 0320 	and.w	r3, r3, #32
 80072ee:	2b20      	cmp	r3, #32
 80072f0:	d0f0      	beq.n	80072d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	00030d40 	.word	0x00030d40

08007304 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	3301      	adds	r3, #1
 8007314:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4a11      	ldr	r2, [pc, #68]	; (8007360 <USB_FlushRxFifo+0x5c>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d901      	bls.n	8007322 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e018      	b.n	8007354 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	2b00      	cmp	r3, #0
 8007328:	daf2      	bge.n	8007310 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2210      	movs	r2, #16
 8007332:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	3301      	adds	r3, #1
 8007338:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	4a08      	ldr	r2, [pc, #32]	; (8007360 <USB_FlushRxFifo+0x5c>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d901      	bls.n	8007346 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007342:	2303      	movs	r3, #3
 8007344:	e006      	b.n	8007354 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	f003 0310 	and.w	r3, r3, #16
 800734e:	2b10      	cmp	r3, #16
 8007350:	d0f0      	beq.n	8007334 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3714      	adds	r7, #20
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr
 8007360:	00030d40 	.word	0x00030d40

08007364 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	460b      	mov	r3, r1
 800736e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	78fb      	ldrb	r3, [r7, #3]
 800737e:	68f9      	ldr	r1, [r7, #12]
 8007380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007384:	4313      	orrs	r3, r2
 8007386:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007396:	b480      	push	{r7}
 8007398:	b085      	sub	sp, #20
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073b0:	f023 0303 	bic.w	r3, r3, #3
 80073b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073c4:	f043 0302 	orr.w	r3, r3, #2
 80073c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	695b      	ldr	r3, [r3, #20]
 80073e4:	f003 0301 	and.w	r3, r3, #1
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073fc:	2300      	movs	r3, #0
 80073fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	3301      	adds	r3, #1
 8007404:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	4a13      	ldr	r2, [pc, #76]	; (8007458 <USB_CoreReset+0x64>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d901      	bls.n	8007412 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e01b      	b.n	800744a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	2b00      	cmp	r3, #0
 8007418:	daf2      	bge.n	8007400 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	f043 0201 	orr.w	r2, r3, #1
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	3301      	adds	r3, #1
 800742e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	4a09      	ldr	r2, [pc, #36]	; (8007458 <USB_CoreReset+0x64>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d901      	bls.n	800743c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e006      	b.n	800744a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	f003 0301 	and.w	r3, r3, #1
 8007444:	2b01      	cmp	r3, #1
 8007446:	d0f0      	beq.n	800742a <USB_CoreReset+0x36>

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	00030d40 	.word	0x00030d40

0800745c <__errno>:
 800745c:	4b01      	ldr	r3, [pc, #4]	; (8007464 <__errno+0x8>)
 800745e:	6818      	ldr	r0, [r3, #0]
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	2000000c 	.word	0x2000000c

08007468 <__libc_init_array>:
 8007468:	b570      	push	{r4, r5, r6, lr}
 800746a:	4d0d      	ldr	r5, [pc, #52]	; (80074a0 <__libc_init_array+0x38>)
 800746c:	4c0d      	ldr	r4, [pc, #52]	; (80074a4 <__libc_init_array+0x3c>)
 800746e:	1b64      	subs	r4, r4, r5
 8007470:	10a4      	asrs	r4, r4, #2
 8007472:	2600      	movs	r6, #0
 8007474:	42a6      	cmp	r6, r4
 8007476:	d109      	bne.n	800748c <__libc_init_array+0x24>
 8007478:	4d0b      	ldr	r5, [pc, #44]	; (80074a8 <__libc_init_array+0x40>)
 800747a:	4c0c      	ldr	r4, [pc, #48]	; (80074ac <__libc_init_array+0x44>)
 800747c:	f002 ff18 	bl	800a2b0 <_init>
 8007480:	1b64      	subs	r4, r4, r5
 8007482:	10a4      	asrs	r4, r4, #2
 8007484:	2600      	movs	r6, #0
 8007486:	42a6      	cmp	r6, r4
 8007488:	d105      	bne.n	8007496 <__libc_init_array+0x2e>
 800748a:	bd70      	pop	{r4, r5, r6, pc}
 800748c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007490:	4798      	blx	r3
 8007492:	3601      	adds	r6, #1
 8007494:	e7ee      	b.n	8007474 <__libc_init_array+0xc>
 8007496:	f855 3b04 	ldr.w	r3, [r5], #4
 800749a:	4798      	blx	r3
 800749c:	3601      	adds	r6, #1
 800749e:	e7f2      	b.n	8007486 <__libc_init_array+0x1e>
 80074a0:	0800a6dc 	.word	0x0800a6dc
 80074a4:	0800a6dc 	.word	0x0800a6dc
 80074a8:	0800a6dc 	.word	0x0800a6dc
 80074ac:	0800a6e0 	.word	0x0800a6e0

080074b0 <memset>:
 80074b0:	4402      	add	r2, r0
 80074b2:	4603      	mov	r3, r0
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d100      	bne.n	80074ba <memset+0xa>
 80074b8:	4770      	bx	lr
 80074ba:	f803 1b01 	strb.w	r1, [r3], #1
 80074be:	e7f9      	b.n	80074b4 <memset+0x4>

080074c0 <__cvt>:
 80074c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074c4:	ec55 4b10 	vmov	r4, r5, d0
 80074c8:	2d00      	cmp	r5, #0
 80074ca:	460e      	mov	r6, r1
 80074cc:	4619      	mov	r1, r3
 80074ce:	462b      	mov	r3, r5
 80074d0:	bfbb      	ittet	lt
 80074d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80074d6:	461d      	movlt	r5, r3
 80074d8:	2300      	movge	r3, #0
 80074da:	232d      	movlt	r3, #45	; 0x2d
 80074dc:	700b      	strb	r3, [r1, #0]
 80074de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80074e4:	4691      	mov	r9, r2
 80074e6:	f023 0820 	bic.w	r8, r3, #32
 80074ea:	bfbc      	itt	lt
 80074ec:	4622      	movlt	r2, r4
 80074ee:	4614      	movlt	r4, r2
 80074f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074f4:	d005      	beq.n	8007502 <__cvt+0x42>
 80074f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80074fa:	d100      	bne.n	80074fe <__cvt+0x3e>
 80074fc:	3601      	adds	r6, #1
 80074fe:	2102      	movs	r1, #2
 8007500:	e000      	b.n	8007504 <__cvt+0x44>
 8007502:	2103      	movs	r1, #3
 8007504:	ab03      	add	r3, sp, #12
 8007506:	9301      	str	r3, [sp, #4]
 8007508:	ab02      	add	r3, sp, #8
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	ec45 4b10 	vmov	d0, r4, r5
 8007510:	4653      	mov	r3, sl
 8007512:	4632      	mov	r2, r6
 8007514:	f000 fd00 	bl	8007f18 <_dtoa_r>
 8007518:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800751c:	4607      	mov	r7, r0
 800751e:	d102      	bne.n	8007526 <__cvt+0x66>
 8007520:	f019 0f01 	tst.w	r9, #1
 8007524:	d022      	beq.n	800756c <__cvt+0xac>
 8007526:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800752a:	eb07 0906 	add.w	r9, r7, r6
 800752e:	d110      	bne.n	8007552 <__cvt+0x92>
 8007530:	783b      	ldrb	r3, [r7, #0]
 8007532:	2b30      	cmp	r3, #48	; 0x30
 8007534:	d10a      	bne.n	800754c <__cvt+0x8c>
 8007536:	2200      	movs	r2, #0
 8007538:	2300      	movs	r3, #0
 800753a:	4620      	mov	r0, r4
 800753c:	4629      	mov	r1, r5
 800753e:	f7f9 fae3 	bl	8000b08 <__aeabi_dcmpeq>
 8007542:	b918      	cbnz	r0, 800754c <__cvt+0x8c>
 8007544:	f1c6 0601 	rsb	r6, r6, #1
 8007548:	f8ca 6000 	str.w	r6, [sl]
 800754c:	f8da 3000 	ldr.w	r3, [sl]
 8007550:	4499      	add	r9, r3
 8007552:	2200      	movs	r2, #0
 8007554:	2300      	movs	r3, #0
 8007556:	4620      	mov	r0, r4
 8007558:	4629      	mov	r1, r5
 800755a:	f7f9 fad5 	bl	8000b08 <__aeabi_dcmpeq>
 800755e:	b108      	cbz	r0, 8007564 <__cvt+0xa4>
 8007560:	f8cd 900c 	str.w	r9, [sp, #12]
 8007564:	2230      	movs	r2, #48	; 0x30
 8007566:	9b03      	ldr	r3, [sp, #12]
 8007568:	454b      	cmp	r3, r9
 800756a:	d307      	bcc.n	800757c <__cvt+0xbc>
 800756c:	9b03      	ldr	r3, [sp, #12]
 800756e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007570:	1bdb      	subs	r3, r3, r7
 8007572:	4638      	mov	r0, r7
 8007574:	6013      	str	r3, [r2, #0]
 8007576:	b004      	add	sp, #16
 8007578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800757c:	1c59      	adds	r1, r3, #1
 800757e:	9103      	str	r1, [sp, #12]
 8007580:	701a      	strb	r2, [r3, #0]
 8007582:	e7f0      	b.n	8007566 <__cvt+0xa6>

08007584 <__exponent>:
 8007584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007586:	4603      	mov	r3, r0
 8007588:	2900      	cmp	r1, #0
 800758a:	bfb8      	it	lt
 800758c:	4249      	neglt	r1, r1
 800758e:	f803 2b02 	strb.w	r2, [r3], #2
 8007592:	bfb4      	ite	lt
 8007594:	222d      	movlt	r2, #45	; 0x2d
 8007596:	222b      	movge	r2, #43	; 0x2b
 8007598:	2909      	cmp	r1, #9
 800759a:	7042      	strb	r2, [r0, #1]
 800759c:	dd2a      	ble.n	80075f4 <__exponent+0x70>
 800759e:	f10d 0407 	add.w	r4, sp, #7
 80075a2:	46a4      	mov	ip, r4
 80075a4:	270a      	movs	r7, #10
 80075a6:	46a6      	mov	lr, r4
 80075a8:	460a      	mov	r2, r1
 80075aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80075ae:	fb07 1516 	mls	r5, r7, r6, r1
 80075b2:	3530      	adds	r5, #48	; 0x30
 80075b4:	2a63      	cmp	r2, #99	; 0x63
 80075b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80075ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80075be:	4631      	mov	r1, r6
 80075c0:	dcf1      	bgt.n	80075a6 <__exponent+0x22>
 80075c2:	3130      	adds	r1, #48	; 0x30
 80075c4:	f1ae 0502 	sub.w	r5, lr, #2
 80075c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80075cc:	1c44      	adds	r4, r0, #1
 80075ce:	4629      	mov	r1, r5
 80075d0:	4561      	cmp	r1, ip
 80075d2:	d30a      	bcc.n	80075ea <__exponent+0x66>
 80075d4:	f10d 0209 	add.w	r2, sp, #9
 80075d8:	eba2 020e 	sub.w	r2, r2, lr
 80075dc:	4565      	cmp	r5, ip
 80075de:	bf88      	it	hi
 80075e0:	2200      	movhi	r2, #0
 80075e2:	4413      	add	r3, r2
 80075e4:	1a18      	subs	r0, r3, r0
 80075e6:	b003      	add	sp, #12
 80075e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80075f2:	e7ed      	b.n	80075d0 <__exponent+0x4c>
 80075f4:	2330      	movs	r3, #48	; 0x30
 80075f6:	3130      	adds	r1, #48	; 0x30
 80075f8:	7083      	strb	r3, [r0, #2]
 80075fa:	70c1      	strb	r1, [r0, #3]
 80075fc:	1d03      	adds	r3, r0, #4
 80075fe:	e7f1      	b.n	80075e4 <__exponent+0x60>

08007600 <_printf_float>:
 8007600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007604:	ed2d 8b02 	vpush	{d8}
 8007608:	b08d      	sub	sp, #52	; 0x34
 800760a:	460c      	mov	r4, r1
 800760c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007610:	4616      	mov	r6, r2
 8007612:	461f      	mov	r7, r3
 8007614:	4605      	mov	r5, r0
 8007616:	f001 fa6d 	bl	8008af4 <_localeconv_r>
 800761a:	f8d0 a000 	ldr.w	sl, [r0]
 800761e:	4650      	mov	r0, sl
 8007620:	f7f8 fdf6 	bl	8000210 <strlen>
 8007624:	2300      	movs	r3, #0
 8007626:	930a      	str	r3, [sp, #40]	; 0x28
 8007628:	6823      	ldr	r3, [r4, #0]
 800762a:	9305      	str	r3, [sp, #20]
 800762c:	f8d8 3000 	ldr.w	r3, [r8]
 8007630:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007634:	3307      	adds	r3, #7
 8007636:	f023 0307 	bic.w	r3, r3, #7
 800763a:	f103 0208 	add.w	r2, r3, #8
 800763e:	f8c8 2000 	str.w	r2, [r8]
 8007642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007646:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800764a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800764e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007652:	9307      	str	r3, [sp, #28]
 8007654:	f8cd 8018 	str.w	r8, [sp, #24]
 8007658:	ee08 0a10 	vmov	s16, r0
 800765c:	4b9f      	ldr	r3, [pc, #636]	; (80078dc <_printf_float+0x2dc>)
 800765e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007662:	f04f 32ff 	mov.w	r2, #4294967295
 8007666:	f7f9 fa81 	bl	8000b6c <__aeabi_dcmpun>
 800766a:	bb88      	cbnz	r0, 80076d0 <_printf_float+0xd0>
 800766c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007670:	4b9a      	ldr	r3, [pc, #616]	; (80078dc <_printf_float+0x2dc>)
 8007672:	f04f 32ff 	mov.w	r2, #4294967295
 8007676:	f7f9 fa5b 	bl	8000b30 <__aeabi_dcmple>
 800767a:	bb48      	cbnz	r0, 80076d0 <_printf_float+0xd0>
 800767c:	2200      	movs	r2, #0
 800767e:	2300      	movs	r3, #0
 8007680:	4640      	mov	r0, r8
 8007682:	4649      	mov	r1, r9
 8007684:	f7f9 fa4a 	bl	8000b1c <__aeabi_dcmplt>
 8007688:	b110      	cbz	r0, 8007690 <_printf_float+0x90>
 800768a:	232d      	movs	r3, #45	; 0x2d
 800768c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007690:	4b93      	ldr	r3, [pc, #588]	; (80078e0 <_printf_float+0x2e0>)
 8007692:	4894      	ldr	r0, [pc, #592]	; (80078e4 <_printf_float+0x2e4>)
 8007694:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007698:	bf94      	ite	ls
 800769a:	4698      	movls	r8, r3
 800769c:	4680      	movhi	r8, r0
 800769e:	2303      	movs	r3, #3
 80076a0:	6123      	str	r3, [r4, #16]
 80076a2:	9b05      	ldr	r3, [sp, #20]
 80076a4:	f023 0204 	bic.w	r2, r3, #4
 80076a8:	6022      	str	r2, [r4, #0]
 80076aa:	f04f 0900 	mov.w	r9, #0
 80076ae:	9700      	str	r7, [sp, #0]
 80076b0:	4633      	mov	r3, r6
 80076b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80076b4:	4621      	mov	r1, r4
 80076b6:	4628      	mov	r0, r5
 80076b8:	f000 f9d8 	bl	8007a6c <_printf_common>
 80076bc:	3001      	adds	r0, #1
 80076be:	f040 8090 	bne.w	80077e2 <_printf_float+0x1e2>
 80076c2:	f04f 30ff 	mov.w	r0, #4294967295
 80076c6:	b00d      	add	sp, #52	; 0x34
 80076c8:	ecbd 8b02 	vpop	{d8}
 80076cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d0:	4642      	mov	r2, r8
 80076d2:	464b      	mov	r3, r9
 80076d4:	4640      	mov	r0, r8
 80076d6:	4649      	mov	r1, r9
 80076d8:	f7f9 fa48 	bl	8000b6c <__aeabi_dcmpun>
 80076dc:	b140      	cbz	r0, 80076f0 <_printf_float+0xf0>
 80076de:	464b      	mov	r3, r9
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	bfbc      	itt	lt
 80076e4:	232d      	movlt	r3, #45	; 0x2d
 80076e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80076ea:	487f      	ldr	r0, [pc, #508]	; (80078e8 <_printf_float+0x2e8>)
 80076ec:	4b7f      	ldr	r3, [pc, #508]	; (80078ec <_printf_float+0x2ec>)
 80076ee:	e7d1      	b.n	8007694 <_printf_float+0x94>
 80076f0:	6863      	ldr	r3, [r4, #4]
 80076f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80076f6:	9206      	str	r2, [sp, #24]
 80076f8:	1c5a      	adds	r2, r3, #1
 80076fa:	d13f      	bne.n	800777c <_printf_float+0x17c>
 80076fc:	2306      	movs	r3, #6
 80076fe:	6063      	str	r3, [r4, #4]
 8007700:	9b05      	ldr	r3, [sp, #20]
 8007702:	6861      	ldr	r1, [r4, #4]
 8007704:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007708:	2300      	movs	r3, #0
 800770a:	9303      	str	r3, [sp, #12]
 800770c:	ab0a      	add	r3, sp, #40	; 0x28
 800770e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007712:	ab09      	add	r3, sp, #36	; 0x24
 8007714:	ec49 8b10 	vmov	d0, r8, r9
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	6022      	str	r2, [r4, #0]
 800771c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007720:	4628      	mov	r0, r5
 8007722:	f7ff fecd 	bl	80074c0 <__cvt>
 8007726:	9b06      	ldr	r3, [sp, #24]
 8007728:	9909      	ldr	r1, [sp, #36]	; 0x24
 800772a:	2b47      	cmp	r3, #71	; 0x47
 800772c:	4680      	mov	r8, r0
 800772e:	d108      	bne.n	8007742 <_printf_float+0x142>
 8007730:	1cc8      	adds	r0, r1, #3
 8007732:	db02      	blt.n	800773a <_printf_float+0x13a>
 8007734:	6863      	ldr	r3, [r4, #4]
 8007736:	4299      	cmp	r1, r3
 8007738:	dd41      	ble.n	80077be <_printf_float+0x1be>
 800773a:	f1ab 0b02 	sub.w	fp, fp, #2
 800773e:	fa5f fb8b 	uxtb.w	fp, fp
 8007742:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007746:	d820      	bhi.n	800778a <_printf_float+0x18a>
 8007748:	3901      	subs	r1, #1
 800774a:	465a      	mov	r2, fp
 800774c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007750:	9109      	str	r1, [sp, #36]	; 0x24
 8007752:	f7ff ff17 	bl	8007584 <__exponent>
 8007756:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007758:	1813      	adds	r3, r2, r0
 800775a:	2a01      	cmp	r2, #1
 800775c:	4681      	mov	r9, r0
 800775e:	6123      	str	r3, [r4, #16]
 8007760:	dc02      	bgt.n	8007768 <_printf_float+0x168>
 8007762:	6822      	ldr	r2, [r4, #0]
 8007764:	07d2      	lsls	r2, r2, #31
 8007766:	d501      	bpl.n	800776c <_printf_float+0x16c>
 8007768:	3301      	adds	r3, #1
 800776a:	6123      	str	r3, [r4, #16]
 800776c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007770:	2b00      	cmp	r3, #0
 8007772:	d09c      	beq.n	80076ae <_printf_float+0xae>
 8007774:	232d      	movs	r3, #45	; 0x2d
 8007776:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800777a:	e798      	b.n	80076ae <_printf_float+0xae>
 800777c:	9a06      	ldr	r2, [sp, #24]
 800777e:	2a47      	cmp	r2, #71	; 0x47
 8007780:	d1be      	bne.n	8007700 <_printf_float+0x100>
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1bc      	bne.n	8007700 <_printf_float+0x100>
 8007786:	2301      	movs	r3, #1
 8007788:	e7b9      	b.n	80076fe <_printf_float+0xfe>
 800778a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800778e:	d118      	bne.n	80077c2 <_printf_float+0x1c2>
 8007790:	2900      	cmp	r1, #0
 8007792:	6863      	ldr	r3, [r4, #4]
 8007794:	dd0b      	ble.n	80077ae <_printf_float+0x1ae>
 8007796:	6121      	str	r1, [r4, #16]
 8007798:	b913      	cbnz	r3, 80077a0 <_printf_float+0x1a0>
 800779a:	6822      	ldr	r2, [r4, #0]
 800779c:	07d0      	lsls	r0, r2, #31
 800779e:	d502      	bpl.n	80077a6 <_printf_float+0x1a6>
 80077a0:	3301      	adds	r3, #1
 80077a2:	440b      	add	r3, r1
 80077a4:	6123      	str	r3, [r4, #16]
 80077a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80077a8:	f04f 0900 	mov.w	r9, #0
 80077ac:	e7de      	b.n	800776c <_printf_float+0x16c>
 80077ae:	b913      	cbnz	r3, 80077b6 <_printf_float+0x1b6>
 80077b0:	6822      	ldr	r2, [r4, #0]
 80077b2:	07d2      	lsls	r2, r2, #31
 80077b4:	d501      	bpl.n	80077ba <_printf_float+0x1ba>
 80077b6:	3302      	adds	r3, #2
 80077b8:	e7f4      	b.n	80077a4 <_printf_float+0x1a4>
 80077ba:	2301      	movs	r3, #1
 80077bc:	e7f2      	b.n	80077a4 <_printf_float+0x1a4>
 80077be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80077c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077c4:	4299      	cmp	r1, r3
 80077c6:	db05      	blt.n	80077d4 <_printf_float+0x1d4>
 80077c8:	6823      	ldr	r3, [r4, #0]
 80077ca:	6121      	str	r1, [r4, #16]
 80077cc:	07d8      	lsls	r0, r3, #31
 80077ce:	d5ea      	bpl.n	80077a6 <_printf_float+0x1a6>
 80077d0:	1c4b      	adds	r3, r1, #1
 80077d2:	e7e7      	b.n	80077a4 <_printf_float+0x1a4>
 80077d4:	2900      	cmp	r1, #0
 80077d6:	bfd4      	ite	le
 80077d8:	f1c1 0202 	rsble	r2, r1, #2
 80077dc:	2201      	movgt	r2, #1
 80077de:	4413      	add	r3, r2
 80077e0:	e7e0      	b.n	80077a4 <_printf_float+0x1a4>
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	055a      	lsls	r2, r3, #21
 80077e6:	d407      	bmi.n	80077f8 <_printf_float+0x1f8>
 80077e8:	6923      	ldr	r3, [r4, #16]
 80077ea:	4642      	mov	r2, r8
 80077ec:	4631      	mov	r1, r6
 80077ee:	4628      	mov	r0, r5
 80077f0:	47b8      	blx	r7
 80077f2:	3001      	adds	r0, #1
 80077f4:	d12c      	bne.n	8007850 <_printf_float+0x250>
 80077f6:	e764      	b.n	80076c2 <_printf_float+0xc2>
 80077f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80077fc:	f240 80e0 	bls.w	80079c0 <_printf_float+0x3c0>
 8007800:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007804:	2200      	movs	r2, #0
 8007806:	2300      	movs	r3, #0
 8007808:	f7f9 f97e 	bl	8000b08 <__aeabi_dcmpeq>
 800780c:	2800      	cmp	r0, #0
 800780e:	d034      	beq.n	800787a <_printf_float+0x27a>
 8007810:	4a37      	ldr	r2, [pc, #220]	; (80078f0 <_printf_float+0x2f0>)
 8007812:	2301      	movs	r3, #1
 8007814:	4631      	mov	r1, r6
 8007816:	4628      	mov	r0, r5
 8007818:	47b8      	blx	r7
 800781a:	3001      	adds	r0, #1
 800781c:	f43f af51 	beq.w	80076c2 <_printf_float+0xc2>
 8007820:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007824:	429a      	cmp	r2, r3
 8007826:	db02      	blt.n	800782e <_printf_float+0x22e>
 8007828:	6823      	ldr	r3, [r4, #0]
 800782a:	07d8      	lsls	r0, r3, #31
 800782c:	d510      	bpl.n	8007850 <_printf_float+0x250>
 800782e:	ee18 3a10 	vmov	r3, s16
 8007832:	4652      	mov	r2, sl
 8007834:	4631      	mov	r1, r6
 8007836:	4628      	mov	r0, r5
 8007838:	47b8      	blx	r7
 800783a:	3001      	adds	r0, #1
 800783c:	f43f af41 	beq.w	80076c2 <_printf_float+0xc2>
 8007840:	f04f 0800 	mov.w	r8, #0
 8007844:	f104 091a 	add.w	r9, r4, #26
 8007848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800784a:	3b01      	subs	r3, #1
 800784c:	4543      	cmp	r3, r8
 800784e:	dc09      	bgt.n	8007864 <_printf_float+0x264>
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	079b      	lsls	r3, r3, #30
 8007854:	f100 8105 	bmi.w	8007a62 <_printf_float+0x462>
 8007858:	68e0      	ldr	r0, [r4, #12]
 800785a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800785c:	4298      	cmp	r0, r3
 800785e:	bfb8      	it	lt
 8007860:	4618      	movlt	r0, r3
 8007862:	e730      	b.n	80076c6 <_printf_float+0xc6>
 8007864:	2301      	movs	r3, #1
 8007866:	464a      	mov	r2, r9
 8007868:	4631      	mov	r1, r6
 800786a:	4628      	mov	r0, r5
 800786c:	47b8      	blx	r7
 800786e:	3001      	adds	r0, #1
 8007870:	f43f af27 	beq.w	80076c2 <_printf_float+0xc2>
 8007874:	f108 0801 	add.w	r8, r8, #1
 8007878:	e7e6      	b.n	8007848 <_printf_float+0x248>
 800787a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800787c:	2b00      	cmp	r3, #0
 800787e:	dc39      	bgt.n	80078f4 <_printf_float+0x2f4>
 8007880:	4a1b      	ldr	r2, [pc, #108]	; (80078f0 <_printf_float+0x2f0>)
 8007882:	2301      	movs	r3, #1
 8007884:	4631      	mov	r1, r6
 8007886:	4628      	mov	r0, r5
 8007888:	47b8      	blx	r7
 800788a:	3001      	adds	r0, #1
 800788c:	f43f af19 	beq.w	80076c2 <_printf_float+0xc2>
 8007890:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007894:	4313      	orrs	r3, r2
 8007896:	d102      	bne.n	800789e <_printf_float+0x29e>
 8007898:	6823      	ldr	r3, [r4, #0]
 800789a:	07d9      	lsls	r1, r3, #31
 800789c:	d5d8      	bpl.n	8007850 <_printf_float+0x250>
 800789e:	ee18 3a10 	vmov	r3, s16
 80078a2:	4652      	mov	r2, sl
 80078a4:	4631      	mov	r1, r6
 80078a6:	4628      	mov	r0, r5
 80078a8:	47b8      	blx	r7
 80078aa:	3001      	adds	r0, #1
 80078ac:	f43f af09 	beq.w	80076c2 <_printf_float+0xc2>
 80078b0:	f04f 0900 	mov.w	r9, #0
 80078b4:	f104 0a1a 	add.w	sl, r4, #26
 80078b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ba:	425b      	negs	r3, r3
 80078bc:	454b      	cmp	r3, r9
 80078be:	dc01      	bgt.n	80078c4 <_printf_float+0x2c4>
 80078c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c2:	e792      	b.n	80077ea <_printf_float+0x1ea>
 80078c4:	2301      	movs	r3, #1
 80078c6:	4652      	mov	r2, sl
 80078c8:	4631      	mov	r1, r6
 80078ca:	4628      	mov	r0, r5
 80078cc:	47b8      	blx	r7
 80078ce:	3001      	adds	r0, #1
 80078d0:	f43f aef7 	beq.w	80076c2 <_printf_float+0xc2>
 80078d4:	f109 0901 	add.w	r9, r9, #1
 80078d8:	e7ee      	b.n	80078b8 <_printf_float+0x2b8>
 80078da:	bf00      	nop
 80078dc:	7fefffff 	.word	0x7fefffff
 80078e0:	0800a2fc 	.word	0x0800a2fc
 80078e4:	0800a300 	.word	0x0800a300
 80078e8:	0800a308 	.word	0x0800a308
 80078ec:	0800a304 	.word	0x0800a304
 80078f0:	0800a30c 	.word	0x0800a30c
 80078f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078f8:	429a      	cmp	r2, r3
 80078fa:	bfa8      	it	ge
 80078fc:	461a      	movge	r2, r3
 80078fe:	2a00      	cmp	r2, #0
 8007900:	4691      	mov	r9, r2
 8007902:	dc37      	bgt.n	8007974 <_printf_float+0x374>
 8007904:	f04f 0b00 	mov.w	fp, #0
 8007908:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800790c:	f104 021a 	add.w	r2, r4, #26
 8007910:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007912:	9305      	str	r3, [sp, #20]
 8007914:	eba3 0309 	sub.w	r3, r3, r9
 8007918:	455b      	cmp	r3, fp
 800791a:	dc33      	bgt.n	8007984 <_printf_float+0x384>
 800791c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007920:	429a      	cmp	r2, r3
 8007922:	db3b      	blt.n	800799c <_printf_float+0x39c>
 8007924:	6823      	ldr	r3, [r4, #0]
 8007926:	07da      	lsls	r2, r3, #31
 8007928:	d438      	bmi.n	800799c <_printf_float+0x39c>
 800792a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800792c:	9a05      	ldr	r2, [sp, #20]
 800792e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007930:	1a9a      	subs	r2, r3, r2
 8007932:	eba3 0901 	sub.w	r9, r3, r1
 8007936:	4591      	cmp	r9, r2
 8007938:	bfa8      	it	ge
 800793a:	4691      	movge	r9, r2
 800793c:	f1b9 0f00 	cmp.w	r9, #0
 8007940:	dc35      	bgt.n	80079ae <_printf_float+0x3ae>
 8007942:	f04f 0800 	mov.w	r8, #0
 8007946:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800794a:	f104 0a1a 	add.w	sl, r4, #26
 800794e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007952:	1a9b      	subs	r3, r3, r2
 8007954:	eba3 0309 	sub.w	r3, r3, r9
 8007958:	4543      	cmp	r3, r8
 800795a:	f77f af79 	ble.w	8007850 <_printf_float+0x250>
 800795e:	2301      	movs	r3, #1
 8007960:	4652      	mov	r2, sl
 8007962:	4631      	mov	r1, r6
 8007964:	4628      	mov	r0, r5
 8007966:	47b8      	blx	r7
 8007968:	3001      	adds	r0, #1
 800796a:	f43f aeaa 	beq.w	80076c2 <_printf_float+0xc2>
 800796e:	f108 0801 	add.w	r8, r8, #1
 8007972:	e7ec      	b.n	800794e <_printf_float+0x34e>
 8007974:	4613      	mov	r3, r2
 8007976:	4631      	mov	r1, r6
 8007978:	4642      	mov	r2, r8
 800797a:	4628      	mov	r0, r5
 800797c:	47b8      	blx	r7
 800797e:	3001      	adds	r0, #1
 8007980:	d1c0      	bne.n	8007904 <_printf_float+0x304>
 8007982:	e69e      	b.n	80076c2 <_printf_float+0xc2>
 8007984:	2301      	movs	r3, #1
 8007986:	4631      	mov	r1, r6
 8007988:	4628      	mov	r0, r5
 800798a:	9205      	str	r2, [sp, #20]
 800798c:	47b8      	blx	r7
 800798e:	3001      	adds	r0, #1
 8007990:	f43f ae97 	beq.w	80076c2 <_printf_float+0xc2>
 8007994:	9a05      	ldr	r2, [sp, #20]
 8007996:	f10b 0b01 	add.w	fp, fp, #1
 800799a:	e7b9      	b.n	8007910 <_printf_float+0x310>
 800799c:	ee18 3a10 	vmov	r3, s16
 80079a0:	4652      	mov	r2, sl
 80079a2:	4631      	mov	r1, r6
 80079a4:	4628      	mov	r0, r5
 80079a6:	47b8      	blx	r7
 80079a8:	3001      	adds	r0, #1
 80079aa:	d1be      	bne.n	800792a <_printf_float+0x32a>
 80079ac:	e689      	b.n	80076c2 <_printf_float+0xc2>
 80079ae:	9a05      	ldr	r2, [sp, #20]
 80079b0:	464b      	mov	r3, r9
 80079b2:	4442      	add	r2, r8
 80079b4:	4631      	mov	r1, r6
 80079b6:	4628      	mov	r0, r5
 80079b8:	47b8      	blx	r7
 80079ba:	3001      	adds	r0, #1
 80079bc:	d1c1      	bne.n	8007942 <_printf_float+0x342>
 80079be:	e680      	b.n	80076c2 <_printf_float+0xc2>
 80079c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079c2:	2a01      	cmp	r2, #1
 80079c4:	dc01      	bgt.n	80079ca <_printf_float+0x3ca>
 80079c6:	07db      	lsls	r3, r3, #31
 80079c8:	d538      	bpl.n	8007a3c <_printf_float+0x43c>
 80079ca:	2301      	movs	r3, #1
 80079cc:	4642      	mov	r2, r8
 80079ce:	4631      	mov	r1, r6
 80079d0:	4628      	mov	r0, r5
 80079d2:	47b8      	blx	r7
 80079d4:	3001      	adds	r0, #1
 80079d6:	f43f ae74 	beq.w	80076c2 <_printf_float+0xc2>
 80079da:	ee18 3a10 	vmov	r3, s16
 80079de:	4652      	mov	r2, sl
 80079e0:	4631      	mov	r1, r6
 80079e2:	4628      	mov	r0, r5
 80079e4:	47b8      	blx	r7
 80079e6:	3001      	adds	r0, #1
 80079e8:	f43f ae6b 	beq.w	80076c2 <_printf_float+0xc2>
 80079ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079f0:	2200      	movs	r2, #0
 80079f2:	2300      	movs	r3, #0
 80079f4:	f7f9 f888 	bl	8000b08 <__aeabi_dcmpeq>
 80079f8:	b9d8      	cbnz	r0, 8007a32 <_printf_float+0x432>
 80079fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079fc:	f108 0201 	add.w	r2, r8, #1
 8007a00:	3b01      	subs	r3, #1
 8007a02:	4631      	mov	r1, r6
 8007a04:	4628      	mov	r0, r5
 8007a06:	47b8      	blx	r7
 8007a08:	3001      	adds	r0, #1
 8007a0a:	d10e      	bne.n	8007a2a <_printf_float+0x42a>
 8007a0c:	e659      	b.n	80076c2 <_printf_float+0xc2>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	4652      	mov	r2, sl
 8007a12:	4631      	mov	r1, r6
 8007a14:	4628      	mov	r0, r5
 8007a16:	47b8      	blx	r7
 8007a18:	3001      	adds	r0, #1
 8007a1a:	f43f ae52 	beq.w	80076c2 <_printf_float+0xc2>
 8007a1e:	f108 0801 	add.w	r8, r8, #1
 8007a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a24:	3b01      	subs	r3, #1
 8007a26:	4543      	cmp	r3, r8
 8007a28:	dcf1      	bgt.n	8007a0e <_printf_float+0x40e>
 8007a2a:	464b      	mov	r3, r9
 8007a2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a30:	e6dc      	b.n	80077ec <_printf_float+0x1ec>
 8007a32:	f04f 0800 	mov.w	r8, #0
 8007a36:	f104 0a1a 	add.w	sl, r4, #26
 8007a3a:	e7f2      	b.n	8007a22 <_printf_float+0x422>
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	4642      	mov	r2, r8
 8007a40:	e7df      	b.n	8007a02 <_printf_float+0x402>
 8007a42:	2301      	movs	r3, #1
 8007a44:	464a      	mov	r2, r9
 8007a46:	4631      	mov	r1, r6
 8007a48:	4628      	mov	r0, r5
 8007a4a:	47b8      	blx	r7
 8007a4c:	3001      	adds	r0, #1
 8007a4e:	f43f ae38 	beq.w	80076c2 <_printf_float+0xc2>
 8007a52:	f108 0801 	add.w	r8, r8, #1
 8007a56:	68e3      	ldr	r3, [r4, #12]
 8007a58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a5a:	1a5b      	subs	r3, r3, r1
 8007a5c:	4543      	cmp	r3, r8
 8007a5e:	dcf0      	bgt.n	8007a42 <_printf_float+0x442>
 8007a60:	e6fa      	b.n	8007858 <_printf_float+0x258>
 8007a62:	f04f 0800 	mov.w	r8, #0
 8007a66:	f104 0919 	add.w	r9, r4, #25
 8007a6a:	e7f4      	b.n	8007a56 <_printf_float+0x456>

08007a6c <_printf_common>:
 8007a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a70:	4616      	mov	r6, r2
 8007a72:	4699      	mov	r9, r3
 8007a74:	688a      	ldr	r2, [r1, #8]
 8007a76:	690b      	ldr	r3, [r1, #16]
 8007a78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	bfb8      	it	lt
 8007a80:	4613      	movlt	r3, r2
 8007a82:	6033      	str	r3, [r6, #0]
 8007a84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a88:	4607      	mov	r7, r0
 8007a8a:	460c      	mov	r4, r1
 8007a8c:	b10a      	cbz	r2, 8007a92 <_printf_common+0x26>
 8007a8e:	3301      	adds	r3, #1
 8007a90:	6033      	str	r3, [r6, #0]
 8007a92:	6823      	ldr	r3, [r4, #0]
 8007a94:	0699      	lsls	r1, r3, #26
 8007a96:	bf42      	ittt	mi
 8007a98:	6833      	ldrmi	r3, [r6, #0]
 8007a9a:	3302      	addmi	r3, #2
 8007a9c:	6033      	strmi	r3, [r6, #0]
 8007a9e:	6825      	ldr	r5, [r4, #0]
 8007aa0:	f015 0506 	ands.w	r5, r5, #6
 8007aa4:	d106      	bne.n	8007ab4 <_printf_common+0x48>
 8007aa6:	f104 0a19 	add.w	sl, r4, #25
 8007aaa:	68e3      	ldr	r3, [r4, #12]
 8007aac:	6832      	ldr	r2, [r6, #0]
 8007aae:	1a9b      	subs	r3, r3, r2
 8007ab0:	42ab      	cmp	r3, r5
 8007ab2:	dc26      	bgt.n	8007b02 <_printf_common+0x96>
 8007ab4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ab8:	1e13      	subs	r3, r2, #0
 8007aba:	6822      	ldr	r2, [r4, #0]
 8007abc:	bf18      	it	ne
 8007abe:	2301      	movne	r3, #1
 8007ac0:	0692      	lsls	r2, r2, #26
 8007ac2:	d42b      	bmi.n	8007b1c <_printf_common+0xb0>
 8007ac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ac8:	4649      	mov	r1, r9
 8007aca:	4638      	mov	r0, r7
 8007acc:	47c0      	blx	r8
 8007ace:	3001      	adds	r0, #1
 8007ad0:	d01e      	beq.n	8007b10 <_printf_common+0xa4>
 8007ad2:	6823      	ldr	r3, [r4, #0]
 8007ad4:	68e5      	ldr	r5, [r4, #12]
 8007ad6:	6832      	ldr	r2, [r6, #0]
 8007ad8:	f003 0306 	and.w	r3, r3, #6
 8007adc:	2b04      	cmp	r3, #4
 8007ade:	bf08      	it	eq
 8007ae0:	1aad      	subeq	r5, r5, r2
 8007ae2:	68a3      	ldr	r3, [r4, #8]
 8007ae4:	6922      	ldr	r2, [r4, #16]
 8007ae6:	bf0c      	ite	eq
 8007ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007aec:	2500      	movne	r5, #0
 8007aee:	4293      	cmp	r3, r2
 8007af0:	bfc4      	itt	gt
 8007af2:	1a9b      	subgt	r3, r3, r2
 8007af4:	18ed      	addgt	r5, r5, r3
 8007af6:	2600      	movs	r6, #0
 8007af8:	341a      	adds	r4, #26
 8007afa:	42b5      	cmp	r5, r6
 8007afc:	d11a      	bne.n	8007b34 <_printf_common+0xc8>
 8007afe:	2000      	movs	r0, #0
 8007b00:	e008      	b.n	8007b14 <_printf_common+0xa8>
 8007b02:	2301      	movs	r3, #1
 8007b04:	4652      	mov	r2, sl
 8007b06:	4649      	mov	r1, r9
 8007b08:	4638      	mov	r0, r7
 8007b0a:	47c0      	blx	r8
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	d103      	bne.n	8007b18 <_printf_common+0xac>
 8007b10:	f04f 30ff 	mov.w	r0, #4294967295
 8007b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b18:	3501      	adds	r5, #1
 8007b1a:	e7c6      	b.n	8007aaa <_printf_common+0x3e>
 8007b1c:	18e1      	adds	r1, r4, r3
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	2030      	movs	r0, #48	; 0x30
 8007b22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b26:	4422      	add	r2, r4
 8007b28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b30:	3302      	adds	r3, #2
 8007b32:	e7c7      	b.n	8007ac4 <_printf_common+0x58>
 8007b34:	2301      	movs	r3, #1
 8007b36:	4622      	mov	r2, r4
 8007b38:	4649      	mov	r1, r9
 8007b3a:	4638      	mov	r0, r7
 8007b3c:	47c0      	blx	r8
 8007b3e:	3001      	adds	r0, #1
 8007b40:	d0e6      	beq.n	8007b10 <_printf_common+0xa4>
 8007b42:	3601      	adds	r6, #1
 8007b44:	e7d9      	b.n	8007afa <_printf_common+0x8e>
	...

08007b48 <_printf_i>:
 8007b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b4c:	7e0f      	ldrb	r7, [r1, #24]
 8007b4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b50:	2f78      	cmp	r7, #120	; 0x78
 8007b52:	4691      	mov	r9, r2
 8007b54:	4680      	mov	r8, r0
 8007b56:	460c      	mov	r4, r1
 8007b58:	469a      	mov	sl, r3
 8007b5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b5e:	d807      	bhi.n	8007b70 <_printf_i+0x28>
 8007b60:	2f62      	cmp	r7, #98	; 0x62
 8007b62:	d80a      	bhi.n	8007b7a <_printf_i+0x32>
 8007b64:	2f00      	cmp	r7, #0
 8007b66:	f000 80d8 	beq.w	8007d1a <_printf_i+0x1d2>
 8007b6a:	2f58      	cmp	r7, #88	; 0x58
 8007b6c:	f000 80a3 	beq.w	8007cb6 <_printf_i+0x16e>
 8007b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b78:	e03a      	b.n	8007bf0 <_printf_i+0xa8>
 8007b7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b7e:	2b15      	cmp	r3, #21
 8007b80:	d8f6      	bhi.n	8007b70 <_printf_i+0x28>
 8007b82:	a101      	add	r1, pc, #4	; (adr r1, 8007b88 <_printf_i+0x40>)
 8007b84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b88:	08007be1 	.word	0x08007be1
 8007b8c:	08007bf5 	.word	0x08007bf5
 8007b90:	08007b71 	.word	0x08007b71
 8007b94:	08007b71 	.word	0x08007b71
 8007b98:	08007b71 	.word	0x08007b71
 8007b9c:	08007b71 	.word	0x08007b71
 8007ba0:	08007bf5 	.word	0x08007bf5
 8007ba4:	08007b71 	.word	0x08007b71
 8007ba8:	08007b71 	.word	0x08007b71
 8007bac:	08007b71 	.word	0x08007b71
 8007bb0:	08007b71 	.word	0x08007b71
 8007bb4:	08007d01 	.word	0x08007d01
 8007bb8:	08007c25 	.word	0x08007c25
 8007bbc:	08007ce3 	.word	0x08007ce3
 8007bc0:	08007b71 	.word	0x08007b71
 8007bc4:	08007b71 	.word	0x08007b71
 8007bc8:	08007d23 	.word	0x08007d23
 8007bcc:	08007b71 	.word	0x08007b71
 8007bd0:	08007c25 	.word	0x08007c25
 8007bd4:	08007b71 	.word	0x08007b71
 8007bd8:	08007b71 	.word	0x08007b71
 8007bdc:	08007ceb 	.word	0x08007ceb
 8007be0:	682b      	ldr	r3, [r5, #0]
 8007be2:	1d1a      	adds	r2, r3, #4
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	602a      	str	r2, [r5, #0]
 8007be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e0a3      	b.n	8007d3c <_printf_i+0x1f4>
 8007bf4:	6820      	ldr	r0, [r4, #0]
 8007bf6:	6829      	ldr	r1, [r5, #0]
 8007bf8:	0606      	lsls	r6, r0, #24
 8007bfa:	f101 0304 	add.w	r3, r1, #4
 8007bfe:	d50a      	bpl.n	8007c16 <_printf_i+0xce>
 8007c00:	680e      	ldr	r6, [r1, #0]
 8007c02:	602b      	str	r3, [r5, #0]
 8007c04:	2e00      	cmp	r6, #0
 8007c06:	da03      	bge.n	8007c10 <_printf_i+0xc8>
 8007c08:	232d      	movs	r3, #45	; 0x2d
 8007c0a:	4276      	negs	r6, r6
 8007c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c10:	485e      	ldr	r0, [pc, #376]	; (8007d8c <_printf_i+0x244>)
 8007c12:	230a      	movs	r3, #10
 8007c14:	e019      	b.n	8007c4a <_printf_i+0x102>
 8007c16:	680e      	ldr	r6, [r1, #0]
 8007c18:	602b      	str	r3, [r5, #0]
 8007c1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c1e:	bf18      	it	ne
 8007c20:	b236      	sxthne	r6, r6
 8007c22:	e7ef      	b.n	8007c04 <_printf_i+0xbc>
 8007c24:	682b      	ldr	r3, [r5, #0]
 8007c26:	6820      	ldr	r0, [r4, #0]
 8007c28:	1d19      	adds	r1, r3, #4
 8007c2a:	6029      	str	r1, [r5, #0]
 8007c2c:	0601      	lsls	r1, r0, #24
 8007c2e:	d501      	bpl.n	8007c34 <_printf_i+0xec>
 8007c30:	681e      	ldr	r6, [r3, #0]
 8007c32:	e002      	b.n	8007c3a <_printf_i+0xf2>
 8007c34:	0646      	lsls	r6, r0, #25
 8007c36:	d5fb      	bpl.n	8007c30 <_printf_i+0xe8>
 8007c38:	881e      	ldrh	r6, [r3, #0]
 8007c3a:	4854      	ldr	r0, [pc, #336]	; (8007d8c <_printf_i+0x244>)
 8007c3c:	2f6f      	cmp	r7, #111	; 0x6f
 8007c3e:	bf0c      	ite	eq
 8007c40:	2308      	moveq	r3, #8
 8007c42:	230a      	movne	r3, #10
 8007c44:	2100      	movs	r1, #0
 8007c46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c4a:	6865      	ldr	r5, [r4, #4]
 8007c4c:	60a5      	str	r5, [r4, #8]
 8007c4e:	2d00      	cmp	r5, #0
 8007c50:	bfa2      	ittt	ge
 8007c52:	6821      	ldrge	r1, [r4, #0]
 8007c54:	f021 0104 	bicge.w	r1, r1, #4
 8007c58:	6021      	strge	r1, [r4, #0]
 8007c5a:	b90e      	cbnz	r6, 8007c60 <_printf_i+0x118>
 8007c5c:	2d00      	cmp	r5, #0
 8007c5e:	d04d      	beq.n	8007cfc <_printf_i+0x1b4>
 8007c60:	4615      	mov	r5, r2
 8007c62:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c66:	fb03 6711 	mls	r7, r3, r1, r6
 8007c6a:	5dc7      	ldrb	r7, [r0, r7]
 8007c6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c70:	4637      	mov	r7, r6
 8007c72:	42bb      	cmp	r3, r7
 8007c74:	460e      	mov	r6, r1
 8007c76:	d9f4      	bls.n	8007c62 <_printf_i+0x11a>
 8007c78:	2b08      	cmp	r3, #8
 8007c7a:	d10b      	bne.n	8007c94 <_printf_i+0x14c>
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	07de      	lsls	r6, r3, #31
 8007c80:	d508      	bpl.n	8007c94 <_printf_i+0x14c>
 8007c82:	6923      	ldr	r3, [r4, #16]
 8007c84:	6861      	ldr	r1, [r4, #4]
 8007c86:	4299      	cmp	r1, r3
 8007c88:	bfde      	ittt	le
 8007c8a:	2330      	movle	r3, #48	; 0x30
 8007c8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c94:	1b52      	subs	r2, r2, r5
 8007c96:	6122      	str	r2, [r4, #16]
 8007c98:	f8cd a000 	str.w	sl, [sp]
 8007c9c:	464b      	mov	r3, r9
 8007c9e:	aa03      	add	r2, sp, #12
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	4640      	mov	r0, r8
 8007ca4:	f7ff fee2 	bl	8007a6c <_printf_common>
 8007ca8:	3001      	adds	r0, #1
 8007caa:	d14c      	bne.n	8007d46 <_printf_i+0x1fe>
 8007cac:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb0:	b004      	add	sp, #16
 8007cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb6:	4835      	ldr	r0, [pc, #212]	; (8007d8c <_printf_i+0x244>)
 8007cb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007cbc:	6829      	ldr	r1, [r5, #0]
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8007cc4:	6029      	str	r1, [r5, #0]
 8007cc6:	061d      	lsls	r5, r3, #24
 8007cc8:	d514      	bpl.n	8007cf4 <_printf_i+0x1ac>
 8007cca:	07df      	lsls	r7, r3, #31
 8007ccc:	bf44      	itt	mi
 8007cce:	f043 0320 	orrmi.w	r3, r3, #32
 8007cd2:	6023      	strmi	r3, [r4, #0]
 8007cd4:	b91e      	cbnz	r6, 8007cde <_printf_i+0x196>
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	f023 0320 	bic.w	r3, r3, #32
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	2310      	movs	r3, #16
 8007ce0:	e7b0      	b.n	8007c44 <_printf_i+0xfc>
 8007ce2:	6823      	ldr	r3, [r4, #0]
 8007ce4:	f043 0320 	orr.w	r3, r3, #32
 8007ce8:	6023      	str	r3, [r4, #0]
 8007cea:	2378      	movs	r3, #120	; 0x78
 8007cec:	4828      	ldr	r0, [pc, #160]	; (8007d90 <_printf_i+0x248>)
 8007cee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cf2:	e7e3      	b.n	8007cbc <_printf_i+0x174>
 8007cf4:	0659      	lsls	r1, r3, #25
 8007cf6:	bf48      	it	mi
 8007cf8:	b2b6      	uxthmi	r6, r6
 8007cfa:	e7e6      	b.n	8007cca <_printf_i+0x182>
 8007cfc:	4615      	mov	r5, r2
 8007cfe:	e7bb      	b.n	8007c78 <_printf_i+0x130>
 8007d00:	682b      	ldr	r3, [r5, #0]
 8007d02:	6826      	ldr	r6, [r4, #0]
 8007d04:	6961      	ldr	r1, [r4, #20]
 8007d06:	1d18      	adds	r0, r3, #4
 8007d08:	6028      	str	r0, [r5, #0]
 8007d0a:	0635      	lsls	r5, r6, #24
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	d501      	bpl.n	8007d14 <_printf_i+0x1cc>
 8007d10:	6019      	str	r1, [r3, #0]
 8007d12:	e002      	b.n	8007d1a <_printf_i+0x1d2>
 8007d14:	0670      	lsls	r0, r6, #25
 8007d16:	d5fb      	bpl.n	8007d10 <_printf_i+0x1c8>
 8007d18:	8019      	strh	r1, [r3, #0]
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	6123      	str	r3, [r4, #16]
 8007d1e:	4615      	mov	r5, r2
 8007d20:	e7ba      	b.n	8007c98 <_printf_i+0x150>
 8007d22:	682b      	ldr	r3, [r5, #0]
 8007d24:	1d1a      	adds	r2, r3, #4
 8007d26:	602a      	str	r2, [r5, #0]
 8007d28:	681d      	ldr	r5, [r3, #0]
 8007d2a:	6862      	ldr	r2, [r4, #4]
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	4628      	mov	r0, r5
 8007d30:	f7f8 fa76 	bl	8000220 <memchr>
 8007d34:	b108      	cbz	r0, 8007d3a <_printf_i+0x1f2>
 8007d36:	1b40      	subs	r0, r0, r5
 8007d38:	6060      	str	r0, [r4, #4]
 8007d3a:	6863      	ldr	r3, [r4, #4]
 8007d3c:	6123      	str	r3, [r4, #16]
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d44:	e7a8      	b.n	8007c98 <_printf_i+0x150>
 8007d46:	6923      	ldr	r3, [r4, #16]
 8007d48:	462a      	mov	r2, r5
 8007d4a:	4649      	mov	r1, r9
 8007d4c:	4640      	mov	r0, r8
 8007d4e:	47d0      	blx	sl
 8007d50:	3001      	adds	r0, #1
 8007d52:	d0ab      	beq.n	8007cac <_printf_i+0x164>
 8007d54:	6823      	ldr	r3, [r4, #0]
 8007d56:	079b      	lsls	r3, r3, #30
 8007d58:	d413      	bmi.n	8007d82 <_printf_i+0x23a>
 8007d5a:	68e0      	ldr	r0, [r4, #12]
 8007d5c:	9b03      	ldr	r3, [sp, #12]
 8007d5e:	4298      	cmp	r0, r3
 8007d60:	bfb8      	it	lt
 8007d62:	4618      	movlt	r0, r3
 8007d64:	e7a4      	b.n	8007cb0 <_printf_i+0x168>
 8007d66:	2301      	movs	r3, #1
 8007d68:	4632      	mov	r2, r6
 8007d6a:	4649      	mov	r1, r9
 8007d6c:	4640      	mov	r0, r8
 8007d6e:	47d0      	blx	sl
 8007d70:	3001      	adds	r0, #1
 8007d72:	d09b      	beq.n	8007cac <_printf_i+0x164>
 8007d74:	3501      	adds	r5, #1
 8007d76:	68e3      	ldr	r3, [r4, #12]
 8007d78:	9903      	ldr	r1, [sp, #12]
 8007d7a:	1a5b      	subs	r3, r3, r1
 8007d7c:	42ab      	cmp	r3, r5
 8007d7e:	dcf2      	bgt.n	8007d66 <_printf_i+0x21e>
 8007d80:	e7eb      	b.n	8007d5a <_printf_i+0x212>
 8007d82:	2500      	movs	r5, #0
 8007d84:	f104 0619 	add.w	r6, r4, #25
 8007d88:	e7f5      	b.n	8007d76 <_printf_i+0x22e>
 8007d8a:	bf00      	nop
 8007d8c:	0800a30e 	.word	0x0800a30e
 8007d90:	0800a31f 	.word	0x0800a31f

08007d94 <sniprintf>:
 8007d94:	b40c      	push	{r2, r3}
 8007d96:	b530      	push	{r4, r5, lr}
 8007d98:	4b17      	ldr	r3, [pc, #92]	; (8007df8 <sniprintf+0x64>)
 8007d9a:	1e0c      	subs	r4, r1, #0
 8007d9c:	681d      	ldr	r5, [r3, #0]
 8007d9e:	b09d      	sub	sp, #116	; 0x74
 8007da0:	da08      	bge.n	8007db4 <sniprintf+0x20>
 8007da2:	238b      	movs	r3, #139	; 0x8b
 8007da4:	602b      	str	r3, [r5, #0]
 8007da6:	f04f 30ff 	mov.w	r0, #4294967295
 8007daa:	b01d      	add	sp, #116	; 0x74
 8007dac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007db0:	b002      	add	sp, #8
 8007db2:	4770      	bx	lr
 8007db4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007db8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007dbc:	bf14      	ite	ne
 8007dbe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007dc2:	4623      	moveq	r3, r4
 8007dc4:	9304      	str	r3, [sp, #16]
 8007dc6:	9307      	str	r3, [sp, #28]
 8007dc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007dcc:	9002      	str	r0, [sp, #8]
 8007dce:	9006      	str	r0, [sp, #24]
 8007dd0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007dd4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007dd6:	ab21      	add	r3, sp, #132	; 0x84
 8007dd8:	a902      	add	r1, sp, #8
 8007dda:	4628      	mov	r0, r5
 8007ddc:	9301      	str	r3, [sp, #4]
 8007dde:	f001 fb79 	bl	80094d4 <_svfiprintf_r>
 8007de2:	1c43      	adds	r3, r0, #1
 8007de4:	bfbc      	itt	lt
 8007de6:	238b      	movlt	r3, #139	; 0x8b
 8007de8:	602b      	strlt	r3, [r5, #0]
 8007dea:	2c00      	cmp	r4, #0
 8007dec:	d0dd      	beq.n	8007daa <sniprintf+0x16>
 8007dee:	9b02      	ldr	r3, [sp, #8]
 8007df0:	2200      	movs	r2, #0
 8007df2:	701a      	strb	r2, [r3, #0]
 8007df4:	e7d9      	b.n	8007daa <sniprintf+0x16>
 8007df6:	bf00      	nop
 8007df8:	2000000c 	.word	0x2000000c

08007dfc <quorem>:
 8007dfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e00:	6903      	ldr	r3, [r0, #16]
 8007e02:	690c      	ldr	r4, [r1, #16]
 8007e04:	42a3      	cmp	r3, r4
 8007e06:	4607      	mov	r7, r0
 8007e08:	f2c0 8081 	blt.w	8007f0e <quorem+0x112>
 8007e0c:	3c01      	subs	r4, #1
 8007e0e:	f101 0814 	add.w	r8, r1, #20
 8007e12:	f100 0514 	add.w	r5, r0, #20
 8007e16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e1a:	9301      	str	r3, [sp, #4]
 8007e1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e24:	3301      	adds	r3, #1
 8007e26:	429a      	cmp	r2, r3
 8007e28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e30:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e34:	d331      	bcc.n	8007e9a <quorem+0x9e>
 8007e36:	f04f 0e00 	mov.w	lr, #0
 8007e3a:	4640      	mov	r0, r8
 8007e3c:	46ac      	mov	ip, r5
 8007e3e:	46f2      	mov	sl, lr
 8007e40:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e44:	b293      	uxth	r3, r2
 8007e46:	fb06 e303 	mla	r3, r6, r3, lr
 8007e4a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	ebaa 0303 	sub.w	r3, sl, r3
 8007e54:	f8dc a000 	ldr.w	sl, [ip]
 8007e58:	0c12      	lsrs	r2, r2, #16
 8007e5a:	fa13 f38a 	uxtah	r3, r3, sl
 8007e5e:	fb06 e202 	mla	r2, r6, r2, lr
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	9b00      	ldr	r3, [sp, #0]
 8007e66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e6a:	b292      	uxth	r2, r2
 8007e6c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007e70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e74:	f8bd 3000 	ldrh.w	r3, [sp]
 8007e78:	4581      	cmp	r9, r0
 8007e7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e7e:	f84c 3b04 	str.w	r3, [ip], #4
 8007e82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007e86:	d2db      	bcs.n	8007e40 <quorem+0x44>
 8007e88:	f855 300b 	ldr.w	r3, [r5, fp]
 8007e8c:	b92b      	cbnz	r3, 8007e9a <quorem+0x9e>
 8007e8e:	9b01      	ldr	r3, [sp, #4]
 8007e90:	3b04      	subs	r3, #4
 8007e92:	429d      	cmp	r5, r3
 8007e94:	461a      	mov	r2, r3
 8007e96:	d32e      	bcc.n	8007ef6 <quorem+0xfa>
 8007e98:	613c      	str	r4, [r7, #16]
 8007e9a:	4638      	mov	r0, r7
 8007e9c:	f001 f8c6 	bl	800902c <__mcmp>
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	db24      	blt.n	8007eee <quorem+0xf2>
 8007ea4:	3601      	adds	r6, #1
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	f04f 0c00 	mov.w	ip, #0
 8007eac:	f858 2b04 	ldr.w	r2, [r8], #4
 8007eb0:	f8d0 e000 	ldr.w	lr, [r0]
 8007eb4:	b293      	uxth	r3, r2
 8007eb6:	ebac 0303 	sub.w	r3, ip, r3
 8007eba:	0c12      	lsrs	r2, r2, #16
 8007ebc:	fa13 f38e 	uxtah	r3, r3, lr
 8007ec0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ec4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ece:	45c1      	cmp	r9, r8
 8007ed0:	f840 3b04 	str.w	r3, [r0], #4
 8007ed4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ed8:	d2e8      	bcs.n	8007eac <quorem+0xb0>
 8007eda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ede:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ee2:	b922      	cbnz	r2, 8007eee <quorem+0xf2>
 8007ee4:	3b04      	subs	r3, #4
 8007ee6:	429d      	cmp	r5, r3
 8007ee8:	461a      	mov	r2, r3
 8007eea:	d30a      	bcc.n	8007f02 <quorem+0x106>
 8007eec:	613c      	str	r4, [r7, #16]
 8007eee:	4630      	mov	r0, r6
 8007ef0:	b003      	add	sp, #12
 8007ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ef6:	6812      	ldr	r2, [r2, #0]
 8007ef8:	3b04      	subs	r3, #4
 8007efa:	2a00      	cmp	r2, #0
 8007efc:	d1cc      	bne.n	8007e98 <quorem+0x9c>
 8007efe:	3c01      	subs	r4, #1
 8007f00:	e7c7      	b.n	8007e92 <quorem+0x96>
 8007f02:	6812      	ldr	r2, [r2, #0]
 8007f04:	3b04      	subs	r3, #4
 8007f06:	2a00      	cmp	r2, #0
 8007f08:	d1f0      	bne.n	8007eec <quorem+0xf0>
 8007f0a:	3c01      	subs	r4, #1
 8007f0c:	e7eb      	b.n	8007ee6 <quorem+0xea>
 8007f0e:	2000      	movs	r0, #0
 8007f10:	e7ee      	b.n	8007ef0 <quorem+0xf4>
 8007f12:	0000      	movs	r0, r0
 8007f14:	0000      	movs	r0, r0
	...

08007f18 <_dtoa_r>:
 8007f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1c:	ed2d 8b04 	vpush	{d8-d9}
 8007f20:	ec57 6b10 	vmov	r6, r7, d0
 8007f24:	b093      	sub	sp, #76	; 0x4c
 8007f26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f2c:	9106      	str	r1, [sp, #24]
 8007f2e:	ee10 aa10 	vmov	sl, s0
 8007f32:	4604      	mov	r4, r0
 8007f34:	9209      	str	r2, [sp, #36]	; 0x24
 8007f36:	930c      	str	r3, [sp, #48]	; 0x30
 8007f38:	46bb      	mov	fp, r7
 8007f3a:	b975      	cbnz	r5, 8007f5a <_dtoa_r+0x42>
 8007f3c:	2010      	movs	r0, #16
 8007f3e:	f000 fddd 	bl	8008afc <malloc>
 8007f42:	4602      	mov	r2, r0
 8007f44:	6260      	str	r0, [r4, #36]	; 0x24
 8007f46:	b920      	cbnz	r0, 8007f52 <_dtoa_r+0x3a>
 8007f48:	4ba7      	ldr	r3, [pc, #668]	; (80081e8 <_dtoa_r+0x2d0>)
 8007f4a:	21ea      	movs	r1, #234	; 0xea
 8007f4c:	48a7      	ldr	r0, [pc, #668]	; (80081ec <_dtoa_r+0x2d4>)
 8007f4e:	f001 fbd1 	bl	80096f4 <__assert_func>
 8007f52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f56:	6005      	str	r5, [r0, #0]
 8007f58:	60c5      	str	r5, [r0, #12]
 8007f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f5c:	6819      	ldr	r1, [r3, #0]
 8007f5e:	b151      	cbz	r1, 8007f76 <_dtoa_r+0x5e>
 8007f60:	685a      	ldr	r2, [r3, #4]
 8007f62:	604a      	str	r2, [r1, #4]
 8007f64:	2301      	movs	r3, #1
 8007f66:	4093      	lsls	r3, r2
 8007f68:	608b      	str	r3, [r1, #8]
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f000 fe1c 	bl	8008ba8 <_Bfree>
 8007f70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f72:	2200      	movs	r2, #0
 8007f74:	601a      	str	r2, [r3, #0]
 8007f76:	1e3b      	subs	r3, r7, #0
 8007f78:	bfaa      	itet	ge
 8007f7a:	2300      	movge	r3, #0
 8007f7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007f80:	f8c8 3000 	strge.w	r3, [r8]
 8007f84:	4b9a      	ldr	r3, [pc, #616]	; (80081f0 <_dtoa_r+0x2d8>)
 8007f86:	bfbc      	itt	lt
 8007f88:	2201      	movlt	r2, #1
 8007f8a:	f8c8 2000 	strlt.w	r2, [r8]
 8007f8e:	ea33 030b 	bics.w	r3, r3, fp
 8007f92:	d11b      	bne.n	8007fcc <_dtoa_r+0xb4>
 8007f94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f96:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f9a:	6013      	str	r3, [r2, #0]
 8007f9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007fa0:	4333      	orrs	r3, r6
 8007fa2:	f000 8592 	beq.w	8008aca <_dtoa_r+0xbb2>
 8007fa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fa8:	b963      	cbnz	r3, 8007fc4 <_dtoa_r+0xac>
 8007faa:	4b92      	ldr	r3, [pc, #584]	; (80081f4 <_dtoa_r+0x2dc>)
 8007fac:	e022      	b.n	8007ff4 <_dtoa_r+0xdc>
 8007fae:	4b92      	ldr	r3, [pc, #584]	; (80081f8 <_dtoa_r+0x2e0>)
 8007fb0:	9301      	str	r3, [sp, #4]
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007fb6:	6013      	str	r3, [r2, #0]
 8007fb8:	9801      	ldr	r0, [sp, #4]
 8007fba:	b013      	add	sp, #76	; 0x4c
 8007fbc:	ecbd 8b04 	vpop	{d8-d9}
 8007fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc4:	4b8b      	ldr	r3, [pc, #556]	; (80081f4 <_dtoa_r+0x2dc>)
 8007fc6:	9301      	str	r3, [sp, #4]
 8007fc8:	3303      	adds	r3, #3
 8007fca:	e7f3      	b.n	8007fb4 <_dtoa_r+0x9c>
 8007fcc:	2200      	movs	r2, #0
 8007fce:	2300      	movs	r3, #0
 8007fd0:	4650      	mov	r0, sl
 8007fd2:	4659      	mov	r1, fp
 8007fd4:	f7f8 fd98 	bl	8000b08 <__aeabi_dcmpeq>
 8007fd8:	ec4b ab19 	vmov	d9, sl, fp
 8007fdc:	4680      	mov	r8, r0
 8007fde:	b158      	cbz	r0, 8007ff8 <_dtoa_r+0xe0>
 8007fe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	6013      	str	r3, [r2, #0]
 8007fe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 856b 	beq.w	8008ac4 <_dtoa_r+0xbac>
 8007fee:	4883      	ldr	r0, [pc, #524]	; (80081fc <_dtoa_r+0x2e4>)
 8007ff0:	6018      	str	r0, [r3, #0]
 8007ff2:	1e43      	subs	r3, r0, #1
 8007ff4:	9301      	str	r3, [sp, #4]
 8007ff6:	e7df      	b.n	8007fb8 <_dtoa_r+0xa0>
 8007ff8:	ec4b ab10 	vmov	d0, sl, fp
 8007ffc:	aa10      	add	r2, sp, #64	; 0x40
 8007ffe:	a911      	add	r1, sp, #68	; 0x44
 8008000:	4620      	mov	r0, r4
 8008002:	f001 f8b9 	bl	8009178 <__d2b>
 8008006:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800800a:	ee08 0a10 	vmov	s16, r0
 800800e:	2d00      	cmp	r5, #0
 8008010:	f000 8084 	beq.w	800811c <_dtoa_r+0x204>
 8008014:	ee19 3a90 	vmov	r3, s19
 8008018:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800801c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008020:	4656      	mov	r6, sl
 8008022:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008026:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800802a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800802e:	4b74      	ldr	r3, [pc, #464]	; (8008200 <_dtoa_r+0x2e8>)
 8008030:	2200      	movs	r2, #0
 8008032:	4630      	mov	r0, r6
 8008034:	4639      	mov	r1, r7
 8008036:	f7f8 f947 	bl	80002c8 <__aeabi_dsub>
 800803a:	a365      	add	r3, pc, #404	; (adr r3, 80081d0 <_dtoa_r+0x2b8>)
 800803c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008040:	f7f8 fafa 	bl	8000638 <__aeabi_dmul>
 8008044:	a364      	add	r3, pc, #400	; (adr r3, 80081d8 <_dtoa_r+0x2c0>)
 8008046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804a:	f7f8 f93f 	bl	80002cc <__adddf3>
 800804e:	4606      	mov	r6, r0
 8008050:	4628      	mov	r0, r5
 8008052:	460f      	mov	r7, r1
 8008054:	f7f8 fa86 	bl	8000564 <__aeabi_i2d>
 8008058:	a361      	add	r3, pc, #388	; (adr r3, 80081e0 <_dtoa_r+0x2c8>)
 800805a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805e:	f7f8 faeb 	bl	8000638 <__aeabi_dmul>
 8008062:	4602      	mov	r2, r0
 8008064:	460b      	mov	r3, r1
 8008066:	4630      	mov	r0, r6
 8008068:	4639      	mov	r1, r7
 800806a:	f7f8 f92f 	bl	80002cc <__adddf3>
 800806e:	4606      	mov	r6, r0
 8008070:	460f      	mov	r7, r1
 8008072:	f7f8 fd91 	bl	8000b98 <__aeabi_d2iz>
 8008076:	2200      	movs	r2, #0
 8008078:	9000      	str	r0, [sp, #0]
 800807a:	2300      	movs	r3, #0
 800807c:	4630      	mov	r0, r6
 800807e:	4639      	mov	r1, r7
 8008080:	f7f8 fd4c 	bl	8000b1c <__aeabi_dcmplt>
 8008084:	b150      	cbz	r0, 800809c <_dtoa_r+0x184>
 8008086:	9800      	ldr	r0, [sp, #0]
 8008088:	f7f8 fa6c 	bl	8000564 <__aeabi_i2d>
 800808c:	4632      	mov	r2, r6
 800808e:	463b      	mov	r3, r7
 8008090:	f7f8 fd3a 	bl	8000b08 <__aeabi_dcmpeq>
 8008094:	b910      	cbnz	r0, 800809c <_dtoa_r+0x184>
 8008096:	9b00      	ldr	r3, [sp, #0]
 8008098:	3b01      	subs	r3, #1
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	9b00      	ldr	r3, [sp, #0]
 800809e:	2b16      	cmp	r3, #22
 80080a0:	d85a      	bhi.n	8008158 <_dtoa_r+0x240>
 80080a2:	9a00      	ldr	r2, [sp, #0]
 80080a4:	4b57      	ldr	r3, [pc, #348]	; (8008204 <_dtoa_r+0x2ec>)
 80080a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ae:	ec51 0b19 	vmov	r0, r1, d9
 80080b2:	f7f8 fd33 	bl	8000b1c <__aeabi_dcmplt>
 80080b6:	2800      	cmp	r0, #0
 80080b8:	d050      	beq.n	800815c <_dtoa_r+0x244>
 80080ba:	9b00      	ldr	r3, [sp, #0]
 80080bc:	3b01      	subs	r3, #1
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	2300      	movs	r3, #0
 80080c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80080c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080c6:	1b5d      	subs	r5, r3, r5
 80080c8:	1e6b      	subs	r3, r5, #1
 80080ca:	9305      	str	r3, [sp, #20]
 80080cc:	bf45      	ittet	mi
 80080ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80080d2:	9304      	strmi	r3, [sp, #16]
 80080d4:	2300      	movpl	r3, #0
 80080d6:	2300      	movmi	r3, #0
 80080d8:	bf4c      	ite	mi
 80080da:	9305      	strmi	r3, [sp, #20]
 80080dc:	9304      	strpl	r3, [sp, #16]
 80080de:	9b00      	ldr	r3, [sp, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	db3d      	blt.n	8008160 <_dtoa_r+0x248>
 80080e4:	9b05      	ldr	r3, [sp, #20]
 80080e6:	9a00      	ldr	r2, [sp, #0]
 80080e8:	920a      	str	r2, [sp, #40]	; 0x28
 80080ea:	4413      	add	r3, r2
 80080ec:	9305      	str	r3, [sp, #20]
 80080ee:	2300      	movs	r3, #0
 80080f0:	9307      	str	r3, [sp, #28]
 80080f2:	9b06      	ldr	r3, [sp, #24]
 80080f4:	2b09      	cmp	r3, #9
 80080f6:	f200 8089 	bhi.w	800820c <_dtoa_r+0x2f4>
 80080fa:	2b05      	cmp	r3, #5
 80080fc:	bfc4      	itt	gt
 80080fe:	3b04      	subgt	r3, #4
 8008100:	9306      	strgt	r3, [sp, #24]
 8008102:	9b06      	ldr	r3, [sp, #24]
 8008104:	f1a3 0302 	sub.w	r3, r3, #2
 8008108:	bfcc      	ite	gt
 800810a:	2500      	movgt	r5, #0
 800810c:	2501      	movle	r5, #1
 800810e:	2b03      	cmp	r3, #3
 8008110:	f200 8087 	bhi.w	8008222 <_dtoa_r+0x30a>
 8008114:	e8df f003 	tbb	[pc, r3]
 8008118:	59383a2d 	.word	0x59383a2d
 800811c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008120:	441d      	add	r5, r3
 8008122:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008126:	2b20      	cmp	r3, #32
 8008128:	bfc1      	itttt	gt
 800812a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800812e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008132:	fa0b f303 	lslgt.w	r3, fp, r3
 8008136:	fa26 f000 	lsrgt.w	r0, r6, r0
 800813a:	bfda      	itte	le
 800813c:	f1c3 0320 	rsble	r3, r3, #32
 8008140:	fa06 f003 	lslle.w	r0, r6, r3
 8008144:	4318      	orrgt	r0, r3
 8008146:	f7f8 f9fd 	bl	8000544 <__aeabi_ui2d>
 800814a:	2301      	movs	r3, #1
 800814c:	4606      	mov	r6, r0
 800814e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008152:	3d01      	subs	r5, #1
 8008154:	930e      	str	r3, [sp, #56]	; 0x38
 8008156:	e76a      	b.n	800802e <_dtoa_r+0x116>
 8008158:	2301      	movs	r3, #1
 800815a:	e7b2      	b.n	80080c2 <_dtoa_r+0x1aa>
 800815c:	900b      	str	r0, [sp, #44]	; 0x2c
 800815e:	e7b1      	b.n	80080c4 <_dtoa_r+0x1ac>
 8008160:	9b04      	ldr	r3, [sp, #16]
 8008162:	9a00      	ldr	r2, [sp, #0]
 8008164:	1a9b      	subs	r3, r3, r2
 8008166:	9304      	str	r3, [sp, #16]
 8008168:	4253      	negs	r3, r2
 800816a:	9307      	str	r3, [sp, #28]
 800816c:	2300      	movs	r3, #0
 800816e:	930a      	str	r3, [sp, #40]	; 0x28
 8008170:	e7bf      	b.n	80080f2 <_dtoa_r+0x1da>
 8008172:	2300      	movs	r3, #0
 8008174:	9308      	str	r3, [sp, #32]
 8008176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008178:	2b00      	cmp	r3, #0
 800817a:	dc55      	bgt.n	8008228 <_dtoa_r+0x310>
 800817c:	2301      	movs	r3, #1
 800817e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008182:	461a      	mov	r2, r3
 8008184:	9209      	str	r2, [sp, #36]	; 0x24
 8008186:	e00c      	b.n	80081a2 <_dtoa_r+0x28a>
 8008188:	2301      	movs	r3, #1
 800818a:	e7f3      	b.n	8008174 <_dtoa_r+0x25c>
 800818c:	2300      	movs	r3, #0
 800818e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008190:	9308      	str	r3, [sp, #32]
 8008192:	9b00      	ldr	r3, [sp, #0]
 8008194:	4413      	add	r3, r2
 8008196:	9302      	str	r3, [sp, #8]
 8008198:	3301      	adds	r3, #1
 800819a:	2b01      	cmp	r3, #1
 800819c:	9303      	str	r3, [sp, #12]
 800819e:	bfb8      	it	lt
 80081a0:	2301      	movlt	r3, #1
 80081a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80081a4:	2200      	movs	r2, #0
 80081a6:	6042      	str	r2, [r0, #4]
 80081a8:	2204      	movs	r2, #4
 80081aa:	f102 0614 	add.w	r6, r2, #20
 80081ae:	429e      	cmp	r6, r3
 80081b0:	6841      	ldr	r1, [r0, #4]
 80081b2:	d93d      	bls.n	8008230 <_dtoa_r+0x318>
 80081b4:	4620      	mov	r0, r4
 80081b6:	f000 fcb7 	bl	8008b28 <_Balloc>
 80081ba:	9001      	str	r0, [sp, #4]
 80081bc:	2800      	cmp	r0, #0
 80081be:	d13b      	bne.n	8008238 <_dtoa_r+0x320>
 80081c0:	4b11      	ldr	r3, [pc, #68]	; (8008208 <_dtoa_r+0x2f0>)
 80081c2:	4602      	mov	r2, r0
 80081c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80081c8:	e6c0      	b.n	8007f4c <_dtoa_r+0x34>
 80081ca:	2301      	movs	r3, #1
 80081cc:	e7df      	b.n	800818e <_dtoa_r+0x276>
 80081ce:	bf00      	nop
 80081d0:	636f4361 	.word	0x636f4361
 80081d4:	3fd287a7 	.word	0x3fd287a7
 80081d8:	8b60c8b3 	.word	0x8b60c8b3
 80081dc:	3fc68a28 	.word	0x3fc68a28
 80081e0:	509f79fb 	.word	0x509f79fb
 80081e4:	3fd34413 	.word	0x3fd34413
 80081e8:	0800a33d 	.word	0x0800a33d
 80081ec:	0800a354 	.word	0x0800a354
 80081f0:	7ff00000 	.word	0x7ff00000
 80081f4:	0800a339 	.word	0x0800a339
 80081f8:	0800a330 	.word	0x0800a330
 80081fc:	0800a30d 	.word	0x0800a30d
 8008200:	3ff80000 	.word	0x3ff80000
 8008204:	0800a448 	.word	0x0800a448
 8008208:	0800a3af 	.word	0x0800a3af
 800820c:	2501      	movs	r5, #1
 800820e:	2300      	movs	r3, #0
 8008210:	9306      	str	r3, [sp, #24]
 8008212:	9508      	str	r5, [sp, #32]
 8008214:	f04f 33ff 	mov.w	r3, #4294967295
 8008218:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800821c:	2200      	movs	r2, #0
 800821e:	2312      	movs	r3, #18
 8008220:	e7b0      	b.n	8008184 <_dtoa_r+0x26c>
 8008222:	2301      	movs	r3, #1
 8008224:	9308      	str	r3, [sp, #32]
 8008226:	e7f5      	b.n	8008214 <_dtoa_r+0x2fc>
 8008228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800822a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800822e:	e7b8      	b.n	80081a2 <_dtoa_r+0x28a>
 8008230:	3101      	adds	r1, #1
 8008232:	6041      	str	r1, [r0, #4]
 8008234:	0052      	lsls	r2, r2, #1
 8008236:	e7b8      	b.n	80081aa <_dtoa_r+0x292>
 8008238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800823a:	9a01      	ldr	r2, [sp, #4]
 800823c:	601a      	str	r2, [r3, #0]
 800823e:	9b03      	ldr	r3, [sp, #12]
 8008240:	2b0e      	cmp	r3, #14
 8008242:	f200 809d 	bhi.w	8008380 <_dtoa_r+0x468>
 8008246:	2d00      	cmp	r5, #0
 8008248:	f000 809a 	beq.w	8008380 <_dtoa_r+0x468>
 800824c:	9b00      	ldr	r3, [sp, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	dd32      	ble.n	80082b8 <_dtoa_r+0x3a0>
 8008252:	4ab7      	ldr	r2, [pc, #732]	; (8008530 <_dtoa_r+0x618>)
 8008254:	f003 030f 	and.w	r3, r3, #15
 8008258:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800825c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008260:	9b00      	ldr	r3, [sp, #0]
 8008262:	05d8      	lsls	r0, r3, #23
 8008264:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008268:	d516      	bpl.n	8008298 <_dtoa_r+0x380>
 800826a:	4bb2      	ldr	r3, [pc, #712]	; (8008534 <_dtoa_r+0x61c>)
 800826c:	ec51 0b19 	vmov	r0, r1, d9
 8008270:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008274:	f7f8 fb0a 	bl	800088c <__aeabi_ddiv>
 8008278:	f007 070f 	and.w	r7, r7, #15
 800827c:	4682      	mov	sl, r0
 800827e:	468b      	mov	fp, r1
 8008280:	2503      	movs	r5, #3
 8008282:	4eac      	ldr	r6, [pc, #688]	; (8008534 <_dtoa_r+0x61c>)
 8008284:	b957      	cbnz	r7, 800829c <_dtoa_r+0x384>
 8008286:	4642      	mov	r2, r8
 8008288:	464b      	mov	r3, r9
 800828a:	4650      	mov	r0, sl
 800828c:	4659      	mov	r1, fp
 800828e:	f7f8 fafd 	bl	800088c <__aeabi_ddiv>
 8008292:	4682      	mov	sl, r0
 8008294:	468b      	mov	fp, r1
 8008296:	e028      	b.n	80082ea <_dtoa_r+0x3d2>
 8008298:	2502      	movs	r5, #2
 800829a:	e7f2      	b.n	8008282 <_dtoa_r+0x36a>
 800829c:	07f9      	lsls	r1, r7, #31
 800829e:	d508      	bpl.n	80082b2 <_dtoa_r+0x39a>
 80082a0:	4640      	mov	r0, r8
 80082a2:	4649      	mov	r1, r9
 80082a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80082a8:	f7f8 f9c6 	bl	8000638 <__aeabi_dmul>
 80082ac:	3501      	adds	r5, #1
 80082ae:	4680      	mov	r8, r0
 80082b0:	4689      	mov	r9, r1
 80082b2:	107f      	asrs	r7, r7, #1
 80082b4:	3608      	adds	r6, #8
 80082b6:	e7e5      	b.n	8008284 <_dtoa_r+0x36c>
 80082b8:	f000 809b 	beq.w	80083f2 <_dtoa_r+0x4da>
 80082bc:	9b00      	ldr	r3, [sp, #0]
 80082be:	4f9d      	ldr	r7, [pc, #628]	; (8008534 <_dtoa_r+0x61c>)
 80082c0:	425e      	negs	r6, r3
 80082c2:	4b9b      	ldr	r3, [pc, #620]	; (8008530 <_dtoa_r+0x618>)
 80082c4:	f006 020f 	and.w	r2, r6, #15
 80082c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d0:	ec51 0b19 	vmov	r0, r1, d9
 80082d4:	f7f8 f9b0 	bl	8000638 <__aeabi_dmul>
 80082d8:	1136      	asrs	r6, r6, #4
 80082da:	4682      	mov	sl, r0
 80082dc:	468b      	mov	fp, r1
 80082de:	2300      	movs	r3, #0
 80082e0:	2502      	movs	r5, #2
 80082e2:	2e00      	cmp	r6, #0
 80082e4:	d17a      	bne.n	80083dc <_dtoa_r+0x4c4>
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1d3      	bne.n	8008292 <_dtoa_r+0x37a>
 80082ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 8082 	beq.w	80083f6 <_dtoa_r+0x4de>
 80082f2:	4b91      	ldr	r3, [pc, #580]	; (8008538 <_dtoa_r+0x620>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	4650      	mov	r0, sl
 80082f8:	4659      	mov	r1, fp
 80082fa:	f7f8 fc0f 	bl	8000b1c <__aeabi_dcmplt>
 80082fe:	2800      	cmp	r0, #0
 8008300:	d079      	beq.n	80083f6 <_dtoa_r+0x4de>
 8008302:	9b03      	ldr	r3, [sp, #12]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d076      	beq.n	80083f6 <_dtoa_r+0x4de>
 8008308:	9b02      	ldr	r3, [sp, #8]
 800830a:	2b00      	cmp	r3, #0
 800830c:	dd36      	ble.n	800837c <_dtoa_r+0x464>
 800830e:	9b00      	ldr	r3, [sp, #0]
 8008310:	4650      	mov	r0, sl
 8008312:	4659      	mov	r1, fp
 8008314:	1e5f      	subs	r7, r3, #1
 8008316:	2200      	movs	r2, #0
 8008318:	4b88      	ldr	r3, [pc, #544]	; (800853c <_dtoa_r+0x624>)
 800831a:	f7f8 f98d 	bl	8000638 <__aeabi_dmul>
 800831e:	9e02      	ldr	r6, [sp, #8]
 8008320:	4682      	mov	sl, r0
 8008322:	468b      	mov	fp, r1
 8008324:	3501      	adds	r5, #1
 8008326:	4628      	mov	r0, r5
 8008328:	f7f8 f91c 	bl	8000564 <__aeabi_i2d>
 800832c:	4652      	mov	r2, sl
 800832e:	465b      	mov	r3, fp
 8008330:	f7f8 f982 	bl	8000638 <__aeabi_dmul>
 8008334:	4b82      	ldr	r3, [pc, #520]	; (8008540 <_dtoa_r+0x628>)
 8008336:	2200      	movs	r2, #0
 8008338:	f7f7 ffc8 	bl	80002cc <__adddf3>
 800833c:	46d0      	mov	r8, sl
 800833e:	46d9      	mov	r9, fp
 8008340:	4682      	mov	sl, r0
 8008342:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008346:	2e00      	cmp	r6, #0
 8008348:	d158      	bne.n	80083fc <_dtoa_r+0x4e4>
 800834a:	4b7e      	ldr	r3, [pc, #504]	; (8008544 <_dtoa_r+0x62c>)
 800834c:	2200      	movs	r2, #0
 800834e:	4640      	mov	r0, r8
 8008350:	4649      	mov	r1, r9
 8008352:	f7f7 ffb9 	bl	80002c8 <__aeabi_dsub>
 8008356:	4652      	mov	r2, sl
 8008358:	465b      	mov	r3, fp
 800835a:	4680      	mov	r8, r0
 800835c:	4689      	mov	r9, r1
 800835e:	f7f8 fbfb 	bl	8000b58 <__aeabi_dcmpgt>
 8008362:	2800      	cmp	r0, #0
 8008364:	f040 8295 	bne.w	8008892 <_dtoa_r+0x97a>
 8008368:	4652      	mov	r2, sl
 800836a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800836e:	4640      	mov	r0, r8
 8008370:	4649      	mov	r1, r9
 8008372:	f7f8 fbd3 	bl	8000b1c <__aeabi_dcmplt>
 8008376:	2800      	cmp	r0, #0
 8008378:	f040 8289 	bne.w	800888e <_dtoa_r+0x976>
 800837c:	ec5b ab19 	vmov	sl, fp, d9
 8008380:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008382:	2b00      	cmp	r3, #0
 8008384:	f2c0 8148 	blt.w	8008618 <_dtoa_r+0x700>
 8008388:	9a00      	ldr	r2, [sp, #0]
 800838a:	2a0e      	cmp	r2, #14
 800838c:	f300 8144 	bgt.w	8008618 <_dtoa_r+0x700>
 8008390:	4b67      	ldr	r3, [pc, #412]	; (8008530 <_dtoa_r+0x618>)
 8008392:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008396:	e9d3 8900 	ldrd	r8, r9, [r3]
 800839a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800839c:	2b00      	cmp	r3, #0
 800839e:	f280 80d5 	bge.w	800854c <_dtoa_r+0x634>
 80083a2:	9b03      	ldr	r3, [sp, #12]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f300 80d1 	bgt.w	800854c <_dtoa_r+0x634>
 80083aa:	f040 826f 	bne.w	800888c <_dtoa_r+0x974>
 80083ae:	4b65      	ldr	r3, [pc, #404]	; (8008544 <_dtoa_r+0x62c>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	4640      	mov	r0, r8
 80083b4:	4649      	mov	r1, r9
 80083b6:	f7f8 f93f 	bl	8000638 <__aeabi_dmul>
 80083ba:	4652      	mov	r2, sl
 80083bc:	465b      	mov	r3, fp
 80083be:	f7f8 fbc1 	bl	8000b44 <__aeabi_dcmpge>
 80083c2:	9e03      	ldr	r6, [sp, #12]
 80083c4:	4637      	mov	r7, r6
 80083c6:	2800      	cmp	r0, #0
 80083c8:	f040 8245 	bne.w	8008856 <_dtoa_r+0x93e>
 80083cc:	9d01      	ldr	r5, [sp, #4]
 80083ce:	2331      	movs	r3, #49	; 0x31
 80083d0:	f805 3b01 	strb.w	r3, [r5], #1
 80083d4:	9b00      	ldr	r3, [sp, #0]
 80083d6:	3301      	adds	r3, #1
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	e240      	b.n	800885e <_dtoa_r+0x946>
 80083dc:	07f2      	lsls	r2, r6, #31
 80083de:	d505      	bpl.n	80083ec <_dtoa_r+0x4d4>
 80083e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083e4:	f7f8 f928 	bl	8000638 <__aeabi_dmul>
 80083e8:	3501      	adds	r5, #1
 80083ea:	2301      	movs	r3, #1
 80083ec:	1076      	asrs	r6, r6, #1
 80083ee:	3708      	adds	r7, #8
 80083f0:	e777      	b.n	80082e2 <_dtoa_r+0x3ca>
 80083f2:	2502      	movs	r5, #2
 80083f4:	e779      	b.n	80082ea <_dtoa_r+0x3d2>
 80083f6:	9f00      	ldr	r7, [sp, #0]
 80083f8:	9e03      	ldr	r6, [sp, #12]
 80083fa:	e794      	b.n	8008326 <_dtoa_r+0x40e>
 80083fc:	9901      	ldr	r1, [sp, #4]
 80083fe:	4b4c      	ldr	r3, [pc, #304]	; (8008530 <_dtoa_r+0x618>)
 8008400:	4431      	add	r1, r6
 8008402:	910d      	str	r1, [sp, #52]	; 0x34
 8008404:	9908      	ldr	r1, [sp, #32]
 8008406:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800840a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800840e:	2900      	cmp	r1, #0
 8008410:	d043      	beq.n	800849a <_dtoa_r+0x582>
 8008412:	494d      	ldr	r1, [pc, #308]	; (8008548 <_dtoa_r+0x630>)
 8008414:	2000      	movs	r0, #0
 8008416:	f7f8 fa39 	bl	800088c <__aeabi_ddiv>
 800841a:	4652      	mov	r2, sl
 800841c:	465b      	mov	r3, fp
 800841e:	f7f7 ff53 	bl	80002c8 <__aeabi_dsub>
 8008422:	9d01      	ldr	r5, [sp, #4]
 8008424:	4682      	mov	sl, r0
 8008426:	468b      	mov	fp, r1
 8008428:	4649      	mov	r1, r9
 800842a:	4640      	mov	r0, r8
 800842c:	f7f8 fbb4 	bl	8000b98 <__aeabi_d2iz>
 8008430:	4606      	mov	r6, r0
 8008432:	f7f8 f897 	bl	8000564 <__aeabi_i2d>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	4640      	mov	r0, r8
 800843c:	4649      	mov	r1, r9
 800843e:	f7f7 ff43 	bl	80002c8 <__aeabi_dsub>
 8008442:	3630      	adds	r6, #48	; 0x30
 8008444:	f805 6b01 	strb.w	r6, [r5], #1
 8008448:	4652      	mov	r2, sl
 800844a:	465b      	mov	r3, fp
 800844c:	4680      	mov	r8, r0
 800844e:	4689      	mov	r9, r1
 8008450:	f7f8 fb64 	bl	8000b1c <__aeabi_dcmplt>
 8008454:	2800      	cmp	r0, #0
 8008456:	d163      	bne.n	8008520 <_dtoa_r+0x608>
 8008458:	4642      	mov	r2, r8
 800845a:	464b      	mov	r3, r9
 800845c:	4936      	ldr	r1, [pc, #216]	; (8008538 <_dtoa_r+0x620>)
 800845e:	2000      	movs	r0, #0
 8008460:	f7f7 ff32 	bl	80002c8 <__aeabi_dsub>
 8008464:	4652      	mov	r2, sl
 8008466:	465b      	mov	r3, fp
 8008468:	f7f8 fb58 	bl	8000b1c <__aeabi_dcmplt>
 800846c:	2800      	cmp	r0, #0
 800846e:	f040 80b5 	bne.w	80085dc <_dtoa_r+0x6c4>
 8008472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008474:	429d      	cmp	r5, r3
 8008476:	d081      	beq.n	800837c <_dtoa_r+0x464>
 8008478:	4b30      	ldr	r3, [pc, #192]	; (800853c <_dtoa_r+0x624>)
 800847a:	2200      	movs	r2, #0
 800847c:	4650      	mov	r0, sl
 800847e:	4659      	mov	r1, fp
 8008480:	f7f8 f8da 	bl	8000638 <__aeabi_dmul>
 8008484:	4b2d      	ldr	r3, [pc, #180]	; (800853c <_dtoa_r+0x624>)
 8008486:	4682      	mov	sl, r0
 8008488:	468b      	mov	fp, r1
 800848a:	4640      	mov	r0, r8
 800848c:	4649      	mov	r1, r9
 800848e:	2200      	movs	r2, #0
 8008490:	f7f8 f8d2 	bl	8000638 <__aeabi_dmul>
 8008494:	4680      	mov	r8, r0
 8008496:	4689      	mov	r9, r1
 8008498:	e7c6      	b.n	8008428 <_dtoa_r+0x510>
 800849a:	4650      	mov	r0, sl
 800849c:	4659      	mov	r1, fp
 800849e:	f7f8 f8cb 	bl	8000638 <__aeabi_dmul>
 80084a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084a4:	9d01      	ldr	r5, [sp, #4]
 80084a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80084a8:	4682      	mov	sl, r0
 80084aa:	468b      	mov	fp, r1
 80084ac:	4649      	mov	r1, r9
 80084ae:	4640      	mov	r0, r8
 80084b0:	f7f8 fb72 	bl	8000b98 <__aeabi_d2iz>
 80084b4:	4606      	mov	r6, r0
 80084b6:	f7f8 f855 	bl	8000564 <__aeabi_i2d>
 80084ba:	3630      	adds	r6, #48	; 0x30
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	4640      	mov	r0, r8
 80084c2:	4649      	mov	r1, r9
 80084c4:	f7f7 ff00 	bl	80002c8 <__aeabi_dsub>
 80084c8:	f805 6b01 	strb.w	r6, [r5], #1
 80084cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084ce:	429d      	cmp	r5, r3
 80084d0:	4680      	mov	r8, r0
 80084d2:	4689      	mov	r9, r1
 80084d4:	f04f 0200 	mov.w	r2, #0
 80084d8:	d124      	bne.n	8008524 <_dtoa_r+0x60c>
 80084da:	4b1b      	ldr	r3, [pc, #108]	; (8008548 <_dtoa_r+0x630>)
 80084dc:	4650      	mov	r0, sl
 80084de:	4659      	mov	r1, fp
 80084e0:	f7f7 fef4 	bl	80002cc <__adddf3>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	4640      	mov	r0, r8
 80084ea:	4649      	mov	r1, r9
 80084ec:	f7f8 fb34 	bl	8000b58 <__aeabi_dcmpgt>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	d173      	bne.n	80085dc <_dtoa_r+0x6c4>
 80084f4:	4652      	mov	r2, sl
 80084f6:	465b      	mov	r3, fp
 80084f8:	4913      	ldr	r1, [pc, #76]	; (8008548 <_dtoa_r+0x630>)
 80084fa:	2000      	movs	r0, #0
 80084fc:	f7f7 fee4 	bl	80002c8 <__aeabi_dsub>
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	4640      	mov	r0, r8
 8008506:	4649      	mov	r1, r9
 8008508:	f7f8 fb08 	bl	8000b1c <__aeabi_dcmplt>
 800850c:	2800      	cmp	r0, #0
 800850e:	f43f af35 	beq.w	800837c <_dtoa_r+0x464>
 8008512:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008514:	1e6b      	subs	r3, r5, #1
 8008516:	930f      	str	r3, [sp, #60]	; 0x3c
 8008518:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800851c:	2b30      	cmp	r3, #48	; 0x30
 800851e:	d0f8      	beq.n	8008512 <_dtoa_r+0x5fa>
 8008520:	9700      	str	r7, [sp, #0]
 8008522:	e049      	b.n	80085b8 <_dtoa_r+0x6a0>
 8008524:	4b05      	ldr	r3, [pc, #20]	; (800853c <_dtoa_r+0x624>)
 8008526:	f7f8 f887 	bl	8000638 <__aeabi_dmul>
 800852a:	4680      	mov	r8, r0
 800852c:	4689      	mov	r9, r1
 800852e:	e7bd      	b.n	80084ac <_dtoa_r+0x594>
 8008530:	0800a448 	.word	0x0800a448
 8008534:	0800a420 	.word	0x0800a420
 8008538:	3ff00000 	.word	0x3ff00000
 800853c:	40240000 	.word	0x40240000
 8008540:	401c0000 	.word	0x401c0000
 8008544:	40140000 	.word	0x40140000
 8008548:	3fe00000 	.word	0x3fe00000
 800854c:	9d01      	ldr	r5, [sp, #4]
 800854e:	4656      	mov	r6, sl
 8008550:	465f      	mov	r7, fp
 8008552:	4642      	mov	r2, r8
 8008554:	464b      	mov	r3, r9
 8008556:	4630      	mov	r0, r6
 8008558:	4639      	mov	r1, r7
 800855a:	f7f8 f997 	bl	800088c <__aeabi_ddiv>
 800855e:	f7f8 fb1b 	bl	8000b98 <__aeabi_d2iz>
 8008562:	4682      	mov	sl, r0
 8008564:	f7f7 fffe 	bl	8000564 <__aeabi_i2d>
 8008568:	4642      	mov	r2, r8
 800856a:	464b      	mov	r3, r9
 800856c:	f7f8 f864 	bl	8000638 <__aeabi_dmul>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	4630      	mov	r0, r6
 8008576:	4639      	mov	r1, r7
 8008578:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800857c:	f7f7 fea4 	bl	80002c8 <__aeabi_dsub>
 8008580:	f805 6b01 	strb.w	r6, [r5], #1
 8008584:	9e01      	ldr	r6, [sp, #4]
 8008586:	9f03      	ldr	r7, [sp, #12]
 8008588:	1bae      	subs	r6, r5, r6
 800858a:	42b7      	cmp	r7, r6
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	d135      	bne.n	80085fe <_dtoa_r+0x6e6>
 8008592:	f7f7 fe9b 	bl	80002cc <__adddf3>
 8008596:	4642      	mov	r2, r8
 8008598:	464b      	mov	r3, r9
 800859a:	4606      	mov	r6, r0
 800859c:	460f      	mov	r7, r1
 800859e:	f7f8 fadb 	bl	8000b58 <__aeabi_dcmpgt>
 80085a2:	b9d0      	cbnz	r0, 80085da <_dtoa_r+0x6c2>
 80085a4:	4642      	mov	r2, r8
 80085a6:	464b      	mov	r3, r9
 80085a8:	4630      	mov	r0, r6
 80085aa:	4639      	mov	r1, r7
 80085ac:	f7f8 faac 	bl	8000b08 <__aeabi_dcmpeq>
 80085b0:	b110      	cbz	r0, 80085b8 <_dtoa_r+0x6a0>
 80085b2:	f01a 0f01 	tst.w	sl, #1
 80085b6:	d110      	bne.n	80085da <_dtoa_r+0x6c2>
 80085b8:	4620      	mov	r0, r4
 80085ba:	ee18 1a10 	vmov	r1, s16
 80085be:	f000 faf3 	bl	8008ba8 <_Bfree>
 80085c2:	2300      	movs	r3, #0
 80085c4:	9800      	ldr	r0, [sp, #0]
 80085c6:	702b      	strb	r3, [r5, #0]
 80085c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085ca:	3001      	adds	r0, #1
 80085cc:	6018      	str	r0, [r3, #0]
 80085ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f43f acf1 	beq.w	8007fb8 <_dtoa_r+0xa0>
 80085d6:	601d      	str	r5, [r3, #0]
 80085d8:	e4ee      	b.n	8007fb8 <_dtoa_r+0xa0>
 80085da:	9f00      	ldr	r7, [sp, #0]
 80085dc:	462b      	mov	r3, r5
 80085de:	461d      	mov	r5, r3
 80085e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085e4:	2a39      	cmp	r2, #57	; 0x39
 80085e6:	d106      	bne.n	80085f6 <_dtoa_r+0x6de>
 80085e8:	9a01      	ldr	r2, [sp, #4]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d1f7      	bne.n	80085de <_dtoa_r+0x6c6>
 80085ee:	9901      	ldr	r1, [sp, #4]
 80085f0:	2230      	movs	r2, #48	; 0x30
 80085f2:	3701      	adds	r7, #1
 80085f4:	700a      	strb	r2, [r1, #0]
 80085f6:	781a      	ldrb	r2, [r3, #0]
 80085f8:	3201      	adds	r2, #1
 80085fa:	701a      	strb	r2, [r3, #0]
 80085fc:	e790      	b.n	8008520 <_dtoa_r+0x608>
 80085fe:	4ba6      	ldr	r3, [pc, #664]	; (8008898 <_dtoa_r+0x980>)
 8008600:	2200      	movs	r2, #0
 8008602:	f7f8 f819 	bl	8000638 <__aeabi_dmul>
 8008606:	2200      	movs	r2, #0
 8008608:	2300      	movs	r3, #0
 800860a:	4606      	mov	r6, r0
 800860c:	460f      	mov	r7, r1
 800860e:	f7f8 fa7b 	bl	8000b08 <__aeabi_dcmpeq>
 8008612:	2800      	cmp	r0, #0
 8008614:	d09d      	beq.n	8008552 <_dtoa_r+0x63a>
 8008616:	e7cf      	b.n	80085b8 <_dtoa_r+0x6a0>
 8008618:	9a08      	ldr	r2, [sp, #32]
 800861a:	2a00      	cmp	r2, #0
 800861c:	f000 80d7 	beq.w	80087ce <_dtoa_r+0x8b6>
 8008620:	9a06      	ldr	r2, [sp, #24]
 8008622:	2a01      	cmp	r2, #1
 8008624:	f300 80ba 	bgt.w	800879c <_dtoa_r+0x884>
 8008628:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800862a:	2a00      	cmp	r2, #0
 800862c:	f000 80b2 	beq.w	8008794 <_dtoa_r+0x87c>
 8008630:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008634:	9e07      	ldr	r6, [sp, #28]
 8008636:	9d04      	ldr	r5, [sp, #16]
 8008638:	9a04      	ldr	r2, [sp, #16]
 800863a:	441a      	add	r2, r3
 800863c:	9204      	str	r2, [sp, #16]
 800863e:	9a05      	ldr	r2, [sp, #20]
 8008640:	2101      	movs	r1, #1
 8008642:	441a      	add	r2, r3
 8008644:	4620      	mov	r0, r4
 8008646:	9205      	str	r2, [sp, #20]
 8008648:	f000 fb66 	bl	8008d18 <__i2b>
 800864c:	4607      	mov	r7, r0
 800864e:	2d00      	cmp	r5, #0
 8008650:	dd0c      	ble.n	800866c <_dtoa_r+0x754>
 8008652:	9b05      	ldr	r3, [sp, #20]
 8008654:	2b00      	cmp	r3, #0
 8008656:	dd09      	ble.n	800866c <_dtoa_r+0x754>
 8008658:	42ab      	cmp	r3, r5
 800865a:	9a04      	ldr	r2, [sp, #16]
 800865c:	bfa8      	it	ge
 800865e:	462b      	movge	r3, r5
 8008660:	1ad2      	subs	r2, r2, r3
 8008662:	9204      	str	r2, [sp, #16]
 8008664:	9a05      	ldr	r2, [sp, #20]
 8008666:	1aed      	subs	r5, r5, r3
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	9305      	str	r3, [sp, #20]
 800866c:	9b07      	ldr	r3, [sp, #28]
 800866e:	b31b      	cbz	r3, 80086b8 <_dtoa_r+0x7a0>
 8008670:	9b08      	ldr	r3, [sp, #32]
 8008672:	2b00      	cmp	r3, #0
 8008674:	f000 80af 	beq.w	80087d6 <_dtoa_r+0x8be>
 8008678:	2e00      	cmp	r6, #0
 800867a:	dd13      	ble.n	80086a4 <_dtoa_r+0x78c>
 800867c:	4639      	mov	r1, r7
 800867e:	4632      	mov	r2, r6
 8008680:	4620      	mov	r0, r4
 8008682:	f000 fc09 	bl	8008e98 <__pow5mult>
 8008686:	ee18 2a10 	vmov	r2, s16
 800868a:	4601      	mov	r1, r0
 800868c:	4607      	mov	r7, r0
 800868e:	4620      	mov	r0, r4
 8008690:	f000 fb58 	bl	8008d44 <__multiply>
 8008694:	ee18 1a10 	vmov	r1, s16
 8008698:	4680      	mov	r8, r0
 800869a:	4620      	mov	r0, r4
 800869c:	f000 fa84 	bl	8008ba8 <_Bfree>
 80086a0:	ee08 8a10 	vmov	s16, r8
 80086a4:	9b07      	ldr	r3, [sp, #28]
 80086a6:	1b9a      	subs	r2, r3, r6
 80086a8:	d006      	beq.n	80086b8 <_dtoa_r+0x7a0>
 80086aa:	ee18 1a10 	vmov	r1, s16
 80086ae:	4620      	mov	r0, r4
 80086b0:	f000 fbf2 	bl	8008e98 <__pow5mult>
 80086b4:	ee08 0a10 	vmov	s16, r0
 80086b8:	2101      	movs	r1, #1
 80086ba:	4620      	mov	r0, r4
 80086bc:	f000 fb2c 	bl	8008d18 <__i2b>
 80086c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	4606      	mov	r6, r0
 80086c6:	f340 8088 	ble.w	80087da <_dtoa_r+0x8c2>
 80086ca:	461a      	mov	r2, r3
 80086cc:	4601      	mov	r1, r0
 80086ce:	4620      	mov	r0, r4
 80086d0:	f000 fbe2 	bl	8008e98 <__pow5mult>
 80086d4:	9b06      	ldr	r3, [sp, #24]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	4606      	mov	r6, r0
 80086da:	f340 8081 	ble.w	80087e0 <_dtoa_r+0x8c8>
 80086de:	f04f 0800 	mov.w	r8, #0
 80086e2:	6933      	ldr	r3, [r6, #16]
 80086e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80086e8:	6918      	ldr	r0, [r3, #16]
 80086ea:	f000 fac5 	bl	8008c78 <__hi0bits>
 80086ee:	f1c0 0020 	rsb	r0, r0, #32
 80086f2:	9b05      	ldr	r3, [sp, #20]
 80086f4:	4418      	add	r0, r3
 80086f6:	f010 001f 	ands.w	r0, r0, #31
 80086fa:	f000 8092 	beq.w	8008822 <_dtoa_r+0x90a>
 80086fe:	f1c0 0320 	rsb	r3, r0, #32
 8008702:	2b04      	cmp	r3, #4
 8008704:	f340 808a 	ble.w	800881c <_dtoa_r+0x904>
 8008708:	f1c0 001c 	rsb	r0, r0, #28
 800870c:	9b04      	ldr	r3, [sp, #16]
 800870e:	4403      	add	r3, r0
 8008710:	9304      	str	r3, [sp, #16]
 8008712:	9b05      	ldr	r3, [sp, #20]
 8008714:	4403      	add	r3, r0
 8008716:	4405      	add	r5, r0
 8008718:	9305      	str	r3, [sp, #20]
 800871a:	9b04      	ldr	r3, [sp, #16]
 800871c:	2b00      	cmp	r3, #0
 800871e:	dd07      	ble.n	8008730 <_dtoa_r+0x818>
 8008720:	ee18 1a10 	vmov	r1, s16
 8008724:	461a      	mov	r2, r3
 8008726:	4620      	mov	r0, r4
 8008728:	f000 fc10 	bl	8008f4c <__lshift>
 800872c:	ee08 0a10 	vmov	s16, r0
 8008730:	9b05      	ldr	r3, [sp, #20]
 8008732:	2b00      	cmp	r3, #0
 8008734:	dd05      	ble.n	8008742 <_dtoa_r+0x82a>
 8008736:	4631      	mov	r1, r6
 8008738:	461a      	mov	r2, r3
 800873a:	4620      	mov	r0, r4
 800873c:	f000 fc06 	bl	8008f4c <__lshift>
 8008740:	4606      	mov	r6, r0
 8008742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008744:	2b00      	cmp	r3, #0
 8008746:	d06e      	beq.n	8008826 <_dtoa_r+0x90e>
 8008748:	ee18 0a10 	vmov	r0, s16
 800874c:	4631      	mov	r1, r6
 800874e:	f000 fc6d 	bl	800902c <__mcmp>
 8008752:	2800      	cmp	r0, #0
 8008754:	da67      	bge.n	8008826 <_dtoa_r+0x90e>
 8008756:	9b00      	ldr	r3, [sp, #0]
 8008758:	3b01      	subs	r3, #1
 800875a:	ee18 1a10 	vmov	r1, s16
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	220a      	movs	r2, #10
 8008762:	2300      	movs	r3, #0
 8008764:	4620      	mov	r0, r4
 8008766:	f000 fa41 	bl	8008bec <__multadd>
 800876a:	9b08      	ldr	r3, [sp, #32]
 800876c:	ee08 0a10 	vmov	s16, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 81b1 	beq.w	8008ad8 <_dtoa_r+0xbc0>
 8008776:	2300      	movs	r3, #0
 8008778:	4639      	mov	r1, r7
 800877a:	220a      	movs	r2, #10
 800877c:	4620      	mov	r0, r4
 800877e:	f000 fa35 	bl	8008bec <__multadd>
 8008782:	9b02      	ldr	r3, [sp, #8]
 8008784:	2b00      	cmp	r3, #0
 8008786:	4607      	mov	r7, r0
 8008788:	f300 808e 	bgt.w	80088a8 <_dtoa_r+0x990>
 800878c:	9b06      	ldr	r3, [sp, #24]
 800878e:	2b02      	cmp	r3, #2
 8008790:	dc51      	bgt.n	8008836 <_dtoa_r+0x91e>
 8008792:	e089      	b.n	80088a8 <_dtoa_r+0x990>
 8008794:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008796:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800879a:	e74b      	b.n	8008634 <_dtoa_r+0x71c>
 800879c:	9b03      	ldr	r3, [sp, #12]
 800879e:	1e5e      	subs	r6, r3, #1
 80087a0:	9b07      	ldr	r3, [sp, #28]
 80087a2:	42b3      	cmp	r3, r6
 80087a4:	bfbf      	itttt	lt
 80087a6:	9b07      	ldrlt	r3, [sp, #28]
 80087a8:	9607      	strlt	r6, [sp, #28]
 80087aa:	1af2      	sublt	r2, r6, r3
 80087ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80087ae:	bfb6      	itet	lt
 80087b0:	189b      	addlt	r3, r3, r2
 80087b2:	1b9e      	subge	r6, r3, r6
 80087b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80087b6:	9b03      	ldr	r3, [sp, #12]
 80087b8:	bfb8      	it	lt
 80087ba:	2600      	movlt	r6, #0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	bfb7      	itett	lt
 80087c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80087c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80087c8:	1a9d      	sublt	r5, r3, r2
 80087ca:	2300      	movlt	r3, #0
 80087cc:	e734      	b.n	8008638 <_dtoa_r+0x720>
 80087ce:	9e07      	ldr	r6, [sp, #28]
 80087d0:	9d04      	ldr	r5, [sp, #16]
 80087d2:	9f08      	ldr	r7, [sp, #32]
 80087d4:	e73b      	b.n	800864e <_dtoa_r+0x736>
 80087d6:	9a07      	ldr	r2, [sp, #28]
 80087d8:	e767      	b.n	80086aa <_dtoa_r+0x792>
 80087da:	9b06      	ldr	r3, [sp, #24]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	dc18      	bgt.n	8008812 <_dtoa_r+0x8fa>
 80087e0:	f1ba 0f00 	cmp.w	sl, #0
 80087e4:	d115      	bne.n	8008812 <_dtoa_r+0x8fa>
 80087e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087ea:	b993      	cbnz	r3, 8008812 <_dtoa_r+0x8fa>
 80087ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80087f0:	0d1b      	lsrs	r3, r3, #20
 80087f2:	051b      	lsls	r3, r3, #20
 80087f4:	b183      	cbz	r3, 8008818 <_dtoa_r+0x900>
 80087f6:	9b04      	ldr	r3, [sp, #16]
 80087f8:	3301      	adds	r3, #1
 80087fa:	9304      	str	r3, [sp, #16]
 80087fc:	9b05      	ldr	r3, [sp, #20]
 80087fe:	3301      	adds	r3, #1
 8008800:	9305      	str	r3, [sp, #20]
 8008802:	f04f 0801 	mov.w	r8, #1
 8008806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008808:	2b00      	cmp	r3, #0
 800880a:	f47f af6a 	bne.w	80086e2 <_dtoa_r+0x7ca>
 800880e:	2001      	movs	r0, #1
 8008810:	e76f      	b.n	80086f2 <_dtoa_r+0x7da>
 8008812:	f04f 0800 	mov.w	r8, #0
 8008816:	e7f6      	b.n	8008806 <_dtoa_r+0x8ee>
 8008818:	4698      	mov	r8, r3
 800881a:	e7f4      	b.n	8008806 <_dtoa_r+0x8ee>
 800881c:	f43f af7d 	beq.w	800871a <_dtoa_r+0x802>
 8008820:	4618      	mov	r0, r3
 8008822:	301c      	adds	r0, #28
 8008824:	e772      	b.n	800870c <_dtoa_r+0x7f4>
 8008826:	9b03      	ldr	r3, [sp, #12]
 8008828:	2b00      	cmp	r3, #0
 800882a:	dc37      	bgt.n	800889c <_dtoa_r+0x984>
 800882c:	9b06      	ldr	r3, [sp, #24]
 800882e:	2b02      	cmp	r3, #2
 8008830:	dd34      	ble.n	800889c <_dtoa_r+0x984>
 8008832:	9b03      	ldr	r3, [sp, #12]
 8008834:	9302      	str	r3, [sp, #8]
 8008836:	9b02      	ldr	r3, [sp, #8]
 8008838:	b96b      	cbnz	r3, 8008856 <_dtoa_r+0x93e>
 800883a:	4631      	mov	r1, r6
 800883c:	2205      	movs	r2, #5
 800883e:	4620      	mov	r0, r4
 8008840:	f000 f9d4 	bl	8008bec <__multadd>
 8008844:	4601      	mov	r1, r0
 8008846:	4606      	mov	r6, r0
 8008848:	ee18 0a10 	vmov	r0, s16
 800884c:	f000 fbee 	bl	800902c <__mcmp>
 8008850:	2800      	cmp	r0, #0
 8008852:	f73f adbb 	bgt.w	80083cc <_dtoa_r+0x4b4>
 8008856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008858:	9d01      	ldr	r5, [sp, #4]
 800885a:	43db      	mvns	r3, r3
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	f04f 0800 	mov.w	r8, #0
 8008862:	4631      	mov	r1, r6
 8008864:	4620      	mov	r0, r4
 8008866:	f000 f99f 	bl	8008ba8 <_Bfree>
 800886a:	2f00      	cmp	r7, #0
 800886c:	f43f aea4 	beq.w	80085b8 <_dtoa_r+0x6a0>
 8008870:	f1b8 0f00 	cmp.w	r8, #0
 8008874:	d005      	beq.n	8008882 <_dtoa_r+0x96a>
 8008876:	45b8      	cmp	r8, r7
 8008878:	d003      	beq.n	8008882 <_dtoa_r+0x96a>
 800887a:	4641      	mov	r1, r8
 800887c:	4620      	mov	r0, r4
 800887e:	f000 f993 	bl	8008ba8 <_Bfree>
 8008882:	4639      	mov	r1, r7
 8008884:	4620      	mov	r0, r4
 8008886:	f000 f98f 	bl	8008ba8 <_Bfree>
 800888a:	e695      	b.n	80085b8 <_dtoa_r+0x6a0>
 800888c:	2600      	movs	r6, #0
 800888e:	4637      	mov	r7, r6
 8008890:	e7e1      	b.n	8008856 <_dtoa_r+0x93e>
 8008892:	9700      	str	r7, [sp, #0]
 8008894:	4637      	mov	r7, r6
 8008896:	e599      	b.n	80083cc <_dtoa_r+0x4b4>
 8008898:	40240000 	.word	0x40240000
 800889c:	9b08      	ldr	r3, [sp, #32]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f000 80ca 	beq.w	8008a38 <_dtoa_r+0xb20>
 80088a4:	9b03      	ldr	r3, [sp, #12]
 80088a6:	9302      	str	r3, [sp, #8]
 80088a8:	2d00      	cmp	r5, #0
 80088aa:	dd05      	ble.n	80088b8 <_dtoa_r+0x9a0>
 80088ac:	4639      	mov	r1, r7
 80088ae:	462a      	mov	r2, r5
 80088b0:	4620      	mov	r0, r4
 80088b2:	f000 fb4b 	bl	8008f4c <__lshift>
 80088b6:	4607      	mov	r7, r0
 80088b8:	f1b8 0f00 	cmp.w	r8, #0
 80088bc:	d05b      	beq.n	8008976 <_dtoa_r+0xa5e>
 80088be:	6879      	ldr	r1, [r7, #4]
 80088c0:	4620      	mov	r0, r4
 80088c2:	f000 f931 	bl	8008b28 <_Balloc>
 80088c6:	4605      	mov	r5, r0
 80088c8:	b928      	cbnz	r0, 80088d6 <_dtoa_r+0x9be>
 80088ca:	4b87      	ldr	r3, [pc, #540]	; (8008ae8 <_dtoa_r+0xbd0>)
 80088cc:	4602      	mov	r2, r0
 80088ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80088d2:	f7ff bb3b 	b.w	8007f4c <_dtoa_r+0x34>
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	3202      	adds	r2, #2
 80088da:	0092      	lsls	r2, r2, #2
 80088dc:	f107 010c 	add.w	r1, r7, #12
 80088e0:	300c      	adds	r0, #12
 80088e2:	f000 f913 	bl	8008b0c <memcpy>
 80088e6:	2201      	movs	r2, #1
 80088e8:	4629      	mov	r1, r5
 80088ea:	4620      	mov	r0, r4
 80088ec:	f000 fb2e 	bl	8008f4c <__lshift>
 80088f0:	9b01      	ldr	r3, [sp, #4]
 80088f2:	f103 0901 	add.w	r9, r3, #1
 80088f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80088fa:	4413      	add	r3, r2
 80088fc:	9305      	str	r3, [sp, #20]
 80088fe:	f00a 0301 	and.w	r3, sl, #1
 8008902:	46b8      	mov	r8, r7
 8008904:	9304      	str	r3, [sp, #16]
 8008906:	4607      	mov	r7, r0
 8008908:	4631      	mov	r1, r6
 800890a:	ee18 0a10 	vmov	r0, s16
 800890e:	f7ff fa75 	bl	8007dfc <quorem>
 8008912:	4641      	mov	r1, r8
 8008914:	9002      	str	r0, [sp, #8]
 8008916:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800891a:	ee18 0a10 	vmov	r0, s16
 800891e:	f000 fb85 	bl	800902c <__mcmp>
 8008922:	463a      	mov	r2, r7
 8008924:	9003      	str	r0, [sp, #12]
 8008926:	4631      	mov	r1, r6
 8008928:	4620      	mov	r0, r4
 800892a:	f000 fb9b 	bl	8009064 <__mdiff>
 800892e:	68c2      	ldr	r2, [r0, #12]
 8008930:	f109 3bff 	add.w	fp, r9, #4294967295
 8008934:	4605      	mov	r5, r0
 8008936:	bb02      	cbnz	r2, 800897a <_dtoa_r+0xa62>
 8008938:	4601      	mov	r1, r0
 800893a:	ee18 0a10 	vmov	r0, s16
 800893e:	f000 fb75 	bl	800902c <__mcmp>
 8008942:	4602      	mov	r2, r0
 8008944:	4629      	mov	r1, r5
 8008946:	4620      	mov	r0, r4
 8008948:	9207      	str	r2, [sp, #28]
 800894a:	f000 f92d 	bl	8008ba8 <_Bfree>
 800894e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008952:	ea43 0102 	orr.w	r1, r3, r2
 8008956:	9b04      	ldr	r3, [sp, #16]
 8008958:	430b      	orrs	r3, r1
 800895a:	464d      	mov	r5, r9
 800895c:	d10f      	bne.n	800897e <_dtoa_r+0xa66>
 800895e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008962:	d02a      	beq.n	80089ba <_dtoa_r+0xaa2>
 8008964:	9b03      	ldr	r3, [sp, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	dd02      	ble.n	8008970 <_dtoa_r+0xa58>
 800896a:	9b02      	ldr	r3, [sp, #8]
 800896c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008970:	f88b a000 	strb.w	sl, [fp]
 8008974:	e775      	b.n	8008862 <_dtoa_r+0x94a>
 8008976:	4638      	mov	r0, r7
 8008978:	e7ba      	b.n	80088f0 <_dtoa_r+0x9d8>
 800897a:	2201      	movs	r2, #1
 800897c:	e7e2      	b.n	8008944 <_dtoa_r+0xa2c>
 800897e:	9b03      	ldr	r3, [sp, #12]
 8008980:	2b00      	cmp	r3, #0
 8008982:	db04      	blt.n	800898e <_dtoa_r+0xa76>
 8008984:	9906      	ldr	r1, [sp, #24]
 8008986:	430b      	orrs	r3, r1
 8008988:	9904      	ldr	r1, [sp, #16]
 800898a:	430b      	orrs	r3, r1
 800898c:	d122      	bne.n	80089d4 <_dtoa_r+0xabc>
 800898e:	2a00      	cmp	r2, #0
 8008990:	ddee      	ble.n	8008970 <_dtoa_r+0xa58>
 8008992:	ee18 1a10 	vmov	r1, s16
 8008996:	2201      	movs	r2, #1
 8008998:	4620      	mov	r0, r4
 800899a:	f000 fad7 	bl	8008f4c <__lshift>
 800899e:	4631      	mov	r1, r6
 80089a0:	ee08 0a10 	vmov	s16, r0
 80089a4:	f000 fb42 	bl	800902c <__mcmp>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	dc03      	bgt.n	80089b4 <_dtoa_r+0xa9c>
 80089ac:	d1e0      	bne.n	8008970 <_dtoa_r+0xa58>
 80089ae:	f01a 0f01 	tst.w	sl, #1
 80089b2:	d0dd      	beq.n	8008970 <_dtoa_r+0xa58>
 80089b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089b8:	d1d7      	bne.n	800896a <_dtoa_r+0xa52>
 80089ba:	2339      	movs	r3, #57	; 0x39
 80089bc:	f88b 3000 	strb.w	r3, [fp]
 80089c0:	462b      	mov	r3, r5
 80089c2:	461d      	mov	r5, r3
 80089c4:	3b01      	subs	r3, #1
 80089c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80089ca:	2a39      	cmp	r2, #57	; 0x39
 80089cc:	d071      	beq.n	8008ab2 <_dtoa_r+0xb9a>
 80089ce:	3201      	adds	r2, #1
 80089d0:	701a      	strb	r2, [r3, #0]
 80089d2:	e746      	b.n	8008862 <_dtoa_r+0x94a>
 80089d4:	2a00      	cmp	r2, #0
 80089d6:	dd07      	ble.n	80089e8 <_dtoa_r+0xad0>
 80089d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089dc:	d0ed      	beq.n	80089ba <_dtoa_r+0xaa2>
 80089de:	f10a 0301 	add.w	r3, sl, #1
 80089e2:	f88b 3000 	strb.w	r3, [fp]
 80089e6:	e73c      	b.n	8008862 <_dtoa_r+0x94a>
 80089e8:	9b05      	ldr	r3, [sp, #20]
 80089ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80089ee:	4599      	cmp	r9, r3
 80089f0:	d047      	beq.n	8008a82 <_dtoa_r+0xb6a>
 80089f2:	ee18 1a10 	vmov	r1, s16
 80089f6:	2300      	movs	r3, #0
 80089f8:	220a      	movs	r2, #10
 80089fa:	4620      	mov	r0, r4
 80089fc:	f000 f8f6 	bl	8008bec <__multadd>
 8008a00:	45b8      	cmp	r8, r7
 8008a02:	ee08 0a10 	vmov	s16, r0
 8008a06:	f04f 0300 	mov.w	r3, #0
 8008a0a:	f04f 020a 	mov.w	r2, #10
 8008a0e:	4641      	mov	r1, r8
 8008a10:	4620      	mov	r0, r4
 8008a12:	d106      	bne.n	8008a22 <_dtoa_r+0xb0a>
 8008a14:	f000 f8ea 	bl	8008bec <__multadd>
 8008a18:	4680      	mov	r8, r0
 8008a1a:	4607      	mov	r7, r0
 8008a1c:	f109 0901 	add.w	r9, r9, #1
 8008a20:	e772      	b.n	8008908 <_dtoa_r+0x9f0>
 8008a22:	f000 f8e3 	bl	8008bec <__multadd>
 8008a26:	4639      	mov	r1, r7
 8008a28:	4680      	mov	r8, r0
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	220a      	movs	r2, #10
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f000 f8dc 	bl	8008bec <__multadd>
 8008a34:	4607      	mov	r7, r0
 8008a36:	e7f1      	b.n	8008a1c <_dtoa_r+0xb04>
 8008a38:	9b03      	ldr	r3, [sp, #12]
 8008a3a:	9302      	str	r3, [sp, #8]
 8008a3c:	9d01      	ldr	r5, [sp, #4]
 8008a3e:	ee18 0a10 	vmov	r0, s16
 8008a42:	4631      	mov	r1, r6
 8008a44:	f7ff f9da 	bl	8007dfc <quorem>
 8008a48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008a4c:	9b01      	ldr	r3, [sp, #4]
 8008a4e:	f805 ab01 	strb.w	sl, [r5], #1
 8008a52:	1aea      	subs	r2, r5, r3
 8008a54:	9b02      	ldr	r3, [sp, #8]
 8008a56:	4293      	cmp	r3, r2
 8008a58:	dd09      	ble.n	8008a6e <_dtoa_r+0xb56>
 8008a5a:	ee18 1a10 	vmov	r1, s16
 8008a5e:	2300      	movs	r3, #0
 8008a60:	220a      	movs	r2, #10
 8008a62:	4620      	mov	r0, r4
 8008a64:	f000 f8c2 	bl	8008bec <__multadd>
 8008a68:	ee08 0a10 	vmov	s16, r0
 8008a6c:	e7e7      	b.n	8008a3e <_dtoa_r+0xb26>
 8008a6e:	9b02      	ldr	r3, [sp, #8]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	bfc8      	it	gt
 8008a74:	461d      	movgt	r5, r3
 8008a76:	9b01      	ldr	r3, [sp, #4]
 8008a78:	bfd8      	it	le
 8008a7a:	2501      	movle	r5, #1
 8008a7c:	441d      	add	r5, r3
 8008a7e:	f04f 0800 	mov.w	r8, #0
 8008a82:	ee18 1a10 	vmov	r1, s16
 8008a86:	2201      	movs	r2, #1
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f000 fa5f 	bl	8008f4c <__lshift>
 8008a8e:	4631      	mov	r1, r6
 8008a90:	ee08 0a10 	vmov	s16, r0
 8008a94:	f000 faca 	bl	800902c <__mcmp>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	dc91      	bgt.n	80089c0 <_dtoa_r+0xaa8>
 8008a9c:	d102      	bne.n	8008aa4 <_dtoa_r+0xb8c>
 8008a9e:	f01a 0f01 	tst.w	sl, #1
 8008aa2:	d18d      	bne.n	80089c0 <_dtoa_r+0xaa8>
 8008aa4:	462b      	mov	r3, r5
 8008aa6:	461d      	mov	r5, r3
 8008aa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008aac:	2a30      	cmp	r2, #48	; 0x30
 8008aae:	d0fa      	beq.n	8008aa6 <_dtoa_r+0xb8e>
 8008ab0:	e6d7      	b.n	8008862 <_dtoa_r+0x94a>
 8008ab2:	9a01      	ldr	r2, [sp, #4]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d184      	bne.n	80089c2 <_dtoa_r+0xaaa>
 8008ab8:	9b00      	ldr	r3, [sp, #0]
 8008aba:	3301      	adds	r3, #1
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	2331      	movs	r3, #49	; 0x31
 8008ac0:	7013      	strb	r3, [r2, #0]
 8008ac2:	e6ce      	b.n	8008862 <_dtoa_r+0x94a>
 8008ac4:	4b09      	ldr	r3, [pc, #36]	; (8008aec <_dtoa_r+0xbd4>)
 8008ac6:	f7ff ba95 	b.w	8007ff4 <_dtoa_r+0xdc>
 8008aca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f47f aa6e 	bne.w	8007fae <_dtoa_r+0x96>
 8008ad2:	4b07      	ldr	r3, [pc, #28]	; (8008af0 <_dtoa_r+0xbd8>)
 8008ad4:	f7ff ba8e 	b.w	8007ff4 <_dtoa_r+0xdc>
 8008ad8:	9b02      	ldr	r3, [sp, #8]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	dcae      	bgt.n	8008a3c <_dtoa_r+0xb24>
 8008ade:	9b06      	ldr	r3, [sp, #24]
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	f73f aea8 	bgt.w	8008836 <_dtoa_r+0x91e>
 8008ae6:	e7a9      	b.n	8008a3c <_dtoa_r+0xb24>
 8008ae8:	0800a3af 	.word	0x0800a3af
 8008aec:	0800a30c 	.word	0x0800a30c
 8008af0:	0800a330 	.word	0x0800a330

08008af4 <_localeconv_r>:
 8008af4:	4800      	ldr	r0, [pc, #0]	; (8008af8 <_localeconv_r+0x4>)
 8008af6:	4770      	bx	lr
 8008af8:	20000160 	.word	0x20000160

08008afc <malloc>:
 8008afc:	4b02      	ldr	r3, [pc, #8]	; (8008b08 <malloc+0xc>)
 8008afe:	4601      	mov	r1, r0
 8008b00:	6818      	ldr	r0, [r3, #0]
 8008b02:	f000 bc17 	b.w	8009334 <_malloc_r>
 8008b06:	bf00      	nop
 8008b08:	2000000c 	.word	0x2000000c

08008b0c <memcpy>:
 8008b0c:	440a      	add	r2, r1
 8008b0e:	4291      	cmp	r1, r2
 8008b10:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b14:	d100      	bne.n	8008b18 <memcpy+0xc>
 8008b16:	4770      	bx	lr
 8008b18:	b510      	push	{r4, lr}
 8008b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b22:	4291      	cmp	r1, r2
 8008b24:	d1f9      	bne.n	8008b1a <memcpy+0xe>
 8008b26:	bd10      	pop	{r4, pc}

08008b28 <_Balloc>:
 8008b28:	b570      	push	{r4, r5, r6, lr}
 8008b2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b2c:	4604      	mov	r4, r0
 8008b2e:	460d      	mov	r5, r1
 8008b30:	b976      	cbnz	r6, 8008b50 <_Balloc+0x28>
 8008b32:	2010      	movs	r0, #16
 8008b34:	f7ff ffe2 	bl	8008afc <malloc>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	6260      	str	r0, [r4, #36]	; 0x24
 8008b3c:	b920      	cbnz	r0, 8008b48 <_Balloc+0x20>
 8008b3e:	4b18      	ldr	r3, [pc, #96]	; (8008ba0 <_Balloc+0x78>)
 8008b40:	4818      	ldr	r0, [pc, #96]	; (8008ba4 <_Balloc+0x7c>)
 8008b42:	2166      	movs	r1, #102	; 0x66
 8008b44:	f000 fdd6 	bl	80096f4 <__assert_func>
 8008b48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b4c:	6006      	str	r6, [r0, #0]
 8008b4e:	60c6      	str	r6, [r0, #12]
 8008b50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008b52:	68f3      	ldr	r3, [r6, #12]
 8008b54:	b183      	cbz	r3, 8008b78 <_Balloc+0x50>
 8008b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b5e:	b9b8      	cbnz	r0, 8008b90 <_Balloc+0x68>
 8008b60:	2101      	movs	r1, #1
 8008b62:	fa01 f605 	lsl.w	r6, r1, r5
 8008b66:	1d72      	adds	r2, r6, #5
 8008b68:	0092      	lsls	r2, r2, #2
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f000 fb60 	bl	8009230 <_calloc_r>
 8008b70:	b160      	cbz	r0, 8008b8c <_Balloc+0x64>
 8008b72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b76:	e00e      	b.n	8008b96 <_Balloc+0x6e>
 8008b78:	2221      	movs	r2, #33	; 0x21
 8008b7a:	2104      	movs	r1, #4
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f000 fb57 	bl	8009230 <_calloc_r>
 8008b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b84:	60f0      	str	r0, [r6, #12]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1e4      	bne.n	8008b56 <_Balloc+0x2e>
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}
 8008b90:	6802      	ldr	r2, [r0, #0]
 8008b92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b96:	2300      	movs	r3, #0
 8008b98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b9c:	e7f7      	b.n	8008b8e <_Balloc+0x66>
 8008b9e:	bf00      	nop
 8008ba0:	0800a33d 	.word	0x0800a33d
 8008ba4:	0800a3c0 	.word	0x0800a3c0

08008ba8 <_Bfree>:
 8008ba8:	b570      	push	{r4, r5, r6, lr}
 8008baa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008bac:	4605      	mov	r5, r0
 8008bae:	460c      	mov	r4, r1
 8008bb0:	b976      	cbnz	r6, 8008bd0 <_Bfree+0x28>
 8008bb2:	2010      	movs	r0, #16
 8008bb4:	f7ff ffa2 	bl	8008afc <malloc>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	6268      	str	r0, [r5, #36]	; 0x24
 8008bbc:	b920      	cbnz	r0, 8008bc8 <_Bfree+0x20>
 8008bbe:	4b09      	ldr	r3, [pc, #36]	; (8008be4 <_Bfree+0x3c>)
 8008bc0:	4809      	ldr	r0, [pc, #36]	; (8008be8 <_Bfree+0x40>)
 8008bc2:	218a      	movs	r1, #138	; 0x8a
 8008bc4:	f000 fd96 	bl	80096f4 <__assert_func>
 8008bc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bcc:	6006      	str	r6, [r0, #0]
 8008bce:	60c6      	str	r6, [r0, #12]
 8008bd0:	b13c      	cbz	r4, 8008be2 <_Bfree+0x3a>
 8008bd2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008bd4:	6862      	ldr	r2, [r4, #4]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008bdc:	6021      	str	r1, [r4, #0]
 8008bde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008be2:	bd70      	pop	{r4, r5, r6, pc}
 8008be4:	0800a33d 	.word	0x0800a33d
 8008be8:	0800a3c0 	.word	0x0800a3c0

08008bec <__multadd>:
 8008bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf0:	690d      	ldr	r5, [r1, #16]
 8008bf2:	4607      	mov	r7, r0
 8008bf4:	460c      	mov	r4, r1
 8008bf6:	461e      	mov	r6, r3
 8008bf8:	f101 0c14 	add.w	ip, r1, #20
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	f8dc 3000 	ldr.w	r3, [ip]
 8008c02:	b299      	uxth	r1, r3
 8008c04:	fb02 6101 	mla	r1, r2, r1, r6
 8008c08:	0c1e      	lsrs	r6, r3, #16
 8008c0a:	0c0b      	lsrs	r3, r1, #16
 8008c0c:	fb02 3306 	mla	r3, r2, r6, r3
 8008c10:	b289      	uxth	r1, r1
 8008c12:	3001      	adds	r0, #1
 8008c14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c18:	4285      	cmp	r5, r0
 8008c1a:	f84c 1b04 	str.w	r1, [ip], #4
 8008c1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c22:	dcec      	bgt.n	8008bfe <__multadd+0x12>
 8008c24:	b30e      	cbz	r6, 8008c6a <__multadd+0x7e>
 8008c26:	68a3      	ldr	r3, [r4, #8]
 8008c28:	42ab      	cmp	r3, r5
 8008c2a:	dc19      	bgt.n	8008c60 <__multadd+0x74>
 8008c2c:	6861      	ldr	r1, [r4, #4]
 8008c2e:	4638      	mov	r0, r7
 8008c30:	3101      	adds	r1, #1
 8008c32:	f7ff ff79 	bl	8008b28 <_Balloc>
 8008c36:	4680      	mov	r8, r0
 8008c38:	b928      	cbnz	r0, 8008c46 <__multadd+0x5a>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	4b0c      	ldr	r3, [pc, #48]	; (8008c70 <__multadd+0x84>)
 8008c3e:	480d      	ldr	r0, [pc, #52]	; (8008c74 <__multadd+0x88>)
 8008c40:	21b5      	movs	r1, #181	; 0xb5
 8008c42:	f000 fd57 	bl	80096f4 <__assert_func>
 8008c46:	6922      	ldr	r2, [r4, #16]
 8008c48:	3202      	adds	r2, #2
 8008c4a:	f104 010c 	add.w	r1, r4, #12
 8008c4e:	0092      	lsls	r2, r2, #2
 8008c50:	300c      	adds	r0, #12
 8008c52:	f7ff ff5b 	bl	8008b0c <memcpy>
 8008c56:	4621      	mov	r1, r4
 8008c58:	4638      	mov	r0, r7
 8008c5a:	f7ff ffa5 	bl	8008ba8 <_Bfree>
 8008c5e:	4644      	mov	r4, r8
 8008c60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c64:	3501      	adds	r5, #1
 8008c66:	615e      	str	r6, [r3, #20]
 8008c68:	6125      	str	r5, [r4, #16]
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c70:	0800a3af 	.word	0x0800a3af
 8008c74:	0800a3c0 	.word	0x0800a3c0

08008c78 <__hi0bits>:
 8008c78:	0c03      	lsrs	r3, r0, #16
 8008c7a:	041b      	lsls	r3, r3, #16
 8008c7c:	b9d3      	cbnz	r3, 8008cb4 <__hi0bits+0x3c>
 8008c7e:	0400      	lsls	r0, r0, #16
 8008c80:	2310      	movs	r3, #16
 8008c82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008c86:	bf04      	itt	eq
 8008c88:	0200      	lsleq	r0, r0, #8
 8008c8a:	3308      	addeq	r3, #8
 8008c8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008c90:	bf04      	itt	eq
 8008c92:	0100      	lsleq	r0, r0, #4
 8008c94:	3304      	addeq	r3, #4
 8008c96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008c9a:	bf04      	itt	eq
 8008c9c:	0080      	lsleq	r0, r0, #2
 8008c9e:	3302      	addeq	r3, #2
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	db05      	blt.n	8008cb0 <__hi0bits+0x38>
 8008ca4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ca8:	f103 0301 	add.w	r3, r3, #1
 8008cac:	bf08      	it	eq
 8008cae:	2320      	moveq	r3, #32
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	4770      	bx	lr
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	e7e4      	b.n	8008c82 <__hi0bits+0xa>

08008cb8 <__lo0bits>:
 8008cb8:	6803      	ldr	r3, [r0, #0]
 8008cba:	f013 0207 	ands.w	r2, r3, #7
 8008cbe:	4601      	mov	r1, r0
 8008cc0:	d00b      	beq.n	8008cda <__lo0bits+0x22>
 8008cc2:	07da      	lsls	r2, r3, #31
 8008cc4:	d423      	bmi.n	8008d0e <__lo0bits+0x56>
 8008cc6:	0798      	lsls	r0, r3, #30
 8008cc8:	bf49      	itett	mi
 8008cca:	085b      	lsrmi	r3, r3, #1
 8008ccc:	089b      	lsrpl	r3, r3, #2
 8008cce:	2001      	movmi	r0, #1
 8008cd0:	600b      	strmi	r3, [r1, #0]
 8008cd2:	bf5c      	itt	pl
 8008cd4:	600b      	strpl	r3, [r1, #0]
 8008cd6:	2002      	movpl	r0, #2
 8008cd8:	4770      	bx	lr
 8008cda:	b298      	uxth	r0, r3
 8008cdc:	b9a8      	cbnz	r0, 8008d0a <__lo0bits+0x52>
 8008cde:	0c1b      	lsrs	r3, r3, #16
 8008ce0:	2010      	movs	r0, #16
 8008ce2:	b2da      	uxtb	r2, r3
 8008ce4:	b90a      	cbnz	r2, 8008cea <__lo0bits+0x32>
 8008ce6:	3008      	adds	r0, #8
 8008ce8:	0a1b      	lsrs	r3, r3, #8
 8008cea:	071a      	lsls	r2, r3, #28
 8008cec:	bf04      	itt	eq
 8008cee:	091b      	lsreq	r3, r3, #4
 8008cf0:	3004      	addeq	r0, #4
 8008cf2:	079a      	lsls	r2, r3, #30
 8008cf4:	bf04      	itt	eq
 8008cf6:	089b      	lsreq	r3, r3, #2
 8008cf8:	3002      	addeq	r0, #2
 8008cfa:	07da      	lsls	r2, r3, #31
 8008cfc:	d403      	bmi.n	8008d06 <__lo0bits+0x4e>
 8008cfe:	085b      	lsrs	r3, r3, #1
 8008d00:	f100 0001 	add.w	r0, r0, #1
 8008d04:	d005      	beq.n	8008d12 <__lo0bits+0x5a>
 8008d06:	600b      	str	r3, [r1, #0]
 8008d08:	4770      	bx	lr
 8008d0a:	4610      	mov	r0, r2
 8008d0c:	e7e9      	b.n	8008ce2 <__lo0bits+0x2a>
 8008d0e:	2000      	movs	r0, #0
 8008d10:	4770      	bx	lr
 8008d12:	2020      	movs	r0, #32
 8008d14:	4770      	bx	lr
	...

08008d18 <__i2b>:
 8008d18:	b510      	push	{r4, lr}
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	2101      	movs	r1, #1
 8008d1e:	f7ff ff03 	bl	8008b28 <_Balloc>
 8008d22:	4602      	mov	r2, r0
 8008d24:	b928      	cbnz	r0, 8008d32 <__i2b+0x1a>
 8008d26:	4b05      	ldr	r3, [pc, #20]	; (8008d3c <__i2b+0x24>)
 8008d28:	4805      	ldr	r0, [pc, #20]	; (8008d40 <__i2b+0x28>)
 8008d2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008d2e:	f000 fce1 	bl	80096f4 <__assert_func>
 8008d32:	2301      	movs	r3, #1
 8008d34:	6144      	str	r4, [r0, #20]
 8008d36:	6103      	str	r3, [r0, #16]
 8008d38:	bd10      	pop	{r4, pc}
 8008d3a:	bf00      	nop
 8008d3c:	0800a3af 	.word	0x0800a3af
 8008d40:	0800a3c0 	.word	0x0800a3c0

08008d44 <__multiply>:
 8008d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d48:	4691      	mov	r9, r2
 8008d4a:	690a      	ldr	r2, [r1, #16]
 8008d4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	bfb8      	it	lt
 8008d54:	460b      	movlt	r3, r1
 8008d56:	460c      	mov	r4, r1
 8008d58:	bfbc      	itt	lt
 8008d5a:	464c      	movlt	r4, r9
 8008d5c:	4699      	movlt	r9, r3
 8008d5e:	6927      	ldr	r7, [r4, #16]
 8008d60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008d64:	68a3      	ldr	r3, [r4, #8]
 8008d66:	6861      	ldr	r1, [r4, #4]
 8008d68:	eb07 060a 	add.w	r6, r7, sl
 8008d6c:	42b3      	cmp	r3, r6
 8008d6e:	b085      	sub	sp, #20
 8008d70:	bfb8      	it	lt
 8008d72:	3101      	addlt	r1, #1
 8008d74:	f7ff fed8 	bl	8008b28 <_Balloc>
 8008d78:	b930      	cbnz	r0, 8008d88 <__multiply+0x44>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	4b44      	ldr	r3, [pc, #272]	; (8008e90 <__multiply+0x14c>)
 8008d7e:	4845      	ldr	r0, [pc, #276]	; (8008e94 <__multiply+0x150>)
 8008d80:	f240 115d 	movw	r1, #349	; 0x15d
 8008d84:	f000 fcb6 	bl	80096f4 <__assert_func>
 8008d88:	f100 0514 	add.w	r5, r0, #20
 8008d8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d90:	462b      	mov	r3, r5
 8008d92:	2200      	movs	r2, #0
 8008d94:	4543      	cmp	r3, r8
 8008d96:	d321      	bcc.n	8008ddc <__multiply+0x98>
 8008d98:	f104 0314 	add.w	r3, r4, #20
 8008d9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008da0:	f109 0314 	add.w	r3, r9, #20
 8008da4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008da8:	9202      	str	r2, [sp, #8]
 8008daa:	1b3a      	subs	r2, r7, r4
 8008dac:	3a15      	subs	r2, #21
 8008dae:	f022 0203 	bic.w	r2, r2, #3
 8008db2:	3204      	adds	r2, #4
 8008db4:	f104 0115 	add.w	r1, r4, #21
 8008db8:	428f      	cmp	r7, r1
 8008dba:	bf38      	it	cc
 8008dbc:	2204      	movcc	r2, #4
 8008dbe:	9201      	str	r2, [sp, #4]
 8008dc0:	9a02      	ldr	r2, [sp, #8]
 8008dc2:	9303      	str	r3, [sp, #12]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d80c      	bhi.n	8008de2 <__multiply+0x9e>
 8008dc8:	2e00      	cmp	r6, #0
 8008dca:	dd03      	ble.n	8008dd4 <__multiply+0x90>
 8008dcc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d05a      	beq.n	8008e8a <__multiply+0x146>
 8008dd4:	6106      	str	r6, [r0, #16]
 8008dd6:	b005      	add	sp, #20
 8008dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ddc:	f843 2b04 	str.w	r2, [r3], #4
 8008de0:	e7d8      	b.n	8008d94 <__multiply+0x50>
 8008de2:	f8b3 a000 	ldrh.w	sl, [r3]
 8008de6:	f1ba 0f00 	cmp.w	sl, #0
 8008dea:	d024      	beq.n	8008e36 <__multiply+0xf2>
 8008dec:	f104 0e14 	add.w	lr, r4, #20
 8008df0:	46a9      	mov	r9, r5
 8008df2:	f04f 0c00 	mov.w	ip, #0
 8008df6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008dfa:	f8d9 1000 	ldr.w	r1, [r9]
 8008dfe:	fa1f fb82 	uxth.w	fp, r2
 8008e02:	b289      	uxth	r1, r1
 8008e04:	fb0a 110b 	mla	r1, sl, fp, r1
 8008e08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008e0c:	f8d9 2000 	ldr.w	r2, [r9]
 8008e10:	4461      	add	r1, ip
 8008e12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008e16:	fb0a c20b 	mla	r2, sl, fp, ip
 8008e1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008e1e:	b289      	uxth	r1, r1
 8008e20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008e24:	4577      	cmp	r7, lr
 8008e26:	f849 1b04 	str.w	r1, [r9], #4
 8008e2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008e2e:	d8e2      	bhi.n	8008df6 <__multiply+0xb2>
 8008e30:	9a01      	ldr	r2, [sp, #4]
 8008e32:	f845 c002 	str.w	ip, [r5, r2]
 8008e36:	9a03      	ldr	r2, [sp, #12]
 8008e38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008e3c:	3304      	adds	r3, #4
 8008e3e:	f1b9 0f00 	cmp.w	r9, #0
 8008e42:	d020      	beq.n	8008e86 <__multiply+0x142>
 8008e44:	6829      	ldr	r1, [r5, #0]
 8008e46:	f104 0c14 	add.w	ip, r4, #20
 8008e4a:	46ae      	mov	lr, r5
 8008e4c:	f04f 0a00 	mov.w	sl, #0
 8008e50:	f8bc b000 	ldrh.w	fp, [ip]
 8008e54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008e58:	fb09 220b 	mla	r2, r9, fp, r2
 8008e5c:	4492      	add	sl, r2
 8008e5e:	b289      	uxth	r1, r1
 8008e60:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008e64:	f84e 1b04 	str.w	r1, [lr], #4
 8008e68:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008e6c:	f8be 1000 	ldrh.w	r1, [lr]
 8008e70:	0c12      	lsrs	r2, r2, #16
 8008e72:	fb09 1102 	mla	r1, r9, r2, r1
 8008e76:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008e7a:	4567      	cmp	r7, ip
 8008e7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008e80:	d8e6      	bhi.n	8008e50 <__multiply+0x10c>
 8008e82:	9a01      	ldr	r2, [sp, #4]
 8008e84:	50a9      	str	r1, [r5, r2]
 8008e86:	3504      	adds	r5, #4
 8008e88:	e79a      	b.n	8008dc0 <__multiply+0x7c>
 8008e8a:	3e01      	subs	r6, #1
 8008e8c:	e79c      	b.n	8008dc8 <__multiply+0x84>
 8008e8e:	bf00      	nop
 8008e90:	0800a3af 	.word	0x0800a3af
 8008e94:	0800a3c0 	.word	0x0800a3c0

08008e98 <__pow5mult>:
 8008e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e9c:	4615      	mov	r5, r2
 8008e9e:	f012 0203 	ands.w	r2, r2, #3
 8008ea2:	4606      	mov	r6, r0
 8008ea4:	460f      	mov	r7, r1
 8008ea6:	d007      	beq.n	8008eb8 <__pow5mult+0x20>
 8008ea8:	4c25      	ldr	r4, [pc, #148]	; (8008f40 <__pow5mult+0xa8>)
 8008eaa:	3a01      	subs	r2, #1
 8008eac:	2300      	movs	r3, #0
 8008eae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008eb2:	f7ff fe9b 	bl	8008bec <__multadd>
 8008eb6:	4607      	mov	r7, r0
 8008eb8:	10ad      	asrs	r5, r5, #2
 8008eba:	d03d      	beq.n	8008f38 <__pow5mult+0xa0>
 8008ebc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008ebe:	b97c      	cbnz	r4, 8008ee0 <__pow5mult+0x48>
 8008ec0:	2010      	movs	r0, #16
 8008ec2:	f7ff fe1b 	bl	8008afc <malloc>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	6270      	str	r0, [r6, #36]	; 0x24
 8008eca:	b928      	cbnz	r0, 8008ed8 <__pow5mult+0x40>
 8008ecc:	4b1d      	ldr	r3, [pc, #116]	; (8008f44 <__pow5mult+0xac>)
 8008ece:	481e      	ldr	r0, [pc, #120]	; (8008f48 <__pow5mult+0xb0>)
 8008ed0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008ed4:	f000 fc0e 	bl	80096f4 <__assert_func>
 8008ed8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008edc:	6004      	str	r4, [r0, #0]
 8008ede:	60c4      	str	r4, [r0, #12]
 8008ee0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008ee4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ee8:	b94c      	cbnz	r4, 8008efe <__pow5mult+0x66>
 8008eea:	f240 2171 	movw	r1, #625	; 0x271
 8008eee:	4630      	mov	r0, r6
 8008ef0:	f7ff ff12 	bl	8008d18 <__i2b>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008efa:	4604      	mov	r4, r0
 8008efc:	6003      	str	r3, [r0, #0]
 8008efe:	f04f 0900 	mov.w	r9, #0
 8008f02:	07eb      	lsls	r3, r5, #31
 8008f04:	d50a      	bpl.n	8008f1c <__pow5mult+0x84>
 8008f06:	4639      	mov	r1, r7
 8008f08:	4622      	mov	r2, r4
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	f7ff ff1a 	bl	8008d44 <__multiply>
 8008f10:	4639      	mov	r1, r7
 8008f12:	4680      	mov	r8, r0
 8008f14:	4630      	mov	r0, r6
 8008f16:	f7ff fe47 	bl	8008ba8 <_Bfree>
 8008f1a:	4647      	mov	r7, r8
 8008f1c:	106d      	asrs	r5, r5, #1
 8008f1e:	d00b      	beq.n	8008f38 <__pow5mult+0xa0>
 8008f20:	6820      	ldr	r0, [r4, #0]
 8008f22:	b938      	cbnz	r0, 8008f34 <__pow5mult+0x9c>
 8008f24:	4622      	mov	r2, r4
 8008f26:	4621      	mov	r1, r4
 8008f28:	4630      	mov	r0, r6
 8008f2a:	f7ff ff0b 	bl	8008d44 <__multiply>
 8008f2e:	6020      	str	r0, [r4, #0]
 8008f30:	f8c0 9000 	str.w	r9, [r0]
 8008f34:	4604      	mov	r4, r0
 8008f36:	e7e4      	b.n	8008f02 <__pow5mult+0x6a>
 8008f38:	4638      	mov	r0, r7
 8008f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f3e:	bf00      	nop
 8008f40:	0800a510 	.word	0x0800a510
 8008f44:	0800a33d 	.word	0x0800a33d
 8008f48:	0800a3c0 	.word	0x0800a3c0

08008f4c <__lshift>:
 8008f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f50:	460c      	mov	r4, r1
 8008f52:	6849      	ldr	r1, [r1, #4]
 8008f54:	6923      	ldr	r3, [r4, #16]
 8008f56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f5a:	68a3      	ldr	r3, [r4, #8]
 8008f5c:	4607      	mov	r7, r0
 8008f5e:	4691      	mov	r9, r2
 8008f60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f64:	f108 0601 	add.w	r6, r8, #1
 8008f68:	42b3      	cmp	r3, r6
 8008f6a:	db0b      	blt.n	8008f84 <__lshift+0x38>
 8008f6c:	4638      	mov	r0, r7
 8008f6e:	f7ff fddb 	bl	8008b28 <_Balloc>
 8008f72:	4605      	mov	r5, r0
 8008f74:	b948      	cbnz	r0, 8008f8a <__lshift+0x3e>
 8008f76:	4602      	mov	r2, r0
 8008f78:	4b2a      	ldr	r3, [pc, #168]	; (8009024 <__lshift+0xd8>)
 8008f7a:	482b      	ldr	r0, [pc, #172]	; (8009028 <__lshift+0xdc>)
 8008f7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008f80:	f000 fbb8 	bl	80096f4 <__assert_func>
 8008f84:	3101      	adds	r1, #1
 8008f86:	005b      	lsls	r3, r3, #1
 8008f88:	e7ee      	b.n	8008f68 <__lshift+0x1c>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	f100 0114 	add.w	r1, r0, #20
 8008f90:	f100 0210 	add.w	r2, r0, #16
 8008f94:	4618      	mov	r0, r3
 8008f96:	4553      	cmp	r3, sl
 8008f98:	db37      	blt.n	800900a <__lshift+0xbe>
 8008f9a:	6920      	ldr	r0, [r4, #16]
 8008f9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008fa0:	f104 0314 	add.w	r3, r4, #20
 8008fa4:	f019 091f 	ands.w	r9, r9, #31
 8008fa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008fac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008fb0:	d02f      	beq.n	8009012 <__lshift+0xc6>
 8008fb2:	f1c9 0e20 	rsb	lr, r9, #32
 8008fb6:	468a      	mov	sl, r1
 8008fb8:	f04f 0c00 	mov.w	ip, #0
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	fa02 f209 	lsl.w	r2, r2, r9
 8008fc2:	ea42 020c 	orr.w	r2, r2, ip
 8008fc6:	f84a 2b04 	str.w	r2, [sl], #4
 8008fca:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fce:	4298      	cmp	r0, r3
 8008fd0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008fd4:	d8f2      	bhi.n	8008fbc <__lshift+0x70>
 8008fd6:	1b03      	subs	r3, r0, r4
 8008fd8:	3b15      	subs	r3, #21
 8008fda:	f023 0303 	bic.w	r3, r3, #3
 8008fde:	3304      	adds	r3, #4
 8008fe0:	f104 0215 	add.w	r2, r4, #21
 8008fe4:	4290      	cmp	r0, r2
 8008fe6:	bf38      	it	cc
 8008fe8:	2304      	movcc	r3, #4
 8008fea:	f841 c003 	str.w	ip, [r1, r3]
 8008fee:	f1bc 0f00 	cmp.w	ip, #0
 8008ff2:	d001      	beq.n	8008ff8 <__lshift+0xac>
 8008ff4:	f108 0602 	add.w	r6, r8, #2
 8008ff8:	3e01      	subs	r6, #1
 8008ffa:	4638      	mov	r0, r7
 8008ffc:	612e      	str	r6, [r5, #16]
 8008ffe:	4621      	mov	r1, r4
 8009000:	f7ff fdd2 	bl	8008ba8 <_Bfree>
 8009004:	4628      	mov	r0, r5
 8009006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800900a:	f842 0f04 	str.w	r0, [r2, #4]!
 800900e:	3301      	adds	r3, #1
 8009010:	e7c1      	b.n	8008f96 <__lshift+0x4a>
 8009012:	3904      	subs	r1, #4
 8009014:	f853 2b04 	ldr.w	r2, [r3], #4
 8009018:	f841 2f04 	str.w	r2, [r1, #4]!
 800901c:	4298      	cmp	r0, r3
 800901e:	d8f9      	bhi.n	8009014 <__lshift+0xc8>
 8009020:	e7ea      	b.n	8008ff8 <__lshift+0xac>
 8009022:	bf00      	nop
 8009024:	0800a3af 	.word	0x0800a3af
 8009028:	0800a3c0 	.word	0x0800a3c0

0800902c <__mcmp>:
 800902c:	b530      	push	{r4, r5, lr}
 800902e:	6902      	ldr	r2, [r0, #16]
 8009030:	690c      	ldr	r4, [r1, #16]
 8009032:	1b12      	subs	r2, r2, r4
 8009034:	d10e      	bne.n	8009054 <__mcmp+0x28>
 8009036:	f100 0314 	add.w	r3, r0, #20
 800903a:	3114      	adds	r1, #20
 800903c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009040:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009044:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009048:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800904c:	42a5      	cmp	r5, r4
 800904e:	d003      	beq.n	8009058 <__mcmp+0x2c>
 8009050:	d305      	bcc.n	800905e <__mcmp+0x32>
 8009052:	2201      	movs	r2, #1
 8009054:	4610      	mov	r0, r2
 8009056:	bd30      	pop	{r4, r5, pc}
 8009058:	4283      	cmp	r3, r0
 800905a:	d3f3      	bcc.n	8009044 <__mcmp+0x18>
 800905c:	e7fa      	b.n	8009054 <__mcmp+0x28>
 800905e:	f04f 32ff 	mov.w	r2, #4294967295
 8009062:	e7f7      	b.n	8009054 <__mcmp+0x28>

08009064 <__mdiff>:
 8009064:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009068:	460c      	mov	r4, r1
 800906a:	4606      	mov	r6, r0
 800906c:	4611      	mov	r1, r2
 800906e:	4620      	mov	r0, r4
 8009070:	4690      	mov	r8, r2
 8009072:	f7ff ffdb 	bl	800902c <__mcmp>
 8009076:	1e05      	subs	r5, r0, #0
 8009078:	d110      	bne.n	800909c <__mdiff+0x38>
 800907a:	4629      	mov	r1, r5
 800907c:	4630      	mov	r0, r6
 800907e:	f7ff fd53 	bl	8008b28 <_Balloc>
 8009082:	b930      	cbnz	r0, 8009092 <__mdiff+0x2e>
 8009084:	4b3a      	ldr	r3, [pc, #232]	; (8009170 <__mdiff+0x10c>)
 8009086:	4602      	mov	r2, r0
 8009088:	f240 2132 	movw	r1, #562	; 0x232
 800908c:	4839      	ldr	r0, [pc, #228]	; (8009174 <__mdiff+0x110>)
 800908e:	f000 fb31 	bl	80096f4 <__assert_func>
 8009092:	2301      	movs	r3, #1
 8009094:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009098:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800909c:	bfa4      	itt	ge
 800909e:	4643      	movge	r3, r8
 80090a0:	46a0      	movge	r8, r4
 80090a2:	4630      	mov	r0, r6
 80090a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80090a8:	bfa6      	itte	ge
 80090aa:	461c      	movge	r4, r3
 80090ac:	2500      	movge	r5, #0
 80090ae:	2501      	movlt	r5, #1
 80090b0:	f7ff fd3a 	bl	8008b28 <_Balloc>
 80090b4:	b920      	cbnz	r0, 80090c0 <__mdiff+0x5c>
 80090b6:	4b2e      	ldr	r3, [pc, #184]	; (8009170 <__mdiff+0x10c>)
 80090b8:	4602      	mov	r2, r0
 80090ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 80090be:	e7e5      	b.n	800908c <__mdiff+0x28>
 80090c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80090c4:	6926      	ldr	r6, [r4, #16]
 80090c6:	60c5      	str	r5, [r0, #12]
 80090c8:	f104 0914 	add.w	r9, r4, #20
 80090cc:	f108 0514 	add.w	r5, r8, #20
 80090d0:	f100 0e14 	add.w	lr, r0, #20
 80090d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80090d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80090dc:	f108 0210 	add.w	r2, r8, #16
 80090e0:	46f2      	mov	sl, lr
 80090e2:	2100      	movs	r1, #0
 80090e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80090e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80090ec:	fa1f f883 	uxth.w	r8, r3
 80090f0:	fa11 f18b 	uxtah	r1, r1, fp
 80090f4:	0c1b      	lsrs	r3, r3, #16
 80090f6:	eba1 0808 	sub.w	r8, r1, r8
 80090fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80090fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009102:	fa1f f888 	uxth.w	r8, r8
 8009106:	1419      	asrs	r1, r3, #16
 8009108:	454e      	cmp	r6, r9
 800910a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800910e:	f84a 3b04 	str.w	r3, [sl], #4
 8009112:	d8e7      	bhi.n	80090e4 <__mdiff+0x80>
 8009114:	1b33      	subs	r3, r6, r4
 8009116:	3b15      	subs	r3, #21
 8009118:	f023 0303 	bic.w	r3, r3, #3
 800911c:	3304      	adds	r3, #4
 800911e:	3415      	adds	r4, #21
 8009120:	42a6      	cmp	r6, r4
 8009122:	bf38      	it	cc
 8009124:	2304      	movcc	r3, #4
 8009126:	441d      	add	r5, r3
 8009128:	4473      	add	r3, lr
 800912a:	469e      	mov	lr, r3
 800912c:	462e      	mov	r6, r5
 800912e:	4566      	cmp	r6, ip
 8009130:	d30e      	bcc.n	8009150 <__mdiff+0xec>
 8009132:	f10c 0203 	add.w	r2, ip, #3
 8009136:	1b52      	subs	r2, r2, r5
 8009138:	f022 0203 	bic.w	r2, r2, #3
 800913c:	3d03      	subs	r5, #3
 800913e:	45ac      	cmp	ip, r5
 8009140:	bf38      	it	cc
 8009142:	2200      	movcc	r2, #0
 8009144:	441a      	add	r2, r3
 8009146:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800914a:	b17b      	cbz	r3, 800916c <__mdiff+0x108>
 800914c:	6107      	str	r7, [r0, #16]
 800914e:	e7a3      	b.n	8009098 <__mdiff+0x34>
 8009150:	f856 8b04 	ldr.w	r8, [r6], #4
 8009154:	fa11 f288 	uxtah	r2, r1, r8
 8009158:	1414      	asrs	r4, r2, #16
 800915a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800915e:	b292      	uxth	r2, r2
 8009160:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009164:	f84e 2b04 	str.w	r2, [lr], #4
 8009168:	1421      	asrs	r1, r4, #16
 800916a:	e7e0      	b.n	800912e <__mdiff+0xca>
 800916c:	3f01      	subs	r7, #1
 800916e:	e7ea      	b.n	8009146 <__mdiff+0xe2>
 8009170:	0800a3af 	.word	0x0800a3af
 8009174:	0800a3c0 	.word	0x0800a3c0

08009178 <__d2b>:
 8009178:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800917c:	4689      	mov	r9, r1
 800917e:	2101      	movs	r1, #1
 8009180:	ec57 6b10 	vmov	r6, r7, d0
 8009184:	4690      	mov	r8, r2
 8009186:	f7ff fccf 	bl	8008b28 <_Balloc>
 800918a:	4604      	mov	r4, r0
 800918c:	b930      	cbnz	r0, 800919c <__d2b+0x24>
 800918e:	4602      	mov	r2, r0
 8009190:	4b25      	ldr	r3, [pc, #148]	; (8009228 <__d2b+0xb0>)
 8009192:	4826      	ldr	r0, [pc, #152]	; (800922c <__d2b+0xb4>)
 8009194:	f240 310a 	movw	r1, #778	; 0x30a
 8009198:	f000 faac 	bl	80096f4 <__assert_func>
 800919c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80091a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80091a4:	bb35      	cbnz	r5, 80091f4 <__d2b+0x7c>
 80091a6:	2e00      	cmp	r6, #0
 80091a8:	9301      	str	r3, [sp, #4]
 80091aa:	d028      	beq.n	80091fe <__d2b+0x86>
 80091ac:	4668      	mov	r0, sp
 80091ae:	9600      	str	r6, [sp, #0]
 80091b0:	f7ff fd82 	bl	8008cb8 <__lo0bits>
 80091b4:	9900      	ldr	r1, [sp, #0]
 80091b6:	b300      	cbz	r0, 80091fa <__d2b+0x82>
 80091b8:	9a01      	ldr	r2, [sp, #4]
 80091ba:	f1c0 0320 	rsb	r3, r0, #32
 80091be:	fa02 f303 	lsl.w	r3, r2, r3
 80091c2:	430b      	orrs	r3, r1
 80091c4:	40c2      	lsrs	r2, r0
 80091c6:	6163      	str	r3, [r4, #20]
 80091c8:	9201      	str	r2, [sp, #4]
 80091ca:	9b01      	ldr	r3, [sp, #4]
 80091cc:	61a3      	str	r3, [r4, #24]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	bf14      	ite	ne
 80091d2:	2202      	movne	r2, #2
 80091d4:	2201      	moveq	r2, #1
 80091d6:	6122      	str	r2, [r4, #16]
 80091d8:	b1d5      	cbz	r5, 8009210 <__d2b+0x98>
 80091da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80091de:	4405      	add	r5, r0
 80091e0:	f8c9 5000 	str.w	r5, [r9]
 80091e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80091e8:	f8c8 0000 	str.w	r0, [r8]
 80091ec:	4620      	mov	r0, r4
 80091ee:	b003      	add	sp, #12
 80091f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091f8:	e7d5      	b.n	80091a6 <__d2b+0x2e>
 80091fa:	6161      	str	r1, [r4, #20]
 80091fc:	e7e5      	b.n	80091ca <__d2b+0x52>
 80091fe:	a801      	add	r0, sp, #4
 8009200:	f7ff fd5a 	bl	8008cb8 <__lo0bits>
 8009204:	9b01      	ldr	r3, [sp, #4]
 8009206:	6163      	str	r3, [r4, #20]
 8009208:	2201      	movs	r2, #1
 800920a:	6122      	str	r2, [r4, #16]
 800920c:	3020      	adds	r0, #32
 800920e:	e7e3      	b.n	80091d8 <__d2b+0x60>
 8009210:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009214:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009218:	f8c9 0000 	str.w	r0, [r9]
 800921c:	6918      	ldr	r0, [r3, #16]
 800921e:	f7ff fd2b 	bl	8008c78 <__hi0bits>
 8009222:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009226:	e7df      	b.n	80091e8 <__d2b+0x70>
 8009228:	0800a3af 	.word	0x0800a3af
 800922c:	0800a3c0 	.word	0x0800a3c0

08009230 <_calloc_r>:
 8009230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009232:	fba1 2402 	umull	r2, r4, r1, r2
 8009236:	b94c      	cbnz	r4, 800924c <_calloc_r+0x1c>
 8009238:	4611      	mov	r1, r2
 800923a:	9201      	str	r2, [sp, #4]
 800923c:	f000 f87a 	bl	8009334 <_malloc_r>
 8009240:	9a01      	ldr	r2, [sp, #4]
 8009242:	4605      	mov	r5, r0
 8009244:	b930      	cbnz	r0, 8009254 <_calloc_r+0x24>
 8009246:	4628      	mov	r0, r5
 8009248:	b003      	add	sp, #12
 800924a:	bd30      	pop	{r4, r5, pc}
 800924c:	220c      	movs	r2, #12
 800924e:	6002      	str	r2, [r0, #0]
 8009250:	2500      	movs	r5, #0
 8009252:	e7f8      	b.n	8009246 <_calloc_r+0x16>
 8009254:	4621      	mov	r1, r4
 8009256:	f7fe f92b 	bl	80074b0 <memset>
 800925a:	e7f4      	b.n	8009246 <_calloc_r+0x16>

0800925c <_free_r>:
 800925c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800925e:	2900      	cmp	r1, #0
 8009260:	d044      	beq.n	80092ec <_free_r+0x90>
 8009262:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009266:	9001      	str	r0, [sp, #4]
 8009268:	2b00      	cmp	r3, #0
 800926a:	f1a1 0404 	sub.w	r4, r1, #4
 800926e:	bfb8      	it	lt
 8009270:	18e4      	addlt	r4, r4, r3
 8009272:	f000 fa9b 	bl	80097ac <__malloc_lock>
 8009276:	4a1e      	ldr	r2, [pc, #120]	; (80092f0 <_free_r+0x94>)
 8009278:	9801      	ldr	r0, [sp, #4]
 800927a:	6813      	ldr	r3, [r2, #0]
 800927c:	b933      	cbnz	r3, 800928c <_free_r+0x30>
 800927e:	6063      	str	r3, [r4, #4]
 8009280:	6014      	str	r4, [r2, #0]
 8009282:	b003      	add	sp, #12
 8009284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009288:	f000 ba96 	b.w	80097b8 <__malloc_unlock>
 800928c:	42a3      	cmp	r3, r4
 800928e:	d908      	bls.n	80092a2 <_free_r+0x46>
 8009290:	6825      	ldr	r5, [r4, #0]
 8009292:	1961      	adds	r1, r4, r5
 8009294:	428b      	cmp	r3, r1
 8009296:	bf01      	itttt	eq
 8009298:	6819      	ldreq	r1, [r3, #0]
 800929a:	685b      	ldreq	r3, [r3, #4]
 800929c:	1949      	addeq	r1, r1, r5
 800929e:	6021      	streq	r1, [r4, #0]
 80092a0:	e7ed      	b.n	800927e <_free_r+0x22>
 80092a2:	461a      	mov	r2, r3
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	b10b      	cbz	r3, 80092ac <_free_r+0x50>
 80092a8:	42a3      	cmp	r3, r4
 80092aa:	d9fa      	bls.n	80092a2 <_free_r+0x46>
 80092ac:	6811      	ldr	r1, [r2, #0]
 80092ae:	1855      	adds	r5, r2, r1
 80092b0:	42a5      	cmp	r5, r4
 80092b2:	d10b      	bne.n	80092cc <_free_r+0x70>
 80092b4:	6824      	ldr	r4, [r4, #0]
 80092b6:	4421      	add	r1, r4
 80092b8:	1854      	adds	r4, r2, r1
 80092ba:	42a3      	cmp	r3, r4
 80092bc:	6011      	str	r1, [r2, #0]
 80092be:	d1e0      	bne.n	8009282 <_free_r+0x26>
 80092c0:	681c      	ldr	r4, [r3, #0]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	6053      	str	r3, [r2, #4]
 80092c6:	4421      	add	r1, r4
 80092c8:	6011      	str	r1, [r2, #0]
 80092ca:	e7da      	b.n	8009282 <_free_r+0x26>
 80092cc:	d902      	bls.n	80092d4 <_free_r+0x78>
 80092ce:	230c      	movs	r3, #12
 80092d0:	6003      	str	r3, [r0, #0]
 80092d2:	e7d6      	b.n	8009282 <_free_r+0x26>
 80092d4:	6825      	ldr	r5, [r4, #0]
 80092d6:	1961      	adds	r1, r4, r5
 80092d8:	428b      	cmp	r3, r1
 80092da:	bf04      	itt	eq
 80092dc:	6819      	ldreq	r1, [r3, #0]
 80092de:	685b      	ldreq	r3, [r3, #4]
 80092e0:	6063      	str	r3, [r4, #4]
 80092e2:	bf04      	itt	eq
 80092e4:	1949      	addeq	r1, r1, r5
 80092e6:	6021      	streq	r1, [r4, #0]
 80092e8:	6054      	str	r4, [r2, #4]
 80092ea:	e7ca      	b.n	8009282 <_free_r+0x26>
 80092ec:	b003      	add	sp, #12
 80092ee:	bd30      	pop	{r4, r5, pc}
 80092f0:	20000b3c 	.word	0x20000b3c

080092f4 <sbrk_aligned>:
 80092f4:	b570      	push	{r4, r5, r6, lr}
 80092f6:	4e0e      	ldr	r6, [pc, #56]	; (8009330 <sbrk_aligned+0x3c>)
 80092f8:	460c      	mov	r4, r1
 80092fa:	6831      	ldr	r1, [r6, #0]
 80092fc:	4605      	mov	r5, r0
 80092fe:	b911      	cbnz	r1, 8009306 <sbrk_aligned+0x12>
 8009300:	f000 f9e8 	bl	80096d4 <_sbrk_r>
 8009304:	6030      	str	r0, [r6, #0]
 8009306:	4621      	mov	r1, r4
 8009308:	4628      	mov	r0, r5
 800930a:	f000 f9e3 	bl	80096d4 <_sbrk_r>
 800930e:	1c43      	adds	r3, r0, #1
 8009310:	d00a      	beq.n	8009328 <sbrk_aligned+0x34>
 8009312:	1cc4      	adds	r4, r0, #3
 8009314:	f024 0403 	bic.w	r4, r4, #3
 8009318:	42a0      	cmp	r0, r4
 800931a:	d007      	beq.n	800932c <sbrk_aligned+0x38>
 800931c:	1a21      	subs	r1, r4, r0
 800931e:	4628      	mov	r0, r5
 8009320:	f000 f9d8 	bl	80096d4 <_sbrk_r>
 8009324:	3001      	adds	r0, #1
 8009326:	d101      	bne.n	800932c <sbrk_aligned+0x38>
 8009328:	f04f 34ff 	mov.w	r4, #4294967295
 800932c:	4620      	mov	r0, r4
 800932e:	bd70      	pop	{r4, r5, r6, pc}
 8009330:	20000b40 	.word	0x20000b40

08009334 <_malloc_r>:
 8009334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009338:	1ccd      	adds	r5, r1, #3
 800933a:	f025 0503 	bic.w	r5, r5, #3
 800933e:	3508      	adds	r5, #8
 8009340:	2d0c      	cmp	r5, #12
 8009342:	bf38      	it	cc
 8009344:	250c      	movcc	r5, #12
 8009346:	2d00      	cmp	r5, #0
 8009348:	4607      	mov	r7, r0
 800934a:	db01      	blt.n	8009350 <_malloc_r+0x1c>
 800934c:	42a9      	cmp	r1, r5
 800934e:	d905      	bls.n	800935c <_malloc_r+0x28>
 8009350:	230c      	movs	r3, #12
 8009352:	603b      	str	r3, [r7, #0]
 8009354:	2600      	movs	r6, #0
 8009356:	4630      	mov	r0, r6
 8009358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800935c:	4e2e      	ldr	r6, [pc, #184]	; (8009418 <_malloc_r+0xe4>)
 800935e:	f000 fa25 	bl	80097ac <__malloc_lock>
 8009362:	6833      	ldr	r3, [r6, #0]
 8009364:	461c      	mov	r4, r3
 8009366:	bb34      	cbnz	r4, 80093b6 <_malloc_r+0x82>
 8009368:	4629      	mov	r1, r5
 800936a:	4638      	mov	r0, r7
 800936c:	f7ff ffc2 	bl	80092f4 <sbrk_aligned>
 8009370:	1c43      	adds	r3, r0, #1
 8009372:	4604      	mov	r4, r0
 8009374:	d14d      	bne.n	8009412 <_malloc_r+0xde>
 8009376:	6834      	ldr	r4, [r6, #0]
 8009378:	4626      	mov	r6, r4
 800937a:	2e00      	cmp	r6, #0
 800937c:	d140      	bne.n	8009400 <_malloc_r+0xcc>
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	4631      	mov	r1, r6
 8009382:	4638      	mov	r0, r7
 8009384:	eb04 0803 	add.w	r8, r4, r3
 8009388:	f000 f9a4 	bl	80096d4 <_sbrk_r>
 800938c:	4580      	cmp	r8, r0
 800938e:	d13a      	bne.n	8009406 <_malloc_r+0xd2>
 8009390:	6821      	ldr	r1, [r4, #0]
 8009392:	3503      	adds	r5, #3
 8009394:	1a6d      	subs	r5, r5, r1
 8009396:	f025 0503 	bic.w	r5, r5, #3
 800939a:	3508      	adds	r5, #8
 800939c:	2d0c      	cmp	r5, #12
 800939e:	bf38      	it	cc
 80093a0:	250c      	movcc	r5, #12
 80093a2:	4629      	mov	r1, r5
 80093a4:	4638      	mov	r0, r7
 80093a6:	f7ff ffa5 	bl	80092f4 <sbrk_aligned>
 80093aa:	3001      	adds	r0, #1
 80093ac:	d02b      	beq.n	8009406 <_malloc_r+0xd2>
 80093ae:	6823      	ldr	r3, [r4, #0]
 80093b0:	442b      	add	r3, r5
 80093b2:	6023      	str	r3, [r4, #0]
 80093b4:	e00e      	b.n	80093d4 <_malloc_r+0xa0>
 80093b6:	6822      	ldr	r2, [r4, #0]
 80093b8:	1b52      	subs	r2, r2, r5
 80093ba:	d41e      	bmi.n	80093fa <_malloc_r+0xc6>
 80093bc:	2a0b      	cmp	r2, #11
 80093be:	d916      	bls.n	80093ee <_malloc_r+0xba>
 80093c0:	1961      	adds	r1, r4, r5
 80093c2:	42a3      	cmp	r3, r4
 80093c4:	6025      	str	r5, [r4, #0]
 80093c6:	bf18      	it	ne
 80093c8:	6059      	strne	r1, [r3, #4]
 80093ca:	6863      	ldr	r3, [r4, #4]
 80093cc:	bf08      	it	eq
 80093ce:	6031      	streq	r1, [r6, #0]
 80093d0:	5162      	str	r2, [r4, r5]
 80093d2:	604b      	str	r3, [r1, #4]
 80093d4:	4638      	mov	r0, r7
 80093d6:	f104 060b 	add.w	r6, r4, #11
 80093da:	f000 f9ed 	bl	80097b8 <__malloc_unlock>
 80093de:	f026 0607 	bic.w	r6, r6, #7
 80093e2:	1d23      	adds	r3, r4, #4
 80093e4:	1af2      	subs	r2, r6, r3
 80093e6:	d0b6      	beq.n	8009356 <_malloc_r+0x22>
 80093e8:	1b9b      	subs	r3, r3, r6
 80093ea:	50a3      	str	r3, [r4, r2]
 80093ec:	e7b3      	b.n	8009356 <_malloc_r+0x22>
 80093ee:	6862      	ldr	r2, [r4, #4]
 80093f0:	42a3      	cmp	r3, r4
 80093f2:	bf0c      	ite	eq
 80093f4:	6032      	streq	r2, [r6, #0]
 80093f6:	605a      	strne	r2, [r3, #4]
 80093f8:	e7ec      	b.n	80093d4 <_malloc_r+0xa0>
 80093fa:	4623      	mov	r3, r4
 80093fc:	6864      	ldr	r4, [r4, #4]
 80093fe:	e7b2      	b.n	8009366 <_malloc_r+0x32>
 8009400:	4634      	mov	r4, r6
 8009402:	6876      	ldr	r6, [r6, #4]
 8009404:	e7b9      	b.n	800937a <_malloc_r+0x46>
 8009406:	230c      	movs	r3, #12
 8009408:	603b      	str	r3, [r7, #0]
 800940a:	4638      	mov	r0, r7
 800940c:	f000 f9d4 	bl	80097b8 <__malloc_unlock>
 8009410:	e7a1      	b.n	8009356 <_malloc_r+0x22>
 8009412:	6025      	str	r5, [r4, #0]
 8009414:	e7de      	b.n	80093d4 <_malloc_r+0xa0>
 8009416:	bf00      	nop
 8009418:	20000b3c 	.word	0x20000b3c

0800941c <__ssputs_r>:
 800941c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009420:	688e      	ldr	r6, [r1, #8]
 8009422:	429e      	cmp	r6, r3
 8009424:	4682      	mov	sl, r0
 8009426:	460c      	mov	r4, r1
 8009428:	4690      	mov	r8, r2
 800942a:	461f      	mov	r7, r3
 800942c:	d838      	bhi.n	80094a0 <__ssputs_r+0x84>
 800942e:	898a      	ldrh	r2, [r1, #12]
 8009430:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009434:	d032      	beq.n	800949c <__ssputs_r+0x80>
 8009436:	6825      	ldr	r5, [r4, #0]
 8009438:	6909      	ldr	r1, [r1, #16]
 800943a:	eba5 0901 	sub.w	r9, r5, r1
 800943e:	6965      	ldr	r5, [r4, #20]
 8009440:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009444:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009448:	3301      	adds	r3, #1
 800944a:	444b      	add	r3, r9
 800944c:	106d      	asrs	r5, r5, #1
 800944e:	429d      	cmp	r5, r3
 8009450:	bf38      	it	cc
 8009452:	461d      	movcc	r5, r3
 8009454:	0553      	lsls	r3, r2, #21
 8009456:	d531      	bpl.n	80094bc <__ssputs_r+0xa0>
 8009458:	4629      	mov	r1, r5
 800945a:	f7ff ff6b 	bl	8009334 <_malloc_r>
 800945e:	4606      	mov	r6, r0
 8009460:	b950      	cbnz	r0, 8009478 <__ssputs_r+0x5c>
 8009462:	230c      	movs	r3, #12
 8009464:	f8ca 3000 	str.w	r3, [sl]
 8009468:	89a3      	ldrh	r3, [r4, #12]
 800946a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800946e:	81a3      	strh	r3, [r4, #12]
 8009470:	f04f 30ff 	mov.w	r0, #4294967295
 8009474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009478:	6921      	ldr	r1, [r4, #16]
 800947a:	464a      	mov	r2, r9
 800947c:	f7ff fb46 	bl	8008b0c <memcpy>
 8009480:	89a3      	ldrh	r3, [r4, #12]
 8009482:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800948a:	81a3      	strh	r3, [r4, #12]
 800948c:	6126      	str	r6, [r4, #16]
 800948e:	6165      	str	r5, [r4, #20]
 8009490:	444e      	add	r6, r9
 8009492:	eba5 0509 	sub.w	r5, r5, r9
 8009496:	6026      	str	r6, [r4, #0]
 8009498:	60a5      	str	r5, [r4, #8]
 800949a:	463e      	mov	r6, r7
 800949c:	42be      	cmp	r6, r7
 800949e:	d900      	bls.n	80094a2 <__ssputs_r+0x86>
 80094a0:	463e      	mov	r6, r7
 80094a2:	6820      	ldr	r0, [r4, #0]
 80094a4:	4632      	mov	r2, r6
 80094a6:	4641      	mov	r1, r8
 80094a8:	f000 f966 	bl	8009778 <memmove>
 80094ac:	68a3      	ldr	r3, [r4, #8]
 80094ae:	1b9b      	subs	r3, r3, r6
 80094b0:	60a3      	str	r3, [r4, #8]
 80094b2:	6823      	ldr	r3, [r4, #0]
 80094b4:	4433      	add	r3, r6
 80094b6:	6023      	str	r3, [r4, #0]
 80094b8:	2000      	movs	r0, #0
 80094ba:	e7db      	b.n	8009474 <__ssputs_r+0x58>
 80094bc:	462a      	mov	r2, r5
 80094be:	f000 f981 	bl	80097c4 <_realloc_r>
 80094c2:	4606      	mov	r6, r0
 80094c4:	2800      	cmp	r0, #0
 80094c6:	d1e1      	bne.n	800948c <__ssputs_r+0x70>
 80094c8:	6921      	ldr	r1, [r4, #16]
 80094ca:	4650      	mov	r0, sl
 80094cc:	f7ff fec6 	bl	800925c <_free_r>
 80094d0:	e7c7      	b.n	8009462 <__ssputs_r+0x46>
	...

080094d4 <_svfiprintf_r>:
 80094d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094d8:	4698      	mov	r8, r3
 80094da:	898b      	ldrh	r3, [r1, #12]
 80094dc:	061b      	lsls	r3, r3, #24
 80094de:	b09d      	sub	sp, #116	; 0x74
 80094e0:	4607      	mov	r7, r0
 80094e2:	460d      	mov	r5, r1
 80094e4:	4614      	mov	r4, r2
 80094e6:	d50e      	bpl.n	8009506 <_svfiprintf_r+0x32>
 80094e8:	690b      	ldr	r3, [r1, #16]
 80094ea:	b963      	cbnz	r3, 8009506 <_svfiprintf_r+0x32>
 80094ec:	2140      	movs	r1, #64	; 0x40
 80094ee:	f7ff ff21 	bl	8009334 <_malloc_r>
 80094f2:	6028      	str	r0, [r5, #0]
 80094f4:	6128      	str	r0, [r5, #16]
 80094f6:	b920      	cbnz	r0, 8009502 <_svfiprintf_r+0x2e>
 80094f8:	230c      	movs	r3, #12
 80094fa:	603b      	str	r3, [r7, #0]
 80094fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009500:	e0d1      	b.n	80096a6 <_svfiprintf_r+0x1d2>
 8009502:	2340      	movs	r3, #64	; 0x40
 8009504:	616b      	str	r3, [r5, #20]
 8009506:	2300      	movs	r3, #0
 8009508:	9309      	str	r3, [sp, #36]	; 0x24
 800950a:	2320      	movs	r3, #32
 800950c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009510:	f8cd 800c 	str.w	r8, [sp, #12]
 8009514:	2330      	movs	r3, #48	; 0x30
 8009516:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80096c0 <_svfiprintf_r+0x1ec>
 800951a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800951e:	f04f 0901 	mov.w	r9, #1
 8009522:	4623      	mov	r3, r4
 8009524:	469a      	mov	sl, r3
 8009526:	f813 2b01 	ldrb.w	r2, [r3], #1
 800952a:	b10a      	cbz	r2, 8009530 <_svfiprintf_r+0x5c>
 800952c:	2a25      	cmp	r2, #37	; 0x25
 800952e:	d1f9      	bne.n	8009524 <_svfiprintf_r+0x50>
 8009530:	ebba 0b04 	subs.w	fp, sl, r4
 8009534:	d00b      	beq.n	800954e <_svfiprintf_r+0x7a>
 8009536:	465b      	mov	r3, fp
 8009538:	4622      	mov	r2, r4
 800953a:	4629      	mov	r1, r5
 800953c:	4638      	mov	r0, r7
 800953e:	f7ff ff6d 	bl	800941c <__ssputs_r>
 8009542:	3001      	adds	r0, #1
 8009544:	f000 80aa 	beq.w	800969c <_svfiprintf_r+0x1c8>
 8009548:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800954a:	445a      	add	r2, fp
 800954c:	9209      	str	r2, [sp, #36]	; 0x24
 800954e:	f89a 3000 	ldrb.w	r3, [sl]
 8009552:	2b00      	cmp	r3, #0
 8009554:	f000 80a2 	beq.w	800969c <_svfiprintf_r+0x1c8>
 8009558:	2300      	movs	r3, #0
 800955a:	f04f 32ff 	mov.w	r2, #4294967295
 800955e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009562:	f10a 0a01 	add.w	sl, sl, #1
 8009566:	9304      	str	r3, [sp, #16]
 8009568:	9307      	str	r3, [sp, #28]
 800956a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800956e:	931a      	str	r3, [sp, #104]	; 0x68
 8009570:	4654      	mov	r4, sl
 8009572:	2205      	movs	r2, #5
 8009574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009578:	4851      	ldr	r0, [pc, #324]	; (80096c0 <_svfiprintf_r+0x1ec>)
 800957a:	f7f6 fe51 	bl	8000220 <memchr>
 800957e:	9a04      	ldr	r2, [sp, #16]
 8009580:	b9d8      	cbnz	r0, 80095ba <_svfiprintf_r+0xe6>
 8009582:	06d0      	lsls	r0, r2, #27
 8009584:	bf44      	itt	mi
 8009586:	2320      	movmi	r3, #32
 8009588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800958c:	0711      	lsls	r1, r2, #28
 800958e:	bf44      	itt	mi
 8009590:	232b      	movmi	r3, #43	; 0x2b
 8009592:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009596:	f89a 3000 	ldrb.w	r3, [sl]
 800959a:	2b2a      	cmp	r3, #42	; 0x2a
 800959c:	d015      	beq.n	80095ca <_svfiprintf_r+0xf6>
 800959e:	9a07      	ldr	r2, [sp, #28]
 80095a0:	4654      	mov	r4, sl
 80095a2:	2000      	movs	r0, #0
 80095a4:	f04f 0c0a 	mov.w	ip, #10
 80095a8:	4621      	mov	r1, r4
 80095aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095ae:	3b30      	subs	r3, #48	; 0x30
 80095b0:	2b09      	cmp	r3, #9
 80095b2:	d94e      	bls.n	8009652 <_svfiprintf_r+0x17e>
 80095b4:	b1b0      	cbz	r0, 80095e4 <_svfiprintf_r+0x110>
 80095b6:	9207      	str	r2, [sp, #28]
 80095b8:	e014      	b.n	80095e4 <_svfiprintf_r+0x110>
 80095ba:	eba0 0308 	sub.w	r3, r0, r8
 80095be:	fa09 f303 	lsl.w	r3, r9, r3
 80095c2:	4313      	orrs	r3, r2
 80095c4:	9304      	str	r3, [sp, #16]
 80095c6:	46a2      	mov	sl, r4
 80095c8:	e7d2      	b.n	8009570 <_svfiprintf_r+0x9c>
 80095ca:	9b03      	ldr	r3, [sp, #12]
 80095cc:	1d19      	adds	r1, r3, #4
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	9103      	str	r1, [sp, #12]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	bfbb      	ittet	lt
 80095d6:	425b      	neglt	r3, r3
 80095d8:	f042 0202 	orrlt.w	r2, r2, #2
 80095dc:	9307      	strge	r3, [sp, #28]
 80095de:	9307      	strlt	r3, [sp, #28]
 80095e0:	bfb8      	it	lt
 80095e2:	9204      	strlt	r2, [sp, #16]
 80095e4:	7823      	ldrb	r3, [r4, #0]
 80095e6:	2b2e      	cmp	r3, #46	; 0x2e
 80095e8:	d10c      	bne.n	8009604 <_svfiprintf_r+0x130>
 80095ea:	7863      	ldrb	r3, [r4, #1]
 80095ec:	2b2a      	cmp	r3, #42	; 0x2a
 80095ee:	d135      	bne.n	800965c <_svfiprintf_r+0x188>
 80095f0:	9b03      	ldr	r3, [sp, #12]
 80095f2:	1d1a      	adds	r2, r3, #4
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	9203      	str	r2, [sp, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	bfb8      	it	lt
 80095fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009600:	3402      	adds	r4, #2
 8009602:	9305      	str	r3, [sp, #20]
 8009604:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80096d0 <_svfiprintf_r+0x1fc>
 8009608:	7821      	ldrb	r1, [r4, #0]
 800960a:	2203      	movs	r2, #3
 800960c:	4650      	mov	r0, sl
 800960e:	f7f6 fe07 	bl	8000220 <memchr>
 8009612:	b140      	cbz	r0, 8009626 <_svfiprintf_r+0x152>
 8009614:	2340      	movs	r3, #64	; 0x40
 8009616:	eba0 000a 	sub.w	r0, r0, sl
 800961a:	fa03 f000 	lsl.w	r0, r3, r0
 800961e:	9b04      	ldr	r3, [sp, #16]
 8009620:	4303      	orrs	r3, r0
 8009622:	3401      	adds	r4, #1
 8009624:	9304      	str	r3, [sp, #16]
 8009626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800962a:	4826      	ldr	r0, [pc, #152]	; (80096c4 <_svfiprintf_r+0x1f0>)
 800962c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009630:	2206      	movs	r2, #6
 8009632:	f7f6 fdf5 	bl	8000220 <memchr>
 8009636:	2800      	cmp	r0, #0
 8009638:	d038      	beq.n	80096ac <_svfiprintf_r+0x1d8>
 800963a:	4b23      	ldr	r3, [pc, #140]	; (80096c8 <_svfiprintf_r+0x1f4>)
 800963c:	bb1b      	cbnz	r3, 8009686 <_svfiprintf_r+0x1b2>
 800963e:	9b03      	ldr	r3, [sp, #12]
 8009640:	3307      	adds	r3, #7
 8009642:	f023 0307 	bic.w	r3, r3, #7
 8009646:	3308      	adds	r3, #8
 8009648:	9303      	str	r3, [sp, #12]
 800964a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800964c:	4433      	add	r3, r6
 800964e:	9309      	str	r3, [sp, #36]	; 0x24
 8009650:	e767      	b.n	8009522 <_svfiprintf_r+0x4e>
 8009652:	fb0c 3202 	mla	r2, ip, r2, r3
 8009656:	460c      	mov	r4, r1
 8009658:	2001      	movs	r0, #1
 800965a:	e7a5      	b.n	80095a8 <_svfiprintf_r+0xd4>
 800965c:	2300      	movs	r3, #0
 800965e:	3401      	adds	r4, #1
 8009660:	9305      	str	r3, [sp, #20]
 8009662:	4619      	mov	r1, r3
 8009664:	f04f 0c0a 	mov.w	ip, #10
 8009668:	4620      	mov	r0, r4
 800966a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800966e:	3a30      	subs	r2, #48	; 0x30
 8009670:	2a09      	cmp	r2, #9
 8009672:	d903      	bls.n	800967c <_svfiprintf_r+0x1a8>
 8009674:	2b00      	cmp	r3, #0
 8009676:	d0c5      	beq.n	8009604 <_svfiprintf_r+0x130>
 8009678:	9105      	str	r1, [sp, #20]
 800967a:	e7c3      	b.n	8009604 <_svfiprintf_r+0x130>
 800967c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009680:	4604      	mov	r4, r0
 8009682:	2301      	movs	r3, #1
 8009684:	e7f0      	b.n	8009668 <_svfiprintf_r+0x194>
 8009686:	ab03      	add	r3, sp, #12
 8009688:	9300      	str	r3, [sp, #0]
 800968a:	462a      	mov	r2, r5
 800968c:	4b0f      	ldr	r3, [pc, #60]	; (80096cc <_svfiprintf_r+0x1f8>)
 800968e:	a904      	add	r1, sp, #16
 8009690:	4638      	mov	r0, r7
 8009692:	f7fd ffb5 	bl	8007600 <_printf_float>
 8009696:	1c42      	adds	r2, r0, #1
 8009698:	4606      	mov	r6, r0
 800969a:	d1d6      	bne.n	800964a <_svfiprintf_r+0x176>
 800969c:	89ab      	ldrh	r3, [r5, #12]
 800969e:	065b      	lsls	r3, r3, #25
 80096a0:	f53f af2c 	bmi.w	80094fc <_svfiprintf_r+0x28>
 80096a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096a6:	b01d      	add	sp, #116	; 0x74
 80096a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ac:	ab03      	add	r3, sp, #12
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	462a      	mov	r2, r5
 80096b2:	4b06      	ldr	r3, [pc, #24]	; (80096cc <_svfiprintf_r+0x1f8>)
 80096b4:	a904      	add	r1, sp, #16
 80096b6:	4638      	mov	r0, r7
 80096b8:	f7fe fa46 	bl	8007b48 <_printf_i>
 80096bc:	e7eb      	b.n	8009696 <_svfiprintf_r+0x1c2>
 80096be:	bf00      	nop
 80096c0:	0800a51c 	.word	0x0800a51c
 80096c4:	0800a526 	.word	0x0800a526
 80096c8:	08007601 	.word	0x08007601
 80096cc:	0800941d 	.word	0x0800941d
 80096d0:	0800a522 	.word	0x0800a522

080096d4 <_sbrk_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	4d06      	ldr	r5, [pc, #24]	; (80096f0 <_sbrk_r+0x1c>)
 80096d8:	2300      	movs	r3, #0
 80096da:	4604      	mov	r4, r0
 80096dc:	4608      	mov	r0, r1
 80096de:	602b      	str	r3, [r5, #0]
 80096e0:	f7f8 ff70 	bl	80025c4 <_sbrk>
 80096e4:	1c43      	adds	r3, r0, #1
 80096e6:	d102      	bne.n	80096ee <_sbrk_r+0x1a>
 80096e8:	682b      	ldr	r3, [r5, #0]
 80096ea:	b103      	cbz	r3, 80096ee <_sbrk_r+0x1a>
 80096ec:	6023      	str	r3, [r4, #0]
 80096ee:	bd38      	pop	{r3, r4, r5, pc}
 80096f0:	20000b44 	.word	0x20000b44

080096f4 <__assert_func>:
 80096f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096f6:	4614      	mov	r4, r2
 80096f8:	461a      	mov	r2, r3
 80096fa:	4b09      	ldr	r3, [pc, #36]	; (8009720 <__assert_func+0x2c>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4605      	mov	r5, r0
 8009700:	68d8      	ldr	r0, [r3, #12]
 8009702:	b14c      	cbz	r4, 8009718 <__assert_func+0x24>
 8009704:	4b07      	ldr	r3, [pc, #28]	; (8009724 <__assert_func+0x30>)
 8009706:	9100      	str	r1, [sp, #0]
 8009708:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800970c:	4906      	ldr	r1, [pc, #24]	; (8009728 <__assert_func+0x34>)
 800970e:	462b      	mov	r3, r5
 8009710:	f000 f80e 	bl	8009730 <fiprintf>
 8009714:	f000 faac 	bl	8009c70 <abort>
 8009718:	4b04      	ldr	r3, [pc, #16]	; (800972c <__assert_func+0x38>)
 800971a:	461c      	mov	r4, r3
 800971c:	e7f3      	b.n	8009706 <__assert_func+0x12>
 800971e:	bf00      	nop
 8009720:	2000000c 	.word	0x2000000c
 8009724:	0800a52d 	.word	0x0800a52d
 8009728:	0800a53a 	.word	0x0800a53a
 800972c:	0800a568 	.word	0x0800a568

08009730 <fiprintf>:
 8009730:	b40e      	push	{r1, r2, r3}
 8009732:	b503      	push	{r0, r1, lr}
 8009734:	4601      	mov	r1, r0
 8009736:	ab03      	add	r3, sp, #12
 8009738:	4805      	ldr	r0, [pc, #20]	; (8009750 <fiprintf+0x20>)
 800973a:	f853 2b04 	ldr.w	r2, [r3], #4
 800973e:	6800      	ldr	r0, [r0, #0]
 8009740:	9301      	str	r3, [sp, #4]
 8009742:	f000 f897 	bl	8009874 <_vfiprintf_r>
 8009746:	b002      	add	sp, #8
 8009748:	f85d eb04 	ldr.w	lr, [sp], #4
 800974c:	b003      	add	sp, #12
 800974e:	4770      	bx	lr
 8009750:	2000000c 	.word	0x2000000c

08009754 <__ascii_mbtowc>:
 8009754:	b082      	sub	sp, #8
 8009756:	b901      	cbnz	r1, 800975a <__ascii_mbtowc+0x6>
 8009758:	a901      	add	r1, sp, #4
 800975a:	b142      	cbz	r2, 800976e <__ascii_mbtowc+0x1a>
 800975c:	b14b      	cbz	r3, 8009772 <__ascii_mbtowc+0x1e>
 800975e:	7813      	ldrb	r3, [r2, #0]
 8009760:	600b      	str	r3, [r1, #0]
 8009762:	7812      	ldrb	r2, [r2, #0]
 8009764:	1e10      	subs	r0, r2, #0
 8009766:	bf18      	it	ne
 8009768:	2001      	movne	r0, #1
 800976a:	b002      	add	sp, #8
 800976c:	4770      	bx	lr
 800976e:	4610      	mov	r0, r2
 8009770:	e7fb      	b.n	800976a <__ascii_mbtowc+0x16>
 8009772:	f06f 0001 	mvn.w	r0, #1
 8009776:	e7f8      	b.n	800976a <__ascii_mbtowc+0x16>

08009778 <memmove>:
 8009778:	4288      	cmp	r0, r1
 800977a:	b510      	push	{r4, lr}
 800977c:	eb01 0402 	add.w	r4, r1, r2
 8009780:	d902      	bls.n	8009788 <memmove+0x10>
 8009782:	4284      	cmp	r4, r0
 8009784:	4623      	mov	r3, r4
 8009786:	d807      	bhi.n	8009798 <memmove+0x20>
 8009788:	1e43      	subs	r3, r0, #1
 800978a:	42a1      	cmp	r1, r4
 800978c:	d008      	beq.n	80097a0 <memmove+0x28>
 800978e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009792:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009796:	e7f8      	b.n	800978a <memmove+0x12>
 8009798:	4402      	add	r2, r0
 800979a:	4601      	mov	r1, r0
 800979c:	428a      	cmp	r2, r1
 800979e:	d100      	bne.n	80097a2 <memmove+0x2a>
 80097a0:	bd10      	pop	{r4, pc}
 80097a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097aa:	e7f7      	b.n	800979c <memmove+0x24>

080097ac <__malloc_lock>:
 80097ac:	4801      	ldr	r0, [pc, #4]	; (80097b4 <__malloc_lock+0x8>)
 80097ae:	f000 bc1f 	b.w	8009ff0 <__retarget_lock_acquire_recursive>
 80097b2:	bf00      	nop
 80097b4:	20000b48 	.word	0x20000b48

080097b8 <__malloc_unlock>:
 80097b8:	4801      	ldr	r0, [pc, #4]	; (80097c0 <__malloc_unlock+0x8>)
 80097ba:	f000 bc1a 	b.w	8009ff2 <__retarget_lock_release_recursive>
 80097be:	bf00      	nop
 80097c0:	20000b48 	.word	0x20000b48

080097c4 <_realloc_r>:
 80097c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097c8:	4680      	mov	r8, r0
 80097ca:	4614      	mov	r4, r2
 80097cc:	460e      	mov	r6, r1
 80097ce:	b921      	cbnz	r1, 80097da <_realloc_r+0x16>
 80097d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097d4:	4611      	mov	r1, r2
 80097d6:	f7ff bdad 	b.w	8009334 <_malloc_r>
 80097da:	b92a      	cbnz	r2, 80097e8 <_realloc_r+0x24>
 80097dc:	f7ff fd3e 	bl	800925c <_free_r>
 80097e0:	4625      	mov	r5, r4
 80097e2:	4628      	mov	r0, r5
 80097e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097e8:	f000 fc6a 	bl	800a0c0 <_malloc_usable_size_r>
 80097ec:	4284      	cmp	r4, r0
 80097ee:	4607      	mov	r7, r0
 80097f0:	d802      	bhi.n	80097f8 <_realloc_r+0x34>
 80097f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80097f6:	d812      	bhi.n	800981e <_realloc_r+0x5a>
 80097f8:	4621      	mov	r1, r4
 80097fa:	4640      	mov	r0, r8
 80097fc:	f7ff fd9a 	bl	8009334 <_malloc_r>
 8009800:	4605      	mov	r5, r0
 8009802:	2800      	cmp	r0, #0
 8009804:	d0ed      	beq.n	80097e2 <_realloc_r+0x1e>
 8009806:	42bc      	cmp	r4, r7
 8009808:	4622      	mov	r2, r4
 800980a:	4631      	mov	r1, r6
 800980c:	bf28      	it	cs
 800980e:	463a      	movcs	r2, r7
 8009810:	f7ff f97c 	bl	8008b0c <memcpy>
 8009814:	4631      	mov	r1, r6
 8009816:	4640      	mov	r0, r8
 8009818:	f7ff fd20 	bl	800925c <_free_r>
 800981c:	e7e1      	b.n	80097e2 <_realloc_r+0x1e>
 800981e:	4635      	mov	r5, r6
 8009820:	e7df      	b.n	80097e2 <_realloc_r+0x1e>

08009822 <__sfputc_r>:
 8009822:	6893      	ldr	r3, [r2, #8]
 8009824:	3b01      	subs	r3, #1
 8009826:	2b00      	cmp	r3, #0
 8009828:	b410      	push	{r4}
 800982a:	6093      	str	r3, [r2, #8]
 800982c:	da08      	bge.n	8009840 <__sfputc_r+0x1e>
 800982e:	6994      	ldr	r4, [r2, #24]
 8009830:	42a3      	cmp	r3, r4
 8009832:	db01      	blt.n	8009838 <__sfputc_r+0x16>
 8009834:	290a      	cmp	r1, #10
 8009836:	d103      	bne.n	8009840 <__sfputc_r+0x1e>
 8009838:	f85d 4b04 	ldr.w	r4, [sp], #4
 800983c:	f000 b94a 	b.w	8009ad4 <__swbuf_r>
 8009840:	6813      	ldr	r3, [r2, #0]
 8009842:	1c58      	adds	r0, r3, #1
 8009844:	6010      	str	r0, [r2, #0]
 8009846:	7019      	strb	r1, [r3, #0]
 8009848:	4608      	mov	r0, r1
 800984a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800984e:	4770      	bx	lr

08009850 <__sfputs_r>:
 8009850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009852:	4606      	mov	r6, r0
 8009854:	460f      	mov	r7, r1
 8009856:	4614      	mov	r4, r2
 8009858:	18d5      	adds	r5, r2, r3
 800985a:	42ac      	cmp	r4, r5
 800985c:	d101      	bne.n	8009862 <__sfputs_r+0x12>
 800985e:	2000      	movs	r0, #0
 8009860:	e007      	b.n	8009872 <__sfputs_r+0x22>
 8009862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009866:	463a      	mov	r2, r7
 8009868:	4630      	mov	r0, r6
 800986a:	f7ff ffda 	bl	8009822 <__sfputc_r>
 800986e:	1c43      	adds	r3, r0, #1
 8009870:	d1f3      	bne.n	800985a <__sfputs_r+0xa>
 8009872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009874 <_vfiprintf_r>:
 8009874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009878:	460d      	mov	r5, r1
 800987a:	b09d      	sub	sp, #116	; 0x74
 800987c:	4614      	mov	r4, r2
 800987e:	4698      	mov	r8, r3
 8009880:	4606      	mov	r6, r0
 8009882:	b118      	cbz	r0, 800988c <_vfiprintf_r+0x18>
 8009884:	6983      	ldr	r3, [r0, #24]
 8009886:	b90b      	cbnz	r3, 800988c <_vfiprintf_r+0x18>
 8009888:	f000 fb14 	bl	8009eb4 <__sinit>
 800988c:	4b89      	ldr	r3, [pc, #548]	; (8009ab4 <_vfiprintf_r+0x240>)
 800988e:	429d      	cmp	r5, r3
 8009890:	d11b      	bne.n	80098ca <_vfiprintf_r+0x56>
 8009892:	6875      	ldr	r5, [r6, #4]
 8009894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009896:	07d9      	lsls	r1, r3, #31
 8009898:	d405      	bmi.n	80098a6 <_vfiprintf_r+0x32>
 800989a:	89ab      	ldrh	r3, [r5, #12]
 800989c:	059a      	lsls	r2, r3, #22
 800989e:	d402      	bmi.n	80098a6 <_vfiprintf_r+0x32>
 80098a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098a2:	f000 fba5 	bl	8009ff0 <__retarget_lock_acquire_recursive>
 80098a6:	89ab      	ldrh	r3, [r5, #12]
 80098a8:	071b      	lsls	r3, r3, #28
 80098aa:	d501      	bpl.n	80098b0 <_vfiprintf_r+0x3c>
 80098ac:	692b      	ldr	r3, [r5, #16]
 80098ae:	b9eb      	cbnz	r3, 80098ec <_vfiprintf_r+0x78>
 80098b0:	4629      	mov	r1, r5
 80098b2:	4630      	mov	r0, r6
 80098b4:	f000 f96e 	bl	8009b94 <__swsetup_r>
 80098b8:	b1c0      	cbz	r0, 80098ec <_vfiprintf_r+0x78>
 80098ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098bc:	07dc      	lsls	r4, r3, #31
 80098be:	d50e      	bpl.n	80098de <_vfiprintf_r+0x6a>
 80098c0:	f04f 30ff 	mov.w	r0, #4294967295
 80098c4:	b01d      	add	sp, #116	; 0x74
 80098c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ca:	4b7b      	ldr	r3, [pc, #492]	; (8009ab8 <_vfiprintf_r+0x244>)
 80098cc:	429d      	cmp	r5, r3
 80098ce:	d101      	bne.n	80098d4 <_vfiprintf_r+0x60>
 80098d0:	68b5      	ldr	r5, [r6, #8]
 80098d2:	e7df      	b.n	8009894 <_vfiprintf_r+0x20>
 80098d4:	4b79      	ldr	r3, [pc, #484]	; (8009abc <_vfiprintf_r+0x248>)
 80098d6:	429d      	cmp	r5, r3
 80098d8:	bf08      	it	eq
 80098da:	68f5      	ldreq	r5, [r6, #12]
 80098dc:	e7da      	b.n	8009894 <_vfiprintf_r+0x20>
 80098de:	89ab      	ldrh	r3, [r5, #12]
 80098e0:	0598      	lsls	r0, r3, #22
 80098e2:	d4ed      	bmi.n	80098c0 <_vfiprintf_r+0x4c>
 80098e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098e6:	f000 fb84 	bl	8009ff2 <__retarget_lock_release_recursive>
 80098ea:	e7e9      	b.n	80098c0 <_vfiprintf_r+0x4c>
 80098ec:	2300      	movs	r3, #0
 80098ee:	9309      	str	r3, [sp, #36]	; 0x24
 80098f0:	2320      	movs	r3, #32
 80098f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80098fa:	2330      	movs	r3, #48	; 0x30
 80098fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ac0 <_vfiprintf_r+0x24c>
 8009900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009904:	f04f 0901 	mov.w	r9, #1
 8009908:	4623      	mov	r3, r4
 800990a:	469a      	mov	sl, r3
 800990c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009910:	b10a      	cbz	r2, 8009916 <_vfiprintf_r+0xa2>
 8009912:	2a25      	cmp	r2, #37	; 0x25
 8009914:	d1f9      	bne.n	800990a <_vfiprintf_r+0x96>
 8009916:	ebba 0b04 	subs.w	fp, sl, r4
 800991a:	d00b      	beq.n	8009934 <_vfiprintf_r+0xc0>
 800991c:	465b      	mov	r3, fp
 800991e:	4622      	mov	r2, r4
 8009920:	4629      	mov	r1, r5
 8009922:	4630      	mov	r0, r6
 8009924:	f7ff ff94 	bl	8009850 <__sfputs_r>
 8009928:	3001      	adds	r0, #1
 800992a:	f000 80aa 	beq.w	8009a82 <_vfiprintf_r+0x20e>
 800992e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009930:	445a      	add	r2, fp
 8009932:	9209      	str	r2, [sp, #36]	; 0x24
 8009934:	f89a 3000 	ldrb.w	r3, [sl]
 8009938:	2b00      	cmp	r3, #0
 800993a:	f000 80a2 	beq.w	8009a82 <_vfiprintf_r+0x20e>
 800993e:	2300      	movs	r3, #0
 8009940:	f04f 32ff 	mov.w	r2, #4294967295
 8009944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009948:	f10a 0a01 	add.w	sl, sl, #1
 800994c:	9304      	str	r3, [sp, #16]
 800994e:	9307      	str	r3, [sp, #28]
 8009950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009954:	931a      	str	r3, [sp, #104]	; 0x68
 8009956:	4654      	mov	r4, sl
 8009958:	2205      	movs	r2, #5
 800995a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800995e:	4858      	ldr	r0, [pc, #352]	; (8009ac0 <_vfiprintf_r+0x24c>)
 8009960:	f7f6 fc5e 	bl	8000220 <memchr>
 8009964:	9a04      	ldr	r2, [sp, #16]
 8009966:	b9d8      	cbnz	r0, 80099a0 <_vfiprintf_r+0x12c>
 8009968:	06d1      	lsls	r1, r2, #27
 800996a:	bf44      	itt	mi
 800996c:	2320      	movmi	r3, #32
 800996e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009972:	0713      	lsls	r3, r2, #28
 8009974:	bf44      	itt	mi
 8009976:	232b      	movmi	r3, #43	; 0x2b
 8009978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800997c:	f89a 3000 	ldrb.w	r3, [sl]
 8009980:	2b2a      	cmp	r3, #42	; 0x2a
 8009982:	d015      	beq.n	80099b0 <_vfiprintf_r+0x13c>
 8009984:	9a07      	ldr	r2, [sp, #28]
 8009986:	4654      	mov	r4, sl
 8009988:	2000      	movs	r0, #0
 800998a:	f04f 0c0a 	mov.w	ip, #10
 800998e:	4621      	mov	r1, r4
 8009990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009994:	3b30      	subs	r3, #48	; 0x30
 8009996:	2b09      	cmp	r3, #9
 8009998:	d94e      	bls.n	8009a38 <_vfiprintf_r+0x1c4>
 800999a:	b1b0      	cbz	r0, 80099ca <_vfiprintf_r+0x156>
 800999c:	9207      	str	r2, [sp, #28]
 800999e:	e014      	b.n	80099ca <_vfiprintf_r+0x156>
 80099a0:	eba0 0308 	sub.w	r3, r0, r8
 80099a4:	fa09 f303 	lsl.w	r3, r9, r3
 80099a8:	4313      	orrs	r3, r2
 80099aa:	9304      	str	r3, [sp, #16]
 80099ac:	46a2      	mov	sl, r4
 80099ae:	e7d2      	b.n	8009956 <_vfiprintf_r+0xe2>
 80099b0:	9b03      	ldr	r3, [sp, #12]
 80099b2:	1d19      	adds	r1, r3, #4
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	9103      	str	r1, [sp, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	bfbb      	ittet	lt
 80099bc:	425b      	neglt	r3, r3
 80099be:	f042 0202 	orrlt.w	r2, r2, #2
 80099c2:	9307      	strge	r3, [sp, #28]
 80099c4:	9307      	strlt	r3, [sp, #28]
 80099c6:	bfb8      	it	lt
 80099c8:	9204      	strlt	r2, [sp, #16]
 80099ca:	7823      	ldrb	r3, [r4, #0]
 80099cc:	2b2e      	cmp	r3, #46	; 0x2e
 80099ce:	d10c      	bne.n	80099ea <_vfiprintf_r+0x176>
 80099d0:	7863      	ldrb	r3, [r4, #1]
 80099d2:	2b2a      	cmp	r3, #42	; 0x2a
 80099d4:	d135      	bne.n	8009a42 <_vfiprintf_r+0x1ce>
 80099d6:	9b03      	ldr	r3, [sp, #12]
 80099d8:	1d1a      	adds	r2, r3, #4
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	9203      	str	r2, [sp, #12]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	bfb8      	it	lt
 80099e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80099e6:	3402      	adds	r4, #2
 80099e8:	9305      	str	r3, [sp, #20]
 80099ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ad0 <_vfiprintf_r+0x25c>
 80099ee:	7821      	ldrb	r1, [r4, #0]
 80099f0:	2203      	movs	r2, #3
 80099f2:	4650      	mov	r0, sl
 80099f4:	f7f6 fc14 	bl	8000220 <memchr>
 80099f8:	b140      	cbz	r0, 8009a0c <_vfiprintf_r+0x198>
 80099fa:	2340      	movs	r3, #64	; 0x40
 80099fc:	eba0 000a 	sub.w	r0, r0, sl
 8009a00:	fa03 f000 	lsl.w	r0, r3, r0
 8009a04:	9b04      	ldr	r3, [sp, #16]
 8009a06:	4303      	orrs	r3, r0
 8009a08:	3401      	adds	r4, #1
 8009a0a:	9304      	str	r3, [sp, #16]
 8009a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a10:	482c      	ldr	r0, [pc, #176]	; (8009ac4 <_vfiprintf_r+0x250>)
 8009a12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a16:	2206      	movs	r2, #6
 8009a18:	f7f6 fc02 	bl	8000220 <memchr>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d03f      	beq.n	8009aa0 <_vfiprintf_r+0x22c>
 8009a20:	4b29      	ldr	r3, [pc, #164]	; (8009ac8 <_vfiprintf_r+0x254>)
 8009a22:	bb1b      	cbnz	r3, 8009a6c <_vfiprintf_r+0x1f8>
 8009a24:	9b03      	ldr	r3, [sp, #12]
 8009a26:	3307      	adds	r3, #7
 8009a28:	f023 0307 	bic.w	r3, r3, #7
 8009a2c:	3308      	adds	r3, #8
 8009a2e:	9303      	str	r3, [sp, #12]
 8009a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a32:	443b      	add	r3, r7
 8009a34:	9309      	str	r3, [sp, #36]	; 0x24
 8009a36:	e767      	b.n	8009908 <_vfiprintf_r+0x94>
 8009a38:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	2001      	movs	r0, #1
 8009a40:	e7a5      	b.n	800998e <_vfiprintf_r+0x11a>
 8009a42:	2300      	movs	r3, #0
 8009a44:	3401      	adds	r4, #1
 8009a46:	9305      	str	r3, [sp, #20]
 8009a48:	4619      	mov	r1, r3
 8009a4a:	f04f 0c0a 	mov.w	ip, #10
 8009a4e:	4620      	mov	r0, r4
 8009a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a54:	3a30      	subs	r2, #48	; 0x30
 8009a56:	2a09      	cmp	r2, #9
 8009a58:	d903      	bls.n	8009a62 <_vfiprintf_r+0x1ee>
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d0c5      	beq.n	80099ea <_vfiprintf_r+0x176>
 8009a5e:	9105      	str	r1, [sp, #20]
 8009a60:	e7c3      	b.n	80099ea <_vfiprintf_r+0x176>
 8009a62:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a66:	4604      	mov	r4, r0
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e7f0      	b.n	8009a4e <_vfiprintf_r+0x1da>
 8009a6c:	ab03      	add	r3, sp, #12
 8009a6e:	9300      	str	r3, [sp, #0]
 8009a70:	462a      	mov	r2, r5
 8009a72:	4b16      	ldr	r3, [pc, #88]	; (8009acc <_vfiprintf_r+0x258>)
 8009a74:	a904      	add	r1, sp, #16
 8009a76:	4630      	mov	r0, r6
 8009a78:	f7fd fdc2 	bl	8007600 <_printf_float>
 8009a7c:	4607      	mov	r7, r0
 8009a7e:	1c78      	adds	r0, r7, #1
 8009a80:	d1d6      	bne.n	8009a30 <_vfiprintf_r+0x1bc>
 8009a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a84:	07d9      	lsls	r1, r3, #31
 8009a86:	d405      	bmi.n	8009a94 <_vfiprintf_r+0x220>
 8009a88:	89ab      	ldrh	r3, [r5, #12]
 8009a8a:	059a      	lsls	r2, r3, #22
 8009a8c:	d402      	bmi.n	8009a94 <_vfiprintf_r+0x220>
 8009a8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a90:	f000 faaf 	bl	8009ff2 <__retarget_lock_release_recursive>
 8009a94:	89ab      	ldrh	r3, [r5, #12]
 8009a96:	065b      	lsls	r3, r3, #25
 8009a98:	f53f af12 	bmi.w	80098c0 <_vfiprintf_r+0x4c>
 8009a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a9e:	e711      	b.n	80098c4 <_vfiprintf_r+0x50>
 8009aa0:	ab03      	add	r3, sp, #12
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	462a      	mov	r2, r5
 8009aa6:	4b09      	ldr	r3, [pc, #36]	; (8009acc <_vfiprintf_r+0x258>)
 8009aa8:	a904      	add	r1, sp, #16
 8009aaa:	4630      	mov	r0, r6
 8009aac:	f7fe f84c 	bl	8007b48 <_printf_i>
 8009ab0:	e7e4      	b.n	8009a7c <_vfiprintf_r+0x208>
 8009ab2:	bf00      	nop
 8009ab4:	0800a694 	.word	0x0800a694
 8009ab8:	0800a6b4 	.word	0x0800a6b4
 8009abc:	0800a674 	.word	0x0800a674
 8009ac0:	0800a51c 	.word	0x0800a51c
 8009ac4:	0800a526 	.word	0x0800a526
 8009ac8:	08007601 	.word	0x08007601
 8009acc:	08009851 	.word	0x08009851
 8009ad0:	0800a522 	.word	0x0800a522

08009ad4 <__swbuf_r>:
 8009ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad6:	460e      	mov	r6, r1
 8009ad8:	4614      	mov	r4, r2
 8009ada:	4605      	mov	r5, r0
 8009adc:	b118      	cbz	r0, 8009ae6 <__swbuf_r+0x12>
 8009ade:	6983      	ldr	r3, [r0, #24]
 8009ae0:	b90b      	cbnz	r3, 8009ae6 <__swbuf_r+0x12>
 8009ae2:	f000 f9e7 	bl	8009eb4 <__sinit>
 8009ae6:	4b21      	ldr	r3, [pc, #132]	; (8009b6c <__swbuf_r+0x98>)
 8009ae8:	429c      	cmp	r4, r3
 8009aea:	d12b      	bne.n	8009b44 <__swbuf_r+0x70>
 8009aec:	686c      	ldr	r4, [r5, #4]
 8009aee:	69a3      	ldr	r3, [r4, #24]
 8009af0:	60a3      	str	r3, [r4, #8]
 8009af2:	89a3      	ldrh	r3, [r4, #12]
 8009af4:	071a      	lsls	r2, r3, #28
 8009af6:	d52f      	bpl.n	8009b58 <__swbuf_r+0x84>
 8009af8:	6923      	ldr	r3, [r4, #16]
 8009afa:	b36b      	cbz	r3, 8009b58 <__swbuf_r+0x84>
 8009afc:	6923      	ldr	r3, [r4, #16]
 8009afe:	6820      	ldr	r0, [r4, #0]
 8009b00:	1ac0      	subs	r0, r0, r3
 8009b02:	6963      	ldr	r3, [r4, #20]
 8009b04:	b2f6      	uxtb	r6, r6
 8009b06:	4283      	cmp	r3, r0
 8009b08:	4637      	mov	r7, r6
 8009b0a:	dc04      	bgt.n	8009b16 <__swbuf_r+0x42>
 8009b0c:	4621      	mov	r1, r4
 8009b0e:	4628      	mov	r0, r5
 8009b10:	f000 f93c 	bl	8009d8c <_fflush_r>
 8009b14:	bb30      	cbnz	r0, 8009b64 <__swbuf_r+0x90>
 8009b16:	68a3      	ldr	r3, [r4, #8]
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	60a3      	str	r3, [r4, #8]
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	1c5a      	adds	r2, r3, #1
 8009b20:	6022      	str	r2, [r4, #0]
 8009b22:	701e      	strb	r6, [r3, #0]
 8009b24:	6963      	ldr	r3, [r4, #20]
 8009b26:	3001      	adds	r0, #1
 8009b28:	4283      	cmp	r3, r0
 8009b2a:	d004      	beq.n	8009b36 <__swbuf_r+0x62>
 8009b2c:	89a3      	ldrh	r3, [r4, #12]
 8009b2e:	07db      	lsls	r3, r3, #31
 8009b30:	d506      	bpl.n	8009b40 <__swbuf_r+0x6c>
 8009b32:	2e0a      	cmp	r6, #10
 8009b34:	d104      	bne.n	8009b40 <__swbuf_r+0x6c>
 8009b36:	4621      	mov	r1, r4
 8009b38:	4628      	mov	r0, r5
 8009b3a:	f000 f927 	bl	8009d8c <_fflush_r>
 8009b3e:	b988      	cbnz	r0, 8009b64 <__swbuf_r+0x90>
 8009b40:	4638      	mov	r0, r7
 8009b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b44:	4b0a      	ldr	r3, [pc, #40]	; (8009b70 <__swbuf_r+0x9c>)
 8009b46:	429c      	cmp	r4, r3
 8009b48:	d101      	bne.n	8009b4e <__swbuf_r+0x7a>
 8009b4a:	68ac      	ldr	r4, [r5, #8]
 8009b4c:	e7cf      	b.n	8009aee <__swbuf_r+0x1a>
 8009b4e:	4b09      	ldr	r3, [pc, #36]	; (8009b74 <__swbuf_r+0xa0>)
 8009b50:	429c      	cmp	r4, r3
 8009b52:	bf08      	it	eq
 8009b54:	68ec      	ldreq	r4, [r5, #12]
 8009b56:	e7ca      	b.n	8009aee <__swbuf_r+0x1a>
 8009b58:	4621      	mov	r1, r4
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	f000 f81a 	bl	8009b94 <__swsetup_r>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d0cb      	beq.n	8009afc <__swbuf_r+0x28>
 8009b64:	f04f 37ff 	mov.w	r7, #4294967295
 8009b68:	e7ea      	b.n	8009b40 <__swbuf_r+0x6c>
 8009b6a:	bf00      	nop
 8009b6c:	0800a694 	.word	0x0800a694
 8009b70:	0800a6b4 	.word	0x0800a6b4
 8009b74:	0800a674 	.word	0x0800a674

08009b78 <__ascii_wctomb>:
 8009b78:	b149      	cbz	r1, 8009b8e <__ascii_wctomb+0x16>
 8009b7a:	2aff      	cmp	r2, #255	; 0xff
 8009b7c:	bf85      	ittet	hi
 8009b7e:	238a      	movhi	r3, #138	; 0x8a
 8009b80:	6003      	strhi	r3, [r0, #0]
 8009b82:	700a      	strbls	r2, [r1, #0]
 8009b84:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b88:	bf98      	it	ls
 8009b8a:	2001      	movls	r0, #1
 8009b8c:	4770      	bx	lr
 8009b8e:	4608      	mov	r0, r1
 8009b90:	4770      	bx	lr
	...

08009b94 <__swsetup_r>:
 8009b94:	4b32      	ldr	r3, [pc, #200]	; (8009c60 <__swsetup_r+0xcc>)
 8009b96:	b570      	push	{r4, r5, r6, lr}
 8009b98:	681d      	ldr	r5, [r3, #0]
 8009b9a:	4606      	mov	r6, r0
 8009b9c:	460c      	mov	r4, r1
 8009b9e:	b125      	cbz	r5, 8009baa <__swsetup_r+0x16>
 8009ba0:	69ab      	ldr	r3, [r5, #24]
 8009ba2:	b913      	cbnz	r3, 8009baa <__swsetup_r+0x16>
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	f000 f985 	bl	8009eb4 <__sinit>
 8009baa:	4b2e      	ldr	r3, [pc, #184]	; (8009c64 <__swsetup_r+0xd0>)
 8009bac:	429c      	cmp	r4, r3
 8009bae:	d10f      	bne.n	8009bd0 <__swsetup_r+0x3c>
 8009bb0:	686c      	ldr	r4, [r5, #4]
 8009bb2:	89a3      	ldrh	r3, [r4, #12]
 8009bb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bb8:	0719      	lsls	r1, r3, #28
 8009bba:	d42c      	bmi.n	8009c16 <__swsetup_r+0x82>
 8009bbc:	06dd      	lsls	r5, r3, #27
 8009bbe:	d411      	bmi.n	8009be4 <__swsetup_r+0x50>
 8009bc0:	2309      	movs	r3, #9
 8009bc2:	6033      	str	r3, [r6, #0]
 8009bc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009bc8:	81a3      	strh	r3, [r4, #12]
 8009bca:	f04f 30ff 	mov.w	r0, #4294967295
 8009bce:	e03e      	b.n	8009c4e <__swsetup_r+0xba>
 8009bd0:	4b25      	ldr	r3, [pc, #148]	; (8009c68 <__swsetup_r+0xd4>)
 8009bd2:	429c      	cmp	r4, r3
 8009bd4:	d101      	bne.n	8009bda <__swsetup_r+0x46>
 8009bd6:	68ac      	ldr	r4, [r5, #8]
 8009bd8:	e7eb      	b.n	8009bb2 <__swsetup_r+0x1e>
 8009bda:	4b24      	ldr	r3, [pc, #144]	; (8009c6c <__swsetup_r+0xd8>)
 8009bdc:	429c      	cmp	r4, r3
 8009bde:	bf08      	it	eq
 8009be0:	68ec      	ldreq	r4, [r5, #12]
 8009be2:	e7e6      	b.n	8009bb2 <__swsetup_r+0x1e>
 8009be4:	0758      	lsls	r0, r3, #29
 8009be6:	d512      	bpl.n	8009c0e <__swsetup_r+0x7a>
 8009be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bea:	b141      	cbz	r1, 8009bfe <__swsetup_r+0x6a>
 8009bec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bf0:	4299      	cmp	r1, r3
 8009bf2:	d002      	beq.n	8009bfa <__swsetup_r+0x66>
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	f7ff fb31 	bl	800925c <_free_r>
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	6363      	str	r3, [r4, #52]	; 0x34
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c04:	81a3      	strh	r3, [r4, #12]
 8009c06:	2300      	movs	r3, #0
 8009c08:	6063      	str	r3, [r4, #4]
 8009c0a:	6923      	ldr	r3, [r4, #16]
 8009c0c:	6023      	str	r3, [r4, #0]
 8009c0e:	89a3      	ldrh	r3, [r4, #12]
 8009c10:	f043 0308 	orr.w	r3, r3, #8
 8009c14:	81a3      	strh	r3, [r4, #12]
 8009c16:	6923      	ldr	r3, [r4, #16]
 8009c18:	b94b      	cbnz	r3, 8009c2e <__swsetup_r+0x9a>
 8009c1a:	89a3      	ldrh	r3, [r4, #12]
 8009c1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c24:	d003      	beq.n	8009c2e <__swsetup_r+0x9a>
 8009c26:	4621      	mov	r1, r4
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f000 fa09 	bl	800a040 <__smakebuf_r>
 8009c2e:	89a0      	ldrh	r0, [r4, #12]
 8009c30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c34:	f010 0301 	ands.w	r3, r0, #1
 8009c38:	d00a      	beq.n	8009c50 <__swsetup_r+0xbc>
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	60a3      	str	r3, [r4, #8]
 8009c3e:	6963      	ldr	r3, [r4, #20]
 8009c40:	425b      	negs	r3, r3
 8009c42:	61a3      	str	r3, [r4, #24]
 8009c44:	6923      	ldr	r3, [r4, #16]
 8009c46:	b943      	cbnz	r3, 8009c5a <__swsetup_r+0xc6>
 8009c48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c4c:	d1ba      	bne.n	8009bc4 <__swsetup_r+0x30>
 8009c4e:	bd70      	pop	{r4, r5, r6, pc}
 8009c50:	0781      	lsls	r1, r0, #30
 8009c52:	bf58      	it	pl
 8009c54:	6963      	ldrpl	r3, [r4, #20]
 8009c56:	60a3      	str	r3, [r4, #8]
 8009c58:	e7f4      	b.n	8009c44 <__swsetup_r+0xb0>
 8009c5a:	2000      	movs	r0, #0
 8009c5c:	e7f7      	b.n	8009c4e <__swsetup_r+0xba>
 8009c5e:	bf00      	nop
 8009c60:	2000000c 	.word	0x2000000c
 8009c64:	0800a694 	.word	0x0800a694
 8009c68:	0800a6b4 	.word	0x0800a6b4
 8009c6c:	0800a674 	.word	0x0800a674

08009c70 <abort>:
 8009c70:	b508      	push	{r3, lr}
 8009c72:	2006      	movs	r0, #6
 8009c74:	f000 fa54 	bl	800a120 <raise>
 8009c78:	2001      	movs	r0, #1
 8009c7a:	f7f8 fc2b 	bl	80024d4 <_exit>
	...

08009c80 <__sflush_r>:
 8009c80:	898a      	ldrh	r2, [r1, #12]
 8009c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c86:	4605      	mov	r5, r0
 8009c88:	0710      	lsls	r0, r2, #28
 8009c8a:	460c      	mov	r4, r1
 8009c8c:	d458      	bmi.n	8009d40 <__sflush_r+0xc0>
 8009c8e:	684b      	ldr	r3, [r1, #4]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	dc05      	bgt.n	8009ca0 <__sflush_r+0x20>
 8009c94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	dc02      	bgt.n	8009ca0 <__sflush_r+0x20>
 8009c9a:	2000      	movs	r0, #0
 8009c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ca0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ca2:	2e00      	cmp	r6, #0
 8009ca4:	d0f9      	beq.n	8009c9a <__sflush_r+0x1a>
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cac:	682f      	ldr	r7, [r5, #0]
 8009cae:	602b      	str	r3, [r5, #0]
 8009cb0:	d032      	beq.n	8009d18 <__sflush_r+0x98>
 8009cb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009cb4:	89a3      	ldrh	r3, [r4, #12]
 8009cb6:	075a      	lsls	r2, r3, #29
 8009cb8:	d505      	bpl.n	8009cc6 <__sflush_r+0x46>
 8009cba:	6863      	ldr	r3, [r4, #4]
 8009cbc:	1ac0      	subs	r0, r0, r3
 8009cbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cc0:	b10b      	cbz	r3, 8009cc6 <__sflush_r+0x46>
 8009cc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cc4:	1ac0      	subs	r0, r0, r3
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	4602      	mov	r2, r0
 8009cca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ccc:	6a21      	ldr	r1, [r4, #32]
 8009cce:	4628      	mov	r0, r5
 8009cd0:	47b0      	blx	r6
 8009cd2:	1c43      	adds	r3, r0, #1
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	d106      	bne.n	8009ce6 <__sflush_r+0x66>
 8009cd8:	6829      	ldr	r1, [r5, #0]
 8009cda:	291d      	cmp	r1, #29
 8009cdc:	d82c      	bhi.n	8009d38 <__sflush_r+0xb8>
 8009cde:	4a2a      	ldr	r2, [pc, #168]	; (8009d88 <__sflush_r+0x108>)
 8009ce0:	40ca      	lsrs	r2, r1
 8009ce2:	07d6      	lsls	r6, r2, #31
 8009ce4:	d528      	bpl.n	8009d38 <__sflush_r+0xb8>
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	6062      	str	r2, [r4, #4]
 8009cea:	04d9      	lsls	r1, r3, #19
 8009cec:	6922      	ldr	r2, [r4, #16]
 8009cee:	6022      	str	r2, [r4, #0]
 8009cf0:	d504      	bpl.n	8009cfc <__sflush_r+0x7c>
 8009cf2:	1c42      	adds	r2, r0, #1
 8009cf4:	d101      	bne.n	8009cfa <__sflush_r+0x7a>
 8009cf6:	682b      	ldr	r3, [r5, #0]
 8009cf8:	b903      	cbnz	r3, 8009cfc <__sflush_r+0x7c>
 8009cfa:	6560      	str	r0, [r4, #84]	; 0x54
 8009cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cfe:	602f      	str	r7, [r5, #0]
 8009d00:	2900      	cmp	r1, #0
 8009d02:	d0ca      	beq.n	8009c9a <__sflush_r+0x1a>
 8009d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d08:	4299      	cmp	r1, r3
 8009d0a:	d002      	beq.n	8009d12 <__sflush_r+0x92>
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	f7ff faa5 	bl	800925c <_free_r>
 8009d12:	2000      	movs	r0, #0
 8009d14:	6360      	str	r0, [r4, #52]	; 0x34
 8009d16:	e7c1      	b.n	8009c9c <__sflush_r+0x1c>
 8009d18:	6a21      	ldr	r1, [r4, #32]
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	47b0      	blx	r6
 8009d20:	1c41      	adds	r1, r0, #1
 8009d22:	d1c7      	bne.n	8009cb4 <__sflush_r+0x34>
 8009d24:	682b      	ldr	r3, [r5, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d0c4      	beq.n	8009cb4 <__sflush_r+0x34>
 8009d2a:	2b1d      	cmp	r3, #29
 8009d2c:	d001      	beq.n	8009d32 <__sflush_r+0xb2>
 8009d2e:	2b16      	cmp	r3, #22
 8009d30:	d101      	bne.n	8009d36 <__sflush_r+0xb6>
 8009d32:	602f      	str	r7, [r5, #0]
 8009d34:	e7b1      	b.n	8009c9a <__sflush_r+0x1a>
 8009d36:	89a3      	ldrh	r3, [r4, #12]
 8009d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d3c:	81a3      	strh	r3, [r4, #12]
 8009d3e:	e7ad      	b.n	8009c9c <__sflush_r+0x1c>
 8009d40:	690f      	ldr	r7, [r1, #16]
 8009d42:	2f00      	cmp	r7, #0
 8009d44:	d0a9      	beq.n	8009c9a <__sflush_r+0x1a>
 8009d46:	0793      	lsls	r3, r2, #30
 8009d48:	680e      	ldr	r6, [r1, #0]
 8009d4a:	bf08      	it	eq
 8009d4c:	694b      	ldreq	r3, [r1, #20]
 8009d4e:	600f      	str	r7, [r1, #0]
 8009d50:	bf18      	it	ne
 8009d52:	2300      	movne	r3, #0
 8009d54:	eba6 0807 	sub.w	r8, r6, r7
 8009d58:	608b      	str	r3, [r1, #8]
 8009d5a:	f1b8 0f00 	cmp.w	r8, #0
 8009d5e:	dd9c      	ble.n	8009c9a <__sflush_r+0x1a>
 8009d60:	6a21      	ldr	r1, [r4, #32]
 8009d62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d64:	4643      	mov	r3, r8
 8009d66:	463a      	mov	r2, r7
 8009d68:	4628      	mov	r0, r5
 8009d6a:	47b0      	blx	r6
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	dc06      	bgt.n	8009d7e <__sflush_r+0xfe>
 8009d70:	89a3      	ldrh	r3, [r4, #12]
 8009d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d76:	81a3      	strh	r3, [r4, #12]
 8009d78:	f04f 30ff 	mov.w	r0, #4294967295
 8009d7c:	e78e      	b.n	8009c9c <__sflush_r+0x1c>
 8009d7e:	4407      	add	r7, r0
 8009d80:	eba8 0800 	sub.w	r8, r8, r0
 8009d84:	e7e9      	b.n	8009d5a <__sflush_r+0xda>
 8009d86:	bf00      	nop
 8009d88:	20400001 	.word	0x20400001

08009d8c <_fflush_r>:
 8009d8c:	b538      	push	{r3, r4, r5, lr}
 8009d8e:	690b      	ldr	r3, [r1, #16]
 8009d90:	4605      	mov	r5, r0
 8009d92:	460c      	mov	r4, r1
 8009d94:	b913      	cbnz	r3, 8009d9c <_fflush_r+0x10>
 8009d96:	2500      	movs	r5, #0
 8009d98:	4628      	mov	r0, r5
 8009d9a:	bd38      	pop	{r3, r4, r5, pc}
 8009d9c:	b118      	cbz	r0, 8009da6 <_fflush_r+0x1a>
 8009d9e:	6983      	ldr	r3, [r0, #24]
 8009da0:	b90b      	cbnz	r3, 8009da6 <_fflush_r+0x1a>
 8009da2:	f000 f887 	bl	8009eb4 <__sinit>
 8009da6:	4b14      	ldr	r3, [pc, #80]	; (8009df8 <_fflush_r+0x6c>)
 8009da8:	429c      	cmp	r4, r3
 8009daa:	d11b      	bne.n	8009de4 <_fflush_r+0x58>
 8009dac:	686c      	ldr	r4, [r5, #4]
 8009dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d0ef      	beq.n	8009d96 <_fflush_r+0xa>
 8009db6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009db8:	07d0      	lsls	r0, r2, #31
 8009dba:	d404      	bmi.n	8009dc6 <_fflush_r+0x3a>
 8009dbc:	0599      	lsls	r1, r3, #22
 8009dbe:	d402      	bmi.n	8009dc6 <_fflush_r+0x3a>
 8009dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dc2:	f000 f915 	bl	8009ff0 <__retarget_lock_acquire_recursive>
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	4621      	mov	r1, r4
 8009dca:	f7ff ff59 	bl	8009c80 <__sflush_r>
 8009dce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dd0:	07da      	lsls	r2, r3, #31
 8009dd2:	4605      	mov	r5, r0
 8009dd4:	d4e0      	bmi.n	8009d98 <_fflush_r+0xc>
 8009dd6:	89a3      	ldrh	r3, [r4, #12]
 8009dd8:	059b      	lsls	r3, r3, #22
 8009dda:	d4dd      	bmi.n	8009d98 <_fflush_r+0xc>
 8009ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dde:	f000 f908 	bl	8009ff2 <__retarget_lock_release_recursive>
 8009de2:	e7d9      	b.n	8009d98 <_fflush_r+0xc>
 8009de4:	4b05      	ldr	r3, [pc, #20]	; (8009dfc <_fflush_r+0x70>)
 8009de6:	429c      	cmp	r4, r3
 8009de8:	d101      	bne.n	8009dee <_fflush_r+0x62>
 8009dea:	68ac      	ldr	r4, [r5, #8]
 8009dec:	e7df      	b.n	8009dae <_fflush_r+0x22>
 8009dee:	4b04      	ldr	r3, [pc, #16]	; (8009e00 <_fflush_r+0x74>)
 8009df0:	429c      	cmp	r4, r3
 8009df2:	bf08      	it	eq
 8009df4:	68ec      	ldreq	r4, [r5, #12]
 8009df6:	e7da      	b.n	8009dae <_fflush_r+0x22>
 8009df8:	0800a694 	.word	0x0800a694
 8009dfc:	0800a6b4 	.word	0x0800a6b4
 8009e00:	0800a674 	.word	0x0800a674

08009e04 <std>:
 8009e04:	2300      	movs	r3, #0
 8009e06:	b510      	push	{r4, lr}
 8009e08:	4604      	mov	r4, r0
 8009e0a:	e9c0 3300 	strd	r3, r3, [r0]
 8009e0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e12:	6083      	str	r3, [r0, #8]
 8009e14:	8181      	strh	r1, [r0, #12]
 8009e16:	6643      	str	r3, [r0, #100]	; 0x64
 8009e18:	81c2      	strh	r2, [r0, #14]
 8009e1a:	6183      	str	r3, [r0, #24]
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	2208      	movs	r2, #8
 8009e20:	305c      	adds	r0, #92	; 0x5c
 8009e22:	f7fd fb45 	bl	80074b0 <memset>
 8009e26:	4b05      	ldr	r3, [pc, #20]	; (8009e3c <std+0x38>)
 8009e28:	6263      	str	r3, [r4, #36]	; 0x24
 8009e2a:	4b05      	ldr	r3, [pc, #20]	; (8009e40 <std+0x3c>)
 8009e2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e2e:	4b05      	ldr	r3, [pc, #20]	; (8009e44 <std+0x40>)
 8009e30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e32:	4b05      	ldr	r3, [pc, #20]	; (8009e48 <std+0x44>)
 8009e34:	6224      	str	r4, [r4, #32]
 8009e36:	6323      	str	r3, [r4, #48]	; 0x30
 8009e38:	bd10      	pop	{r4, pc}
 8009e3a:	bf00      	nop
 8009e3c:	0800a159 	.word	0x0800a159
 8009e40:	0800a17b 	.word	0x0800a17b
 8009e44:	0800a1b3 	.word	0x0800a1b3
 8009e48:	0800a1d7 	.word	0x0800a1d7

08009e4c <_cleanup_r>:
 8009e4c:	4901      	ldr	r1, [pc, #4]	; (8009e54 <_cleanup_r+0x8>)
 8009e4e:	f000 b8af 	b.w	8009fb0 <_fwalk_reent>
 8009e52:	bf00      	nop
 8009e54:	08009d8d 	.word	0x08009d8d

08009e58 <__sfmoreglue>:
 8009e58:	b570      	push	{r4, r5, r6, lr}
 8009e5a:	2268      	movs	r2, #104	; 0x68
 8009e5c:	1e4d      	subs	r5, r1, #1
 8009e5e:	4355      	muls	r5, r2
 8009e60:	460e      	mov	r6, r1
 8009e62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e66:	f7ff fa65 	bl	8009334 <_malloc_r>
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	b140      	cbz	r0, 8009e80 <__sfmoreglue+0x28>
 8009e6e:	2100      	movs	r1, #0
 8009e70:	e9c0 1600 	strd	r1, r6, [r0]
 8009e74:	300c      	adds	r0, #12
 8009e76:	60a0      	str	r0, [r4, #8]
 8009e78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e7c:	f7fd fb18 	bl	80074b0 <memset>
 8009e80:	4620      	mov	r0, r4
 8009e82:	bd70      	pop	{r4, r5, r6, pc}

08009e84 <__sfp_lock_acquire>:
 8009e84:	4801      	ldr	r0, [pc, #4]	; (8009e8c <__sfp_lock_acquire+0x8>)
 8009e86:	f000 b8b3 	b.w	8009ff0 <__retarget_lock_acquire_recursive>
 8009e8a:	bf00      	nop
 8009e8c:	20000b49 	.word	0x20000b49

08009e90 <__sfp_lock_release>:
 8009e90:	4801      	ldr	r0, [pc, #4]	; (8009e98 <__sfp_lock_release+0x8>)
 8009e92:	f000 b8ae 	b.w	8009ff2 <__retarget_lock_release_recursive>
 8009e96:	bf00      	nop
 8009e98:	20000b49 	.word	0x20000b49

08009e9c <__sinit_lock_acquire>:
 8009e9c:	4801      	ldr	r0, [pc, #4]	; (8009ea4 <__sinit_lock_acquire+0x8>)
 8009e9e:	f000 b8a7 	b.w	8009ff0 <__retarget_lock_acquire_recursive>
 8009ea2:	bf00      	nop
 8009ea4:	20000b4a 	.word	0x20000b4a

08009ea8 <__sinit_lock_release>:
 8009ea8:	4801      	ldr	r0, [pc, #4]	; (8009eb0 <__sinit_lock_release+0x8>)
 8009eaa:	f000 b8a2 	b.w	8009ff2 <__retarget_lock_release_recursive>
 8009eae:	bf00      	nop
 8009eb0:	20000b4a 	.word	0x20000b4a

08009eb4 <__sinit>:
 8009eb4:	b510      	push	{r4, lr}
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	f7ff fff0 	bl	8009e9c <__sinit_lock_acquire>
 8009ebc:	69a3      	ldr	r3, [r4, #24]
 8009ebe:	b11b      	cbz	r3, 8009ec8 <__sinit+0x14>
 8009ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ec4:	f7ff bff0 	b.w	8009ea8 <__sinit_lock_release>
 8009ec8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ecc:	6523      	str	r3, [r4, #80]	; 0x50
 8009ece:	4b13      	ldr	r3, [pc, #76]	; (8009f1c <__sinit+0x68>)
 8009ed0:	4a13      	ldr	r2, [pc, #76]	; (8009f20 <__sinit+0x6c>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ed6:	42a3      	cmp	r3, r4
 8009ed8:	bf04      	itt	eq
 8009eda:	2301      	moveq	r3, #1
 8009edc:	61a3      	streq	r3, [r4, #24]
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f000 f820 	bl	8009f24 <__sfp>
 8009ee4:	6060      	str	r0, [r4, #4]
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	f000 f81c 	bl	8009f24 <__sfp>
 8009eec:	60a0      	str	r0, [r4, #8]
 8009eee:	4620      	mov	r0, r4
 8009ef0:	f000 f818 	bl	8009f24 <__sfp>
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	60e0      	str	r0, [r4, #12]
 8009ef8:	2104      	movs	r1, #4
 8009efa:	6860      	ldr	r0, [r4, #4]
 8009efc:	f7ff ff82 	bl	8009e04 <std>
 8009f00:	68a0      	ldr	r0, [r4, #8]
 8009f02:	2201      	movs	r2, #1
 8009f04:	2109      	movs	r1, #9
 8009f06:	f7ff ff7d 	bl	8009e04 <std>
 8009f0a:	68e0      	ldr	r0, [r4, #12]
 8009f0c:	2202      	movs	r2, #2
 8009f0e:	2112      	movs	r1, #18
 8009f10:	f7ff ff78 	bl	8009e04 <std>
 8009f14:	2301      	movs	r3, #1
 8009f16:	61a3      	str	r3, [r4, #24]
 8009f18:	e7d2      	b.n	8009ec0 <__sinit+0xc>
 8009f1a:	bf00      	nop
 8009f1c:	0800a2f8 	.word	0x0800a2f8
 8009f20:	08009e4d 	.word	0x08009e4d

08009f24 <__sfp>:
 8009f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f26:	4607      	mov	r7, r0
 8009f28:	f7ff ffac 	bl	8009e84 <__sfp_lock_acquire>
 8009f2c:	4b1e      	ldr	r3, [pc, #120]	; (8009fa8 <__sfp+0x84>)
 8009f2e:	681e      	ldr	r6, [r3, #0]
 8009f30:	69b3      	ldr	r3, [r6, #24]
 8009f32:	b913      	cbnz	r3, 8009f3a <__sfp+0x16>
 8009f34:	4630      	mov	r0, r6
 8009f36:	f7ff ffbd 	bl	8009eb4 <__sinit>
 8009f3a:	3648      	adds	r6, #72	; 0x48
 8009f3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f40:	3b01      	subs	r3, #1
 8009f42:	d503      	bpl.n	8009f4c <__sfp+0x28>
 8009f44:	6833      	ldr	r3, [r6, #0]
 8009f46:	b30b      	cbz	r3, 8009f8c <__sfp+0x68>
 8009f48:	6836      	ldr	r6, [r6, #0]
 8009f4a:	e7f7      	b.n	8009f3c <__sfp+0x18>
 8009f4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f50:	b9d5      	cbnz	r5, 8009f88 <__sfp+0x64>
 8009f52:	4b16      	ldr	r3, [pc, #88]	; (8009fac <__sfp+0x88>)
 8009f54:	60e3      	str	r3, [r4, #12]
 8009f56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f5a:	6665      	str	r5, [r4, #100]	; 0x64
 8009f5c:	f000 f847 	bl	8009fee <__retarget_lock_init_recursive>
 8009f60:	f7ff ff96 	bl	8009e90 <__sfp_lock_release>
 8009f64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009f68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009f6c:	6025      	str	r5, [r4, #0]
 8009f6e:	61a5      	str	r5, [r4, #24]
 8009f70:	2208      	movs	r2, #8
 8009f72:	4629      	mov	r1, r5
 8009f74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f78:	f7fd fa9a 	bl	80074b0 <memset>
 8009f7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009f80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009f84:	4620      	mov	r0, r4
 8009f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f88:	3468      	adds	r4, #104	; 0x68
 8009f8a:	e7d9      	b.n	8009f40 <__sfp+0x1c>
 8009f8c:	2104      	movs	r1, #4
 8009f8e:	4638      	mov	r0, r7
 8009f90:	f7ff ff62 	bl	8009e58 <__sfmoreglue>
 8009f94:	4604      	mov	r4, r0
 8009f96:	6030      	str	r0, [r6, #0]
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	d1d5      	bne.n	8009f48 <__sfp+0x24>
 8009f9c:	f7ff ff78 	bl	8009e90 <__sfp_lock_release>
 8009fa0:	230c      	movs	r3, #12
 8009fa2:	603b      	str	r3, [r7, #0]
 8009fa4:	e7ee      	b.n	8009f84 <__sfp+0x60>
 8009fa6:	bf00      	nop
 8009fa8:	0800a2f8 	.word	0x0800a2f8
 8009fac:	ffff0001 	.word	0xffff0001

08009fb0 <_fwalk_reent>:
 8009fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fb4:	4606      	mov	r6, r0
 8009fb6:	4688      	mov	r8, r1
 8009fb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009fbc:	2700      	movs	r7, #0
 8009fbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fc2:	f1b9 0901 	subs.w	r9, r9, #1
 8009fc6:	d505      	bpl.n	8009fd4 <_fwalk_reent+0x24>
 8009fc8:	6824      	ldr	r4, [r4, #0]
 8009fca:	2c00      	cmp	r4, #0
 8009fcc:	d1f7      	bne.n	8009fbe <_fwalk_reent+0xe>
 8009fce:	4638      	mov	r0, r7
 8009fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fd4:	89ab      	ldrh	r3, [r5, #12]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d907      	bls.n	8009fea <_fwalk_reent+0x3a>
 8009fda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	d003      	beq.n	8009fea <_fwalk_reent+0x3a>
 8009fe2:	4629      	mov	r1, r5
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	47c0      	blx	r8
 8009fe8:	4307      	orrs	r7, r0
 8009fea:	3568      	adds	r5, #104	; 0x68
 8009fec:	e7e9      	b.n	8009fc2 <_fwalk_reent+0x12>

08009fee <__retarget_lock_init_recursive>:
 8009fee:	4770      	bx	lr

08009ff0 <__retarget_lock_acquire_recursive>:
 8009ff0:	4770      	bx	lr

08009ff2 <__retarget_lock_release_recursive>:
 8009ff2:	4770      	bx	lr

08009ff4 <__swhatbuf_r>:
 8009ff4:	b570      	push	{r4, r5, r6, lr}
 8009ff6:	460e      	mov	r6, r1
 8009ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ffc:	2900      	cmp	r1, #0
 8009ffe:	b096      	sub	sp, #88	; 0x58
 800a000:	4614      	mov	r4, r2
 800a002:	461d      	mov	r5, r3
 800a004:	da08      	bge.n	800a018 <__swhatbuf_r+0x24>
 800a006:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a00a:	2200      	movs	r2, #0
 800a00c:	602a      	str	r2, [r5, #0]
 800a00e:	061a      	lsls	r2, r3, #24
 800a010:	d410      	bmi.n	800a034 <__swhatbuf_r+0x40>
 800a012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a016:	e00e      	b.n	800a036 <__swhatbuf_r+0x42>
 800a018:	466a      	mov	r2, sp
 800a01a:	f000 f903 	bl	800a224 <_fstat_r>
 800a01e:	2800      	cmp	r0, #0
 800a020:	dbf1      	blt.n	800a006 <__swhatbuf_r+0x12>
 800a022:	9a01      	ldr	r2, [sp, #4]
 800a024:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a028:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a02c:	425a      	negs	r2, r3
 800a02e:	415a      	adcs	r2, r3
 800a030:	602a      	str	r2, [r5, #0]
 800a032:	e7ee      	b.n	800a012 <__swhatbuf_r+0x1e>
 800a034:	2340      	movs	r3, #64	; 0x40
 800a036:	2000      	movs	r0, #0
 800a038:	6023      	str	r3, [r4, #0]
 800a03a:	b016      	add	sp, #88	; 0x58
 800a03c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a040 <__smakebuf_r>:
 800a040:	898b      	ldrh	r3, [r1, #12]
 800a042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a044:	079d      	lsls	r5, r3, #30
 800a046:	4606      	mov	r6, r0
 800a048:	460c      	mov	r4, r1
 800a04a:	d507      	bpl.n	800a05c <__smakebuf_r+0x1c>
 800a04c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	6123      	str	r3, [r4, #16]
 800a054:	2301      	movs	r3, #1
 800a056:	6163      	str	r3, [r4, #20]
 800a058:	b002      	add	sp, #8
 800a05a:	bd70      	pop	{r4, r5, r6, pc}
 800a05c:	ab01      	add	r3, sp, #4
 800a05e:	466a      	mov	r2, sp
 800a060:	f7ff ffc8 	bl	8009ff4 <__swhatbuf_r>
 800a064:	9900      	ldr	r1, [sp, #0]
 800a066:	4605      	mov	r5, r0
 800a068:	4630      	mov	r0, r6
 800a06a:	f7ff f963 	bl	8009334 <_malloc_r>
 800a06e:	b948      	cbnz	r0, 800a084 <__smakebuf_r+0x44>
 800a070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a074:	059a      	lsls	r2, r3, #22
 800a076:	d4ef      	bmi.n	800a058 <__smakebuf_r+0x18>
 800a078:	f023 0303 	bic.w	r3, r3, #3
 800a07c:	f043 0302 	orr.w	r3, r3, #2
 800a080:	81a3      	strh	r3, [r4, #12]
 800a082:	e7e3      	b.n	800a04c <__smakebuf_r+0xc>
 800a084:	4b0d      	ldr	r3, [pc, #52]	; (800a0bc <__smakebuf_r+0x7c>)
 800a086:	62b3      	str	r3, [r6, #40]	; 0x28
 800a088:	89a3      	ldrh	r3, [r4, #12]
 800a08a:	6020      	str	r0, [r4, #0]
 800a08c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a090:	81a3      	strh	r3, [r4, #12]
 800a092:	9b00      	ldr	r3, [sp, #0]
 800a094:	6163      	str	r3, [r4, #20]
 800a096:	9b01      	ldr	r3, [sp, #4]
 800a098:	6120      	str	r0, [r4, #16]
 800a09a:	b15b      	cbz	r3, 800a0b4 <__smakebuf_r+0x74>
 800a09c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	f000 f8d1 	bl	800a248 <_isatty_r>
 800a0a6:	b128      	cbz	r0, 800a0b4 <__smakebuf_r+0x74>
 800a0a8:	89a3      	ldrh	r3, [r4, #12]
 800a0aa:	f023 0303 	bic.w	r3, r3, #3
 800a0ae:	f043 0301 	orr.w	r3, r3, #1
 800a0b2:	81a3      	strh	r3, [r4, #12]
 800a0b4:	89a0      	ldrh	r0, [r4, #12]
 800a0b6:	4305      	orrs	r5, r0
 800a0b8:	81a5      	strh	r5, [r4, #12]
 800a0ba:	e7cd      	b.n	800a058 <__smakebuf_r+0x18>
 800a0bc:	08009e4d 	.word	0x08009e4d

0800a0c0 <_malloc_usable_size_r>:
 800a0c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0c4:	1f18      	subs	r0, r3, #4
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	bfbc      	itt	lt
 800a0ca:	580b      	ldrlt	r3, [r1, r0]
 800a0cc:	18c0      	addlt	r0, r0, r3
 800a0ce:	4770      	bx	lr

0800a0d0 <_raise_r>:
 800a0d0:	291f      	cmp	r1, #31
 800a0d2:	b538      	push	{r3, r4, r5, lr}
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	460d      	mov	r5, r1
 800a0d8:	d904      	bls.n	800a0e4 <_raise_r+0x14>
 800a0da:	2316      	movs	r3, #22
 800a0dc:	6003      	str	r3, [r0, #0]
 800a0de:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e2:	bd38      	pop	{r3, r4, r5, pc}
 800a0e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a0e6:	b112      	cbz	r2, 800a0ee <_raise_r+0x1e>
 800a0e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0ec:	b94b      	cbnz	r3, 800a102 <_raise_r+0x32>
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f000 f830 	bl	800a154 <_getpid_r>
 800a0f4:	462a      	mov	r2, r5
 800a0f6:	4601      	mov	r1, r0
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0fe:	f000 b817 	b.w	800a130 <_kill_r>
 800a102:	2b01      	cmp	r3, #1
 800a104:	d00a      	beq.n	800a11c <_raise_r+0x4c>
 800a106:	1c59      	adds	r1, r3, #1
 800a108:	d103      	bne.n	800a112 <_raise_r+0x42>
 800a10a:	2316      	movs	r3, #22
 800a10c:	6003      	str	r3, [r0, #0]
 800a10e:	2001      	movs	r0, #1
 800a110:	e7e7      	b.n	800a0e2 <_raise_r+0x12>
 800a112:	2400      	movs	r4, #0
 800a114:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a118:	4628      	mov	r0, r5
 800a11a:	4798      	blx	r3
 800a11c:	2000      	movs	r0, #0
 800a11e:	e7e0      	b.n	800a0e2 <_raise_r+0x12>

0800a120 <raise>:
 800a120:	4b02      	ldr	r3, [pc, #8]	; (800a12c <raise+0xc>)
 800a122:	4601      	mov	r1, r0
 800a124:	6818      	ldr	r0, [r3, #0]
 800a126:	f7ff bfd3 	b.w	800a0d0 <_raise_r>
 800a12a:	bf00      	nop
 800a12c:	2000000c 	.word	0x2000000c

0800a130 <_kill_r>:
 800a130:	b538      	push	{r3, r4, r5, lr}
 800a132:	4d07      	ldr	r5, [pc, #28]	; (800a150 <_kill_r+0x20>)
 800a134:	2300      	movs	r3, #0
 800a136:	4604      	mov	r4, r0
 800a138:	4608      	mov	r0, r1
 800a13a:	4611      	mov	r1, r2
 800a13c:	602b      	str	r3, [r5, #0]
 800a13e:	f7f8 f9b9 	bl	80024b4 <_kill>
 800a142:	1c43      	adds	r3, r0, #1
 800a144:	d102      	bne.n	800a14c <_kill_r+0x1c>
 800a146:	682b      	ldr	r3, [r5, #0]
 800a148:	b103      	cbz	r3, 800a14c <_kill_r+0x1c>
 800a14a:	6023      	str	r3, [r4, #0]
 800a14c:	bd38      	pop	{r3, r4, r5, pc}
 800a14e:	bf00      	nop
 800a150:	20000b44 	.word	0x20000b44

0800a154 <_getpid_r>:
 800a154:	f7f8 b9a6 	b.w	80024a4 <_getpid>

0800a158 <__sread>:
 800a158:	b510      	push	{r4, lr}
 800a15a:	460c      	mov	r4, r1
 800a15c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a160:	f000 f894 	bl	800a28c <_read_r>
 800a164:	2800      	cmp	r0, #0
 800a166:	bfab      	itete	ge
 800a168:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a16a:	89a3      	ldrhlt	r3, [r4, #12]
 800a16c:	181b      	addge	r3, r3, r0
 800a16e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a172:	bfac      	ite	ge
 800a174:	6563      	strge	r3, [r4, #84]	; 0x54
 800a176:	81a3      	strhlt	r3, [r4, #12]
 800a178:	bd10      	pop	{r4, pc}

0800a17a <__swrite>:
 800a17a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a17e:	461f      	mov	r7, r3
 800a180:	898b      	ldrh	r3, [r1, #12]
 800a182:	05db      	lsls	r3, r3, #23
 800a184:	4605      	mov	r5, r0
 800a186:	460c      	mov	r4, r1
 800a188:	4616      	mov	r6, r2
 800a18a:	d505      	bpl.n	800a198 <__swrite+0x1e>
 800a18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a190:	2302      	movs	r3, #2
 800a192:	2200      	movs	r2, #0
 800a194:	f000 f868 	bl	800a268 <_lseek_r>
 800a198:	89a3      	ldrh	r3, [r4, #12]
 800a19a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a19e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1a2:	81a3      	strh	r3, [r4, #12]
 800a1a4:	4632      	mov	r2, r6
 800a1a6:	463b      	mov	r3, r7
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ae:	f000 b817 	b.w	800a1e0 <_write_r>

0800a1b2 <__sseek>:
 800a1b2:	b510      	push	{r4, lr}
 800a1b4:	460c      	mov	r4, r1
 800a1b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1ba:	f000 f855 	bl	800a268 <_lseek_r>
 800a1be:	1c43      	adds	r3, r0, #1
 800a1c0:	89a3      	ldrh	r3, [r4, #12]
 800a1c2:	bf15      	itete	ne
 800a1c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1ce:	81a3      	strheq	r3, [r4, #12]
 800a1d0:	bf18      	it	ne
 800a1d2:	81a3      	strhne	r3, [r4, #12]
 800a1d4:	bd10      	pop	{r4, pc}

0800a1d6 <__sclose>:
 800a1d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1da:	f000 b813 	b.w	800a204 <_close_r>
	...

0800a1e0 <_write_r>:
 800a1e0:	b538      	push	{r3, r4, r5, lr}
 800a1e2:	4d07      	ldr	r5, [pc, #28]	; (800a200 <_write_r+0x20>)
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	4608      	mov	r0, r1
 800a1e8:	4611      	mov	r1, r2
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	602a      	str	r2, [r5, #0]
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	f7f8 f997 	bl	8002522 <_write>
 800a1f4:	1c43      	adds	r3, r0, #1
 800a1f6:	d102      	bne.n	800a1fe <_write_r+0x1e>
 800a1f8:	682b      	ldr	r3, [r5, #0]
 800a1fa:	b103      	cbz	r3, 800a1fe <_write_r+0x1e>
 800a1fc:	6023      	str	r3, [r4, #0]
 800a1fe:	bd38      	pop	{r3, r4, r5, pc}
 800a200:	20000b44 	.word	0x20000b44

0800a204 <_close_r>:
 800a204:	b538      	push	{r3, r4, r5, lr}
 800a206:	4d06      	ldr	r5, [pc, #24]	; (800a220 <_close_r+0x1c>)
 800a208:	2300      	movs	r3, #0
 800a20a:	4604      	mov	r4, r0
 800a20c:	4608      	mov	r0, r1
 800a20e:	602b      	str	r3, [r5, #0]
 800a210:	f7f8 f9a3 	bl	800255a <_close>
 800a214:	1c43      	adds	r3, r0, #1
 800a216:	d102      	bne.n	800a21e <_close_r+0x1a>
 800a218:	682b      	ldr	r3, [r5, #0]
 800a21a:	b103      	cbz	r3, 800a21e <_close_r+0x1a>
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	bd38      	pop	{r3, r4, r5, pc}
 800a220:	20000b44 	.word	0x20000b44

0800a224 <_fstat_r>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	4d07      	ldr	r5, [pc, #28]	; (800a244 <_fstat_r+0x20>)
 800a228:	2300      	movs	r3, #0
 800a22a:	4604      	mov	r4, r0
 800a22c:	4608      	mov	r0, r1
 800a22e:	4611      	mov	r1, r2
 800a230:	602b      	str	r3, [r5, #0]
 800a232:	f7f8 f99e 	bl	8002572 <_fstat>
 800a236:	1c43      	adds	r3, r0, #1
 800a238:	d102      	bne.n	800a240 <_fstat_r+0x1c>
 800a23a:	682b      	ldr	r3, [r5, #0]
 800a23c:	b103      	cbz	r3, 800a240 <_fstat_r+0x1c>
 800a23e:	6023      	str	r3, [r4, #0]
 800a240:	bd38      	pop	{r3, r4, r5, pc}
 800a242:	bf00      	nop
 800a244:	20000b44 	.word	0x20000b44

0800a248 <_isatty_r>:
 800a248:	b538      	push	{r3, r4, r5, lr}
 800a24a:	4d06      	ldr	r5, [pc, #24]	; (800a264 <_isatty_r+0x1c>)
 800a24c:	2300      	movs	r3, #0
 800a24e:	4604      	mov	r4, r0
 800a250:	4608      	mov	r0, r1
 800a252:	602b      	str	r3, [r5, #0]
 800a254:	f7f8 f99d 	bl	8002592 <_isatty>
 800a258:	1c43      	adds	r3, r0, #1
 800a25a:	d102      	bne.n	800a262 <_isatty_r+0x1a>
 800a25c:	682b      	ldr	r3, [r5, #0]
 800a25e:	b103      	cbz	r3, 800a262 <_isatty_r+0x1a>
 800a260:	6023      	str	r3, [r4, #0]
 800a262:	bd38      	pop	{r3, r4, r5, pc}
 800a264:	20000b44 	.word	0x20000b44

0800a268 <_lseek_r>:
 800a268:	b538      	push	{r3, r4, r5, lr}
 800a26a:	4d07      	ldr	r5, [pc, #28]	; (800a288 <_lseek_r+0x20>)
 800a26c:	4604      	mov	r4, r0
 800a26e:	4608      	mov	r0, r1
 800a270:	4611      	mov	r1, r2
 800a272:	2200      	movs	r2, #0
 800a274:	602a      	str	r2, [r5, #0]
 800a276:	461a      	mov	r2, r3
 800a278:	f7f8 f996 	bl	80025a8 <_lseek>
 800a27c:	1c43      	adds	r3, r0, #1
 800a27e:	d102      	bne.n	800a286 <_lseek_r+0x1e>
 800a280:	682b      	ldr	r3, [r5, #0]
 800a282:	b103      	cbz	r3, 800a286 <_lseek_r+0x1e>
 800a284:	6023      	str	r3, [r4, #0]
 800a286:	bd38      	pop	{r3, r4, r5, pc}
 800a288:	20000b44 	.word	0x20000b44

0800a28c <_read_r>:
 800a28c:	b538      	push	{r3, r4, r5, lr}
 800a28e:	4d07      	ldr	r5, [pc, #28]	; (800a2ac <_read_r+0x20>)
 800a290:	4604      	mov	r4, r0
 800a292:	4608      	mov	r0, r1
 800a294:	4611      	mov	r1, r2
 800a296:	2200      	movs	r2, #0
 800a298:	602a      	str	r2, [r5, #0]
 800a29a:	461a      	mov	r2, r3
 800a29c:	f7f8 f924 	bl	80024e8 <_read>
 800a2a0:	1c43      	adds	r3, r0, #1
 800a2a2:	d102      	bne.n	800a2aa <_read_r+0x1e>
 800a2a4:	682b      	ldr	r3, [r5, #0]
 800a2a6:	b103      	cbz	r3, 800a2aa <_read_r+0x1e>
 800a2a8:	6023      	str	r3, [r4, #0]
 800a2aa:	bd38      	pop	{r3, r4, r5, pc}
 800a2ac:	20000b44 	.word	0x20000b44

0800a2b0 <_init>:
 800a2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2b2:	bf00      	nop
 800a2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2b6:	bc08      	pop	{r3}
 800a2b8:	469e      	mov	lr, r3
 800a2ba:	4770      	bx	lr

0800a2bc <_fini>:
 800a2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2be:	bf00      	nop
 800a2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2c2:	bc08      	pop	{r3}
 800a2c4:	469e      	mov	lr, r3
 800a2c6:	4770      	bx	lr
