
pomiary_grzanie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ab0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08009c80  08009c80  00019c80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a08c  0800a08c  0002031c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a08c  0800a08c  0001a08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a094  0800a094  0002031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a094  0800a094  0001a094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a098  0800a098  0001a098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a09c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001dc  0800a278  000201dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000027c  0800a318  0002027c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000007e4  2000031c  0800a3b8  0002031c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000b00  0800a3b8  00020b00  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ae6f  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002e6b  00000000  00000000  0003b1bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001618  00000000  00000000  0003e028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000014e0  00000000  00000000  0003f640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002919f  00000000  00000000  00040b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a521  00000000  00000000  00069cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fc45a  00000000  00000000  000841e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0018063a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007174  00000000  00000000  0018068c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000031c 	.word	0x2000031c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009c68 	.word	0x08009c68

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000320 	.word	0x20000320
 800020c:	08009c68 	.word	0x08009c68

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_ldivmod>:
 8000be8:	b97b      	cbnz	r3, 8000c0a <__aeabi_ldivmod+0x22>
 8000bea:	b972      	cbnz	r2, 8000c0a <__aeabi_ldivmod+0x22>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bfbe      	ittt	lt
 8000bf0:	2000      	movlt	r0, #0
 8000bf2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bf6:	e006      	blt.n	8000c06 <__aeabi_ldivmod+0x1e>
 8000bf8:	bf08      	it	eq
 8000bfa:	2800      	cmpeq	r0, #0
 8000bfc:	bf1c      	itt	ne
 8000bfe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c02:	f04f 30ff 	movne.w	r0, #4294967295
 8000c06:	f000 b9bf 	b.w	8000f88 <__aeabi_idiv0>
 8000c0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c12:	2900      	cmp	r1, #0
 8000c14:	db09      	blt.n	8000c2a <__aeabi_ldivmod+0x42>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db1a      	blt.n	8000c50 <__aeabi_ldivmod+0x68>
 8000c1a:	f000 f84d 	bl	8000cb8 <__udivmoddi4>
 8000c1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c26:	b004      	add	sp, #16
 8000c28:	4770      	bx	lr
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db1b      	blt.n	8000c6c <__aeabi_ldivmod+0x84>
 8000c34:	f000 f840 	bl	8000cb8 <__udivmoddi4>
 8000c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c40:	b004      	add	sp, #16
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	4252      	negs	r2, r2
 8000c4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4e:	4770      	bx	lr
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	f000 f82f 	bl	8000cb8 <__udivmoddi4>
 8000c5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c62:	b004      	add	sp, #16
 8000c64:	4240      	negs	r0, r0
 8000c66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6a:	4770      	bx	lr
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c72:	f000 f821 	bl	8000cb8 <__udivmoddi4>
 8000c76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7e:	b004      	add	sp, #16
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af04      	add	r7, sp, #16
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <BMP280_Read8+0x38>)
 8000f9c:	6818      	ldr	r0, [r3, #0]
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	230a      	movs	r3, #10
 8000fa4:	9302      	str	r3, [sp, #8]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	9301      	str	r3, [sp, #4]
 8000faa:	f107 030f 	add.w	r3, r7, #15
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	21ec      	movs	r1, #236	; 0xec
 8000fb4:	f002 faee 	bl	8003594 <HAL_I2C_Mem_Read>
  return tmp;
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000338 	.word	0x20000338

08000fc8 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af04      	add	r7, sp, #16
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <BMP280_Read16+0x40>)
 8000fd4:	6818      	ldr	r0, [r3, #0]
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	230a      	movs	r3, #10
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	2302      	movs	r3, #2
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	21ec      	movs	r1, #236	; 0xec
 8000fec:	f002 fad2 	bl	8003594 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8000ff0:	7b3b      	ldrb	r3, [r7, #12]
 8000ff2:	021b      	lsls	r3, r3, #8
 8000ff4:	b21a      	sxth	r2, r3
 8000ff6:	7b7b      	ldrb	r3, [r7, #13]
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000338 	.word	0x20000338

0800100c <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ffd5 	bl	8000fc8 <BMP280_Read16>
 800101e:	4603      	mov	r3, r0
 8001020:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8001022:	89fb      	ldrh	r3, [r7, #14]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	b29b      	uxth	r3, r3
 8001028:	b21a      	sxth	r2, r3
 800102a:	89fb      	ldrh	r3, [r7, #14]
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	b21b      	sxth	r3, r3
 8001030:	4313      	orrs	r3, r2
 8001032:	b21b      	sxth	r3, r3
 8001034:	b29b      	uxth	r3, r3
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af04      	add	r7, sp, #16
 8001046:	4603      	mov	r3, r0
 8001048:	460a      	mov	r2, r1
 800104a:	71fb      	strb	r3, [r7, #7]
 800104c:	4613      	mov	r3, r2
 800104e:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <BMP280_Write8+0x34>)
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	b29a      	uxth	r2, r3
 8001058:	230a      	movs	r3, #10
 800105a:	9302      	str	r3, [sp, #8]
 800105c:	2301      	movs	r3, #1
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	1dbb      	adds	r3, r7, #6
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2301      	movs	r3, #1
 8001066:	21ec      	movs	r1, #236	; 0xec
 8001068:	f002 f980 	bl	800336c <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000338 	.word	0x20000338

08001078 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af04      	add	r7, sp, #16
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <BMP280_Read24+0x40>)
 8001084:	6818      	ldr	r0, [r3, #0]
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	b29a      	uxth	r2, r3
 800108a:	230a      	movs	r3, #10
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	2303      	movs	r3, #3
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2301      	movs	r3, #1
 800109a:	21ec      	movs	r1, #236	; 0xec
 800109c:	f002 fa7a 	bl	8003594 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 80010a0:	7b3b      	ldrb	r3, [r7, #12]
 80010a2:	041a      	lsls	r2, r3, #16
 80010a4:	7b7b      	ldrb	r3, [r7, #13]
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	4313      	orrs	r3, r2
 80010aa:	7bba      	ldrb	r2, [r7, #14]
 80010ac:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000338 	.word	0x20000338

080010bc <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	4608      	mov	r0, r1
 80010c6:	4611      	mov	r1, r2
 80010c8:	461a      	mov	r2, r3
 80010ca:	4603      	mov	r3, r0
 80010cc:	70fb      	strb	r3, [r7, #3]
 80010ce:	460b      	mov	r3, r1
 80010d0:	70bb      	strb	r3, [r7, #2]
 80010d2:	4613      	mov	r3, r2
 80010d4:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 80010d6:	4a48      	ldr	r2, [pc, #288]	; (80011f8 <BMP280_Init+0x13c>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 80010dc:	787b      	ldrb	r3, [r7, #1]
 80010de:	2b03      	cmp	r3, #3
 80010e0:	d901      	bls.n	80010e6 <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 80010e2:	2303      	movs	r3, #3
 80010e4:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 80010e6:	4a45      	ldr	r2, [pc, #276]	; (80011fc <BMP280_Init+0x140>)
 80010e8:	787b      	ldrb	r3, [r7, #1]
 80010ea:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 80010ec:	787b      	ldrb	r3, [r7, #1]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d101      	bne.n	80010f6 <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80010f6:	78fb      	ldrb	r3, [r7, #3]
 80010f8:	2b05      	cmp	r3, #5
 80010fa:	d901      	bls.n	8001100 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 80010fc:	2305      	movs	r3, #5
 80010fe:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8001100:	4a3f      	ldr	r2, [pc, #252]	; (8001200 <BMP280_Init+0x144>)
 8001102:	78fb      	ldrb	r3, [r7, #3]
 8001104:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 8001106:	78bb      	ldrb	r3, [r7, #2]
 8001108:	2b05      	cmp	r3, #5
 800110a:	d901      	bls.n	8001110 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 800110c:	2305      	movs	r3, #5
 800110e:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8001110:	4a3c      	ldr	r2, [pc, #240]	; (8001204 <BMP280_Init+0x148>)
 8001112:	78bb      	ldrb	r3, [r7, #2]
 8001114:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 8001116:	bf00      	nop
 8001118:	20d0      	movs	r0, #208	; 0xd0
 800111a:	f7ff ff37 	bl	8000f8c <BMP280_Read8>
 800111e:	4603      	mov	r3, r0
 8001120:	2b58      	cmp	r3, #88	; 0x58
 8001122:	d1f9      	bne.n	8001118 <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8001124:	2088      	movs	r0, #136	; 0x88
 8001126:	f7ff ff71 	bl	800100c <BMP280_Read16LE>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b36      	ldr	r3, [pc, #216]	; (8001208 <BMP280_Init+0x14c>)
 8001130:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8001132:	208a      	movs	r0, #138	; 0x8a
 8001134:	f7ff ff6a 	bl	800100c <BMP280_Read16LE>
 8001138:	4603      	mov	r3, r0
 800113a:	b21a      	sxth	r2, r3
 800113c:	4b33      	ldr	r3, [pc, #204]	; (800120c <BMP280_Init+0x150>)
 800113e:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8001140:	208c      	movs	r0, #140	; 0x8c
 8001142:	f7ff ff63 	bl	800100c <BMP280_Read16LE>
 8001146:	4603      	mov	r3, r0
 8001148:	b21a      	sxth	r2, r3
 800114a:	4b31      	ldr	r3, [pc, #196]	; (8001210 <BMP280_Init+0x154>)
 800114c:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 800114e:	208e      	movs	r0, #142	; 0x8e
 8001150:	f7ff ff5c 	bl	800100c <BMP280_Read16LE>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	4b2e      	ldr	r3, [pc, #184]	; (8001214 <BMP280_Init+0x158>)
 800115a:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 800115c:	2090      	movs	r0, #144	; 0x90
 800115e:	f7ff ff55 	bl	800100c <BMP280_Read16LE>
 8001162:	4603      	mov	r3, r0
 8001164:	b21a      	sxth	r2, r3
 8001166:	4b2c      	ldr	r3, [pc, #176]	; (8001218 <BMP280_Init+0x15c>)
 8001168:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 800116a:	2092      	movs	r0, #146	; 0x92
 800116c:	f7ff ff4e 	bl	800100c <BMP280_Read16LE>
 8001170:	4603      	mov	r3, r0
 8001172:	b21a      	sxth	r2, r3
 8001174:	4b29      	ldr	r3, [pc, #164]	; (800121c <BMP280_Init+0x160>)
 8001176:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8001178:	2094      	movs	r0, #148	; 0x94
 800117a:	f7ff ff47 	bl	800100c <BMP280_Read16LE>
 800117e:	4603      	mov	r3, r0
 8001180:	b21a      	sxth	r2, r3
 8001182:	4b27      	ldr	r3, [pc, #156]	; (8001220 <BMP280_Init+0x164>)
 8001184:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 8001186:	2096      	movs	r0, #150	; 0x96
 8001188:	f7ff ff40 	bl	800100c <BMP280_Read16LE>
 800118c:	4603      	mov	r3, r0
 800118e:	b21a      	sxth	r2, r3
 8001190:	4b24      	ldr	r3, [pc, #144]	; (8001224 <BMP280_Init+0x168>)
 8001192:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001194:	2098      	movs	r0, #152	; 0x98
 8001196:	f7ff ff39 	bl	800100c <BMP280_Read16LE>
 800119a:	4603      	mov	r3, r0
 800119c:	b21a      	sxth	r2, r3
 800119e:	4b22      	ldr	r3, [pc, #136]	; (8001228 <BMP280_Init+0x16c>)
 80011a0:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 80011a2:	209a      	movs	r0, #154	; 0x9a
 80011a4:	f7ff ff32 	bl	800100c <BMP280_Read16LE>
 80011a8:	4603      	mov	r3, r0
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	4b1f      	ldr	r3, [pc, #124]	; (800122c <BMP280_Init+0x170>)
 80011ae:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 80011b0:	209c      	movs	r0, #156	; 0x9c
 80011b2:	f7ff ff2b 	bl	800100c <BMP280_Read16LE>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b21a      	sxth	r2, r3
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <BMP280_Init+0x174>)
 80011bc:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 80011be:	209e      	movs	r0, #158	; 0x9e
 80011c0:	f7ff ff24 	bl	800100c <BMP280_Read16LE>
 80011c4:	4603      	mov	r3, r0
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <BMP280_Init+0x178>)
 80011ca:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	015b      	lsls	r3, r3, #5
 80011d0:	b25a      	sxtb	r2, r3
 80011d2:	78bb      	ldrb	r3, [r7, #2]
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	4313      	orrs	r3, r2
 80011da:	b25a      	sxtb	r2, r3
 80011dc:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	4619      	mov	r1, r3
 80011e8:	20f4      	movs	r0, #244	; 0xf4
 80011ea:	f7ff ff29 	bl	8001040 <BMP280_Write8>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000338 	.word	0x20000338
 80011fc:	2000033e 	.word	0x2000033e
 8001200:	2000033c 	.word	0x2000033c
 8001204:	2000033d 	.word	0x2000033d
 8001208:	20000354 	.word	0x20000354
 800120c:	20000340 	.word	0x20000340
 8001210:	20000342 	.word	0x20000342
 8001214:	20000356 	.word	0x20000356
 8001218:	20000344 	.word	0x20000344
 800121c:	20000346 	.word	0x20000346
 8001220:	20000348 	.word	0x20000348
 8001224:	2000034a 	.word	0x2000034a
 8001228:	2000034c 	.word	0x2000034c
 800122c:	2000034e 	.word	0x2000034e
 8001230:	20000350 	.word	0x20000350
 8001234:	20000352 	.word	0x20000352

08001238 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 800123e:	4b3d      	ldr	r3, [pc, #244]	; (8001334 <BMP280_ReadTemperature+0xfc>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d16d      	bne.n	8001322 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 8001246:	20f4      	movs	r0, #244	; 0xf4
 8001248:	f7ff fea0 	bl	8000f8c <BMP280_Read8>
 800124c:	4603      	mov	r3, r0
 800124e:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	f023 0303 	bic.w	r3, r3, #3
 8001256:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8001258:	7dfb      	ldrb	r3, [r7, #23]
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001260:	7dfb      	ldrb	r3, [r7, #23]
 8001262:	4619      	mov	r1, r3
 8001264:	20f4      	movs	r0, #244	; 0xf4
 8001266:	f7ff feeb 	bl	8001040 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 800126a:	20f4      	movs	r0, #244	; 0xf4
 800126c:	f7ff fe8e 	bl	8000f8c <BMP280_Read8>
 8001270:	4603      	mov	r3, r0
 8001272:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001274:	7dbb      	ldrb	r3, [r7, #22]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 800127c:	7dbb      	ldrb	r3, [r7, #22]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d14f      	bne.n	8001322 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001282:	20f4      	movs	r0, #244	; 0xf4
 8001284:	f7ff fe82 	bl	8000f8c <BMP280_Read8>
 8001288:	4603      	mov	r3, r0
 800128a:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 800128c:	7dbb      	ldrb	r3, [r7, #22]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001294:	7dbb      	ldrb	r3, [r7, #22]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d000      	beq.n	800129c <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800129a:	e7f2      	b.n	8001282 <BMP280_ReadTemperature+0x4a>
				  break;
 800129c:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 800129e:	20fa      	movs	r0, #250	; 0xfa
 80012a0:	f7ff feea 	bl	8001078 <BMP280_Read24>
 80012a4:	4603      	mov	r3, r0
 80012a6:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	111b      	asrs	r3, r3, #4
 80012ac:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	10da      	asrs	r2, r3, #3
 80012b2:	4b21      	ldr	r3, [pc, #132]	; (8001338 <BMP280_ReadTemperature+0x100>)
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 80012ba:	4a20      	ldr	r2, [pc, #128]	; (800133c <BMP280_ReadTemperature+0x104>)
 80012bc:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80012c0:	fb02 f303 	mul.w	r3, r2, r3
 80012c4:	12db      	asrs	r3, r3, #11
 80012c6:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	111b      	asrs	r3, r3, #4
 80012cc:	4a1a      	ldr	r2, [pc, #104]	; (8001338 <BMP280_ReadTemperature+0x100>)
 80012ce:	8812      	ldrh	r2, [r2, #0]
 80012d0:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	1112      	asrs	r2, r2, #4
 80012d6:	4918      	ldr	r1, [pc, #96]	; (8001338 <BMP280_ReadTemperature+0x100>)
 80012d8:	8809      	ldrh	r1, [r1, #0]
 80012da:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012dc:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012e0:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80012e2:	4a17      	ldr	r2, [pc, #92]	; (8001340 <BMP280_ReadTemperature+0x108>)
 80012e4:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012e8:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012ec:	139b      	asrs	r3, r3, #14
 80012ee:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	4413      	add	r3, r2
 80012f6:	4a13      	ldr	r2, [pc, #76]	; (8001344 <BMP280_ReadTemperature+0x10c>)
 80012f8:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <BMP280_ReadTemperature+0x10c>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	3380      	adds	r3, #128	; 0x80
 8001306:	121b      	asrs	r3, r3, #8
 8001308:	ee07 3a90 	vmov	s15, r3
 800130c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001310:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8001314:	edd7 7a01 	vldr	s15, [r7, #4]
 8001318:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001348 <BMP280_ReadTemperature+0x110>
 800131c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001320:	e001      	b.n	8001326 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8001322:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800134c <BMP280_ReadTemperature+0x114>
}
 8001326:	eef0 7a47 	vmov.f32	s15, s14
 800132a:	eeb0 0a67 	vmov.f32	s0, s15
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	2000033e 	.word	0x2000033e
 8001338:	20000354 	.word	0x20000354
 800133c:	20000340 	.word	0x20000340
 8001340:	20000342 	.word	0x20000342
 8001344:	20000358 	.word	0x20000358
 8001348:	42c80000 	.word	0x42c80000
 800134c:	c2c60000 	.word	0xc2c60000

08001350 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 8001350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001354:	b0cc      	sub	sp, #304	; 0x130
 8001356:	af00      	add	r7, sp, #0
 8001358:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800135c:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 8001360:	f7ff ff6a 	bl	8001238 <BMP280_ReadTemperature>
 8001364:	eef0 7a40 	vmov.f32	s15, s0
 8001368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800136c:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 8001370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8001648 <BMP280_ReadTemperatureAndPressure+0x2f8>
 800137c:	eef4 7a47 	vcmp.f32	s15, s14
 8001380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001384:	d101      	bne.n	800138a <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 8001386:	23ff      	movs	r3, #255	; 0xff
 8001388:	e2bf      	b.n	800190a <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 800138a:	20f7      	movs	r0, #247	; 0xf7
 800138c:	f7ff fe74 	bl	8001078 <BMP280_Read24>
 8001390:	4603      	mov	r3, r0
 8001392:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  adc_P >>= 4;
 8001396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800139a:	111b      	asrs	r3, r3, #4
 800139c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 80013a0:	4baa      	ldr	r3, [pc, #680]	; (800164c <BMP280_ReadTemperatureAndPressure+0x2fc>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	17da      	asrs	r2, r3, #31
 80013a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80013aa:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80013ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80013b2:	460b      	mov	r3, r1
 80013b4:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 80013b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80013ba:	4613      	mov	r3, r2
 80013bc:	f143 33ff 	adc.w	r3, r3, #4294967295
 80013c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80013c6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 80013ca:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80013ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013d2:	fb03 f102 	mul.w	r1, r3, r2
 80013d6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80013da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013de:	fb02 f303 	mul.w	r3, r2, r3
 80013e2:	18ca      	adds	r2, r1, r3
 80013e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013e8:	fba3 4503 	umull	r4, r5, r3, r3
 80013ec:	1953      	adds	r3, r2, r5
 80013ee:	461d      	mov	r5, r3
 80013f0:	4b97      	ldr	r3, [pc, #604]	; (8001650 <BMP280_ReadTemperatureAndPressure+0x300>)
 80013f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	17da      	asrs	r2, r3, #31
 80013fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80013fe:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001402:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001406:	4603      	mov	r3, r0
 8001408:	fb03 f205 	mul.w	r2, r3, r5
 800140c:	460b      	mov	r3, r1
 800140e:	fb04 f303 	mul.w	r3, r4, r3
 8001412:	4413      	add	r3, r2
 8001414:	4602      	mov	r2, r0
 8001416:	fba4 8902 	umull	r8, r9, r4, r2
 800141a:	444b      	add	r3, r9
 800141c:	4699      	mov	r9, r3
 800141e:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 8001422:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 8001426:	4b8b      	ldr	r3, [pc, #556]	; (8001654 <BMP280_ReadTemperatureAndPressure+0x304>)
 8001428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142c:	b21b      	sxth	r3, r3
 800142e:	17da      	asrs	r2, r3, #31
 8001430:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001434:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001438:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800143c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001440:	462a      	mov	r2, r5
 8001442:	fb02 f203 	mul.w	r2, r2, r3
 8001446:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800144a:	4621      	mov	r1, r4
 800144c:	fb01 f303 	mul.w	r3, r1, r3
 8001450:	441a      	add	r2, r3
 8001452:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001456:	4621      	mov	r1, r4
 8001458:	fba3 ab01 	umull	sl, fp, r3, r1
 800145c:	eb02 030b 	add.w	r3, r2, fp
 8001460:	469b      	mov	fp, r3
 8001462:	f04f 0000 	mov.w	r0, #0
 8001466:	f04f 0100 	mov.w	r1, #0
 800146a:	ea4f 414b 	mov.w	r1, fp, lsl #17
 800146e:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001472:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001476:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800147a:	1814      	adds	r4, r2, r0
 800147c:	643c      	str	r4, [r7, #64]	; 0x40
 800147e:	414b      	adcs	r3, r1
 8001480:	647b      	str	r3, [r7, #68]	; 0x44
 8001482:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001486:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 800148a:	4b73      	ldr	r3, [pc, #460]	; (8001658 <BMP280_ReadTemperatureAndPressure+0x308>)
 800148c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001490:	b21b      	sxth	r3, r3
 8001492:	17da      	asrs	r2, r3, #31
 8001494:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001498:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800149c:	f04f 0000 	mov.w	r0, #0
 80014a0:	f04f 0100 	mov.w	r1, #0
 80014a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80014a8:	00d9      	lsls	r1, r3, #3
 80014aa:	2000      	movs	r0, #0
 80014ac:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80014b0:	1814      	adds	r4, r2, r0
 80014b2:	63bc      	str	r4, [r7, #56]	; 0x38
 80014b4:	414b      	adcs	r3, r1
 80014b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014b8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80014bc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80014c0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80014c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014c8:	fb03 f102 	mul.w	r1, r3, r2
 80014cc:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80014d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014d4:	fb02 f303 	mul.w	r3, r2, r3
 80014d8:	18ca      	adds	r2, r1, r3
 80014da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014de:	fba3 1303 	umull	r1, r3, r3, r3
 80014e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014e6:	460b      	mov	r3, r1
 80014e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80014ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80014f0:	18d3      	adds	r3, r2, r3
 80014f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014f6:	4b59      	ldr	r3, [pc, #356]	; (800165c <BMP280_ReadTemperatureAndPressure+0x30c>)
 80014f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	17da      	asrs	r2, r3, #31
 8001500:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001504:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001508:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800150c:	462b      	mov	r3, r5
 800150e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001512:	4642      	mov	r2, r8
 8001514:	fb02 f203 	mul.w	r2, r2, r3
 8001518:	464b      	mov	r3, r9
 800151a:	4621      	mov	r1, r4
 800151c:	fb01 f303 	mul.w	r3, r1, r3
 8001520:	4413      	add	r3, r2
 8001522:	4622      	mov	r2, r4
 8001524:	4641      	mov	r1, r8
 8001526:	fba2 1201 	umull	r1, r2, r2, r1
 800152a:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800152e:	460a      	mov	r2, r1
 8001530:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8001534:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001538:	4413      	add	r3, r2
 800153a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800153e:	f04f 0000 	mov.w	r0, #0
 8001542:	f04f 0100 	mov.w	r1, #0
 8001546:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800154a:	4623      	mov	r3, r4
 800154c:	0a18      	lsrs	r0, r3, #8
 800154e:	462b      	mov	r3, r5
 8001550:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001554:	462b      	mov	r3, r5
 8001556:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 8001558:	4b41      	ldr	r3, [pc, #260]	; (8001660 <BMP280_ReadTemperatureAndPressure+0x310>)
 800155a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155e:	b21b      	sxth	r3, r3
 8001560:	17da      	asrs	r2, r3, #31
 8001562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001566:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800156a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800156e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001572:	464a      	mov	r2, r9
 8001574:	fb02 f203 	mul.w	r2, r2, r3
 8001578:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800157c:	4644      	mov	r4, r8
 800157e:	fb04 f303 	mul.w	r3, r4, r3
 8001582:	441a      	add	r2, r3
 8001584:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001588:	4644      	mov	r4, r8
 800158a:	fba3 4304 	umull	r4, r3, r3, r4
 800158e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001592:	4623      	mov	r3, r4
 8001594:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800159c:	18d3      	adds	r3, r2, r3
 800159e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80015ae:	464c      	mov	r4, r9
 80015b0:	0323      	lsls	r3, r4, #12
 80015b2:	4644      	mov	r4, r8
 80015b4:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80015b8:	4644      	mov	r4, r8
 80015ba:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80015bc:	1884      	adds	r4, r0, r2
 80015be:	633c      	str	r4, [r7, #48]	; 0x30
 80015c0:	eb41 0303 	adc.w	r3, r1, r3
 80015c4:	637b      	str	r3, [r7, #52]	; 0x34
 80015c6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80015ca:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 80015ce:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80015d2:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80015d6:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 80015da:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80015de:	4b21      	ldr	r3, [pc, #132]	; (8001664 <BMP280_ReadTemperatureAndPressure+0x314>)
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	2200      	movs	r2, #0
 80015e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80015ee:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80015f2:	462b      	mov	r3, r5
 80015f4:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80015f8:	4642      	mov	r2, r8
 80015fa:	fb02 f203 	mul.w	r2, r2, r3
 80015fe:	464b      	mov	r3, r9
 8001600:	4621      	mov	r1, r4
 8001602:	fb01 f303 	mul.w	r3, r1, r3
 8001606:	4413      	add	r3, r2
 8001608:	4622      	mov	r2, r4
 800160a:	4641      	mov	r1, r8
 800160c:	fba2 1201 	umull	r1, r2, r2, r1
 8001610:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001614:	460a      	mov	r2, r1
 8001616:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800161a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800161e:	4413      	add	r3, r2
 8001620:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001630:	4629      	mov	r1, r5
 8001632:	104a      	asrs	r2, r1, #1
 8001634:	4629      	mov	r1, r5
 8001636:	17cb      	asrs	r3, r1, #31
 8001638:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	  if (var1 == 0) {
 800163c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001640:	4313      	orrs	r3, r2
 8001642:	d111      	bne.n	8001668 <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 8001644:	2300      	movs	r3, #0
 8001646:	e160      	b.n	800190a <BMP280_ReadTemperatureAndPressure+0x5ba>
 8001648:	c2c60000 	.word	0xc2c60000
 800164c:	20000358 	.word	0x20000358
 8001650:	2000034c 	.word	0x2000034c
 8001654:	2000034a 	.word	0x2000034a
 8001658:	20000348 	.word	0x20000348
 800165c:	20000346 	.word	0x20000346
 8001660:	20000344 	.word	0x20000344
 8001664:	20000356 	.word	0x20000356
	  }
	  p = 1048576 - adc_P;
 8001668:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800166c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001670:	17da      	asrs	r2, r3, #31
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
 8001674:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001676:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800167a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 800167e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001682:	105b      	asrs	r3, r3, #1
 8001684:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001688:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800168c:	07db      	lsls	r3, r3, #31
 800168e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001692:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001696:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800169a:	4621      	mov	r1, r4
 800169c:	1a89      	subs	r1, r1, r2
 800169e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80016a2:	4629      	mov	r1, r5
 80016a4:	eb61 0303 	sbc.w	r3, r1, r3
 80016a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80016ac:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80016b0:	4622      	mov	r2, r4
 80016b2:	462b      	mov	r3, r5
 80016b4:	1891      	adds	r1, r2, r2
 80016b6:	6239      	str	r1, [r7, #32]
 80016b8:	415b      	adcs	r3, r3
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
 80016bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016c0:	4621      	mov	r1, r4
 80016c2:	1851      	adds	r1, r2, r1
 80016c4:	61b9      	str	r1, [r7, #24]
 80016c6:	4629      	mov	r1, r5
 80016c8:	414b      	adcs	r3, r1
 80016ca:	61fb      	str	r3, [r7, #28]
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80016d8:	4649      	mov	r1, r9
 80016da:	018b      	lsls	r3, r1, #6
 80016dc:	4641      	mov	r1, r8
 80016de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016e2:	4641      	mov	r1, r8
 80016e4:	018a      	lsls	r2, r1, #6
 80016e6:	4641      	mov	r1, r8
 80016e8:	1889      	adds	r1, r1, r2
 80016ea:	6139      	str	r1, [r7, #16]
 80016ec:	4649      	mov	r1, r9
 80016ee:	eb43 0101 	adc.w	r1, r3, r1
 80016f2:	6179      	str	r1, [r7, #20]
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001700:	4649      	mov	r1, r9
 8001702:	008b      	lsls	r3, r1, #2
 8001704:	4641      	mov	r1, r8
 8001706:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800170a:	4641      	mov	r1, r8
 800170c:	008a      	lsls	r2, r1, #2
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	4603      	mov	r3, r0
 8001714:	4622      	mov	r2, r4
 8001716:	189b      	adds	r3, r3, r2
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	460b      	mov	r3, r1
 800171c:	462a      	mov	r2, r5
 800171e:	eb42 0303 	adc.w	r3, r2, r3
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001730:	4649      	mov	r1, r9
 8001732:	008b      	lsls	r3, r1, #2
 8001734:	4641      	mov	r1, r8
 8001736:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800173a:	4641      	mov	r1, r8
 800173c:	008a      	lsls	r2, r1, #2
 800173e:	4610      	mov	r0, r2
 8001740:	4619      	mov	r1, r3
 8001742:	4603      	mov	r3, r0
 8001744:	4622      	mov	r2, r4
 8001746:	189b      	adds	r3, r3, r2
 8001748:	67bb      	str	r3, [r7, #120]	; 0x78
 800174a:	462b      	mov	r3, r5
 800174c:	460a      	mov	r2, r1
 800174e:	eb42 0303 	adc.w	r3, r2, r3
 8001752:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001754:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001758:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800175c:	f7ff fa44 	bl	8000be8 <__aeabi_ldivmod>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001768:	4b6b      	ldr	r3, [pc, #428]	; (8001918 <BMP280_ReadTemperatureAndPressure+0x5c8>)
 800176a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800176e:	b21b      	sxth	r3, r3
 8001770:	17da      	asrs	r2, r3, #31
 8001772:	673b      	str	r3, [r7, #112]	; 0x70
 8001774:	677a      	str	r2, [r7, #116]	; 0x74
 8001776:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800177a:	f04f 0000 	mov.w	r0, #0
 800177e:	f04f 0100 	mov.w	r1, #0
 8001782:	0b50      	lsrs	r0, r2, #13
 8001784:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001788:	1359      	asrs	r1, r3, #13
 800178a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800178e:	462b      	mov	r3, r5
 8001790:	fb00 f203 	mul.w	r2, r0, r3
 8001794:	4623      	mov	r3, r4
 8001796:	fb03 f301 	mul.w	r3, r3, r1
 800179a:	4413      	add	r3, r2
 800179c:	4622      	mov	r2, r4
 800179e:	fba2 1200 	umull	r1, r2, r2, r0
 80017a2:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80017a6:	460a      	mov	r2, r1
 80017a8:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80017ac:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80017b0:	4413      	add	r3, r2
 80017b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80017b6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80017ba:	f04f 0000 	mov.w	r0, #0
 80017be:	f04f 0100 	mov.w	r1, #0
 80017c2:	0b50      	lsrs	r0, r2, #13
 80017c4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80017c8:	1359      	asrs	r1, r3, #13
 80017ca:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80017ce:	462b      	mov	r3, r5
 80017d0:	fb00 f203 	mul.w	r2, r0, r3
 80017d4:	4623      	mov	r3, r4
 80017d6:	fb03 f301 	mul.w	r3, r3, r1
 80017da:	4413      	add	r3, r2
 80017dc:	4622      	mov	r2, r4
 80017de:	fba2 1200 	umull	r1, r2, r2, r0
 80017e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80017e6:	460a      	mov	r2, r1
 80017e8:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80017ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80017f0:	4413      	add	r3, r2
 80017f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001802:	4621      	mov	r1, r4
 8001804:	0e4a      	lsrs	r2, r1, #25
 8001806:	4629      	mov	r1, r5
 8001808:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800180c:	4629      	mov	r1, r5
 800180e:	164b      	asrs	r3, r1, #25
 8001810:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 8001814:	4b41      	ldr	r3, [pc, #260]	; (800191c <BMP280_ReadTemperatureAndPressure+0x5cc>)
 8001816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800181a:	b21b      	sxth	r3, r3
 800181c:	17da      	asrs	r2, r3, #31
 800181e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001820:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001822:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001826:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800182a:	462a      	mov	r2, r5
 800182c:	fb02 f203 	mul.w	r2, r2, r3
 8001830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001834:	4621      	mov	r1, r4
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	4413      	add	r3, r2
 800183c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001840:	4621      	mov	r1, r4
 8001842:	fba2 1201 	umull	r1, r2, r2, r1
 8001846:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800184a:	460a      	mov	r2, r1
 800184c:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001850:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001854:	4413      	add	r3, r2
 8001856:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001866:	4621      	mov	r1, r4
 8001868:	0cca      	lsrs	r2, r1, #19
 800186a:	4629      	mov	r1, r5
 800186c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001870:	4629      	mov	r1, r5
 8001872:	14cb      	asrs	r3, r1, #19
 8001874:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001878:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800187c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001880:	1884      	adds	r4, r0, r2
 8001882:	663c      	str	r4, [r7, #96]	; 0x60
 8001884:	eb41 0303 	adc.w	r3, r1, r3
 8001888:	667b      	str	r3, [r7, #100]	; 0x64
 800188a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800188e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001892:	4621      	mov	r1, r4
 8001894:	1889      	adds	r1, r1, r2
 8001896:	65b9      	str	r1, [r7, #88]	; 0x58
 8001898:	4629      	mov	r1, r5
 800189a:	eb43 0101 	adc.w	r1, r3, r1
 800189e:	65f9      	str	r1, [r7, #92]	; 0x5c
 80018a0:	f04f 0000 	mov.w	r0, #0
 80018a4:	f04f 0100 	mov.w	r1, #0
 80018a8:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80018ac:	4623      	mov	r3, r4
 80018ae:	0a18      	lsrs	r0, r3, #8
 80018b0:	462b      	mov	r3, r5
 80018b2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80018b6:	462b      	mov	r3, r5
 80018b8:	1219      	asrs	r1, r3, #8
 80018ba:	4b19      	ldr	r3, [pc, #100]	; (8001920 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 80018bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c0:	b21b      	sxth	r3, r3
 80018c2:	17da      	asrs	r2, r3, #31
 80018c4:	653b      	str	r3, [r7, #80]	; 0x50
 80018c6:	657a      	str	r2, [r7, #84]	; 0x54
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80018d4:	464c      	mov	r4, r9
 80018d6:	0123      	lsls	r3, r4, #4
 80018d8:	4644      	mov	r4, r8
 80018da:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80018de:	4644      	mov	r4, r8
 80018e0:	0122      	lsls	r2, r4, #4
 80018e2:	1884      	adds	r4, r0, r2
 80018e4:	603c      	str	r4, [r7, #0]
 80018e6:	eb41 0303 	adc.w	r3, r1, r3
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	e9d7 3400 	ldrd	r3, r4, [r7]
 80018f0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  *pressure = (int32_t)p/256;
 80018f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	da00      	bge.n	80018fe <BMP280_ReadTemperatureAndPressure+0x5ae>
 80018fc:	33ff      	adds	r3, #255	; 0xff
 80018fe:	121b      	asrs	r3, r3, #8
 8001900:	461a      	mov	r2, r3
 8001902:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001906:	601a      	str	r2, [r3, #0]

	  return 0;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001910:	46bd      	mov	sp, r7
 8001912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001916:	bf00      	nop
 8001918:	20000352 	.word	0x20000352
 800191c:	20000350 	.word	0x20000350
 8001920:	2000034e 	.word	0x2000034e

08001924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800192a:	f000 fe3c 	bl	80025a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800192e:	f000 f849 	bl	80019c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001932:	f000 f9f7 	bl	8001d24 <MX_GPIO_Init>
  MX_ETH_Init();
 8001936:	f000 f8ad 	bl	8001a94 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800193a:	f000 f995 	bl	8001c68 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800193e:	f000 f9c3 	bl	8001cc8 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001942:	f000 f8f5 	bl	8001b30 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001946:	f000 f933 	bl	8001bb0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 800194a:	2100      	movs	r1, #0
 800194c:	4816      	ldr	r0, [pc, #88]	; (80019a8 <main+0x84>)
 800194e:	f003 fcd7 	bl	8005300 <HAL_TIM_PWM_Start>
  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8001952:	2301      	movs	r3, #1
 8001954:	2203      	movs	r2, #3
 8001956:	2101      	movs	r1, #1
 8001958:	4814      	ldr	r0, [pc, #80]	; (80019ac <main+0x88>)
 800195a:	f7ff fbaf 	bl	80010bc <BMP280_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 800195e:	4914      	ldr	r1, [pc, #80]	; (80019b0 <main+0x8c>)
 8001960:	4814      	ldr	r0, [pc, #80]	; (80019b4 <main+0x90>)
 8001962:	f7ff fcf5 	bl	8001350 <BMP280_ReadTemperatureAndPressure>
//	  sprintf((char*)text, "%.2f, ", temperature);
	  snprintf(text, sizeof(text), "{\"temperature\":\"%.2f\"}\n", temperature);
 8001966:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <main+0x90>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fe0c 	bl	8000588 <__aeabi_f2d>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	e9cd 2300 	strd	r2, r3, [sp]
 8001978:	4a0f      	ldr	r2, [pc, #60]	; (80019b8 <main+0x94>)
 800197a:	2164      	movs	r1, #100	; 0x64
 800197c:	480f      	ldr	r0, [pc, #60]	; (80019bc <main+0x98>)
 800197e:	f005 fee5 	bl	800774c <sniprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)text, strlen(text), 1000);
 8001982:	480e      	ldr	r0, [pc, #56]	; (80019bc <main+0x98>)
 8001984:	f7fe fc44 	bl	8000210 <strlen>
 8001988:	4603      	mov	r3, r0
 800198a:	b29a      	uxth	r2, r3
 800198c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001990:	490a      	ldr	r1, [pc, #40]	; (80019bc <main+0x98>)
 8001992:	480b      	ldr	r0, [pc, #44]	; (80019c0 <main+0x9c>)
 8001994:	f004 fac2 	bl	8005f1c <HAL_UART_Transmit>
	  text[0] = 0;
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <main+0x98>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1000);
 800199e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019a2:	f000 fe5d 	bl	8002660 <HAL_Delay>
  {
 80019a6:	e7da      	b.n	800195e <main+0x3a>
 80019a8:	20000498 	.word	0x20000498
 80019ac:	20000444 	.word	0x20000444
 80019b0:	20000a78 	.word	0x20000a78
 80019b4:	20000a74 	.word	0x20000a74
 80019b8:	08009c80 	.word	0x08009c80
 80019bc:	20000a7c 	.word	0x20000a7c
 80019c0:	200004e4 	.word	0x200004e4

080019c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b094      	sub	sp, #80	; 0x50
 80019c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ca:	f107 0320 	add.w	r3, r7, #32
 80019ce:	2230      	movs	r2, #48	; 0x30
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f005 fa48 	bl	8006e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019d8:	f107 030c 	add.w	r3, r7, #12
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019e8:	f002 fb68 	bl	80040bc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ec:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <SystemClock_Config+0xc8>)
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	4a26      	ldr	r2, [pc, #152]	; (8001a8c <SystemClock_Config+0xc8>)
 80019f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f6:	6413      	str	r3, [r2, #64]	; 0x40
 80019f8:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <SystemClock_Config+0xc8>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a04:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <SystemClock_Config+0xcc>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a0c:	4a20      	ldr	r2, [pc, #128]	; (8001a90 <SystemClock_Config+0xcc>)
 8001a0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <SystemClock_Config+0xcc>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a20:	2301      	movs	r3, #1
 8001a22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a24:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a34:	2304      	movs	r3, #4
 8001a36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001a38:	2348      	movs	r3, #72	; 0x48
 8001a3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a40:	2303      	movs	r3, #3
 8001a42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a44:	f107 0320 	add.w	r3, r7, #32
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f002 fb47 	bl	80040dc <HAL_RCC_OscConfig>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a54:	f000 fa08 	bl	8001e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a58:	230f      	movs	r3, #15
 8001a5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	2102      	movs	r1, #2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f002 fdd5 	bl	8004624 <HAL_RCC_ClockConfig>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a80:	f000 f9f2 	bl	8001e68 <Error_Handler>
  }
}
 8001a84:	bf00      	nop
 8001a86:	3750      	adds	r7, #80	; 0x50
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40007000 	.word	0x40007000

08001a94 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001a98:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <MX_ETH_Init+0x84>)
 8001a9a:	4a20      	ldr	r2, [pc, #128]	; (8001b1c <MX_ETH_Init+0x88>)
 8001a9c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <MX_ETH_Init+0x8c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001aa4:	4b1e      	ldr	r3, [pc, #120]	; (8001b20 <MX_ETH_Init+0x8c>)
 8001aa6:	2280      	movs	r2, #128	; 0x80
 8001aa8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <MX_ETH_Init+0x8c>)
 8001aac:	22e1      	movs	r2, #225	; 0xe1
 8001aae:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <MX_ETH_Init+0x8c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <MX_ETH_Init+0x8c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001abc:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <MX_ETH_Init+0x8c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <MX_ETH_Init+0x84>)
 8001ac4:	4a16      	ldr	r2, [pc, #88]	; (8001b20 <MX_ETH_Init+0x8c>)
 8001ac6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001ac8:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <MX_ETH_Init+0x84>)
 8001aca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001ace:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <MX_ETH_Init+0x84>)
 8001ad2:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <MX_ETH_Init+0x90>)
 8001ad4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <MX_ETH_Init+0x84>)
 8001ad8:	4a13      	ldr	r2, [pc, #76]	; (8001b28 <MX_ETH_Init+0x94>)
 8001ada:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001adc:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <MX_ETH_Init+0x84>)
 8001ade:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001ae2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001ae4:	480c      	ldr	r0, [pc, #48]	; (8001b18 <MX_ETH_Init+0x84>)
 8001ae6:	f000 fec5 	bl	8002874 <HAL_ETH_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001af0:	f000 f9ba 	bl	8001e68 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001af4:	2238      	movs	r2, #56	; 0x38
 8001af6:	2100      	movs	r1, #0
 8001af8:	480c      	ldr	r0, [pc, #48]	; (8001b2c <MX_ETH_Init+0x98>)
 8001afa:	f005 f9b5 	bl	8006e68 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <MX_ETH_Init+0x98>)
 8001b00:	2221      	movs	r2, #33	; 0x21
 8001b02:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <MX_ETH_Init+0x98>)
 8001b06:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001b0a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <MX_ETH_Init+0x98>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000394 	.word	0x20000394
 8001b1c:	40028000 	.word	0x40028000
 8001b20:	20000ae0 	.word	0x20000ae0
 8001b24:	2000027c 	.word	0x2000027c
 8001b28:	200001dc 	.word	0x200001dc
 8001b2c:	2000035c 	.word	0x2000035c

08001b30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b34:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <MX_I2C1_Init+0x74>)
 8001b36:	4a1c      	ldr	r2, [pc, #112]	; (8001ba8 <MX_I2C1_Init+0x78>)
 8001b38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001b3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <MX_I2C1_Init+0x74>)
 8001b3c:	4a1b      	ldr	r2, [pc, #108]	; (8001bac <MX_I2C1_Init+0x7c>)
 8001b3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b40:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <MX_I2C1_Init+0x74>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b46:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <MX_I2C1_Init+0x74>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b4c:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <MX_I2C1_Init+0x74>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b52:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <MX_I2C1_Init+0x74>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <MX_I2C1_Init+0x74>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <MX_I2C1_Init+0x74>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <MX_I2C1_Init+0x74>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b6a:	480e      	ldr	r0, [pc, #56]	; (8001ba4 <MX_I2C1_Init+0x74>)
 8001b6c:	f001 fb6e 	bl	800324c <HAL_I2C_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b76:	f000 f977 	bl	8001e68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4809      	ldr	r0, [pc, #36]	; (8001ba4 <MX_I2C1_Init+0x74>)
 8001b7e:	f002 f8bd 	bl	8003cfc <HAL_I2CEx_ConfigAnalogFilter>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b88:	f000 f96e 	bl	8001e68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_I2C1_Init+0x74>)
 8001b90:	f002 f8ff 	bl	8003d92 <HAL_I2CEx_ConfigDigitalFilter>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b9a:	f000 f965 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000444 	.word	0x20000444
 8001ba8:	40005400 	.word	0x40005400
 8001bac:	00808cd2 	.word	0x00808cd2

08001bb0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
 8001bd0:	615a      	str	r2, [r3, #20]
 8001bd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bd4:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <MX_TIM3_Init+0xb0>)
 8001bd6:	4a23      	ldr	r2, [pc, #140]	; (8001c64 <MX_TIM3_Init+0xb4>)
 8001bd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001bda:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <MX_TIM3_Init+0xb0>)
 8001bdc:	2247      	movs	r2, #71	; 0x47
 8001bde:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be0:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <MX_TIM3_Init+0xb0>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001be6:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <MX_TIM3_Init+0xb0>)
 8001be8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bee:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <MX_TIM3_Init+0xb0>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <MX_TIM3_Init+0xb0>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bfa:	4819      	ldr	r0, [pc, #100]	; (8001c60 <MX_TIM3_Init+0xb0>)
 8001bfc:	f003 fb28 	bl	8005250 <HAL_TIM_PWM_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001c06:	f000 f92f 	bl	8001e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c12:	f107 031c 	add.w	r3, r7, #28
 8001c16:	4619      	mov	r1, r3
 8001c18:	4811      	ldr	r0, [pc, #68]	; (8001c60 <MX_TIM3_Init+0xb0>)
 8001c1a:	f004 f8a3 	bl	8005d64 <HAL_TIMEx_MasterConfigSynchronization>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001c24:	f000 f920 	bl	8001e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c28:	2360      	movs	r3, #96	; 0x60
 8001c2a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 900;
 8001c2c:	f44f 7361 	mov.w	r3, #900	; 0x384
 8001c30:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4807      	ldr	r0, [pc, #28]	; (8001c60 <MX_TIM3_Init+0xb0>)
 8001c42:	f003 fc57 	bl	80054f4 <HAL_TIM_PWM_ConfigChannel>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001c4c:	f000 f90c 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c50:	4803      	ldr	r0, [pc, #12]	; (8001c60 <MX_TIM3_Init+0xb0>)
 8001c52:	f000 fa6b 	bl	800212c <HAL_TIM_MspPostInit>

}
 8001c56:	bf00      	nop
 8001c58:	3728      	adds	r7, #40	; 0x28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000498 	.word	0x20000498
 8001c64:	40000400 	.word	0x40000400

08001c68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c6c:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001c6e:	4a15      	ldr	r2, [pc, #84]	; (8001cc4 <MX_USART3_UART_Init+0x5c>)
 8001c70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c72:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001c74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7a:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c86:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001c8e:	220c      	movs	r2, #12
 8001c90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c92:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c9e:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001caa:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001cac:	f004 f8e8 	bl	8005e80 <HAL_UART_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001cb6:	f000 f8d7 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200004e4 	.word	0x200004e4
 8001cc4:	40004800 	.word	0x40004800

08001cc8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001ccc:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001cd2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cd6:	2206      	movs	r2, #6
 8001cd8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001cda:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cdc:	2202      	movs	r2, #2
 8001cde:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ce8:	2202      	movs	r2, #2
 8001cea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001cfe:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001d0a:	4805      	ldr	r0, [pc, #20]	; (8001d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d0c:	f002 f88d 	bl	8003e2a <HAL_PCD_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001d16:	f000 f8a7 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	2000056c 	.word	0x2000056c

08001d24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08c      	sub	sp, #48	; 0x30
 8001d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2a:	f107 031c 	add.w	r3, r7, #28
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	60da      	str	r2, [r3, #12]
 8001d38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3a:	4b47      	ldr	r3, [pc, #284]	; (8001e58 <MX_GPIO_Init+0x134>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a46      	ldr	r2, [pc, #280]	; (8001e58 <MX_GPIO_Init+0x134>)
 8001d40:	f043 0304 	orr.w	r3, r3, #4
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b44      	ldr	r3, [pc, #272]	; (8001e58 <MX_GPIO_Init+0x134>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	61bb      	str	r3, [r7, #24]
 8001d50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d52:	4b41      	ldr	r3, [pc, #260]	; (8001e58 <MX_GPIO_Init+0x134>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a40      	ldr	r2, [pc, #256]	; (8001e58 <MX_GPIO_Init+0x134>)
 8001d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5e:	4b3e      	ldr	r3, [pc, #248]	; (8001e58 <MX_GPIO_Init+0x134>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	4b3b      	ldr	r3, [pc, #236]	; (8001e58 <MX_GPIO_Init+0x134>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a3a      	ldr	r2, [pc, #232]	; (8001e58 <MX_GPIO_Init+0x134>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <MX_GPIO_Init+0x134>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d82:	4b35      	ldr	r3, [pc, #212]	; (8001e58 <MX_GPIO_Init+0x134>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a34      	ldr	r2, [pc, #208]	; (8001e58 <MX_GPIO_Init+0x134>)
 8001d88:	f043 0302 	orr.w	r3, r3, #2
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b32      	ldr	r3, [pc, #200]	; (8001e58 <MX_GPIO_Init+0x134>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d9a:	4b2f      	ldr	r3, [pc, #188]	; (8001e58 <MX_GPIO_Init+0x134>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a2e      	ldr	r2, [pc, #184]	; (8001e58 <MX_GPIO_Init+0x134>)
 8001da0:	f043 0308 	orr.w	r3, r3, #8
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <MX_GPIO_Init+0x134>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001db2:	4b29      	ldr	r3, [pc, #164]	; (8001e58 <MX_GPIO_Init+0x134>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a28      	ldr	r2, [pc, #160]	; (8001e58 <MX_GPIO_Init+0x134>)
 8001db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b26      	ldr	r3, [pc, #152]	; (8001e58 <MX_GPIO_Init+0x134>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f244 0181 	movw	r1, #16513	; 0x4081
 8001dd0:	4822      	ldr	r0, [pc, #136]	; (8001e5c <MX_GPIO_Init+0x138>)
 8001dd2:	f001 fa21 	bl	8003218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2140      	movs	r1, #64	; 0x40
 8001dda:	4821      	ldr	r0, [pc, #132]	; (8001e60 <MX_GPIO_Init+0x13c>)
 8001ddc:	f001 fa1c 	bl	8003218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001de0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001de6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001df0:	f107 031c 	add.w	r3, r7, #28
 8001df4:	4619      	mov	r1, r3
 8001df6:	481b      	ldr	r0, [pc, #108]	; (8001e64 <MX_GPIO_Init+0x140>)
 8001df8:	f001 f862 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001dfc:	f244 0381 	movw	r3, #16513	; 0x4081
 8001e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e02:	2301      	movs	r3, #1
 8001e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0e:	f107 031c 	add.w	r3, r7, #28
 8001e12:	4619      	mov	r1, r3
 8001e14:	4811      	ldr	r0, [pc, #68]	; (8001e5c <MX_GPIO_Init+0x138>)
 8001e16:	f001 f853 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001e1a:	2340      	movs	r3, #64	; 0x40
 8001e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e26:	2300      	movs	r3, #0
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e2a:	f107 031c 	add.w	r3, r7, #28
 8001e2e:	4619      	mov	r1, r3
 8001e30:	480b      	ldr	r0, [pc, #44]	; (8001e60 <MX_GPIO_Init+0x13c>)
 8001e32:	f001 f845 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001e36:	2380      	movs	r3, #128	; 0x80
 8001e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e42:	f107 031c 	add.w	r3, r7, #28
 8001e46:	4619      	mov	r1, r3
 8001e48:	4805      	ldr	r0, [pc, #20]	; (8001e60 <MX_GPIO_Init+0x13c>)
 8001e4a:	f001 f839 	bl	8002ec0 <HAL_GPIO_Init>

}
 8001e4e:	bf00      	nop
 8001e50:	3730      	adds	r7, #48	; 0x30
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020400 	.word	0x40020400
 8001e60:	40021800 	.word	0x40021800
 8001e64:	40020800 	.word	0x40020800

08001e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e6c:	b672      	cpsid	i
}
 8001e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <Error_Handler+0x8>
	...

08001e74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <HAL_MspInit+0x44>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	4a0e      	ldr	r2, [pc, #56]	; (8001eb8 <HAL_MspInit+0x44>)
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e84:	6413      	str	r3, [r2, #64]	; 0x40
 8001e86:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <HAL_MspInit+0x44>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <HAL_MspInit+0x44>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	4a08      	ldr	r2, [pc, #32]	; (8001eb8 <HAL_MspInit+0x44>)
 8001e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_MspInit+0x44>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800

08001ebc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08e      	sub	sp, #56	; 0x38
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a4e      	ldr	r2, [pc, #312]	; (8002014 <HAL_ETH_MspInit+0x158>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	f040 8096 	bne.w	800200c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001ee0:	4b4d      	ldr	r3, [pc, #308]	; (8002018 <HAL_ETH_MspInit+0x15c>)
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	4a4c      	ldr	r2, [pc, #304]	; (8002018 <HAL_ETH_MspInit+0x15c>)
 8001ee6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eea:	6313      	str	r3, [r2, #48]	; 0x30
 8001eec:	4b4a      	ldr	r3, [pc, #296]	; (8002018 <HAL_ETH_MspInit+0x15c>)
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef4:	623b      	str	r3, [r7, #32]
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	4b47      	ldr	r3, [pc, #284]	; (8002018 <HAL_ETH_MspInit+0x15c>)
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	4a46      	ldr	r2, [pc, #280]	; (8002018 <HAL_ETH_MspInit+0x15c>)
 8001efe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f02:	6313      	str	r3, [r2, #48]	; 0x30
 8001f04:	4b44      	ldr	r3, [pc, #272]	; (8002018 <HAL_ETH_MspInit+0x15c>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f0c:	61fb      	str	r3, [r7, #28]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	4b41      	ldr	r3, [pc, #260]	; (8002018 <HAL_ETH_MspInit+0x15c>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	4a40      	ldr	r2, [pc, #256]	; (8002018 <HAL_ETH_MspInit+0x15c>)
 8001f16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1c:	4b3e      	ldr	r3, [pc, #248]	; (8002018 <HAL_ETH_MspInit+0x15c>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f28:	4b3b      	ldr	r3, [pc, #236]	; (8002018 <HAL_ETH_MspInit+0x15c>)
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2c:	4a3a      	ldr	r2, [pc, #232]	; (8002018 <HAL_ETH_MspInit+0x15c>)
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	6313      	str	r3, [r2, #48]	; 0x30
 8001f34:	4b38      	ldr	r3, [pc, #224]	; (8002018 <HAL_ETH_MspInit+0x15c>)
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f40:	4b35      	ldr	r3, [pc, #212]	; (8002018 <HAL_ETH_MspInit+0x15c>)
 8001f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f44:	4a34      	ldr	r2, [pc, #208]	; (8002018 <HAL_ETH_MspInit+0x15c>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4c:	4b32      	ldr	r3, [pc, #200]	; (8002018 <HAL_ETH_MspInit+0x15c>)
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f58:	4b2f      	ldr	r3, [pc, #188]	; (8002018 <HAL_ETH_MspInit+0x15c>)
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5c:	4a2e      	ldr	r2, [pc, #184]	; (8002018 <HAL_ETH_MspInit+0x15c>)
 8001f5e:	f043 0302 	orr.w	r3, r3, #2
 8001f62:	6313      	str	r3, [r2, #48]	; 0x30
 8001f64:	4b2c      	ldr	r3, [pc, #176]	; (8002018 <HAL_ETH_MspInit+0x15c>)
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f70:	4b29      	ldr	r3, [pc, #164]	; (8002018 <HAL_ETH_MspInit+0x15c>)
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	4a28      	ldr	r2, [pc, #160]	; (8002018 <HAL_ETH_MspInit+0x15c>)
 8001f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7c:	4b26      	ldr	r3, [pc, #152]	; (8002018 <HAL_ETH_MspInit+0x15c>)
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001f88:	2332      	movs	r3, #50	; 0x32
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f94:	2303      	movs	r3, #3
 8001f96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f98:	230b      	movs	r3, #11
 8001f9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	481e      	ldr	r0, [pc, #120]	; (800201c <HAL_ETH_MspInit+0x160>)
 8001fa4:	f000 ff8c 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001fa8:	2386      	movs	r3, #134	; 0x86
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fb8:	230b      	movs	r3, #11
 8001fba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4817      	ldr	r0, [pc, #92]	; (8002020 <HAL_ETH_MspInit+0x164>)
 8001fc4:	f000 ff7c 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001fc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fda:	230b      	movs	r3, #11
 8001fdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480f      	ldr	r0, [pc, #60]	; (8002024 <HAL_ETH_MspInit+0x168>)
 8001fe6:	f000 ff6b 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001fea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ffc:	230b      	movs	r3, #11
 8001ffe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002004:	4619      	mov	r1, r3
 8002006:	4808      	ldr	r0, [pc, #32]	; (8002028 <HAL_ETH_MspInit+0x16c>)
 8002008:	f000 ff5a 	bl	8002ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800200c:	bf00      	nop
 800200e:	3738      	adds	r7, #56	; 0x38
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40028000 	.word	0x40028000
 8002018:	40023800 	.word	0x40023800
 800201c:	40020800 	.word	0x40020800
 8002020:	40020000 	.word	0x40020000
 8002024:	40020400 	.word	0x40020400
 8002028:	40021800 	.word	0x40021800

0800202c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b0aa      	sub	sp, #168	; 0xa8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002044:	f107 0310 	add.w	r3, r7, #16
 8002048:	2284      	movs	r2, #132	; 0x84
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f004 ff0b 	bl	8006e68 <memset>
  if(hi2c->Instance==I2C1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a22      	ldr	r2, [pc, #136]	; (80020e0 <HAL_I2C_MspInit+0xb4>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d13c      	bne.n	80020d6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800205c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002060:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002062:	2300      	movs	r3, #0
 8002064:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002066:	f107 0310 	add.w	r3, r7, #16
 800206a:	4618      	mov	r0, r3
 800206c:	f002 fd00 	bl	8004a70 <HAL_RCCEx_PeriphCLKConfig>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002076:	f7ff fef7 	bl	8001e68 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <HAL_I2C_MspInit+0xb8>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	4a19      	ldr	r2, [pc, #100]	; (80020e4 <HAL_I2C_MspInit+0xb8>)
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	6313      	str	r3, [r2, #48]	; 0x30
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <HAL_I2C_MspInit+0xb8>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002092:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002096:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800209a:	2312      	movs	r3, #18
 800209c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a6:	2303      	movs	r3, #3
 80020a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020ac:	2304      	movs	r3, #4
 80020ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80020b6:	4619      	mov	r1, r3
 80020b8:	480b      	ldr	r0, [pc, #44]	; (80020e8 <HAL_I2C_MspInit+0xbc>)
 80020ba:	f000 ff01 	bl	8002ec0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <HAL_I2C_MspInit+0xb8>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	4a08      	ldr	r2, [pc, #32]	; (80020e4 <HAL_I2C_MspInit+0xb8>)
 80020c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020c8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_I2C_MspInit+0xb8>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020d6:	bf00      	nop
 80020d8:	37a8      	adds	r7, #168	; 0xa8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40005400 	.word	0x40005400
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40020400 	.word	0x40020400

080020ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <HAL_TIM_PWM_MspInit+0x38>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d10b      	bne.n	8002116 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_TIM_PWM_MspInit+0x3c>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	4a09      	ldr	r2, [pc, #36]	; (8002128 <HAL_TIM_PWM_MspInit+0x3c>)
 8002104:	f043 0302 	orr.w	r3, r3, #2
 8002108:	6413      	str	r3, [r2, #64]	; 0x40
 800210a:	4b07      	ldr	r3, [pc, #28]	; (8002128 <HAL_TIM_PWM_MspInit+0x3c>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40000400 	.word	0x40000400
 8002128:	40023800 	.word	0x40023800

0800212c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 030c 	add.w	r3, r7, #12
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a11      	ldr	r2, [pc, #68]	; (8002190 <HAL_TIM_MspPostInit+0x64>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d11b      	bne.n	8002186 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800214e:	4b11      	ldr	r3, [pc, #68]	; (8002194 <HAL_TIM_MspPostInit+0x68>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a10      	ldr	r2, [pc, #64]	; (8002194 <HAL_TIM_MspPostInit+0x68>)
 8002154:	f043 0304 	orr.w	r3, r3, #4
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <HAL_TIM_MspPostInit+0x68>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002166:	2340      	movs	r3, #64	; 0x40
 8002168:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216a:	2302      	movs	r3, #2
 800216c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002176:	2302      	movs	r3, #2
 8002178:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800217a:	f107 030c 	add.w	r3, r7, #12
 800217e:	4619      	mov	r1, r3
 8002180:	4805      	ldr	r0, [pc, #20]	; (8002198 <HAL_TIM_MspPostInit+0x6c>)
 8002182:	f000 fe9d 	bl	8002ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002186:	bf00      	nop
 8002188:	3720      	adds	r7, #32
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40000400 	.word	0x40000400
 8002194:	40023800 	.word	0x40023800
 8002198:	40020800 	.word	0x40020800

0800219c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b0aa      	sub	sp, #168	; 0xa8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021b4:	f107 0310 	add.w	r3, r7, #16
 80021b8:	2284      	movs	r2, #132	; 0x84
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f004 fe53 	bl	8006e68 <memset>
  if(huart->Instance==USART3)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a22      	ldr	r2, [pc, #136]	; (8002250 <HAL_UART_MspInit+0xb4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d13c      	bne.n	8002246 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80021cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021d0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021d2:	2300      	movs	r3, #0
 80021d4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021d6:	f107 0310 	add.w	r3, r7, #16
 80021da:	4618      	mov	r0, r3
 80021dc:	f002 fc48 	bl	8004a70 <HAL_RCCEx_PeriphCLKConfig>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80021e6:	f7ff fe3f 	bl	8001e68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021ea:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <HAL_UART_MspInit+0xb8>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	4a19      	ldr	r2, [pc, #100]	; (8002254 <HAL_UART_MspInit+0xb8>)
 80021f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f4:	6413      	str	r3, [r2, #64]	; 0x40
 80021f6:	4b17      	ldr	r3, [pc, #92]	; (8002254 <HAL_UART_MspInit+0xb8>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002202:	4b14      	ldr	r3, [pc, #80]	; (8002254 <HAL_UART_MspInit+0xb8>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a13      	ldr	r2, [pc, #76]	; (8002254 <HAL_UART_MspInit+0xb8>)
 8002208:	f043 0308 	orr.w	r3, r3, #8
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b11      	ldr	r3, [pc, #68]	; (8002254 <HAL_UART_MspInit+0xb8>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800221a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800221e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002228:	2301      	movs	r3, #1
 800222a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222e:	2303      	movs	r3, #3
 8002230:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002234:	2307      	movs	r3, #7
 8002236:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800223a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800223e:	4619      	mov	r1, r3
 8002240:	4805      	ldr	r0, [pc, #20]	; (8002258 <HAL_UART_MspInit+0xbc>)
 8002242:	f000 fe3d 	bl	8002ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002246:	bf00      	nop
 8002248:	37a8      	adds	r7, #168	; 0xa8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40004800 	.word	0x40004800
 8002254:	40023800 	.word	0x40023800
 8002258:	40020c00 	.word	0x40020c00

0800225c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b0ac      	sub	sp, #176	; 0xb0
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002274:	f107 0318 	add.w	r3, r7, #24
 8002278:	2284      	movs	r2, #132	; 0x84
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f004 fdf3 	bl	8006e68 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800228a:	d159      	bne.n	8002340 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800228c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002290:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002292:	2300      	movs	r3, #0
 8002294:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002298:	f107 0318 	add.w	r3, r7, #24
 800229c:	4618      	mov	r0, r3
 800229e:	f002 fbe7 	bl	8004a70 <HAL_RCCEx_PeriphCLKConfig>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80022a8:	f7ff fdde 	bl	8001e68 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ac:	4b26      	ldr	r3, [pc, #152]	; (8002348 <HAL_PCD_MspInit+0xec>)
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	4a25      	ldr	r2, [pc, #148]	; (8002348 <HAL_PCD_MspInit+0xec>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6313      	str	r3, [r2, #48]	; 0x30
 80022b8:	4b23      	ldr	r3, [pc, #140]	; (8002348 <HAL_PCD_MspInit+0xec>)
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80022c4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80022c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022cc:	2302      	movs	r3, #2
 80022ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d8:	2303      	movs	r3, #3
 80022da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80022de:	230a      	movs	r3, #10
 80022e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022e8:	4619      	mov	r1, r3
 80022ea:	4818      	ldr	r0, [pc, #96]	; (800234c <HAL_PCD_MspInit+0xf0>)
 80022ec:	f000 fde8 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80022f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002304:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002308:	4619      	mov	r1, r3
 800230a:	4810      	ldr	r0, [pc, #64]	; (800234c <HAL_PCD_MspInit+0xf0>)
 800230c:	f000 fdd8 	bl	8002ec0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002310:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <HAL_PCD_MspInit+0xec>)
 8002312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002314:	4a0c      	ldr	r2, [pc, #48]	; (8002348 <HAL_PCD_MspInit+0xec>)
 8002316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800231a:	6353      	str	r3, [r2, #52]	; 0x34
 800231c:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <HAL_PCD_MspInit+0xec>)
 800231e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4b07      	ldr	r3, [pc, #28]	; (8002348 <HAL_PCD_MspInit+0xec>)
 800232a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232c:	4a06      	ldr	r2, [pc, #24]	; (8002348 <HAL_PCD_MspInit+0xec>)
 800232e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002332:	6453      	str	r3, [r2, #68]	; 0x44
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <HAL_PCD_MspInit+0xec>)
 8002336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002340:	bf00      	nop
 8002342:	37b0      	adds	r7, #176	; 0xb0
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40023800 	.word	0x40023800
 800234c:	40020000 	.word	0x40020000

08002350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002354:	e7fe      	b.n	8002354 <NMI_Handler+0x4>

08002356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800235a:	e7fe      	b.n	800235a <HardFault_Handler+0x4>

0800235c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002360:	e7fe      	b.n	8002360 <MemManage_Handler+0x4>

08002362 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002366:	e7fe      	b.n	8002366 <BusFault_Handler+0x4>

08002368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800236c:	e7fe      	b.n	800236c <UsageFault_Handler+0x4>

0800236e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800239c:	f000 f940 	bl	8002620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return 1;
 80023a8:	2301      	movs	r3, #1
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <_kill>:

int _kill(int pid, int sig)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023be:	f004 fd29 	bl	8006e14 <__errno>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2216      	movs	r2, #22
 80023c6:	601a      	str	r2, [r3, #0]
  return -1;
 80023c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <_exit>:

void _exit (int status)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023dc:	f04f 31ff 	mov.w	r1, #4294967295
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff ffe7 	bl	80023b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023e6:	e7fe      	b.n	80023e6 <_exit+0x12>

080023e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	e00a      	b.n	8002410 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023fa:	f3af 8000 	nop.w
 80023fe:	4601      	mov	r1, r0
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	60ba      	str	r2, [r7, #8]
 8002406:	b2ca      	uxtb	r2, r1
 8002408:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	3301      	adds	r3, #1
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	429a      	cmp	r2, r3
 8002416:	dbf0      	blt.n	80023fa <_read+0x12>
  }

  return len;
 8002418:	687b      	ldr	r3, [r7, #4]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b086      	sub	sp, #24
 8002426:	af00      	add	r7, sp, #0
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	e009      	b.n	8002448 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	60ba      	str	r2, [r7, #8]
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	3301      	adds	r3, #1
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	429a      	cmp	r2, r3
 800244e:	dbf1      	blt.n	8002434 <_write+0x12>
  }
  return len;
 8002450:	687b      	ldr	r3, [r7, #4]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <_close>:

int _close(int file)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002462:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002482:	605a      	str	r2, [r3, #4]
  return 0;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <_isatty>:

int _isatty(int file)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800249a:	2301      	movs	r3, #1
}
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024cc:	4a14      	ldr	r2, [pc, #80]	; (8002520 <_sbrk+0x5c>)
 80024ce:	4b15      	ldr	r3, [pc, #84]	; (8002524 <_sbrk+0x60>)
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024d8:	4b13      	ldr	r3, [pc, #76]	; (8002528 <_sbrk+0x64>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d102      	bne.n	80024e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024e0:	4b11      	ldr	r3, [pc, #68]	; (8002528 <_sbrk+0x64>)
 80024e2:	4a12      	ldr	r2, [pc, #72]	; (800252c <_sbrk+0x68>)
 80024e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024e6:	4b10      	ldr	r3, [pc, #64]	; (8002528 <_sbrk+0x64>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d207      	bcs.n	8002504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024f4:	f004 fc8e 	bl	8006e14 <__errno>
 80024f8:	4603      	mov	r3, r0
 80024fa:	220c      	movs	r2, #12
 80024fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002502:	e009      	b.n	8002518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002504:	4b08      	ldr	r3, [pc, #32]	; (8002528 <_sbrk+0x64>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800250a:	4b07      	ldr	r3, [pc, #28]	; (8002528 <_sbrk+0x64>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	4a05      	ldr	r2, [pc, #20]	; (8002528 <_sbrk+0x64>)
 8002514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002516:	68fb      	ldr	r3, [r7, #12]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20050000 	.word	0x20050000
 8002524:	00000400 	.word	0x00000400
 8002528:	20000ae8 	.word	0x20000ae8
 800252c:	20000b00 	.word	0x20000b00

08002530 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002534:	4b06      	ldr	r3, [pc, #24]	; (8002550 <SystemInit+0x20>)
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253a:	4a05      	ldr	r2, [pc, #20]	; (8002550 <SystemInit+0x20>)
 800253c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800258c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002558:	480d      	ldr	r0, [pc, #52]	; (8002590 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800255a:	490e      	ldr	r1, [pc, #56]	; (8002594 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800255c:	4a0e      	ldr	r2, [pc, #56]	; (8002598 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800255e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002560:	e002      	b.n	8002568 <LoopCopyDataInit>

08002562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002566:	3304      	adds	r3, #4

08002568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800256a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800256c:	d3f9      	bcc.n	8002562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800256e:	4a0b      	ldr	r2, [pc, #44]	; (800259c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002570:	4c0b      	ldr	r4, [pc, #44]	; (80025a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002574:	e001      	b.n	800257a <LoopFillZerobss>

08002576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002578:	3204      	adds	r2, #4

0800257a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800257a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800257c:	d3fb      	bcc.n	8002576 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800257e:	f7ff ffd7 	bl	8002530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002582:	f004 fc4d 	bl	8006e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002586:	f7ff f9cd 	bl	8001924 <main>
  bx  lr    
 800258a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800258c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002594:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002598:	0800a09c 	.word	0x0800a09c
  ldr r2, =_sbss
 800259c:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 80025a0:	20000b00 	.word	0x20000b00

080025a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025a4:	e7fe      	b.n	80025a4 <ADC_IRQHandler>

080025a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025aa:	2003      	movs	r0, #3
 80025ac:	f000 f92e 	bl	800280c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025b0:	2000      	movs	r0, #0
 80025b2:	f000 f805 	bl	80025c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025b6:	f7ff fc5d 	bl	8001e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <HAL_InitTick+0x54>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b12      	ldr	r3, [pc, #72]	; (8002618 <HAL_InitTick+0x58>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	4619      	mov	r1, r3
 80025d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025da:	fbb2 f3f3 	udiv	r3, r2, r3
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 f93b 	bl	800285a <HAL_SYSTICK_Config>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e00e      	b.n	800260c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b0f      	cmp	r3, #15
 80025f2:	d80a      	bhi.n	800260a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025f4:	2200      	movs	r2, #0
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	f04f 30ff 	mov.w	r0, #4294967295
 80025fc:	f000 f911 	bl	8002822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002600:	4a06      	ldr	r2, [pc, #24]	; (800261c <HAL_InitTick+0x5c>)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	e000      	b.n	800260c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000000 	.word	0x20000000
 8002618:	20000008 	.word	0x20000008
 800261c:	20000004 	.word	0x20000004

08002620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_IncTick+0x20>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_IncTick+0x24>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4413      	add	r3, r2
 8002630:	4a04      	ldr	r2, [pc, #16]	; (8002644 <HAL_IncTick+0x24>)
 8002632:	6013      	str	r3, [r2, #0]
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000008 	.word	0x20000008
 8002644:	20000aec 	.word	0x20000aec

08002648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return uwTick;
 800264c:	4b03      	ldr	r3, [pc, #12]	; (800265c <HAL_GetTick+0x14>)
 800264e:	681b      	ldr	r3, [r3, #0]
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000aec 	.word	0x20000aec

08002660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002668:	f7ff ffee 	bl	8002648 <HAL_GetTick>
 800266c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d005      	beq.n	8002686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800267a:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <HAL_Delay+0x44>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4413      	add	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002686:	bf00      	nop
 8002688:	f7ff ffde 	bl	8002648 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	429a      	cmp	r2, r3
 8002696:	d8f7      	bhi.n	8002688 <HAL_Delay+0x28>
  {
  }
}
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000008 	.word	0x20000008

080026a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <__NVIC_SetPriorityGrouping+0x40>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026c4:	4013      	ands	r3, r2
 80026c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <__NVIC_SetPriorityGrouping+0x44>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d6:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <__NVIC_SetPriorityGrouping+0x40>)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	60d3      	str	r3, [r2, #12]
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000ed00 	.word	0xe000ed00
 80026ec:	05fa0000 	.word	0x05fa0000

080026f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <__NVIC_GetPriorityGrouping+0x18>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	f003 0307 	and.w	r3, r3, #7
}
 80026fe:	4618      	mov	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	6039      	str	r1, [r7, #0]
 8002716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271c:	2b00      	cmp	r3, #0
 800271e:	db0a      	blt.n	8002736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	b2da      	uxtb	r2, r3
 8002724:	490c      	ldr	r1, [pc, #48]	; (8002758 <__NVIC_SetPriority+0x4c>)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	0112      	lsls	r2, r2, #4
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	440b      	add	r3, r1
 8002730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002734:	e00a      	b.n	800274c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4908      	ldr	r1, [pc, #32]	; (800275c <__NVIC_SetPriority+0x50>)
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	3b04      	subs	r3, #4
 8002744:	0112      	lsls	r2, r2, #4
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	440b      	add	r3, r1
 800274a:	761a      	strb	r2, [r3, #24]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000e100 	.word	0xe000e100
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002760:	b480      	push	{r7}
 8002762:	b089      	sub	sp, #36	; 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f1c3 0307 	rsb	r3, r3, #7
 800277a:	2b04      	cmp	r3, #4
 800277c:	bf28      	it	cs
 800277e:	2304      	movcs	r3, #4
 8002780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3304      	adds	r3, #4
 8002786:	2b06      	cmp	r3, #6
 8002788:	d902      	bls.n	8002790 <NVIC_EncodePriority+0x30>
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3b03      	subs	r3, #3
 800278e:	e000      	b.n	8002792 <NVIC_EncodePriority+0x32>
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002794:	f04f 32ff 	mov.w	r2, #4294967295
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43da      	mvns	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	401a      	ands	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	fa01 f303 	lsl.w	r3, r1, r3
 80027b2:	43d9      	mvns	r1, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	4313      	orrs	r3, r2
         );
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3724      	adds	r7, #36	; 0x24
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d8:	d301      	bcc.n	80027de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027da:	2301      	movs	r3, #1
 80027dc:	e00f      	b.n	80027fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027de:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <SysTick_Config+0x40>)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027e6:	210f      	movs	r1, #15
 80027e8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ec:	f7ff ff8e 	bl	800270c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <SysTick_Config+0x40>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f6:	4b04      	ldr	r3, [pc, #16]	; (8002808 <SysTick_Config+0x40>)
 80027f8:	2207      	movs	r2, #7
 80027fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	e000e010 	.word	0xe000e010

0800280c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff ff47 	bl	80026a8 <__NVIC_SetPriorityGrouping>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002822:	b580      	push	{r7, lr}
 8002824:	b086      	sub	sp, #24
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002834:	f7ff ff5c 	bl	80026f0 <__NVIC_GetPriorityGrouping>
 8002838:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	6978      	ldr	r0, [r7, #20]
 8002840:	f7ff ff8e 	bl	8002760 <NVIC_EncodePriority>
 8002844:	4602      	mov	r2, r0
 8002846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800284a:	4611      	mov	r1, r2
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff5d 	bl	800270c <__NVIC_SetPriority>
}
 8002852:	bf00      	nop
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff ffb0 	bl	80027c8 <SysTick_Config>
 8002868:	4603      	mov	r3, r0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e06a      	b.n	800295c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800288c:	2b00      	cmp	r3, #0
 800288e:	d106      	bne.n	800289e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2223      	movs	r2, #35	; 0x23
 8002894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff fb0f 	bl	8001ebc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289e:	4b31      	ldr	r3, [pc, #196]	; (8002964 <HAL_ETH_Init+0xf0>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	4a30      	ldr	r2, [pc, #192]	; (8002964 <HAL_ETH_Init+0xf0>)
 80028a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a8:	6453      	str	r3, [r2, #68]	; 0x44
 80028aa:	4b2e      	ldr	r3, [pc, #184]	; (8002964 <HAL_ETH_Init+0xf0>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80028b6:	4b2c      	ldr	r3, [pc, #176]	; (8002968 <HAL_ETH_Init+0xf4>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4a2b      	ldr	r2, [pc, #172]	; (8002968 <HAL_ETH_Init+0xf4>)
 80028bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028c0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80028c2:	4b29      	ldr	r3, [pc, #164]	; (8002968 <HAL_ETH_Init+0xf4>)
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	4927      	ldr	r1, [pc, #156]	; (8002968 <HAL_ETH_Init+0xf4>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80028d0:	4b25      	ldr	r3, [pc, #148]	; (8002968 <HAL_ETH_Init+0xf4>)
 80028d2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028ec:	f7ff feac 	bl	8002648 <HAL_GetTick>
 80028f0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80028f2:	e011      	b.n	8002918 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80028f4:	f7ff fea8 	bl	8002648 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002902:	d909      	bls.n	8002918 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2204      	movs	r2, #4
 8002908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	22e0      	movs	r2, #224	; 0xe0
 8002910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e021      	b.n	800295c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1e4      	bne.n	80028f4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f958 	bl	8002be0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f9ff 	bl	8002d34 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 fa55 	bl	8002de6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	461a      	mov	r2, r3
 8002942:	2100      	movs	r1, #0
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f9bd 	bl	8002cc4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2210      	movs	r2, #16
 8002956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40023800 	.word	0x40023800
 8002968:	40013800 	.word	0x40013800

0800296c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4b51      	ldr	r3, [pc, #324]	; (8002ac8 <ETH_SetMACConfig+0x15c>)
 8002982:	4013      	ands	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	7c1b      	ldrb	r3, [r3, #16]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d102      	bne.n	8002994 <ETH_SetMACConfig+0x28>
 800298e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002992:	e000      	b.n	8002996 <ETH_SetMACConfig+0x2a>
 8002994:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	7c5b      	ldrb	r3, [r3, #17]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d102      	bne.n	80029a4 <ETH_SetMACConfig+0x38>
 800299e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029a2:	e000      	b.n	80029a6 <ETH_SetMACConfig+0x3a>
 80029a4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80029a6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80029ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	7fdb      	ldrb	r3, [r3, #31]
 80029b2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80029b4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80029ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	7f92      	ldrb	r2, [r2, #30]
 80029c0:	2a00      	cmp	r2, #0
 80029c2:	d102      	bne.n	80029ca <ETH_SetMACConfig+0x5e>
 80029c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029c8:	e000      	b.n	80029cc <ETH_SetMACConfig+0x60>
 80029ca:	2200      	movs	r2, #0
                        macconf->Speed |
 80029cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	7f1b      	ldrb	r3, [r3, #28]
 80029d2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80029d4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80029da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	791b      	ldrb	r3, [r3, #4]
 80029e0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80029e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80029ea:	2a00      	cmp	r2, #0
 80029ec:	d102      	bne.n	80029f4 <ETH_SetMACConfig+0x88>
 80029ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029f2:	e000      	b.n	80029f6 <ETH_SetMACConfig+0x8a>
 80029f4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80029f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	7bdb      	ldrb	r3, [r3, #15]
 80029fc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80029fe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002a04:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a0c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a26:	2001      	movs	r0, #1
 8002a28:	f7ff fe1a 	bl	8002660 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002a42:	4013      	ands	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002a52:	2a00      	cmp	r2, #0
 8002a54:	d101      	bne.n	8002a5a <ETH_SetMACConfig+0xee>
 8002a56:	2280      	movs	r2, #128	; 0x80
 8002a58:	e000      	b.n	8002a5c <ETH_SetMACConfig+0xf0>
 8002a5a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a5c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002a6a:	2a01      	cmp	r2, #1
 8002a6c:	d101      	bne.n	8002a72 <ETH_SetMACConfig+0x106>
 8002a6e:	2208      	movs	r2, #8
 8002a70:	e000      	b.n	8002a74 <ETH_SetMACConfig+0x108>
 8002a72:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002a74:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002a7c:	2a01      	cmp	r2, #1
 8002a7e:	d101      	bne.n	8002a84 <ETH_SetMACConfig+0x118>
 8002a80:	2204      	movs	r2, #4
 8002a82:	e000      	b.n	8002a86 <ETH_SetMACConfig+0x11a>
 8002a84:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a86:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002a8e:	2a01      	cmp	r2, #1
 8002a90:	d101      	bne.n	8002a96 <ETH_SetMACConfig+0x12a>
 8002a92:	2202      	movs	r2, #2
 8002a94:	e000      	b.n	8002a98 <ETH_SetMACConfig+0x12c>
 8002a96:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	f7ff fdd5 	bl	8002660 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	619a      	str	r2, [r3, #24]
}
 8002abe:	bf00      	nop
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	ff20810f 	.word	0xff20810f

08002acc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4b3d      	ldr	r3, [pc, #244]	; (8002bdc <ETH_SetDMAConfig+0x110>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	7b1b      	ldrb	r3, [r3, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d102      	bne.n	8002af8 <ETH_SetDMAConfig+0x2c>
 8002af2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002af6:	e000      	b.n	8002afa <ETH_SetDMAConfig+0x2e>
 8002af8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	7b5b      	ldrb	r3, [r3, #13]
 8002afe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b00:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	7f52      	ldrb	r2, [r2, #29]
 8002b06:	2a00      	cmp	r2, #0
 8002b08:	d102      	bne.n	8002b10 <ETH_SetDMAConfig+0x44>
 8002b0a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b0e:	e000      	b.n	8002b12 <ETH_SetDMAConfig+0x46>
 8002b10:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002b12:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	7b9b      	ldrb	r3, [r3, #14]
 8002b18:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002b1a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002b20:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	7f1b      	ldrb	r3, [r3, #28]
 8002b26:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002b28:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	7f9b      	ldrb	r3, [r3, #30]
 8002b2e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002b30:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002b36:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b3e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b40:	4313      	orrs	r3, r2
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b50:	461a      	mov	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b62:	2001      	movs	r0, #1
 8002b64:	f7ff fd7c 	bl	8002660 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b70:	461a      	mov	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	791b      	ldrb	r3, [r3, #4]
 8002b7a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b80:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002b86:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b8c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b94:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002b96:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b9e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ba4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002bb2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	f7ff fd4d 	bl	8002660 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6013      	str	r3, [r2, #0]
}
 8002bd4:	bf00      	nop
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	f8de3f23 	.word	0xf8de3f23

08002be0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b0a6      	sub	sp, #152	; 0x98
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002be8:	2301      	movs	r3, #1
 8002bea:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002c04:	2300      	movs	r3, #0
 8002c06:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002c16:	2300      	movs	r3, #0
 8002c18:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002c20:	2300      	movs	r3, #0
 8002c22:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002c42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c46:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002c48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002c54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c58:	4619      	mov	r1, r3
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff fe86 	bl	800296c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002c60:	2301      	movs	r3, #1
 8002c62:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002c64:	2301      	movs	r3, #1
 8002c66:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002c82:	2300      	movs	r3, #0
 8002c84:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002c86:	2301      	movs	r3, #1
 8002c88:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002c90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c94:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c9a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ca0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002cb0:	f107 0308 	add.w	r3, r7, #8
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff ff08 	bl	8002acc <ETH_SetDMAConfig>
}
 8002cbc:	bf00      	nop
 8002cbe:	3798      	adds	r7, #152	; 0x98
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3305      	adds	r3, #5
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	3204      	adds	r2, #4
 8002cdc:	7812      	ldrb	r2, [r2, #0]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <ETH_MACAddressConfig+0x68>)
 8002ce6:	4413      	add	r3, r2
 8002ce8:	461a      	mov	r2, r3
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3303      	adds	r3, #3
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	061a      	lsls	r2, r3, #24
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	041b      	lsls	r3, r3, #16
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3301      	adds	r3, #1
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	021b      	lsls	r3, r3, #8
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	7812      	ldrb	r2, [r2, #0]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <ETH_MACAddressConfig+0x6c>)
 8002d16:	4413      	add	r3, r2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	6013      	str	r3, [r2, #0]
}
 8002d1e:	bf00      	nop
 8002d20:	371c      	adds	r7, #28
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40028040 	.word	0x40028040
 8002d30:	40028044 	.word	0x40028044

08002d34 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	e03e      	b.n	8002dc0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68d9      	ldr	r1, [r3, #12]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	440b      	add	r3, r1
 8002d52:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2200      	movs	r2, #0
 8002d64:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002d6c:	68b9      	ldr	r1, [r7, #8]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	3206      	adds	r2, #6
 8002d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d80c      	bhi.n	8002da4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68d9      	ldr	r1, [r3, #12]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	4613      	mov	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	440b      	add	r3, r1
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	e004      	b.n	8002dae <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	461a      	mov	r2, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d9bd      	bls.n	8002d42 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dd8:	611a      	str	r2, [r3, #16]
}
 8002dda:	bf00      	nop
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b085      	sub	sp, #20
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	e046      	b.n	8002e82 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6919      	ldr	r1, [r3, #16]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	440b      	add	r3, r1
 8002e04:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2200      	movs	r2, #0
 8002e16:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2200      	movs	r2, #0
 8002e22:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2200      	movs	r2, #0
 8002e28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002e30:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002e38:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002e46:	68b9      	ldr	r1, [r7, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	3212      	adds	r2, #18
 8002e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d80c      	bhi.n	8002e72 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6919      	ldr	r1, [r3, #16]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	440b      	add	r3, r1
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	60da      	str	r2, [r3, #12]
 8002e70:	e004      	b.n	8002e7c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	461a      	mov	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d9b5      	bls.n	8002df4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eb2:	60da      	str	r2, [r3, #12]
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b089      	sub	sp, #36	; 0x24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	e175      	b.n	80031cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	f040 8164 	bne.w	80031c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d005      	beq.n	8002f16 <HAL_GPIO_Init+0x56>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d130      	bne.n	8002f78 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	2203      	movs	r2, #3
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f003 0201 	and.w	r2, r3, #1
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d017      	beq.n	8002fb4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	2203      	movs	r2, #3
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d123      	bne.n	8003008 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	08da      	lsrs	r2, r3, #3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3208      	adds	r2, #8
 8002fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	220f      	movs	r2, #15
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	08da      	lsrs	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3208      	adds	r2, #8
 8003002:	69b9      	ldr	r1, [r7, #24]
 8003004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	2203      	movs	r2, #3
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0203 	and.w	r2, r3, #3
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80be 	beq.w	80031c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800304a:	4b66      	ldr	r3, [pc, #408]	; (80031e4 <HAL_GPIO_Init+0x324>)
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	4a65      	ldr	r2, [pc, #404]	; (80031e4 <HAL_GPIO_Init+0x324>)
 8003050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003054:	6453      	str	r3, [r2, #68]	; 0x44
 8003056:	4b63      	ldr	r3, [pc, #396]	; (80031e4 <HAL_GPIO_Init+0x324>)
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003062:	4a61      	ldr	r2, [pc, #388]	; (80031e8 <HAL_GPIO_Init+0x328>)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	089b      	lsrs	r3, r3, #2
 8003068:	3302      	adds	r3, #2
 800306a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	220f      	movs	r2, #15
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4013      	ands	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a58      	ldr	r2, [pc, #352]	; (80031ec <HAL_GPIO_Init+0x32c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d037      	beq.n	80030fe <HAL_GPIO_Init+0x23e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a57      	ldr	r2, [pc, #348]	; (80031f0 <HAL_GPIO_Init+0x330>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d031      	beq.n	80030fa <HAL_GPIO_Init+0x23a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a56      	ldr	r2, [pc, #344]	; (80031f4 <HAL_GPIO_Init+0x334>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d02b      	beq.n	80030f6 <HAL_GPIO_Init+0x236>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a55      	ldr	r2, [pc, #340]	; (80031f8 <HAL_GPIO_Init+0x338>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d025      	beq.n	80030f2 <HAL_GPIO_Init+0x232>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a54      	ldr	r2, [pc, #336]	; (80031fc <HAL_GPIO_Init+0x33c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d01f      	beq.n	80030ee <HAL_GPIO_Init+0x22e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a53      	ldr	r2, [pc, #332]	; (8003200 <HAL_GPIO_Init+0x340>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d019      	beq.n	80030ea <HAL_GPIO_Init+0x22a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a52      	ldr	r2, [pc, #328]	; (8003204 <HAL_GPIO_Init+0x344>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <HAL_GPIO_Init+0x226>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a51      	ldr	r2, [pc, #324]	; (8003208 <HAL_GPIO_Init+0x348>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00d      	beq.n	80030e2 <HAL_GPIO_Init+0x222>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a50      	ldr	r2, [pc, #320]	; (800320c <HAL_GPIO_Init+0x34c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d007      	beq.n	80030de <HAL_GPIO_Init+0x21e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4f      	ldr	r2, [pc, #316]	; (8003210 <HAL_GPIO_Init+0x350>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d101      	bne.n	80030da <HAL_GPIO_Init+0x21a>
 80030d6:	2309      	movs	r3, #9
 80030d8:	e012      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030da:	230a      	movs	r3, #10
 80030dc:	e010      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030de:	2308      	movs	r3, #8
 80030e0:	e00e      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030e2:	2307      	movs	r3, #7
 80030e4:	e00c      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030e6:	2306      	movs	r3, #6
 80030e8:	e00a      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030ea:	2305      	movs	r3, #5
 80030ec:	e008      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030ee:	2304      	movs	r3, #4
 80030f0:	e006      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030f2:	2303      	movs	r3, #3
 80030f4:	e004      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e002      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030fe:	2300      	movs	r3, #0
 8003100:	69fa      	ldr	r2, [r7, #28]
 8003102:	f002 0203 	and.w	r2, r2, #3
 8003106:	0092      	lsls	r2, r2, #2
 8003108:	4093      	lsls	r3, r2
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003110:	4935      	ldr	r1, [pc, #212]	; (80031e8 <HAL_GPIO_Init+0x328>)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	3302      	adds	r3, #2
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800311e:	4b3d      	ldr	r3, [pc, #244]	; (8003214 <HAL_GPIO_Init+0x354>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003142:	4a34      	ldr	r2, [pc, #208]	; (8003214 <HAL_GPIO_Init+0x354>)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003148:	4b32      	ldr	r3, [pc, #200]	; (8003214 <HAL_GPIO_Init+0x354>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800316c:	4a29      	ldr	r2, [pc, #164]	; (8003214 <HAL_GPIO_Init+0x354>)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003172:	4b28      	ldr	r3, [pc, #160]	; (8003214 <HAL_GPIO_Init+0x354>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003196:	4a1f      	ldr	r2, [pc, #124]	; (8003214 <HAL_GPIO_Init+0x354>)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800319c:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <HAL_GPIO_Init+0x354>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031c0:	4a14      	ldr	r2, [pc, #80]	; (8003214 <HAL_GPIO_Init+0x354>)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3301      	adds	r3, #1
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	2b0f      	cmp	r3, #15
 80031d0:	f67f ae86 	bls.w	8002ee0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop
 80031d8:	3724      	adds	r7, #36	; 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40013800 	.word	0x40013800
 80031ec:	40020000 	.word	0x40020000
 80031f0:	40020400 	.word	0x40020400
 80031f4:	40020800 	.word	0x40020800
 80031f8:	40020c00 	.word	0x40020c00
 80031fc:	40021000 	.word	0x40021000
 8003200:	40021400 	.word	0x40021400
 8003204:	40021800 	.word	0x40021800
 8003208:	40021c00 	.word	0x40021c00
 800320c:	40022000 	.word	0x40022000
 8003210:	40022400 	.word	0x40022400
 8003214:	40013c00 	.word	0x40013c00

08003218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	807b      	strh	r3, [r7, #2]
 8003224:	4613      	mov	r3, r2
 8003226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003228:	787b      	ldrb	r3, [r7, #1]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800322e:	887a      	ldrh	r2, [r7, #2]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003234:	e003      	b.n	800323e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003236:	887b      	ldrh	r3, [r7, #2]
 8003238:	041a      	lsls	r2, r3, #16
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	619a      	str	r2, [r3, #24]
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e07f      	b.n	800335e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fe feda 	bl	800202c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2224      	movs	r2, #36	; 0x24
 800327c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0201 	bic.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800329c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d107      	bne.n	80032c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032c2:	609a      	str	r2, [r3, #8]
 80032c4:	e006      	b.n	80032d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80032d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d104      	bne.n	80032e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6859      	ldr	r1, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <HAL_I2C_Init+0x11c>)
 80032f2:	430b      	orrs	r3, r1
 80032f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003304:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691a      	ldr	r2, [r3, #16]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69d9      	ldr	r1, [r3, #28]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a1a      	ldr	r2, [r3, #32]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	02008000 	.word	0x02008000

0800336c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af02      	add	r7, sp, #8
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	4608      	mov	r0, r1
 8003376:	4611      	mov	r1, r2
 8003378:	461a      	mov	r2, r3
 800337a:	4603      	mov	r3, r0
 800337c:	817b      	strh	r3, [r7, #10]
 800337e:	460b      	mov	r3, r1
 8003380:	813b      	strh	r3, [r7, #8]
 8003382:	4613      	mov	r3, r2
 8003384:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b20      	cmp	r3, #32
 8003390:	f040 80f9 	bne.w	8003586 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <HAL_I2C_Mem_Write+0x34>
 800339a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800339c:	2b00      	cmp	r3, #0
 800339e:	d105      	bne.n	80033ac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0ed      	b.n	8003588 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <HAL_I2C_Mem_Write+0x4e>
 80033b6:	2302      	movs	r3, #2
 80033b8:	e0e6      	b.n	8003588 <HAL_I2C_Mem_Write+0x21c>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033c2:	f7ff f941 	bl	8002648 <HAL_GetTick>
 80033c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	2319      	movs	r3, #25
 80033ce:	2201      	movs	r2, #1
 80033d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 fac3 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0d1      	b.n	8003588 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2221      	movs	r2, #33	; 0x21
 80033e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2240      	movs	r2, #64	; 0x40
 80033f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a3a      	ldr	r2, [r7, #32]
 80033fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003404:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800340c:	88f8      	ldrh	r0, [r7, #6]
 800340e:	893a      	ldrh	r2, [r7, #8]
 8003410:	8979      	ldrh	r1, [r7, #10]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	9301      	str	r3, [sp, #4]
 8003416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	4603      	mov	r3, r0
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f9d3 	bl	80037c8 <I2C_RequestMemoryWrite>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0a9      	b.n	8003588 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003438:	b29b      	uxth	r3, r3
 800343a:	2bff      	cmp	r3, #255	; 0xff
 800343c:	d90e      	bls.n	800345c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	22ff      	movs	r2, #255	; 0xff
 8003442:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003448:	b2da      	uxtb	r2, r3
 800344a:	8979      	ldrh	r1, [r7, #10]
 800344c:	2300      	movs	r3, #0
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 fc1f 	bl	8003c98 <I2C_TransferConfig>
 800345a:	e00f      	b.n	800347c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003460:	b29a      	uxth	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346a:	b2da      	uxtb	r2, r3
 800346c:	8979      	ldrh	r1, [r7, #10]
 800346e:	2300      	movs	r3, #0
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 fc0e 	bl	8003c98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 faad 	bl	80039e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e07b      	b.n	8003588 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	781a      	ldrb	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d034      	beq.n	8003534 <HAL_I2C_Mem_Write+0x1c8>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d130      	bne.n	8003534 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d8:	2200      	movs	r2, #0
 80034da:	2180      	movs	r1, #128	; 0x80
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 fa3f 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e04d      	b.n	8003588 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2bff      	cmp	r3, #255	; 0xff
 80034f4:	d90e      	bls.n	8003514 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	22ff      	movs	r2, #255	; 0xff
 80034fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003500:	b2da      	uxtb	r2, r3
 8003502:	8979      	ldrh	r1, [r7, #10]
 8003504:	2300      	movs	r3, #0
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 fbc3 	bl	8003c98 <I2C_TransferConfig>
 8003512:	e00f      	b.n	8003534 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003522:	b2da      	uxtb	r2, r3
 8003524:	8979      	ldrh	r1, [r7, #10]
 8003526:	2300      	movs	r3, #0
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 fbb2 	bl	8003c98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d19e      	bne.n	800347c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 fa8c 	bl	8003a60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e01a      	b.n	8003588 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2220      	movs	r2, #32
 8003558:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6859      	ldr	r1, [r3, #4]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	4b0a      	ldr	r3, [pc, #40]	; (8003590 <HAL_I2C_Mem_Write+0x224>)
 8003566:	400b      	ands	r3, r1
 8003568:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	e000      	b.n	8003588 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003586:	2302      	movs	r3, #2
  }
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	fe00e800 	.word	0xfe00e800

08003594 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af02      	add	r7, sp, #8
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	4608      	mov	r0, r1
 800359e:	4611      	mov	r1, r2
 80035a0:	461a      	mov	r2, r3
 80035a2:	4603      	mov	r3, r0
 80035a4:	817b      	strh	r3, [r7, #10]
 80035a6:	460b      	mov	r3, r1
 80035a8:	813b      	strh	r3, [r7, #8]
 80035aa:	4613      	mov	r3, r2
 80035ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	f040 80fd 	bne.w	80037b6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <HAL_I2C_Mem_Read+0x34>
 80035c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d105      	bne.n	80035d4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0f1      	b.n	80037b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <HAL_I2C_Mem_Read+0x4e>
 80035de:	2302      	movs	r3, #2
 80035e0:	e0ea      	b.n	80037b8 <HAL_I2C_Mem_Read+0x224>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035ea:	f7ff f82d 	bl	8002648 <HAL_GetTick>
 80035ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	2319      	movs	r3, #25
 80035f6:	2201      	movs	r2, #1
 80035f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 f9af 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0d5      	b.n	80037b8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2222      	movs	r2, #34	; 0x22
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2240      	movs	r2, #64	; 0x40
 8003618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a3a      	ldr	r2, [r7, #32]
 8003626:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800362c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003634:	88f8      	ldrh	r0, [r7, #6]
 8003636:	893a      	ldrh	r2, [r7, #8]
 8003638:	8979      	ldrh	r1, [r7, #10]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	9301      	str	r3, [sp, #4]
 800363e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	4603      	mov	r3, r0
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 f913 	bl	8003870 <I2C_RequestMemoryRead>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d005      	beq.n	800365c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e0ad      	b.n	80037b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003660:	b29b      	uxth	r3, r3
 8003662:	2bff      	cmp	r3, #255	; 0xff
 8003664:	d90e      	bls.n	8003684 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	22ff      	movs	r2, #255	; 0xff
 800366a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003670:	b2da      	uxtb	r2, r3
 8003672:	8979      	ldrh	r1, [r7, #10]
 8003674:	4b52      	ldr	r3, [pc, #328]	; (80037c0 <HAL_I2C_Mem_Read+0x22c>)
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 fb0b 	bl	8003c98 <I2C_TransferConfig>
 8003682:	e00f      	b.n	80036a4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003692:	b2da      	uxtb	r2, r3
 8003694:	8979      	ldrh	r1, [r7, #10]
 8003696:	4b4a      	ldr	r3, [pc, #296]	; (80037c0 <HAL_I2C_Mem_Read+0x22c>)
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 fafa 	bl	8003c98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036aa:	2200      	movs	r2, #0
 80036ac:	2104      	movs	r1, #4
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 f956 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e07c      	b.n	80037b8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d034      	beq.n	8003764 <HAL_I2C_Mem_Read+0x1d0>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d130      	bne.n	8003764 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003708:	2200      	movs	r2, #0
 800370a:	2180      	movs	r1, #128	; 0x80
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 f927 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e04d      	b.n	80037b8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	2bff      	cmp	r3, #255	; 0xff
 8003724:	d90e      	bls.n	8003744 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	22ff      	movs	r2, #255	; 0xff
 800372a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003730:	b2da      	uxtb	r2, r3
 8003732:	8979      	ldrh	r1, [r7, #10]
 8003734:	2300      	movs	r3, #0
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 faab 	bl	8003c98 <I2C_TransferConfig>
 8003742:	e00f      	b.n	8003764 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003752:	b2da      	uxtb	r2, r3
 8003754:	8979      	ldrh	r1, [r7, #10]
 8003756:	2300      	movs	r3, #0
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 fa9a 	bl	8003c98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d19a      	bne.n	80036a4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f974 	bl	8003a60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e01a      	b.n	80037b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2220      	movs	r2, #32
 8003788:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6859      	ldr	r1, [r3, #4]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <HAL_I2C_Mem_Read+0x230>)
 8003796:	400b      	ands	r3, r1
 8003798:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e000      	b.n	80037b8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80037b6:	2302      	movs	r3, #2
  }
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	80002400 	.word	0x80002400
 80037c4:	fe00e800 	.word	0xfe00e800

080037c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	4608      	mov	r0, r1
 80037d2:	4611      	mov	r1, r2
 80037d4:	461a      	mov	r2, r3
 80037d6:	4603      	mov	r3, r0
 80037d8:	817b      	strh	r3, [r7, #10]
 80037da:	460b      	mov	r3, r1
 80037dc:	813b      	strh	r3, [r7, #8]
 80037de:	4613      	mov	r3, r2
 80037e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80037e2:	88fb      	ldrh	r3, [r7, #6]
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	8979      	ldrh	r1, [r7, #10]
 80037e8:	4b20      	ldr	r3, [pc, #128]	; (800386c <I2C_RequestMemoryWrite+0xa4>)
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 fa51 	bl	8003c98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037f6:	69fa      	ldr	r2, [r7, #28]
 80037f8:	69b9      	ldr	r1, [r7, #24]
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 f8f0 	bl	80039e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e02c      	b.n	8003864 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800380a:	88fb      	ldrh	r3, [r7, #6]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d105      	bne.n	800381c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003810:	893b      	ldrh	r3, [r7, #8]
 8003812:	b2da      	uxtb	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	629a      	str	r2, [r3, #40]	; 0x28
 800381a:	e015      	b.n	8003848 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800381c:	893b      	ldrh	r3, [r7, #8]
 800381e:	0a1b      	lsrs	r3, r3, #8
 8003820:	b29b      	uxth	r3, r3
 8003822:	b2da      	uxtb	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800382a:	69fa      	ldr	r2, [r7, #28]
 800382c:	69b9      	ldr	r1, [r7, #24]
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f8d6 	bl	80039e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e012      	b.n	8003864 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800383e:	893b      	ldrh	r3, [r7, #8]
 8003840:	b2da      	uxtb	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	2200      	movs	r2, #0
 8003850:	2180      	movs	r1, #128	; 0x80
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f884 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	80002000 	.word	0x80002000

08003870 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	4608      	mov	r0, r1
 800387a:	4611      	mov	r1, r2
 800387c:	461a      	mov	r2, r3
 800387e:	4603      	mov	r3, r0
 8003880:	817b      	strh	r3, [r7, #10]
 8003882:	460b      	mov	r3, r1
 8003884:	813b      	strh	r3, [r7, #8]
 8003886:	4613      	mov	r3, r2
 8003888:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	b2da      	uxtb	r2, r3
 800388e:	8979      	ldrh	r1, [r7, #10]
 8003890:	4b20      	ldr	r3, [pc, #128]	; (8003914 <I2C_RequestMemoryRead+0xa4>)
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	2300      	movs	r3, #0
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f9fe 	bl	8003c98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800389c:	69fa      	ldr	r2, [r7, #28]
 800389e:	69b9      	ldr	r1, [r7, #24]
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 f89d 	bl	80039e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e02c      	b.n	800390a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038b0:	88fb      	ldrh	r3, [r7, #6]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d105      	bne.n	80038c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038b6:	893b      	ldrh	r3, [r7, #8]
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	629a      	str	r2, [r3, #40]	; 0x28
 80038c0:	e015      	b.n	80038ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038c2:	893b      	ldrh	r3, [r7, #8]
 80038c4:	0a1b      	lsrs	r3, r3, #8
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038d0:	69fa      	ldr	r2, [r7, #28]
 80038d2:	69b9      	ldr	r1, [r7, #24]
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 f883 	bl	80039e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e012      	b.n	800390a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038e4:	893b      	ldrh	r3, [r7, #8]
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	2200      	movs	r2, #0
 80038f6:	2140      	movs	r1, #64	; 0x40
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 f831 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	80002000 	.word	0x80002000

08003918 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b02      	cmp	r3, #2
 800392c:	d103      	bne.n	8003936 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2200      	movs	r2, #0
 8003934:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b01      	cmp	r3, #1
 8003942:	d007      	beq.n	8003954 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699a      	ldr	r2, [r3, #24]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	619a      	str	r2, [r3, #24]
  }
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	4613      	mov	r3, r2
 800396e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003970:	e022      	b.n	80039b8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003978:	d01e      	beq.n	80039b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800397a:	f7fe fe65 	bl	8002648 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d302      	bcc.n	8003990 <I2C_WaitOnFlagUntilTimeout+0x30>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d113      	bne.n	80039b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003994:	f043 0220 	orr.w	r2, r3, #32
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e00f      	b.n	80039d8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	4013      	ands	r3, r2
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	bf0c      	ite	eq
 80039c8:	2301      	moveq	r3, #1
 80039ca:	2300      	movne	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	461a      	mov	r2, r3
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d0cd      	beq.n	8003972 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039ec:	e02c      	b.n	8003a48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f870 	bl	8003ad8 <I2C_IsErrorOccurred>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e02a      	b.n	8003a58 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a08:	d01e      	beq.n	8003a48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a0a:	f7fe fe1d 	bl	8002648 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d302      	bcc.n	8003a20 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d113      	bne.n	8003a48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a24:	f043 0220 	orr.w	r2, r3, #32
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e007      	b.n	8003a58 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d1cb      	bne.n	80039ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a6c:	e028      	b.n	8003ac0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 f830 	bl	8003ad8 <I2C_IsErrorOccurred>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e026      	b.n	8003ad0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a82:	f7fe fde1 	bl	8002648 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d302      	bcc.n	8003a98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d113      	bne.n	8003ac0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9c:	f043 0220 	orr.w	r2, r3, #32
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e007      	b.n	8003ad0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	f003 0320 	and.w	r3, r3, #32
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	d1cf      	bne.n	8003a6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08a      	sub	sp, #40	; 0x28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	f003 0310 	and.w	r3, r3, #16
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d068      	beq.n	8003bd6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2210      	movs	r2, #16
 8003b0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b0c:	e049      	b.n	8003ba2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b14:	d045      	beq.n	8003ba2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b16:	f7fe fd97 	bl	8002648 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d302      	bcc.n	8003b2c <I2C_IsErrorOccurred+0x54>
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d13a      	bne.n	8003ba2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b4e:	d121      	bne.n	8003b94 <I2C_IsErrorOccurred+0xbc>
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b56:	d01d      	beq.n	8003b94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003b58:	7cfb      	ldrb	r3, [r7, #19]
 8003b5a:	2b20      	cmp	r3, #32
 8003b5c:	d01a      	beq.n	8003b94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003b6e:	f7fe fd6b 	bl	8002648 <HAL_GetTick>
 8003b72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b74:	e00e      	b.n	8003b94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003b76:	f7fe fd67 	bl	8002648 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b19      	cmp	r3, #25
 8003b82:	d907      	bls.n	8003b94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	f043 0320 	orr.w	r3, r3, #32
 8003b8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003b92:	e006      	b.n	8003ba2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b20      	cmp	r3, #32
 8003ba0:	d1e9      	bne.n	8003b76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d003      	beq.n	8003bb8 <I2C_IsErrorOccurred+0xe0>
 8003bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0aa      	beq.n	8003b0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d103      	bne.n	8003bc8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	f043 0304 	orr.w	r3, r3, #4
 8003bce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00b      	beq.n	8003c00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	f043 0301 	orr.w	r3, r3, #1
 8003bee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bf8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00b      	beq.n	8003c22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	f043 0308 	orr.w	r3, r3, #8
 8003c10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00b      	beq.n	8003c44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	f043 0302 	orr.w	r3, r3, #2
 8003c32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d01c      	beq.n	8003c86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f7ff fe63 	bl	8003918 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6859      	ldr	r1, [r3, #4]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	4b0d      	ldr	r3, [pc, #52]	; (8003c94 <I2C_IsErrorOccurred+0x1bc>)
 8003c5e:	400b      	ands	r3, r1
 8003c60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003c86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3728      	adds	r7, #40	; 0x28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	fe00e800 	.word	0xfe00e800

08003c98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	607b      	str	r3, [r7, #4]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	817b      	strh	r3, [r7, #10]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003caa:	897b      	ldrh	r3, [r7, #10]
 8003cac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cb0:	7a7b      	ldrb	r3, [r7, #9]
 8003cb2:	041b      	lsls	r3, r3, #16
 8003cb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cb8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cc6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	0d5b      	lsrs	r3, r3, #21
 8003cd2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003cd6:	4b08      	ldr	r3, [pc, #32]	; (8003cf8 <I2C_TransferConfig+0x60>)
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	ea02 0103 	and.w	r1, r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003cea:	bf00      	nop
 8003cec:	371c      	adds	r7, #28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	03ff63ff 	.word	0x03ff63ff

08003cfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d138      	bne.n	8003d84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e032      	b.n	8003d86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2224      	movs	r2, #36	; 0x24
 8003d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0201 	bic.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6819      	ldr	r1, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0201 	orr.w	r2, r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	e000      	b.n	8003d86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d84:	2302      	movs	r3, #2
  }
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b085      	sub	sp, #20
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d139      	bne.n	8003e1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e033      	b.n	8003e1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2224      	movs	r2, #36	; 0x24
 8003dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0201 	bic.w	r2, r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003de4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	021b      	lsls	r3, r3, #8
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	e000      	b.n	8003e1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e1c:	2302      	movs	r3, #2
  }
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e2c:	b08f      	sub	sp, #60	; 0x3c
 8003e2e:	af0a      	add	r7, sp, #40	; 0x28
 8003e30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e116      	b.n	800406a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fe fa00 	bl	800225c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2203      	movs	r2, #3
 8003e60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d102      	bne.n	8003e76 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f002 fd2e 	bl	80068dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	603b      	str	r3, [r7, #0]
 8003e86:	687e      	ldr	r6, [r7, #4]
 8003e88:	466d      	mov	r5, sp
 8003e8a:	f106 0410 	add.w	r4, r6, #16
 8003e8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e9e:	1d33      	adds	r3, r6, #4
 8003ea0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ea2:	6838      	ldr	r0, [r7, #0]
 8003ea4:	f002 fcc2 	bl	800682c <USB_CoreInit>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d005      	beq.n	8003eba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e0d7      	b.n	800406a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f002 fd1c 	bl	80068fe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	73fb      	strb	r3, [r7, #15]
 8003eca:	e04a      	b.n	8003f62 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ecc:	7bfa      	ldrb	r2, [r7, #15]
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	333d      	adds	r3, #61	; 0x3d
 8003edc:	2201      	movs	r2, #1
 8003ede:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ee0:	7bfa      	ldrb	r2, [r7, #15]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	333c      	adds	r3, #60	; 0x3c
 8003ef0:	7bfa      	ldrb	r2, [r7, #15]
 8003ef2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ef4:	7bfa      	ldrb	r2, [r7, #15]
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	b298      	uxth	r0, r3
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	3344      	adds	r3, #68	; 0x44
 8003f08:	4602      	mov	r2, r0
 8003f0a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f0c:	7bfa      	ldrb	r2, [r7, #15]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	3340      	adds	r3, #64	; 0x40
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f20:	7bfa      	ldrb	r2, [r7, #15]
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	4413      	add	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	3348      	adds	r3, #72	; 0x48
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f34:	7bfa      	ldrb	r2, [r7, #15]
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	334c      	adds	r3, #76	; 0x4c
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f48:	7bfa      	ldrb	r2, [r7, #15]
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	4413      	add	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	3354      	adds	r3, #84	; 0x54
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	73fb      	strb	r3, [r7, #15]
 8003f62:	7bfa      	ldrb	r2, [r7, #15]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d3af      	bcc.n	8003ecc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	73fb      	strb	r3, [r7, #15]
 8003f70:	e044      	b.n	8003ffc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f72:	7bfa      	ldrb	r2, [r7, #15]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003f84:	2200      	movs	r2, #0
 8003f86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f88:	7bfa      	ldrb	r2, [r7, #15]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4413      	add	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003f9a:	7bfa      	ldrb	r2, [r7, #15]
 8003f9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f9e:	7bfa      	ldrb	r2, [r7, #15]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003fb4:	7bfa      	ldrb	r2, [r7, #15]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003fca:	7bfa      	ldrb	r2, [r7, #15]
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	4413      	add	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fe0:	7bfa      	ldrb	r2, [r7, #15]
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	4413      	add	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ff6:	7bfb      	ldrb	r3, [r7, #15]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	73fb      	strb	r3, [r7, #15]
 8003ffc:	7bfa      	ldrb	r2, [r7, #15]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	429a      	cmp	r2, r3
 8004004:	d3b5      	bcc.n	8003f72 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	603b      	str	r3, [r7, #0]
 800400c:	687e      	ldr	r6, [r7, #4]
 800400e:	466d      	mov	r5, sp
 8004010:	f106 0410 	add.w	r4, r6, #16
 8004014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004016:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004018:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800401a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800401c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004020:	e885 0003 	stmia.w	r5, {r0, r1}
 8004024:	1d33      	adds	r3, r6, #4
 8004026:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004028:	6838      	ldr	r0, [r7, #0]
 800402a:	f002 fcb5 	bl	8006998 <USB_DevInit>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e014      	b.n	800406a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	2b01      	cmp	r3, #1
 8004056:	d102      	bne.n	800405e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f80b 	bl	8004074 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f002 fe73 	bl	8006d4e <USB_DevDisconnect>

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004074 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040a2:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <HAL_PCDEx_ActivateLPM+0x44>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	10000003 	.word	0x10000003

080040bc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040c0:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a04      	ldr	r2, [pc, #16]	; (80040d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ca:	6013      	str	r3, [r2, #0]
}
 80040cc:	bf00      	nop
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40007000 	.word	0x40007000

080040dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80040e4:	2300      	movs	r3, #0
 80040e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e291      	b.n	8004616 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 8087 	beq.w	800420e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004100:	4b96      	ldr	r3, [pc, #600]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 030c 	and.w	r3, r3, #12
 8004108:	2b04      	cmp	r3, #4
 800410a:	d00c      	beq.n	8004126 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800410c:	4b93      	ldr	r3, [pc, #588]	; (800435c <HAL_RCC_OscConfig+0x280>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 030c 	and.w	r3, r3, #12
 8004114:	2b08      	cmp	r3, #8
 8004116:	d112      	bne.n	800413e <HAL_RCC_OscConfig+0x62>
 8004118:	4b90      	ldr	r3, [pc, #576]	; (800435c <HAL_RCC_OscConfig+0x280>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004120:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004124:	d10b      	bne.n	800413e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004126:	4b8d      	ldr	r3, [pc, #564]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d06c      	beq.n	800420c <HAL_RCC_OscConfig+0x130>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d168      	bne.n	800420c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e26b      	b.n	8004616 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004146:	d106      	bne.n	8004156 <HAL_RCC_OscConfig+0x7a>
 8004148:	4b84      	ldr	r3, [pc, #528]	; (800435c <HAL_RCC_OscConfig+0x280>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a83      	ldr	r2, [pc, #524]	; (800435c <HAL_RCC_OscConfig+0x280>)
 800414e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	e02e      	b.n	80041b4 <HAL_RCC_OscConfig+0xd8>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10c      	bne.n	8004178 <HAL_RCC_OscConfig+0x9c>
 800415e:	4b7f      	ldr	r3, [pc, #508]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a7e      	ldr	r2, [pc, #504]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	4b7c      	ldr	r3, [pc, #496]	; (800435c <HAL_RCC_OscConfig+0x280>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a7b      	ldr	r2, [pc, #492]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004170:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	e01d      	b.n	80041b4 <HAL_RCC_OscConfig+0xd8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004180:	d10c      	bne.n	800419c <HAL_RCC_OscConfig+0xc0>
 8004182:	4b76      	ldr	r3, [pc, #472]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a75      	ldr	r2, [pc, #468]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	4b73      	ldr	r3, [pc, #460]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a72      	ldr	r2, [pc, #456]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	e00b      	b.n	80041b4 <HAL_RCC_OscConfig+0xd8>
 800419c:	4b6f      	ldr	r3, [pc, #444]	; (800435c <HAL_RCC_OscConfig+0x280>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a6e      	ldr	r2, [pc, #440]	; (800435c <HAL_RCC_OscConfig+0x280>)
 80041a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	4b6c      	ldr	r3, [pc, #432]	; (800435c <HAL_RCC_OscConfig+0x280>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a6b      	ldr	r2, [pc, #428]	; (800435c <HAL_RCC_OscConfig+0x280>)
 80041ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d013      	beq.n	80041e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041bc:	f7fe fa44 	bl	8002648 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041c4:	f7fe fa40 	bl	8002648 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b64      	cmp	r3, #100	; 0x64
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e21f      	b.n	8004616 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d6:	4b61      	ldr	r3, [pc, #388]	; (800435c <HAL_RCC_OscConfig+0x280>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0f0      	beq.n	80041c4 <HAL_RCC_OscConfig+0xe8>
 80041e2:	e014      	b.n	800420e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e4:	f7fe fa30 	bl	8002648 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041ec:	f7fe fa2c 	bl	8002648 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b64      	cmp	r3, #100	; 0x64
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e20b      	b.n	8004616 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fe:	4b57      	ldr	r3, [pc, #348]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f0      	bne.n	80041ec <HAL_RCC_OscConfig+0x110>
 800420a:	e000      	b.n	800420e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800420c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d069      	beq.n	80042ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800421a:	4b50      	ldr	r3, [pc, #320]	; (800435c <HAL_RCC_OscConfig+0x280>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 030c 	and.w	r3, r3, #12
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00b      	beq.n	800423e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004226:	4b4d      	ldr	r3, [pc, #308]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 030c 	and.w	r3, r3, #12
 800422e:	2b08      	cmp	r3, #8
 8004230:	d11c      	bne.n	800426c <HAL_RCC_OscConfig+0x190>
 8004232:	4b4a      	ldr	r3, [pc, #296]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d116      	bne.n	800426c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800423e:	4b47      	ldr	r3, [pc, #284]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d005      	beq.n	8004256 <HAL_RCC_OscConfig+0x17a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d001      	beq.n	8004256 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e1df      	b.n	8004616 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004256:	4b41      	ldr	r3, [pc, #260]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	493d      	ldr	r1, [pc, #244]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004266:	4313      	orrs	r3, r2
 8004268:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800426a:	e040      	b.n	80042ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d023      	beq.n	80042bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004274:	4b39      	ldr	r3, [pc, #228]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a38      	ldr	r2, [pc, #224]	; (800435c <HAL_RCC_OscConfig+0x280>)
 800427a:	f043 0301 	orr.w	r3, r3, #1
 800427e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004280:	f7fe f9e2 	bl	8002648 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004288:	f7fe f9de 	bl	8002648 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e1bd      	b.n	8004616 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429a:	4b30      	ldr	r3, [pc, #192]	; (800435c <HAL_RCC_OscConfig+0x280>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0f0      	beq.n	8004288 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a6:	4b2d      	ldr	r3, [pc, #180]	; (800435c <HAL_RCC_OscConfig+0x280>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	4929      	ldr	r1, [pc, #164]	; (800435c <HAL_RCC_OscConfig+0x280>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	600b      	str	r3, [r1, #0]
 80042ba:	e018      	b.n	80042ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042bc:	4b27      	ldr	r3, [pc, #156]	; (800435c <HAL_RCC_OscConfig+0x280>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a26      	ldr	r2, [pc, #152]	; (800435c <HAL_RCC_OscConfig+0x280>)
 80042c2:	f023 0301 	bic.w	r3, r3, #1
 80042c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c8:	f7fe f9be 	bl	8002648 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042d0:	f7fe f9ba 	bl	8002648 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e199      	b.n	8004616 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042e2:	4b1e      	ldr	r3, [pc, #120]	; (800435c <HAL_RCC_OscConfig+0x280>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1f0      	bne.n	80042d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d038      	beq.n	800436c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d019      	beq.n	8004336 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004302:	4b16      	ldr	r3, [pc, #88]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004306:	4a15      	ldr	r2, [pc, #84]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430e:	f7fe f99b 	bl	8002648 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004316:	f7fe f997 	bl	8002648 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e176      	b.n	8004616 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004328:	4b0c      	ldr	r3, [pc, #48]	; (800435c <HAL_RCC_OscConfig+0x280>)
 800432a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0f0      	beq.n	8004316 <HAL_RCC_OscConfig+0x23a>
 8004334:	e01a      	b.n	800436c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004336:	4b09      	ldr	r3, [pc, #36]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800433a:	4a08      	ldr	r2, [pc, #32]	; (800435c <HAL_RCC_OscConfig+0x280>)
 800433c:	f023 0301 	bic.w	r3, r3, #1
 8004340:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004342:	f7fe f981 	bl	8002648 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004348:	e00a      	b.n	8004360 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800434a:	f7fe f97d 	bl	8002648 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d903      	bls.n	8004360 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e15c      	b.n	8004616 <HAL_RCC_OscConfig+0x53a>
 800435c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004360:	4b91      	ldr	r3, [pc, #580]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 8004362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1ee      	bne.n	800434a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80a4 	beq.w	80044c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800437a:	4b8b      	ldr	r3, [pc, #556]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10d      	bne.n	80043a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004386:	4b88      	ldr	r3, [pc, #544]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	4a87      	ldr	r2, [pc, #540]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 800438c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004390:	6413      	str	r3, [r2, #64]	; 0x40
 8004392:	4b85      	ldr	r3, [pc, #532]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439a:	60bb      	str	r3, [r7, #8]
 800439c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800439e:	2301      	movs	r3, #1
 80043a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043a2:	4b82      	ldr	r3, [pc, #520]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d118      	bne.n	80043e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80043ae:	4b7f      	ldr	r3, [pc, #508]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a7e      	ldr	r2, [pc, #504]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 80043b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ba:	f7fe f945 	bl	8002648 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c2:	f7fe f941 	bl	8002648 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b64      	cmp	r3, #100	; 0x64
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e120      	b.n	8004616 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043d4:	4b75      	ldr	r3, [pc, #468]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d106      	bne.n	80043f6 <HAL_RCC_OscConfig+0x31a>
 80043e8:	4b6f      	ldr	r3, [pc, #444]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 80043ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ec:	4a6e      	ldr	r2, [pc, #440]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 80043ee:	f043 0301 	orr.w	r3, r3, #1
 80043f2:	6713      	str	r3, [r2, #112]	; 0x70
 80043f4:	e02d      	b.n	8004452 <HAL_RCC_OscConfig+0x376>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10c      	bne.n	8004418 <HAL_RCC_OscConfig+0x33c>
 80043fe:	4b6a      	ldr	r3, [pc, #424]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 8004400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004402:	4a69      	ldr	r2, [pc, #420]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 8004404:	f023 0301 	bic.w	r3, r3, #1
 8004408:	6713      	str	r3, [r2, #112]	; 0x70
 800440a:	4b67      	ldr	r3, [pc, #412]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	4a66      	ldr	r2, [pc, #408]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 8004410:	f023 0304 	bic.w	r3, r3, #4
 8004414:	6713      	str	r3, [r2, #112]	; 0x70
 8004416:	e01c      	b.n	8004452 <HAL_RCC_OscConfig+0x376>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2b05      	cmp	r3, #5
 800441e:	d10c      	bne.n	800443a <HAL_RCC_OscConfig+0x35e>
 8004420:	4b61      	ldr	r3, [pc, #388]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004424:	4a60      	ldr	r2, [pc, #384]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 8004426:	f043 0304 	orr.w	r3, r3, #4
 800442a:	6713      	str	r3, [r2, #112]	; 0x70
 800442c:	4b5e      	ldr	r3, [pc, #376]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 800442e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004430:	4a5d      	ldr	r2, [pc, #372]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 8004432:	f043 0301 	orr.w	r3, r3, #1
 8004436:	6713      	str	r3, [r2, #112]	; 0x70
 8004438:	e00b      	b.n	8004452 <HAL_RCC_OscConfig+0x376>
 800443a:	4b5b      	ldr	r3, [pc, #364]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 800443c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443e:	4a5a      	ldr	r2, [pc, #360]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 8004440:	f023 0301 	bic.w	r3, r3, #1
 8004444:	6713      	str	r3, [r2, #112]	; 0x70
 8004446:	4b58      	ldr	r3, [pc, #352]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 8004448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444a:	4a57      	ldr	r2, [pc, #348]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 800444c:	f023 0304 	bic.w	r3, r3, #4
 8004450:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d015      	beq.n	8004486 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445a:	f7fe f8f5 	bl	8002648 <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004460:	e00a      	b.n	8004478 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004462:	f7fe f8f1 	bl	8002648 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004470:	4293      	cmp	r3, r2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e0ce      	b.n	8004616 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004478:	4b4b      	ldr	r3, [pc, #300]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 800447a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0ee      	beq.n	8004462 <HAL_RCC_OscConfig+0x386>
 8004484:	e014      	b.n	80044b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004486:	f7fe f8df 	bl	8002648 <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800448c:	e00a      	b.n	80044a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800448e:	f7fe f8db 	bl	8002648 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	f241 3288 	movw	r2, #5000	; 0x1388
 800449c:	4293      	cmp	r3, r2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e0b8      	b.n	8004616 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044a4:	4b40      	ldr	r3, [pc, #256]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 80044a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1ee      	bne.n	800448e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044b0:	7dfb      	ldrb	r3, [r7, #23]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d105      	bne.n	80044c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044b6:	4b3c      	ldr	r3, [pc, #240]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	4a3b      	ldr	r2, [pc, #236]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 80044bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 80a4 	beq.w	8004614 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044cc:	4b36      	ldr	r3, [pc, #216]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 030c 	and.w	r3, r3, #12
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d06b      	beq.n	80045b0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d149      	bne.n	8004574 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e0:	4b31      	ldr	r3, [pc, #196]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a30      	ldr	r2, [pc, #192]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 80044e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ec:	f7fe f8ac 	bl	8002648 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f4:	f7fe f8a8 	bl	8002648 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e087      	b.n	8004616 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004506:	4b28      	ldr	r3, [pc, #160]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f0      	bne.n	80044f4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69da      	ldr	r2, [r3, #28]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	019b      	lsls	r3, r3, #6
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004528:	085b      	lsrs	r3, r3, #1
 800452a:	3b01      	subs	r3, #1
 800452c:	041b      	lsls	r3, r3, #16
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	061b      	lsls	r3, r3, #24
 8004536:	4313      	orrs	r3, r2
 8004538:	4a1b      	ldr	r2, [pc, #108]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 800453a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800453e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004540:	4b19      	ldr	r3, [pc, #100]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a18      	ldr	r2, [pc, #96]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 8004546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800454a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454c:	f7fe f87c 	bl	8002648 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004554:	f7fe f878 	bl	8002648 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e057      	b.n	8004616 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004566:	4b10      	ldr	r3, [pc, #64]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0f0      	beq.n	8004554 <HAL_RCC_OscConfig+0x478>
 8004572:	e04f      	b.n	8004614 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004574:	4b0c      	ldr	r3, [pc, #48]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a0b      	ldr	r2, [pc, #44]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 800457a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800457e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004580:	f7fe f862 	bl	8002648 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004588:	f7fe f85e 	bl	8002648 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e03d      	b.n	8004616 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459a:	4b03      	ldr	r3, [pc, #12]	; (80045a8 <HAL_RCC_OscConfig+0x4cc>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1f0      	bne.n	8004588 <HAL_RCC_OscConfig+0x4ac>
 80045a6:	e035      	b.n	8004614 <HAL_RCC_OscConfig+0x538>
 80045a8:	40023800 	.word	0x40023800
 80045ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80045b0:	4b1b      	ldr	r3, [pc, #108]	; (8004620 <HAL_RCC_OscConfig+0x544>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d028      	beq.n	8004610 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d121      	bne.n	8004610 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d11a      	bne.n	8004610 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045e0:	4013      	ands	r3, r2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d111      	bne.n	8004610 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f6:	085b      	lsrs	r3, r3, #1
 80045f8:	3b01      	subs	r3, #1
 80045fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d107      	bne.n	8004610 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800460c:	429a      	cmp	r2, r3
 800460e:	d001      	beq.n	8004614 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e000      	b.n	8004616 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40023800 	.word	0x40023800

08004624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e0d0      	b.n	80047de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800463c:	4b6a      	ldr	r3, [pc, #424]	; (80047e8 <HAL_RCC_ClockConfig+0x1c4>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d910      	bls.n	800466c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464a:	4b67      	ldr	r3, [pc, #412]	; (80047e8 <HAL_RCC_ClockConfig+0x1c4>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f023 020f 	bic.w	r2, r3, #15
 8004652:	4965      	ldr	r1, [pc, #404]	; (80047e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	4313      	orrs	r3, r2
 8004658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800465a:	4b63      	ldr	r3, [pc, #396]	; (80047e8 <HAL_RCC_ClockConfig+0x1c4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d001      	beq.n	800466c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e0b8      	b.n	80047de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d020      	beq.n	80046ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b00      	cmp	r3, #0
 8004682:	d005      	beq.n	8004690 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004684:	4b59      	ldr	r3, [pc, #356]	; (80047ec <HAL_RCC_ClockConfig+0x1c8>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	4a58      	ldr	r2, [pc, #352]	; (80047ec <HAL_RCC_ClockConfig+0x1c8>)
 800468a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800468e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0308 	and.w	r3, r3, #8
 8004698:	2b00      	cmp	r3, #0
 800469a:	d005      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800469c:	4b53      	ldr	r3, [pc, #332]	; (80047ec <HAL_RCC_ClockConfig+0x1c8>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	4a52      	ldr	r2, [pc, #328]	; (80047ec <HAL_RCC_ClockConfig+0x1c8>)
 80046a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046a8:	4b50      	ldr	r3, [pc, #320]	; (80047ec <HAL_RCC_ClockConfig+0x1c8>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	494d      	ldr	r1, [pc, #308]	; (80047ec <HAL_RCC_ClockConfig+0x1c8>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d040      	beq.n	8004748 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d107      	bne.n	80046de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ce:	4b47      	ldr	r3, [pc, #284]	; (80047ec <HAL_RCC_ClockConfig+0x1c8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d115      	bne.n	8004706 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e07f      	b.n	80047de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d107      	bne.n	80046f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e6:	4b41      	ldr	r3, [pc, #260]	; (80047ec <HAL_RCC_ClockConfig+0x1c8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d109      	bne.n	8004706 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e073      	b.n	80047de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f6:	4b3d      	ldr	r3, [pc, #244]	; (80047ec <HAL_RCC_ClockConfig+0x1c8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e06b      	b.n	80047de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004706:	4b39      	ldr	r3, [pc, #228]	; (80047ec <HAL_RCC_ClockConfig+0x1c8>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f023 0203 	bic.w	r2, r3, #3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	4936      	ldr	r1, [pc, #216]	; (80047ec <HAL_RCC_ClockConfig+0x1c8>)
 8004714:	4313      	orrs	r3, r2
 8004716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004718:	f7fd ff96 	bl	8002648 <HAL_GetTick>
 800471c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471e:	e00a      	b.n	8004736 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004720:	f7fd ff92 	bl	8002648 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	f241 3288 	movw	r2, #5000	; 0x1388
 800472e:	4293      	cmp	r3, r2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e053      	b.n	80047de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004736:	4b2d      	ldr	r3, [pc, #180]	; (80047ec <HAL_RCC_ClockConfig+0x1c8>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 020c 	and.w	r2, r3, #12
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	429a      	cmp	r2, r3
 8004746:	d1eb      	bne.n	8004720 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004748:	4b27      	ldr	r3, [pc, #156]	; (80047e8 <HAL_RCC_ClockConfig+0x1c4>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 030f 	and.w	r3, r3, #15
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	429a      	cmp	r2, r3
 8004754:	d210      	bcs.n	8004778 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004756:	4b24      	ldr	r3, [pc, #144]	; (80047e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f023 020f 	bic.w	r2, r3, #15
 800475e:	4922      	ldr	r1, [pc, #136]	; (80047e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	4313      	orrs	r3, r2
 8004764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004766:	4b20      	ldr	r3, [pc, #128]	; (80047e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d001      	beq.n	8004778 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e032      	b.n	80047de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	d008      	beq.n	8004796 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004784:	4b19      	ldr	r3, [pc, #100]	; (80047ec <HAL_RCC_ClockConfig+0x1c8>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	4916      	ldr	r1, [pc, #88]	; (80047ec <HAL_RCC_ClockConfig+0x1c8>)
 8004792:	4313      	orrs	r3, r2
 8004794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d009      	beq.n	80047b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047a2:	4b12      	ldr	r3, [pc, #72]	; (80047ec <HAL_RCC_ClockConfig+0x1c8>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	490e      	ldr	r1, [pc, #56]	; (80047ec <HAL_RCC_ClockConfig+0x1c8>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047b6:	f000 f821 	bl	80047fc <HAL_RCC_GetSysClockFreq>
 80047ba:	4602      	mov	r2, r0
 80047bc:	4b0b      	ldr	r3, [pc, #44]	; (80047ec <HAL_RCC_ClockConfig+0x1c8>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	091b      	lsrs	r3, r3, #4
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	490a      	ldr	r1, [pc, #40]	; (80047f0 <HAL_RCC_ClockConfig+0x1cc>)
 80047c8:	5ccb      	ldrb	r3, [r1, r3]
 80047ca:	fa22 f303 	lsr.w	r3, r2, r3
 80047ce:	4a09      	ldr	r2, [pc, #36]	; (80047f4 <HAL_RCC_ClockConfig+0x1d0>)
 80047d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047d2:	4b09      	ldr	r3, [pc, #36]	; (80047f8 <HAL_RCC_ClockConfig+0x1d4>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fd fef2 	bl	80025c0 <HAL_InitTick>

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	40023c00 	.word	0x40023c00
 80047ec:	40023800 	.word	0x40023800
 80047f0:	08009c98 	.word	0x08009c98
 80047f4:	20000000 	.word	0x20000000
 80047f8:	20000004 	.word	0x20000004

080047fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004800:	b094      	sub	sp, #80	; 0x50
 8004802:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004804:	2300      	movs	r3, #0
 8004806:	647b      	str	r3, [r7, #68]	; 0x44
 8004808:	2300      	movs	r3, #0
 800480a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800480c:	2300      	movs	r3, #0
 800480e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004814:	4b79      	ldr	r3, [pc, #484]	; (80049fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 030c 	and.w	r3, r3, #12
 800481c:	2b08      	cmp	r3, #8
 800481e:	d00d      	beq.n	800483c <HAL_RCC_GetSysClockFreq+0x40>
 8004820:	2b08      	cmp	r3, #8
 8004822:	f200 80e1 	bhi.w	80049e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <HAL_RCC_GetSysClockFreq+0x34>
 800482a:	2b04      	cmp	r3, #4
 800482c:	d003      	beq.n	8004836 <HAL_RCC_GetSysClockFreq+0x3a>
 800482e:	e0db      	b.n	80049e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004830:	4b73      	ldr	r3, [pc, #460]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x204>)
 8004832:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004834:	e0db      	b.n	80049ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004836:	4b73      	ldr	r3, [pc, #460]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x208>)
 8004838:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800483a:	e0d8      	b.n	80049ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800483c:	4b6f      	ldr	r3, [pc, #444]	; (80049fc <HAL_RCC_GetSysClockFreq+0x200>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004844:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004846:	4b6d      	ldr	r3, [pc, #436]	; (80049fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d063      	beq.n	800491a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004852:	4b6a      	ldr	r3, [pc, #424]	; (80049fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	099b      	lsrs	r3, r3, #6
 8004858:	2200      	movs	r2, #0
 800485a:	63bb      	str	r3, [r7, #56]	; 0x38
 800485c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800485e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004864:	633b      	str	r3, [r7, #48]	; 0x30
 8004866:	2300      	movs	r3, #0
 8004868:	637b      	str	r3, [r7, #52]	; 0x34
 800486a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800486e:	4622      	mov	r2, r4
 8004870:	462b      	mov	r3, r5
 8004872:	f04f 0000 	mov.w	r0, #0
 8004876:	f04f 0100 	mov.w	r1, #0
 800487a:	0159      	lsls	r1, r3, #5
 800487c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004880:	0150      	lsls	r0, r2, #5
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	4621      	mov	r1, r4
 8004888:	1a51      	subs	r1, r2, r1
 800488a:	6139      	str	r1, [r7, #16]
 800488c:	4629      	mov	r1, r5
 800488e:	eb63 0301 	sbc.w	r3, r3, r1
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	f04f 0300 	mov.w	r3, #0
 800489c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048a0:	4659      	mov	r1, fp
 80048a2:	018b      	lsls	r3, r1, #6
 80048a4:	4651      	mov	r1, sl
 80048a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048aa:	4651      	mov	r1, sl
 80048ac:	018a      	lsls	r2, r1, #6
 80048ae:	4651      	mov	r1, sl
 80048b0:	ebb2 0801 	subs.w	r8, r2, r1
 80048b4:	4659      	mov	r1, fp
 80048b6:	eb63 0901 	sbc.w	r9, r3, r1
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048ce:	4690      	mov	r8, r2
 80048d0:	4699      	mov	r9, r3
 80048d2:	4623      	mov	r3, r4
 80048d4:	eb18 0303 	adds.w	r3, r8, r3
 80048d8:	60bb      	str	r3, [r7, #8]
 80048da:	462b      	mov	r3, r5
 80048dc:	eb49 0303 	adc.w	r3, r9, r3
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048ee:	4629      	mov	r1, r5
 80048f0:	024b      	lsls	r3, r1, #9
 80048f2:	4621      	mov	r1, r4
 80048f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048f8:	4621      	mov	r1, r4
 80048fa:	024a      	lsls	r2, r1, #9
 80048fc:	4610      	mov	r0, r2
 80048fe:	4619      	mov	r1, r3
 8004900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004902:	2200      	movs	r2, #0
 8004904:	62bb      	str	r3, [r7, #40]	; 0x28
 8004906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004908:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800490c:	f7fc f9bc 	bl	8000c88 <__aeabi_uldivmod>
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	4613      	mov	r3, r2
 8004916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004918:	e058      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800491a:	4b38      	ldr	r3, [pc, #224]	; (80049fc <HAL_RCC_GetSysClockFreq+0x200>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	099b      	lsrs	r3, r3, #6
 8004920:	2200      	movs	r2, #0
 8004922:	4618      	mov	r0, r3
 8004924:	4611      	mov	r1, r2
 8004926:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800492a:	623b      	str	r3, [r7, #32]
 800492c:	2300      	movs	r3, #0
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
 8004930:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004934:	4642      	mov	r2, r8
 8004936:	464b      	mov	r3, r9
 8004938:	f04f 0000 	mov.w	r0, #0
 800493c:	f04f 0100 	mov.w	r1, #0
 8004940:	0159      	lsls	r1, r3, #5
 8004942:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004946:	0150      	lsls	r0, r2, #5
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4641      	mov	r1, r8
 800494e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004952:	4649      	mov	r1, r9
 8004954:	eb63 0b01 	sbc.w	fp, r3, r1
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004964:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004968:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800496c:	ebb2 040a 	subs.w	r4, r2, sl
 8004970:	eb63 050b 	sbc.w	r5, r3, fp
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	f04f 0300 	mov.w	r3, #0
 800497c:	00eb      	lsls	r3, r5, #3
 800497e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004982:	00e2      	lsls	r2, r4, #3
 8004984:	4614      	mov	r4, r2
 8004986:	461d      	mov	r5, r3
 8004988:	4643      	mov	r3, r8
 800498a:	18e3      	adds	r3, r4, r3
 800498c:	603b      	str	r3, [r7, #0]
 800498e:	464b      	mov	r3, r9
 8004990:	eb45 0303 	adc.w	r3, r5, r3
 8004994:	607b      	str	r3, [r7, #4]
 8004996:	f04f 0200 	mov.w	r2, #0
 800499a:	f04f 0300 	mov.w	r3, #0
 800499e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049a2:	4629      	mov	r1, r5
 80049a4:	028b      	lsls	r3, r1, #10
 80049a6:	4621      	mov	r1, r4
 80049a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049ac:	4621      	mov	r1, r4
 80049ae:	028a      	lsls	r2, r1, #10
 80049b0:	4610      	mov	r0, r2
 80049b2:	4619      	mov	r1, r3
 80049b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049b6:	2200      	movs	r2, #0
 80049b8:	61bb      	str	r3, [r7, #24]
 80049ba:	61fa      	str	r2, [r7, #28]
 80049bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049c0:	f7fc f962 	bl	8000c88 <__aeabi_uldivmod>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4613      	mov	r3, r2
 80049ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80049cc:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <HAL_RCC_GetSysClockFreq+0x200>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	0c1b      	lsrs	r3, r3, #16
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	3301      	adds	r3, #1
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80049dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049e6:	e002      	b.n	80049ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049e8:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x204>)
 80049ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3750      	adds	r7, #80	; 0x50
 80049f4:	46bd      	mov	sp, r7
 80049f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049fa:	bf00      	nop
 80049fc:	40023800 	.word	0x40023800
 8004a00:	00f42400 	.word	0x00f42400
 8004a04:	007a1200 	.word	0x007a1200

08004a08 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a0c:	4b03      	ldr	r3, [pc, #12]	; (8004a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	20000000 	.word	0x20000000

08004a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a24:	f7ff fff0 	bl	8004a08 <HAL_RCC_GetHCLKFreq>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	0a9b      	lsrs	r3, r3, #10
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	4903      	ldr	r1, [pc, #12]	; (8004a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a36:	5ccb      	ldrb	r3, [r1, r3]
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40023800 	.word	0x40023800
 8004a44:	08009ca8 	.word	0x08009ca8

08004a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a4c:	f7ff ffdc 	bl	8004a08 <HAL_RCC_GetHCLKFreq>
 8004a50:	4602      	mov	r2, r0
 8004a52:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	0b5b      	lsrs	r3, r3, #13
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	4903      	ldr	r1, [pc, #12]	; (8004a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a5e:	5ccb      	ldrb	r3, [r1, r3]
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	08009ca8 	.word	0x08009ca8

08004a70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d012      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a98:	4b69      	ldr	r3, [pc, #420]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	4a68      	ldr	r2, [pc, #416]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004aa2:	6093      	str	r3, [r2, #8]
 8004aa4:	4b66      	ldr	r3, [pc, #408]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aac:	4964      	ldr	r1, [pc, #400]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004aba:	2301      	movs	r3, #1
 8004abc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d017      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004aca:	4b5d      	ldr	r3, [pc, #372]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ad0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad8:	4959      	ldr	r1, [pc, #356]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ae8:	d101      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004aea:	2301      	movs	r3, #1
 8004aec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004af6:	2301      	movs	r3, #1
 8004af8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d017      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b06:	4b4e      	ldr	r3, [pc, #312]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	494a      	ldr	r1, [pc, #296]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b24:	d101      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004b26:	2301      	movs	r3, #1
 8004b28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004b32:	2301      	movs	r3, #1
 8004b34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004b42:	2301      	movs	r3, #1
 8004b44:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 808b 	beq.w	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b54:	4b3a      	ldr	r3, [pc, #232]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	4a39      	ldr	r2, [pc, #228]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8004b60:	4b37      	ldr	r3, [pc, #220]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b68:	60bb      	str	r3, [r7, #8]
 8004b6a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b6c:	4b35      	ldr	r3, [pc, #212]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a34      	ldr	r2, [pc, #208]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b78:	f7fd fd66 	bl	8002648 <HAL_GetTick>
 8004b7c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b80:	f7fd fd62 	bl	8002648 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b64      	cmp	r3, #100	; 0x64
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e357      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b92:	4b2c      	ldr	r3, [pc, #176]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0f0      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b9e:	4b28      	ldr	r3, [pc, #160]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ba6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d035      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d02e      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bbc:	4b20      	ldr	r3, [pc, #128]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bc4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bc6:	4b1e      	ldr	r3, [pc, #120]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bca:	4a1d      	ldr	r2, [pc, #116]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bd2:	4b1b      	ldr	r3, [pc, #108]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd6:	4a1a      	ldr	r2, [pc, #104]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bdc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004bde:	4a18      	ldr	r2, [pc, #96]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004be4:	4b16      	ldr	r3, [pc, #88]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d114      	bne.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf0:	f7fd fd2a 	bl	8002648 <HAL_GetTick>
 8004bf4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf6:	e00a      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bf8:	f7fd fd26 	bl	8002648 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e319      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c0e:	4b0c      	ldr	r3, [pc, #48]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0ee      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c26:	d111      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004c28:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c34:	4b04      	ldr	r3, [pc, #16]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c36:	400b      	ands	r3, r1
 8004c38:	4901      	ldr	r1, [pc, #4]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	608b      	str	r3, [r1, #8]
 8004c3e:	e00b      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004c40:	40023800 	.word	0x40023800
 8004c44:	40007000 	.word	0x40007000
 8004c48:	0ffffcff 	.word	0x0ffffcff
 8004c4c:	4baa      	ldr	r3, [pc, #680]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	4aa9      	ldr	r2, [pc, #676]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c52:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c56:	6093      	str	r3, [r2, #8]
 8004c58:	4ba7      	ldr	r3, [pc, #668]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c64:	49a4      	ldr	r1, [pc, #656]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0310 	and.w	r3, r3, #16
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d010      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c76:	4ba0      	ldr	r3, [pc, #640]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c7c:	4a9e      	ldr	r2, [pc, #632]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004c86:	4b9c      	ldr	r3, [pc, #624]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c88:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	4999      	ldr	r1, [pc, #612]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ca4:	4b94      	ldr	r3, [pc, #592]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004caa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cb2:	4991      	ldr	r1, [pc, #580]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cc6:	4b8c      	ldr	r3, [pc, #560]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ccc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cd4:	4988      	ldr	r1, [pc, #544]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ce8:	4b83      	ldr	r3, [pc, #524]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cf6:	4980      	ldr	r1, [pc, #512]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d0a:	4b7b      	ldr	r3, [pc, #492]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d18:	4977      	ldr	r1, [pc, #476]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d2c:	4b72      	ldr	r3, [pc, #456]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d32:	f023 0203 	bic.w	r2, r3, #3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3a:	496f      	ldr	r1, [pc, #444]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d4e:	4b6a      	ldr	r3, [pc, #424]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d54:	f023 020c 	bic.w	r2, r3, #12
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d5c:	4966      	ldr	r1, [pc, #408]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d70:	4b61      	ldr	r3, [pc, #388]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d76:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d7e:	495e      	ldr	r1, [pc, #376]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d92:	4b59      	ldr	r3, [pc, #356]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d98:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da0:	4955      	ldr	r1, [pc, #340]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004db4:	4b50      	ldr	r3, [pc, #320]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc2:	494d      	ldr	r1, [pc, #308]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004dd6:	4b48      	ldr	r3, [pc, #288]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ddc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de4:	4944      	ldr	r1, [pc, #272]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004df8:	4b3f      	ldr	r3, [pc, #252]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e06:	493c      	ldr	r1, [pc, #240]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004e1a:	4b37      	ldr	r3, [pc, #220]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e28:	4933      	ldr	r1, [pc, #204]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e3c:	4b2e      	ldr	r3, [pc, #184]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e42:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e4a:	492b      	ldr	r1, [pc, #172]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d011      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e5e:	4b26      	ldr	r3, [pc, #152]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e64:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e6c:	4922      	ldr	r1, [pc, #136]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e7c:	d101      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e9e:	4b16      	ldr	r3, [pc, #88]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eac:	4912      	ldr	r1, [pc, #72]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00b      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ec0:	4b0d      	ldr	r3, [pc, #52]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ed0:	4909      	ldr	r1, [pc, #36]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d006      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 80d9 	beq.w	800509e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004eec:	4b02      	ldr	r3, [pc, #8]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a01      	ldr	r2, [pc, #4]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ef2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ef6:	e001      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004efe:	f7fd fba3 	bl	8002648 <HAL_GetTick>
 8004f02:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f04:	e008      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f06:	f7fd fb9f 	bl	8002648 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b64      	cmp	r3, #100	; 0x64
 8004f12:	d901      	bls.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e194      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f18:	4b6c      	ldr	r3, [pc, #432]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1f0      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d021      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d11d      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f38:	4b64      	ldr	r3, [pc, #400]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f3e:	0c1b      	lsrs	r3, r3, #16
 8004f40:	f003 0303 	and.w	r3, r3, #3
 8004f44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f46:	4b61      	ldr	r3, [pc, #388]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f4c:	0e1b      	lsrs	r3, r3, #24
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	019a      	lsls	r2, r3, #6
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	041b      	lsls	r3, r3, #16
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	061b      	lsls	r3, r3, #24
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	071b      	lsls	r3, r3, #28
 8004f6c:	4957      	ldr	r1, [pc, #348]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d004      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f88:	d00a      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d02e      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f9e:	d129      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004fa0:	4b4a      	ldr	r3, [pc, #296]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fa6:	0c1b      	lsrs	r3, r3, #16
 8004fa8:	f003 0303 	and.w	r3, r3, #3
 8004fac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fae:	4b47      	ldr	r3, [pc, #284]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fb4:	0f1b      	lsrs	r3, r3, #28
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	019a      	lsls	r2, r3, #6
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	041b      	lsls	r3, r3, #16
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	061b      	lsls	r3, r3, #24
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	071b      	lsls	r3, r3, #28
 8004fd4:	493d      	ldr	r1, [pc, #244]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004fdc:	4b3b      	ldr	r3, [pc, #236]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fe2:	f023 021f 	bic.w	r2, r3, #31
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	3b01      	subs	r3, #1
 8004fec:	4937      	ldr	r1, [pc, #220]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d01d      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005000:	4b32      	ldr	r3, [pc, #200]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005006:	0e1b      	lsrs	r3, r3, #24
 8005008:	f003 030f 	and.w	r3, r3, #15
 800500c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800500e:	4b2f      	ldr	r3, [pc, #188]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005014:	0f1b      	lsrs	r3, r3, #28
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	019a      	lsls	r2, r3, #6
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	041b      	lsls	r3, r3, #16
 8005028:	431a      	orrs	r2, r3
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	061b      	lsls	r3, r3, #24
 800502e:	431a      	orrs	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	071b      	lsls	r3, r3, #28
 8005034:	4925      	ldr	r1, [pc, #148]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d011      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	019a      	lsls	r2, r3, #6
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	041b      	lsls	r3, r3, #16
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	061b      	lsls	r3, r3, #24
 800505c:	431a      	orrs	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	071b      	lsls	r3, r3, #28
 8005064:	4919      	ldr	r1, [pc, #100]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005066:	4313      	orrs	r3, r2
 8005068:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800506c:	4b17      	ldr	r3, [pc, #92]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a16      	ldr	r2, [pc, #88]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005072:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005076:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005078:	f7fd fae6 	bl	8002648 <HAL_GetTick>
 800507c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800507e:	e008      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005080:	f7fd fae2 	bl	8002648 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b64      	cmp	r3, #100	; 0x64
 800508c:	d901      	bls.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e0d7      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005092:	4b0e      	ldr	r3, [pc, #56]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0f0      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	f040 80cd 	bne.w	8005240 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80050a6:	4b09      	ldr	r3, [pc, #36]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a08      	ldr	r2, [pc, #32]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050b2:	f7fd fac9 	bl	8002648 <HAL_GetTick>
 80050b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050b8:	e00a      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050ba:	f7fd fac5 	bl	8002648 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b64      	cmp	r3, #100	; 0x64
 80050c6:	d903      	bls.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e0ba      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80050cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050d0:	4b5e      	ldr	r3, [pc, #376]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050dc:	d0ed      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d009      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d02e      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	2b00      	cmp	r3, #0
 8005104:	d12a      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005106:	4b51      	ldr	r3, [pc, #324]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510c:	0c1b      	lsrs	r3, r3, #16
 800510e:	f003 0303 	and.w	r3, r3, #3
 8005112:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005114:	4b4d      	ldr	r3, [pc, #308]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511a:	0f1b      	lsrs	r3, r3, #28
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	019a      	lsls	r2, r3, #6
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	041b      	lsls	r3, r3, #16
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	061b      	lsls	r3, r3, #24
 8005134:	431a      	orrs	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	071b      	lsls	r3, r3, #28
 800513a:	4944      	ldr	r1, [pc, #272]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800513c:	4313      	orrs	r3, r2
 800513e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005142:	4b42      	ldr	r3, [pc, #264]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005148:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005150:	3b01      	subs	r3, #1
 8005152:	021b      	lsls	r3, r3, #8
 8005154:	493d      	ldr	r1, [pc, #244]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005156:	4313      	orrs	r3, r2
 8005158:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d022      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800516c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005170:	d11d      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005172:	4b36      	ldr	r3, [pc, #216]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005178:	0e1b      	lsrs	r3, r3, #24
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005180:	4b32      	ldr	r3, [pc, #200]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005186:	0f1b      	lsrs	r3, r3, #28
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	019a      	lsls	r2, r3, #6
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	041b      	lsls	r3, r3, #16
 800519a:	431a      	orrs	r2, r3
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	061b      	lsls	r3, r3, #24
 80051a0:	431a      	orrs	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	071b      	lsls	r3, r3, #28
 80051a6:	4929      	ldr	r1, [pc, #164]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0308 	and.w	r3, r3, #8
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d028      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051ba:	4b24      	ldr	r3, [pc, #144]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c0:	0e1b      	lsrs	r3, r3, #24
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051c8:	4b20      	ldr	r3, [pc, #128]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ce:	0c1b      	lsrs	r3, r3, #16
 80051d0:	f003 0303 	and.w	r3, r3, #3
 80051d4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	019a      	lsls	r2, r3, #6
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	041b      	lsls	r3, r3, #16
 80051e0:	431a      	orrs	r2, r3
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	061b      	lsls	r3, r3, #24
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	071b      	lsls	r3, r3, #28
 80051ee:	4917      	ldr	r1, [pc, #92]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051f6:	4b15      	ldr	r3, [pc, #84]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005204:	4911      	ldr	r1, [pc, #68]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800520c:	4b0f      	ldr	r3, [pc, #60]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a0e      	ldr	r2, [pc, #56]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005216:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005218:	f7fd fa16 	bl	8002648 <HAL_GetTick>
 800521c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800521e:	e008      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005220:	f7fd fa12 	bl	8002648 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b64      	cmp	r3, #100	; 0x64
 800522c:	d901      	bls.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e007      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005232:	4b06      	ldr	r3, [pc, #24]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800523a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800523e:	d1ef      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3720      	adds	r7, #32
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	40023800 	.word	0x40023800

08005250 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e049      	b.n	80052f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d106      	bne.n	800527c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7fc ff38 	bl	80020ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3304      	adds	r3, #4
 800528c:	4619      	mov	r1, r3
 800528e:	4610      	mov	r0, r2
 8005290:	f000 fa44 	bl	800571c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
	...

08005300 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d109      	bne.n	8005324 <HAL_TIM_PWM_Start+0x24>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b01      	cmp	r3, #1
 800531a:	bf14      	ite	ne
 800531c:	2301      	movne	r3, #1
 800531e:	2300      	moveq	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	e03c      	b.n	800539e <HAL_TIM_PWM_Start+0x9e>
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b04      	cmp	r3, #4
 8005328:	d109      	bne.n	800533e <HAL_TIM_PWM_Start+0x3e>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b01      	cmp	r3, #1
 8005334:	bf14      	ite	ne
 8005336:	2301      	movne	r3, #1
 8005338:	2300      	moveq	r3, #0
 800533a:	b2db      	uxtb	r3, r3
 800533c:	e02f      	b.n	800539e <HAL_TIM_PWM_Start+0x9e>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b08      	cmp	r3, #8
 8005342:	d109      	bne.n	8005358 <HAL_TIM_PWM_Start+0x58>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b01      	cmp	r3, #1
 800534e:	bf14      	ite	ne
 8005350:	2301      	movne	r3, #1
 8005352:	2300      	moveq	r3, #0
 8005354:	b2db      	uxtb	r3, r3
 8005356:	e022      	b.n	800539e <HAL_TIM_PWM_Start+0x9e>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b0c      	cmp	r3, #12
 800535c:	d109      	bne.n	8005372 <HAL_TIM_PWM_Start+0x72>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b01      	cmp	r3, #1
 8005368:	bf14      	ite	ne
 800536a:	2301      	movne	r3, #1
 800536c:	2300      	moveq	r3, #0
 800536e:	b2db      	uxtb	r3, r3
 8005370:	e015      	b.n	800539e <HAL_TIM_PWM_Start+0x9e>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b10      	cmp	r3, #16
 8005376:	d109      	bne.n	800538c <HAL_TIM_PWM_Start+0x8c>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b01      	cmp	r3, #1
 8005382:	bf14      	ite	ne
 8005384:	2301      	movne	r3, #1
 8005386:	2300      	moveq	r3, #0
 8005388:	b2db      	uxtb	r3, r3
 800538a:	e008      	b.n	800539e <HAL_TIM_PWM_Start+0x9e>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b01      	cmp	r3, #1
 8005396:	bf14      	ite	ne
 8005398:	2301      	movne	r3, #1
 800539a:	2300      	moveq	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e092      	b.n	80054cc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d104      	bne.n	80053b6 <HAL_TIM_PWM_Start+0xb6>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053b4:	e023      	b.n	80053fe <HAL_TIM_PWM_Start+0xfe>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d104      	bne.n	80053c6 <HAL_TIM_PWM_Start+0xc6>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053c4:	e01b      	b.n	80053fe <HAL_TIM_PWM_Start+0xfe>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d104      	bne.n	80053d6 <HAL_TIM_PWM_Start+0xd6>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053d4:	e013      	b.n	80053fe <HAL_TIM_PWM_Start+0xfe>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b0c      	cmp	r3, #12
 80053da:	d104      	bne.n	80053e6 <HAL_TIM_PWM_Start+0xe6>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053e4:	e00b      	b.n	80053fe <HAL_TIM_PWM_Start+0xfe>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b10      	cmp	r3, #16
 80053ea:	d104      	bne.n	80053f6 <HAL_TIM_PWM_Start+0xf6>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053f4:	e003      	b.n	80053fe <HAL_TIM_PWM_Start+0xfe>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2202      	movs	r2, #2
 80053fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2201      	movs	r2, #1
 8005404:	6839      	ldr	r1, [r7, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fc86 	bl	8005d18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a30      	ldr	r2, [pc, #192]	; (80054d4 <HAL_TIM_PWM_Start+0x1d4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d004      	beq.n	8005420 <HAL_TIM_PWM_Start+0x120>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a2f      	ldr	r2, [pc, #188]	; (80054d8 <HAL_TIM_PWM_Start+0x1d8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d101      	bne.n	8005424 <HAL_TIM_PWM_Start+0x124>
 8005420:	2301      	movs	r3, #1
 8005422:	e000      	b.n	8005426 <HAL_TIM_PWM_Start+0x126>
 8005424:	2300      	movs	r3, #0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d007      	beq.n	800543a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005438:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a25      	ldr	r2, [pc, #148]	; (80054d4 <HAL_TIM_PWM_Start+0x1d4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d022      	beq.n	800548a <HAL_TIM_PWM_Start+0x18a>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800544c:	d01d      	beq.n	800548a <HAL_TIM_PWM_Start+0x18a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a22      	ldr	r2, [pc, #136]	; (80054dc <HAL_TIM_PWM_Start+0x1dc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d018      	beq.n	800548a <HAL_TIM_PWM_Start+0x18a>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a20      	ldr	r2, [pc, #128]	; (80054e0 <HAL_TIM_PWM_Start+0x1e0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d013      	beq.n	800548a <HAL_TIM_PWM_Start+0x18a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a1f      	ldr	r2, [pc, #124]	; (80054e4 <HAL_TIM_PWM_Start+0x1e4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00e      	beq.n	800548a <HAL_TIM_PWM_Start+0x18a>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a19      	ldr	r2, [pc, #100]	; (80054d8 <HAL_TIM_PWM_Start+0x1d8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d009      	beq.n	800548a <HAL_TIM_PWM_Start+0x18a>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a1b      	ldr	r2, [pc, #108]	; (80054e8 <HAL_TIM_PWM_Start+0x1e8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d004      	beq.n	800548a <HAL_TIM_PWM_Start+0x18a>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a19      	ldr	r2, [pc, #100]	; (80054ec <HAL_TIM_PWM_Start+0x1ec>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d115      	bne.n	80054b6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	4b17      	ldr	r3, [pc, #92]	; (80054f0 <HAL_TIM_PWM_Start+0x1f0>)
 8005492:	4013      	ands	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b06      	cmp	r3, #6
 800549a:	d015      	beq.n	80054c8 <HAL_TIM_PWM_Start+0x1c8>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a2:	d011      	beq.n	80054c8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0201 	orr.w	r2, r2, #1
 80054b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b4:	e008      	b.n	80054c8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0201 	orr.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	e000      	b.n	80054ca <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40010000 	.word	0x40010000
 80054d8:	40010400 	.word	0x40010400
 80054dc:	40000400 	.word	0x40000400
 80054e0:	40000800 	.word	0x40000800
 80054e4:	40000c00 	.word	0x40000c00
 80054e8:	40014000 	.word	0x40014000
 80054ec:	40001800 	.word	0x40001800
 80054f0:	00010007 	.word	0x00010007

080054f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800550e:	2302      	movs	r3, #2
 8005510:	e0ff      	b.n	8005712 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b14      	cmp	r3, #20
 800551e:	f200 80f0 	bhi.w	8005702 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005522:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005528:	0800557d 	.word	0x0800557d
 800552c:	08005703 	.word	0x08005703
 8005530:	08005703 	.word	0x08005703
 8005534:	08005703 	.word	0x08005703
 8005538:	080055bd 	.word	0x080055bd
 800553c:	08005703 	.word	0x08005703
 8005540:	08005703 	.word	0x08005703
 8005544:	08005703 	.word	0x08005703
 8005548:	080055ff 	.word	0x080055ff
 800554c:	08005703 	.word	0x08005703
 8005550:	08005703 	.word	0x08005703
 8005554:	08005703 	.word	0x08005703
 8005558:	0800563f 	.word	0x0800563f
 800555c:	08005703 	.word	0x08005703
 8005560:	08005703 	.word	0x08005703
 8005564:	08005703 	.word	0x08005703
 8005568:	08005681 	.word	0x08005681
 800556c:	08005703 	.word	0x08005703
 8005570:	08005703 	.word	0x08005703
 8005574:	08005703 	.word	0x08005703
 8005578:	080056c1 	.word	0x080056c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	4618      	mov	r0, r3
 8005584:	f000 f96a 	bl	800585c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0208 	orr.w	r2, r2, #8
 8005596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0204 	bic.w	r2, r2, #4
 80055a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6999      	ldr	r1, [r3, #24]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	691a      	ldr	r2, [r3, #16]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	619a      	str	r2, [r3, #24]
      break;
 80055ba:	e0a5      	b.n	8005708 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68b9      	ldr	r1, [r7, #8]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 f9bc 	bl	8005940 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699a      	ldr	r2, [r3, #24]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6999      	ldr	r1, [r3, #24]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	021a      	lsls	r2, r3, #8
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	619a      	str	r2, [r3, #24]
      break;
 80055fc:	e084      	b.n	8005708 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68b9      	ldr	r1, [r7, #8]
 8005604:	4618      	mov	r0, r3
 8005606:	f000 fa13 	bl	8005a30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69da      	ldr	r2, [r3, #28]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f042 0208 	orr.w	r2, r2, #8
 8005618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69da      	ldr	r2, [r3, #28]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0204 	bic.w	r2, r2, #4
 8005628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69d9      	ldr	r1, [r3, #28]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	691a      	ldr	r2, [r3, #16]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	61da      	str	r2, [r3, #28]
      break;
 800563c:	e064      	b.n	8005708 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68b9      	ldr	r1, [r7, #8]
 8005644:	4618      	mov	r0, r3
 8005646:	f000 fa69 	bl	8005b1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69da      	ldr	r2, [r3, #28]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69d9      	ldr	r1, [r3, #28]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	021a      	lsls	r2, r3, #8
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	61da      	str	r2, [r3, #28]
      break;
 800567e:	e043      	b.n	8005708 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	4618      	mov	r0, r3
 8005688:	f000 faa0 	bl	8005bcc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0208 	orr.w	r2, r2, #8
 800569a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 0204 	bic.w	r2, r2, #4
 80056aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	691a      	ldr	r2, [r3, #16]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056be:	e023      	b.n	8005708 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68b9      	ldr	r1, [r7, #8]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fad2 	bl	8005c70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	021a      	lsls	r2, r3, #8
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005700:	e002      	b.n	8005708 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	75fb      	strb	r3, [r7, #23]
      break;
 8005706:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005710:	7dfb      	ldrb	r3, [r7, #23]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop

0800571c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a40      	ldr	r2, [pc, #256]	; (8005830 <TIM_Base_SetConfig+0x114>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d013      	beq.n	800575c <TIM_Base_SetConfig+0x40>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573a:	d00f      	beq.n	800575c <TIM_Base_SetConfig+0x40>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a3d      	ldr	r2, [pc, #244]	; (8005834 <TIM_Base_SetConfig+0x118>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00b      	beq.n	800575c <TIM_Base_SetConfig+0x40>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a3c      	ldr	r2, [pc, #240]	; (8005838 <TIM_Base_SetConfig+0x11c>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d007      	beq.n	800575c <TIM_Base_SetConfig+0x40>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a3b      	ldr	r2, [pc, #236]	; (800583c <TIM_Base_SetConfig+0x120>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d003      	beq.n	800575c <TIM_Base_SetConfig+0x40>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a3a      	ldr	r2, [pc, #232]	; (8005840 <TIM_Base_SetConfig+0x124>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d108      	bne.n	800576e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	4313      	orrs	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a2f      	ldr	r2, [pc, #188]	; (8005830 <TIM_Base_SetConfig+0x114>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d02b      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800577c:	d027      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a2c      	ldr	r2, [pc, #176]	; (8005834 <TIM_Base_SetConfig+0x118>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d023      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a2b      	ldr	r2, [pc, #172]	; (8005838 <TIM_Base_SetConfig+0x11c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d01f      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a2a      	ldr	r2, [pc, #168]	; (800583c <TIM_Base_SetConfig+0x120>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d01b      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a29      	ldr	r2, [pc, #164]	; (8005840 <TIM_Base_SetConfig+0x124>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d017      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a28      	ldr	r2, [pc, #160]	; (8005844 <TIM_Base_SetConfig+0x128>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d013      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a27      	ldr	r2, [pc, #156]	; (8005848 <TIM_Base_SetConfig+0x12c>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00f      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a26      	ldr	r2, [pc, #152]	; (800584c <TIM_Base_SetConfig+0x130>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00b      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a25      	ldr	r2, [pc, #148]	; (8005850 <TIM_Base_SetConfig+0x134>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d007      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a24      	ldr	r2, [pc, #144]	; (8005854 <TIM_Base_SetConfig+0x138>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d003      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a23      	ldr	r2, [pc, #140]	; (8005858 <TIM_Base_SetConfig+0x13c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d108      	bne.n	80057e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4313      	orrs	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a0a      	ldr	r2, [pc, #40]	; (8005830 <TIM_Base_SetConfig+0x114>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d003      	beq.n	8005814 <TIM_Base_SetConfig+0xf8>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a0c      	ldr	r2, [pc, #48]	; (8005840 <TIM_Base_SetConfig+0x124>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d103      	bne.n	800581c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	691a      	ldr	r2, [r3, #16]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	615a      	str	r2, [r3, #20]
}
 8005822:	bf00      	nop
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	40010000 	.word	0x40010000
 8005834:	40000400 	.word	0x40000400
 8005838:	40000800 	.word	0x40000800
 800583c:	40000c00 	.word	0x40000c00
 8005840:	40010400 	.word	0x40010400
 8005844:	40014000 	.word	0x40014000
 8005848:	40014400 	.word	0x40014400
 800584c:	40014800 	.word	0x40014800
 8005850:	40001800 	.word	0x40001800
 8005854:	40001c00 	.word	0x40001c00
 8005858:	40002000 	.word	0x40002000

0800585c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	f023 0201 	bic.w	r2, r3, #1
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4b2b      	ldr	r3, [pc, #172]	; (8005934 <TIM_OC1_SetConfig+0xd8>)
 8005888:	4013      	ands	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0303 	bic.w	r3, r3, #3
 8005892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f023 0302 	bic.w	r3, r3, #2
 80058a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a21      	ldr	r2, [pc, #132]	; (8005938 <TIM_OC1_SetConfig+0xdc>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d003      	beq.n	80058c0 <TIM_OC1_SetConfig+0x64>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a20      	ldr	r2, [pc, #128]	; (800593c <TIM_OC1_SetConfig+0xe0>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d10c      	bne.n	80058da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f023 0308 	bic.w	r3, r3, #8
 80058c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f023 0304 	bic.w	r3, r3, #4
 80058d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a16      	ldr	r2, [pc, #88]	; (8005938 <TIM_OC1_SetConfig+0xdc>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d003      	beq.n	80058ea <TIM_OC1_SetConfig+0x8e>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a15      	ldr	r2, [pc, #84]	; (800593c <TIM_OC1_SetConfig+0xe0>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d111      	bne.n	800590e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	4313      	orrs	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	621a      	str	r2, [r3, #32]
}
 8005928:	bf00      	nop
 800592a:	371c      	adds	r7, #28
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	fffeff8f 	.word	0xfffeff8f
 8005938:	40010000 	.word	0x40010000
 800593c:	40010400 	.word	0x40010400

08005940 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005940:	b480      	push	{r7}
 8005942:	b087      	sub	sp, #28
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	f023 0210 	bic.w	r2, r3, #16
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	4b2e      	ldr	r3, [pc, #184]	; (8005a24 <TIM_OC2_SetConfig+0xe4>)
 800596c:	4013      	ands	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	021b      	lsls	r3, r3, #8
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	4313      	orrs	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f023 0320 	bic.w	r3, r3, #32
 800598a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	4313      	orrs	r3, r2
 8005996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a23      	ldr	r2, [pc, #140]	; (8005a28 <TIM_OC2_SetConfig+0xe8>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d003      	beq.n	80059a8 <TIM_OC2_SetConfig+0x68>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a22      	ldr	r2, [pc, #136]	; (8005a2c <TIM_OC2_SetConfig+0xec>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d10d      	bne.n	80059c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	011b      	lsls	r3, r3, #4
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a18      	ldr	r2, [pc, #96]	; (8005a28 <TIM_OC2_SetConfig+0xe8>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d003      	beq.n	80059d4 <TIM_OC2_SetConfig+0x94>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a17      	ldr	r2, [pc, #92]	; (8005a2c <TIM_OC2_SetConfig+0xec>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d113      	bne.n	80059fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	621a      	str	r2, [r3, #32]
}
 8005a16:	bf00      	nop
 8005a18:	371c      	adds	r7, #28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	feff8fff 	.word	0xfeff8fff
 8005a28:	40010000 	.word	0x40010000
 8005a2c:	40010400 	.word	0x40010400

08005a30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4b2d      	ldr	r3, [pc, #180]	; (8005b10 <TIM_OC3_SetConfig+0xe0>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0303 	bic.w	r3, r3, #3
 8005a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	021b      	lsls	r3, r3, #8
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a22      	ldr	r2, [pc, #136]	; (8005b14 <TIM_OC3_SetConfig+0xe4>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d003      	beq.n	8005a96 <TIM_OC3_SetConfig+0x66>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a21      	ldr	r2, [pc, #132]	; (8005b18 <TIM_OC3_SetConfig+0xe8>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d10d      	bne.n	8005ab2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	021b      	lsls	r3, r3, #8
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a17      	ldr	r2, [pc, #92]	; (8005b14 <TIM_OC3_SetConfig+0xe4>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d003      	beq.n	8005ac2 <TIM_OC3_SetConfig+0x92>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a16      	ldr	r2, [pc, #88]	; (8005b18 <TIM_OC3_SetConfig+0xe8>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d113      	bne.n	8005aea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	011b      	lsls	r3, r3, #4
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	621a      	str	r2, [r3, #32]
}
 8005b04:	bf00      	nop
 8005b06:	371c      	adds	r7, #28
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	fffeff8f 	.word	0xfffeff8f
 8005b14:	40010000 	.word	0x40010000
 8005b18:	40010400 	.word	0x40010400

08005b1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	4b1e      	ldr	r3, [pc, #120]	; (8005bc0 <TIM_OC4_SetConfig+0xa4>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	021b      	lsls	r3, r3, #8
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	031b      	lsls	r3, r3, #12
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a13      	ldr	r2, [pc, #76]	; (8005bc4 <TIM_OC4_SetConfig+0xa8>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d003      	beq.n	8005b84 <TIM_OC4_SetConfig+0x68>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a12      	ldr	r2, [pc, #72]	; (8005bc8 <TIM_OC4_SetConfig+0xac>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d109      	bne.n	8005b98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	019b      	lsls	r3, r3, #6
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	621a      	str	r2, [r3, #32]
}
 8005bb2:	bf00      	nop
 8005bb4:	371c      	adds	r7, #28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	feff8fff 	.word	0xfeff8fff
 8005bc4:	40010000 	.word	0x40010000
 8005bc8:	40010400 	.word	0x40010400

08005bcc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	4b1b      	ldr	r3, [pc, #108]	; (8005c64 <TIM_OC5_SetConfig+0x98>)
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	041b      	lsls	r3, r3, #16
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a12      	ldr	r2, [pc, #72]	; (8005c68 <TIM_OC5_SetConfig+0x9c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d003      	beq.n	8005c2a <TIM_OC5_SetConfig+0x5e>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a11      	ldr	r2, [pc, #68]	; (8005c6c <TIM_OC5_SetConfig+0xa0>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d109      	bne.n	8005c3e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	021b      	lsls	r3, r3, #8
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	621a      	str	r2, [r3, #32]
}
 8005c58:	bf00      	nop
 8005c5a:	371c      	adds	r7, #28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	fffeff8f 	.word	0xfffeff8f
 8005c68:	40010000 	.word	0x40010000
 8005c6c:	40010400 	.word	0x40010400

08005c70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4b1c      	ldr	r3, [pc, #112]	; (8005d0c <TIM_OC6_SetConfig+0x9c>)
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	021b      	lsls	r3, r3, #8
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	051b      	lsls	r3, r3, #20
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a13      	ldr	r2, [pc, #76]	; (8005d10 <TIM_OC6_SetConfig+0xa0>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d003      	beq.n	8005cd0 <TIM_OC6_SetConfig+0x60>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a12      	ldr	r2, [pc, #72]	; (8005d14 <TIM_OC6_SetConfig+0xa4>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d109      	bne.n	8005ce4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	029b      	lsls	r3, r3, #10
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	621a      	str	r2, [r3, #32]
}
 8005cfe:	bf00      	nop
 8005d00:	371c      	adds	r7, #28
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	feff8fff 	.word	0xfeff8fff
 8005d10:	40010000 	.word	0x40010000
 8005d14:	40010400 	.word	0x40010400

08005d18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f003 031f 	and.w	r3, r3, #31
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6a1a      	ldr	r2, [r3, #32]
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	43db      	mvns	r3, r3
 8005d3a:	401a      	ands	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6a1a      	ldr	r2, [r3, #32]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f003 031f 	and.w	r3, r3, #31
 8005d4a:	6879      	ldr	r1, [r7, #4]
 8005d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d50:	431a      	orrs	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	621a      	str	r2, [r3, #32]
}
 8005d56:	bf00      	nop
 8005d58:	371c      	adds	r7, #28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
	...

08005d64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d101      	bne.n	8005d7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	e06d      	b.n	8005e58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a30      	ldr	r2, [pc, #192]	; (8005e64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d004      	beq.n	8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a2f      	ldr	r2, [pc, #188]	; (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d108      	bne.n	8005dc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005db6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a20      	ldr	r2, [pc, #128]	; (8005e64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d022      	beq.n	8005e2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dee:	d01d      	beq.n	8005e2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a1d      	ldr	r2, [pc, #116]	; (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d018      	beq.n	8005e2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a1c      	ldr	r2, [pc, #112]	; (8005e70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d013      	beq.n	8005e2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a1a      	ldr	r2, [pc, #104]	; (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00e      	beq.n	8005e2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a15      	ldr	r2, [pc, #84]	; (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d009      	beq.n	8005e2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a16      	ldr	r2, [pc, #88]	; (8005e78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d004      	beq.n	8005e2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a15      	ldr	r2, [pc, #84]	; (8005e7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d10c      	bne.n	8005e46 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	40010000 	.word	0x40010000
 8005e68:	40010400 	.word	0x40010400
 8005e6c:	40000400 	.word	0x40000400
 8005e70:	40000800 	.word	0x40000800
 8005e74:	40000c00 	.word	0x40000c00
 8005e78:	40014000 	.word	0x40014000
 8005e7c:	40001800 	.word	0x40001800

08005e80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e040      	b.n	8005f14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d106      	bne.n	8005ea8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7fc f97a 	bl	800219c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2224      	movs	r2, #36	; 0x24
 8005eac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0201 	bic.w	r2, r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f8b0 	bl	8006024 <UART_SetConfig>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e022      	b.n	8005f14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fb08 	bl	80064ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689a      	ldr	r2, [r3, #8]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005efa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0201 	orr.w	r2, r2, #1
 8005f0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fb8f 	bl	8006630 <UART_CheckIdleState>
 8005f12:	4603      	mov	r3, r0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08a      	sub	sp, #40	; 0x28
 8005f20:	af02      	add	r7, sp, #8
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	603b      	str	r3, [r7, #0]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f30:	2b20      	cmp	r3, #32
 8005f32:	d171      	bne.n	8006018 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <HAL_UART_Transmit+0x24>
 8005f3a:	88fb      	ldrh	r3, [r7, #6]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e06a      	b.n	800601a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2221      	movs	r2, #33	; 0x21
 8005f50:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f52:	f7fc fb79 	bl	8002648 <HAL_GetTick>
 8005f56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	88fa      	ldrh	r2, [r7, #6]
 8005f5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	88fa      	ldrh	r2, [r7, #6]
 8005f64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f70:	d108      	bne.n	8005f84 <HAL_UART_Transmit+0x68>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d104      	bne.n	8005f84 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	61bb      	str	r3, [r7, #24]
 8005f82:	e003      	b.n	8005f8c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f8c:	e02c      	b.n	8005fe8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	2200      	movs	r2, #0
 8005f96:	2180      	movs	r1, #128	; 0x80
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 fb80 	bl	800669e <UART_WaitOnFlagUntilTimeout>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e038      	b.n	800601a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10b      	bne.n	8005fc6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fbc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	3302      	adds	r3, #2
 8005fc2:	61bb      	str	r3, [r7, #24]
 8005fc4:	e007      	b.n	8005fd6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	781a      	ldrb	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1cc      	bne.n	8005f8e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	2140      	movs	r1, #64	; 0x40
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 fb4d 	bl	800669e <UART_WaitOnFlagUntilTimeout>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e005      	b.n	800601a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2220      	movs	r2, #32
 8006012:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006014:	2300      	movs	r3, #0
 8006016:	e000      	b.n	800601a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006018:	2302      	movs	r3, #2
  }
}
 800601a:	4618      	mov	r0, r3
 800601c:	3720      	adds	r7, #32
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
	...

08006024 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b088      	sub	sp, #32
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800602c:	2300      	movs	r3, #0
 800602e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	431a      	orrs	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	4313      	orrs	r3, r2
 8006046:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	4ba6      	ldr	r3, [pc, #664]	; (80062e8 <UART_SetConfig+0x2c4>)
 8006050:	4013      	ands	r3, r2
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	6812      	ldr	r2, [r2, #0]
 8006056:	6979      	ldr	r1, [r7, #20]
 8006058:	430b      	orrs	r3, r1
 800605a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	4313      	orrs	r3, r2
 8006080:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	430a      	orrs	r2, r1
 8006094:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a94      	ldr	r2, [pc, #592]	; (80062ec <UART_SetConfig+0x2c8>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d120      	bne.n	80060e2 <UART_SetConfig+0xbe>
 80060a0:	4b93      	ldr	r3, [pc, #588]	; (80062f0 <UART_SetConfig+0x2cc>)
 80060a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a6:	f003 0303 	and.w	r3, r3, #3
 80060aa:	2b03      	cmp	r3, #3
 80060ac:	d816      	bhi.n	80060dc <UART_SetConfig+0xb8>
 80060ae:	a201      	add	r2, pc, #4	; (adr r2, 80060b4 <UART_SetConfig+0x90>)
 80060b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b4:	080060c5 	.word	0x080060c5
 80060b8:	080060d1 	.word	0x080060d1
 80060bc:	080060cb 	.word	0x080060cb
 80060c0:	080060d7 	.word	0x080060d7
 80060c4:	2301      	movs	r3, #1
 80060c6:	77fb      	strb	r3, [r7, #31]
 80060c8:	e150      	b.n	800636c <UART_SetConfig+0x348>
 80060ca:	2302      	movs	r3, #2
 80060cc:	77fb      	strb	r3, [r7, #31]
 80060ce:	e14d      	b.n	800636c <UART_SetConfig+0x348>
 80060d0:	2304      	movs	r3, #4
 80060d2:	77fb      	strb	r3, [r7, #31]
 80060d4:	e14a      	b.n	800636c <UART_SetConfig+0x348>
 80060d6:	2308      	movs	r3, #8
 80060d8:	77fb      	strb	r3, [r7, #31]
 80060da:	e147      	b.n	800636c <UART_SetConfig+0x348>
 80060dc:	2310      	movs	r3, #16
 80060de:	77fb      	strb	r3, [r7, #31]
 80060e0:	e144      	b.n	800636c <UART_SetConfig+0x348>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a83      	ldr	r2, [pc, #524]	; (80062f4 <UART_SetConfig+0x2d0>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d132      	bne.n	8006152 <UART_SetConfig+0x12e>
 80060ec:	4b80      	ldr	r3, [pc, #512]	; (80062f0 <UART_SetConfig+0x2cc>)
 80060ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f2:	f003 030c 	and.w	r3, r3, #12
 80060f6:	2b0c      	cmp	r3, #12
 80060f8:	d828      	bhi.n	800614c <UART_SetConfig+0x128>
 80060fa:	a201      	add	r2, pc, #4	; (adr r2, 8006100 <UART_SetConfig+0xdc>)
 80060fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006100:	08006135 	.word	0x08006135
 8006104:	0800614d 	.word	0x0800614d
 8006108:	0800614d 	.word	0x0800614d
 800610c:	0800614d 	.word	0x0800614d
 8006110:	08006141 	.word	0x08006141
 8006114:	0800614d 	.word	0x0800614d
 8006118:	0800614d 	.word	0x0800614d
 800611c:	0800614d 	.word	0x0800614d
 8006120:	0800613b 	.word	0x0800613b
 8006124:	0800614d 	.word	0x0800614d
 8006128:	0800614d 	.word	0x0800614d
 800612c:	0800614d 	.word	0x0800614d
 8006130:	08006147 	.word	0x08006147
 8006134:	2300      	movs	r3, #0
 8006136:	77fb      	strb	r3, [r7, #31]
 8006138:	e118      	b.n	800636c <UART_SetConfig+0x348>
 800613a:	2302      	movs	r3, #2
 800613c:	77fb      	strb	r3, [r7, #31]
 800613e:	e115      	b.n	800636c <UART_SetConfig+0x348>
 8006140:	2304      	movs	r3, #4
 8006142:	77fb      	strb	r3, [r7, #31]
 8006144:	e112      	b.n	800636c <UART_SetConfig+0x348>
 8006146:	2308      	movs	r3, #8
 8006148:	77fb      	strb	r3, [r7, #31]
 800614a:	e10f      	b.n	800636c <UART_SetConfig+0x348>
 800614c:	2310      	movs	r3, #16
 800614e:	77fb      	strb	r3, [r7, #31]
 8006150:	e10c      	b.n	800636c <UART_SetConfig+0x348>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a68      	ldr	r2, [pc, #416]	; (80062f8 <UART_SetConfig+0x2d4>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d120      	bne.n	800619e <UART_SetConfig+0x17a>
 800615c:	4b64      	ldr	r3, [pc, #400]	; (80062f0 <UART_SetConfig+0x2cc>)
 800615e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006162:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006166:	2b30      	cmp	r3, #48	; 0x30
 8006168:	d013      	beq.n	8006192 <UART_SetConfig+0x16e>
 800616a:	2b30      	cmp	r3, #48	; 0x30
 800616c:	d814      	bhi.n	8006198 <UART_SetConfig+0x174>
 800616e:	2b20      	cmp	r3, #32
 8006170:	d009      	beq.n	8006186 <UART_SetConfig+0x162>
 8006172:	2b20      	cmp	r3, #32
 8006174:	d810      	bhi.n	8006198 <UART_SetConfig+0x174>
 8006176:	2b00      	cmp	r3, #0
 8006178:	d002      	beq.n	8006180 <UART_SetConfig+0x15c>
 800617a:	2b10      	cmp	r3, #16
 800617c:	d006      	beq.n	800618c <UART_SetConfig+0x168>
 800617e:	e00b      	b.n	8006198 <UART_SetConfig+0x174>
 8006180:	2300      	movs	r3, #0
 8006182:	77fb      	strb	r3, [r7, #31]
 8006184:	e0f2      	b.n	800636c <UART_SetConfig+0x348>
 8006186:	2302      	movs	r3, #2
 8006188:	77fb      	strb	r3, [r7, #31]
 800618a:	e0ef      	b.n	800636c <UART_SetConfig+0x348>
 800618c:	2304      	movs	r3, #4
 800618e:	77fb      	strb	r3, [r7, #31]
 8006190:	e0ec      	b.n	800636c <UART_SetConfig+0x348>
 8006192:	2308      	movs	r3, #8
 8006194:	77fb      	strb	r3, [r7, #31]
 8006196:	e0e9      	b.n	800636c <UART_SetConfig+0x348>
 8006198:	2310      	movs	r3, #16
 800619a:	77fb      	strb	r3, [r7, #31]
 800619c:	e0e6      	b.n	800636c <UART_SetConfig+0x348>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a56      	ldr	r2, [pc, #344]	; (80062fc <UART_SetConfig+0x2d8>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d120      	bne.n	80061ea <UART_SetConfig+0x1c6>
 80061a8:	4b51      	ldr	r3, [pc, #324]	; (80062f0 <UART_SetConfig+0x2cc>)
 80061aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80061b2:	2bc0      	cmp	r3, #192	; 0xc0
 80061b4:	d013      	beq.n	80061de <UART_SetConfig+0x1ba>
 80061b6:	2bc0      	cmp	r3, #192	; 0xc0
 80061b8:	d814      	bhi.n	80061e4 <UART_SetConfig+0x1c0>
 80061ba:	2b80      	cmp	r3, #128	; 0x80
 80061bc:	d009      	beq.n	80061d2 <UART_SetConfig+0x1ae>
 80061be:	2b80      	cmp	r3, #128	; 0x80
 80061c0:	d810      	bhi.n	80061e4 <UART_SetConfig+0x1c0>
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d002      	beq.n	80061cc <UART_SetConfig+0x1a8>
 80061c6:	2b40      	cmp	r3, #64	; 0x40
 80061c8:	d006      	beq.n	80061d8 <UART_SetConfig+0x1b4>
 80061ca:	e00b      	b.n	80061e4 <UART_SetConfig+0x1c0>
 80061cc:	2300      	movs	r3, #0
 80061ce:	77fb      	strb	r3, [r7, #31]
 80061d0:	e0cc      	b.n	800636c <UART_SetConfig+0x348>
 80061d2:	2302      	movs	r3, #2
 80061d4:	77fb      	strb	r3, [r7, #31]
 80061d6:	e0c9      	b.n	800636c <UART_SetConfig+0x348>
 80061d8:	2304      	movs	r3, #4
 80061da:	77fb      	strb	r3, [r7, #31]
 80061dc:	e0c6      	b.n	800636c <UART_SetConfig+0x348>
 80061de:	2308      	movs	r3, #8
 80061e0:	77fb      	strb	r3, [r7, #31]
 80061e2:	e0c3      	b.n	800636c <UART_SetConfig+0x348>
 80061e4:	2310      	movs	r3, #16
 80061e6:	77fb      	strb	r3, [r7, #31]
 80061e8:	e0c0      	b.n	800636c <UART_SetConfig+0x348>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a44      	ldr	r2, [pc, #272]	; (8006300 <UART_SetConfig+0x2dc>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d125      	bne.n	8006240 <UART_SetConfig+0x21c>
 80061f4:	4b3e      	ldr	r3, [pc, #248]	; (80062f0 <UART_SetConfig+0x2cc>)
 80061f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006202:	d017      	beq.n	8006234 <UART_SetConfig+0x210>
 8006204:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006208:	d817      	bhi.n	800623a <UART_SetConfig+0x216>
 800620a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800620e:	d00b      	beq.n	8006228 <UART_SetConfig+0x204>
 8006210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006214:	d811      	bhi.n	800623a <UART_SetConfig+0x216>
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <UART_SetConfig+0x1fe>
 800621a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800621e:	d006      	beq.n	800622e <UART_SetConfig+0x20a>
 8006220:	e00b      	b.n	800623a <UART_SetConfig+0x216>
 8006222:	2300      	movs	r3, #0
 8006224:	77fb      	strb	r3, [r7, #31]
 8006226:	e0a1      	b.n	800636c <UART_SetConfig+0x348>
 8006228:	2302      	movs	r3, #2
 800622a:	77fb      	strb	r3, [r7, #31]
 800622c:	e09e      	b.n	800636c <UART_SetConfig+0x348>
 800622e:	2304      	movs	r3, #4
 8006230:	77fb      	strb	r3, [r7, #31]
 8006232:	e09b      	b.n	800636c <UART_SetConfig+0x348>
 8006234:	2308      	movs	r3, #8
 8006236:	77fb      	strb	r3, [r7, #31]
 8006238:	e098      	b.n	800636c <UART_SetConfig+0x348>
 800623a:	2310      	movs	r3, #16
 800623c:	77fb      	strb	r3, [r7, #31]
 800623e:	e095      	b.n	800636c <UART_SetConfig+0x348>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a2f      	ldr	r2, [pc, #188]	; (8006304 <UART_SetConfig+0x2e0>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d125      	bne.n	8006296 <UART_SetConfig+0x272>
 800624a:	4b29      	ldr	r3, [pc, #164]	; (80062f0 <UART_SetConfig+0x2cc>)
 800624c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006250:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006254:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006258:	d017      	beq.n	800628a <UART_SetConfig+0x266>
 800625a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800625e:	d817      	bhi.n	8006290 <UART_SetConfig+0x26c>
 8006260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006264:	d00b      	beq.n	800627e <UART_SetConfig+0x25a>
 8006266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800626a:	d811      	bhi.n	8006290 <UART_SetConfig+0x26c>
 800626c:	2b00      	cmp	r3, #0
 800626e:	d003      	beq.n	8006278 <UART_SetConfig+0x254>
 8006270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006274:	d006      	beq.n	8006284 <UART_SetConfig+0x260>
 8006276:	e00b      	b.n	8006290 <UART_SetConfig+0x26c>
 8006278:	2301      	movs	r3, #1
 800627a:	77fb      	strb	r3, [r7, #31]
 800627c:	e076      	b.n	800636c <UART_SetConfig+0x348>
 800627e:	2302      	movs	r3, #2
 8006280:	77fb      	strb	r3, [r7, #31]
 8006282:	e073      	b.n	800636c <UART_SetConfig+0x348>
 8006284:	2304      	movs	r3, #4
 8006286:	77fb      	strb	r3, [r7, #31]
 8006288:	e070      	b.n	800636c <UART_SetConfig+0x348>
 800628a:	2308      	movs	r3, #8
 800628c:	77fb      	strb	r3, [r7, #31]
 800628e:	e06d      	b.n	800636c <UART_SetConfig+0x348>
 8006290:	2310      	movs	r3, #16
 8006292:	77fb      	strb	r3, [r7, #31]
 8006294:	e06a      	b.n	800636c <UART_SetConfig+0x348>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a1b      	ldr	r2, [pc, #108]	; (8006308 <UART_SetConfig+0x2e4>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d138      	bne.n	8006312 <UART_SetConfig+0x2ee>
 80062a0:	4b13      	ldr	r3, [pc, #76]	; (80062f0 <UART_SetConfig+0x2cc>)
 80062a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80062aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062ae:	d017      	beq.n	80062e0 <UART_SetConfig+0x2bc>
 80062b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062b4:	d82a      	bhi.n	800630c <UART_SetConfig+0x2e8>
 80062b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ba:	d00b      	beq.n	80062d4 <UART_SetConfig+0x2b0>
 80062bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062c0:	d824      	bhi.n	800630c <UART_SetConfig+0x2e8>
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <UART_SetConfig+0x2aa>
 80062c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ca:	d006      	beq.n	80062da <UART_SetConfig+0x2b6>
 80062cc:	e01e      	b.n	800630c <UART_SetConfig+0x2e8>
 80062ce:	2300      	movs	r3, #0
 80062d0:	77fb      	strb	r3, [r7, #31]
 80062d2:	e04b      	b.n	800636c <UART_SetConfig+0x348>
 80062d4:	2302      	movs	r3, #2
 80062d6:	77fb      	strb	r3, [r7, #31]
 80062d8:	e048      	b.n	800636c <UART_SetConfig+0x348>
 80062da:	2304      	movs	r3, #4
 80062dc:	77fb      	strb	r3, [r7, #31]
 80062de:	e045      	b.n	800636c <UART_SetConfig+0x348>
 80062e0:	2308      	movs	r3, #8
 80062e2:	77fb      	strb	r3, [r7, #31]
 80062e4:	e042      	b.n	800636c <UART_SetConfig+0x348>
 80062e6:	bf00      	nop
 80062e8:	efff69f3 	.word	0xefff69f3
 80062ec:	40011000 	.word	0x40011000
 80062f0:	40023800 	.word	0x40023800
 80062f4:	40004400 	.word	0x40004400
 80062f8:	40004800 	.word	0x40004800
 80062fc:	40004c00 	.word	0x40004c00
 8006300:	40005000 	.word	0x40005000
 8006304:	40011400 	.word	0x40011400
 8006308:	40007800 	.word	0x40007800
 800630c:	2310      	movs	r3, #16
 800630e:	77fb      	strb	r3, [r7, #31]
 8006310:	e02c      	b.n	800636c <UART_SetConfig+0x348>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a72      	ldr	r2, [pc, #456]	; (80064e0 <UART_SetConfig+0x4bc>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d125      	bne.n	8006368 <UART_SetConfig+0x344>
 800631c:	4b71      	ldr	r3, [pc, #452]	; (80064e4 <UART_SetConfig+0x4c0>)
 800631e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006322:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006326:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800632a:	d017      	beq.n	800635c <UART_SetConfig+0x338>
 800632c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006330:	d817      	bhi.n	8006362 <UART_SetConfig+0x33e>
 8006332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006336:	d00b      	beq.n	8006350 <UART_SetConfig+0x32c>
 8006338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800633c:	d811      	bhi.n	8006362 <UART_SetConfig+0x33e>
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <UART_SetConfig+0x326>
 8006342:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006346:	d006      	beq.n	8006356 <UART_SetConfig+0x332>
 8006348:	e00b      	b.n	8006362 <UART_SetConfig+0x33e>
 800634a:	2300      	movs	r3, #0
 800634c:	77fb      	strb	r3, [r7, #31]
 800634e:	e00d      	b.n	800636c <UART_SetConfig+0x348>
 8006350:	2302      	movs	r3, #2
 8006352:	77fb      	strb	r3, [r7, #31]
 8006354:	e00a      	b.n	800636c <UART_SetConfig+0x348>
 8006356:	2304      	movs	r3, #4
 8006358:	77fb      	strb	r3, [r7, #31]
 800635a:	e007      	b.n	800636c <UART_SetConfig+0x348>
 800635c:	2308      	movs	r3, #8
 800635e:	77fb      	strb	r3, [r7, #31]
 8006360:	e004      	b.n	800636c <UART_SetConfig+0x348>
 8006362:	2310      	movs	r3, #16
 8006364:	77fb      	strb	r3, [r7, #31]
 8006366:	e001      	b.n	800636c <UART_SetConfig+0x348>
 8006368:	2310      	movs	r3, #16
 800636a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006374:	d15b      	bne.n	800642e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006376:	7ffb      	ldrb	r3, [r7, #31]
 8006378:	2b08      	cmp	r3, #8
 800637a:	d828      	bhi.n	80063ce <UART_SetConfig+0x3aa>
 800637c:	a201      	add	r2, pc, #4	; (adr r2, 8006384 <UART_SetConfig+0x360>)
 800637e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006382:	bf00      	nop
 8006384:	080063a9 	.word	0x080063a9
 8006388:	080063b1 	.word	0x080063b1
 800638c:	080063b9 	.word	0x080063b9
 8006390:	080063cf 	.word	0x080063cf
 8006394:	080063bf 	.word	0x080063bf
 8006398:	080063cf 	.word	0x080063cf
 800639c:	080063cf 	.word	0x080063cf
 80063a0:	080063cf 	.word	0x080063cf
 80063a4:	080063c7 	.word	0x080063c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063a8:	f7fe fb3a 	bl	8004a20 <HAL_RCC_GetPCLK1Freq>
 80063ac:	61b8      	str	r0, [r7, #24]
        break;
 80063ae:	e013      	b.n	80063d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063b0:	f7fe fb4a 	bl	8004a48 <HAL_RCC_GetPCLK2Freq>
 80063b4:	61b8      	str	r0, [r7, #24]
        break;
 80063b6:	e00f      	b.n	80063d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063b8:	4b4b      	ldr	r3, [pc, #300]	; (80064e8 <UART_SetConfig+0x4c4>)
 80063ba:	61bb      	str	r3, [r7, #24]
        break;
 80063bc:	e00c      	b.n	80063d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063be:	f7fe fa1d 	bl	80047fc <HAL_RCC_GetSysClockFreq>
 80063c2:	61b8      	str	r0, [r7, #24]
        break;
 80063c4:	e008      	b.n	80063d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ca:	61bb      	str	r3, [r7, #24]
        break;
 80063cc:	e004      	b.n	80063d8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80063ce:	2300      	movs	r3, #0
 80063d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	77bb      	strb	r3, [r7, #30]
        break;
 80063d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d074      	beq.n	80064c8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	005a      	lsls	r2, r3, #1
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	085b      	lsrs	r3, r3, #1
 80063e8:	441a      	add	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	2b0f      	cmp	r3, #15
 80063f8:	d916      	bls.n	8006428 <UART_SetConfig+0x404>
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006400:	d212      	bcs.n	8006428 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	b29b      	uxth	r3, r3
 8006406:	f023 030f 	bic.w	r3, r3, #15
 800640a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	085b      	lsrs	r3, r3, #1
 8006410:	b29b      	uxth	r3, r3
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	b29a      	uxth	r2, r3
 8006418:	89fb      	ldrh	r3, [r7, #14]
 800641a:	4313      	orrs	r3, r2
 800641c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	89fa      	ldrh	r2, [r7, #14]
 8006424:	60da      	str	r2, [r3, #12]
 8006426:	e04f      	b.n	80064c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	77bb      	strb	r3, [r7, #30]
 800642c:	e04c      	b.n	80064c8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800642e:	7ffb      	ldrb	r3, [r7, #31]
 8006430:	2b08      	cmp	r3, #8
 8006432:	d828      	bhi.n	8006486 <UART_SetConfig+0x462>
 8006434:	a201      	add	r2, pc, #4	; (adr r2, 800643c <UART_SetConfig+0x418>)
 8006436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643a:	bf00      	nop
 800643c:	08006461 	.word	0x08006461
 8006440:	08006469 	.word	0x08006469
 8006444:	08006471 	.word	0x08006471
 8006448:	08006487 	.word	0x08006487
 800644c:	08006477 	.word	0x08006477
 8006450:	08006487 	.word	0x08006487
 8006454:	08006487 	.word	0x08006487
 8006458:	08006487 	.word	0x08006487
 800645c:	0800647f 	.word	0x0800647f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006460:	f7fe fade 	bl	8004a20 <HAL_RCC_GetPCLK1Freq>
 8006464:	61b8      	str	r0, [r7, #24]
        break;
 8006466:	e013      	b.n	8006490 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006468:	f7fe faee 	bl	8004a48 <HAL_RCC_GetPCLK2Freq>
 800646c:	61b8      	str	r0, [r7, #24]
        break;
 800646e:	e00f      	b.n	8006490 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006470:	4b1d      	ldr	r3, [pc, #116]	; (80064e8 <UART_SetConfig+0x4c4>)
 8006472:	61bb      	str	r3, [r7, #24]
        break;
 8006474:	e00c      	b.n	8006490 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006476:	f7fe f9c1 	bl	80047fc <HAL_RCC_GetSysClockFreq>
 800647a:	61b8      	str	r0, [r7, #24]
        break;
 800647c:	e008      	b.n	8006490 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800647e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006482:	61bb      	str	r3, [r7, #24]
        break;
 8006484:	e004      	b.n	8006490 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	77bb      	strb	r3, [r7, #30]
        break;
 800648e:	bf00      	nop
    }

    if (pclk != 0U)
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d018      	beq.n	80064c8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	085a      	lsrs	r2, r3, #1
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	441a      	add	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	2b0f      	cmp	r3, #15
 80064ae:	d909      	bls.n	80064c4 <UART_SetConfig+0x4a0>
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064b6:	d205      	bcs.n	80064c4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	60da      	str	r2, [r3, #12]
 80064c2:	e001      	b.n	80064c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80064d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3720      	adds	r7, #32
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	40007c00 	.word	0x40007c00
 80064e4:	40023800 	.word	0x40023800
 80064e8:	00f42400 	.word	0x00f42400

080064ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00a      	beq.n	8006516 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00a      	beq.n	8006538 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00a      	beq.n	800655a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655e:	f003 0308 	and.w	r3, r3, #8
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00a      	beq.n	800657c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	f003 0310 	and.w	r3, r3, #16
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00a      	beq.n	800659e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a2:	f003 0320 	and.w	r3, r3, #32
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00a      	beq.n	80065c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	430a      	orrs	r2, r1
 80065be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d01a      	beq.n	8006602 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065ea:	d10a      	bne.n	8006602 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00a      	beq.n	8006624 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	605a      	str	r2, [r3, #4]
  }
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af02      	add	r7, sp, #8
 8006636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006640:	f7fc f802 	bl	8002648 <HAL_GetTick>
 8006644:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0308 	and.w	r3, r3, #8
 8006650:	2b08      	cmp	r3, #8
 8006652:	d10e      	bne.n	8006672 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006654:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f81b 	bl	800669e <UART_WaitOnFlagUntilTimeout>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e011      	b.n	8006696 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2220      	movs	r2, #32
 8006676:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2220      	movs	r2, #32
 800667c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b09c      	sub	sp, #112	; 0x70
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	60f8      	str	r0, [r7, #12]
 80066a6:	60b9      	str	r1, [r7, #8]
 80066a8:	603b      	str	r3, [r7, #0]
 80066aa:	4613      	mov	r3, r2
 80066ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ae:	e0a7      	b.n	8006800 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b6:	f000 80a3 	beq.w	8006800 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ba:	f7fb ffc5 	bl	8002648 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d302      	bcc.n	80066d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80066ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d13f      	bne.n	8006750 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066d8:	e853 3f00 	ldrex	r3, [r3]
 80066dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80066de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066e4:	667b      	str	r3, [r7, #100]	; 0x64
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	461a      	mov	r2, r3
 80066ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80066f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80066f6:	e841 2300 	strex	r3, r2, [r1]
 80066fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80066fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1e6      	bne.n	80066d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3308      	adds	r3, #8
 8006708:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800670c:	e853 3f00 	ldrex	r3, [r3]
 8006710:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006714:	f023 0301 	bic.w	r3, r3, #1
 8006718:	663b      	str	r3, [r7, #96]	; 0x60
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3308      	adds	r3, #8
 8006720:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006722:	64ba      	str	r2, [r7, #72]	; 0x48
 8006724:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006726:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006728:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800672a:	e841 2300 	strex	r3, r2, [r1]
 800672e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1e5      	bne.n	8006702 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2220      	movs	r2, #32
 800673a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2220      	movs	r2, #32
 8006740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e068      	b.n	8006822 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0304 	and.w	r3, r3, #4
 800675a:	2b00      	cmp	r3, #0
 800675c:	d050      	beq.n	8006800 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	69db      	ldr	r3, [r3, #28]
 8006764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800676c:	d148      	bne.n	8006800 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006776:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006780:	e853 3f00 	ldrex	r3, [r3]
 8006784:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800678c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	461a      	mov	r2, r3
 8006794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006796:	637b      	str	r3, [r7, #52]	; 0x34
 8006798:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800679c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800679e:	e841 2300 	strex	r3, r2, [r1]
 80067a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1e6      	bne.n	8006778 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	3308      	adds	r3, #8
 80067b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	613b      	str	r3, [r7, #16]
   return(result);
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f023 0301 	bic.w	r3, r3, #1
 80067c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3308      	adds	r3, #8
 80067c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80067ca:	623a      	str	r2, [r7, #32]
 80067cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	69f9      	ldr	r1, [r7, #28]
 80067d0:	6a3a      	ldr	r2, [r7, #32]
 80067d2:	e841 2300 	strex	r3, r2, [r1]
 80067d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1e5      	bne.n	80067aa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2220      	movs	r2, #32
 80067e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2220      	movs	r2, #32
 80067e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2220      	movs	r2, #32
 80067f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e010      	b.n	8006822 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	69da      	ldr	r2, [r3, #28]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	4013      	ands	r3, r2
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	429a      	cmp	r2, r3
 800680e:	bf0c      	ite	eq
 8006810:	2301      	moveq	r3, #1
 8006812:	2300      	movne	r3, #0
 8006814:	b2db      	uxtb	r3, r3
 8006816:	461a      	mov	r2, r3
 8006818:	79fb      	ldrb	r3, [r7, #7]
 800681a:	429a      	cmp	r2, r3
 800681c:	f43f af48 	beq.w	80066b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3770      	adds	r7, #112	; 0x70
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800682c:	b084      	sub	sp, #16
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	f107 001c 	add.w	r0, r7, #28
 800683a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	2b01      	cmp	r3, #1
 8006842:	d120      	bne.n	8006886 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006848:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68da      	ldr	r2, [r3, #12]
 8006854:	4b20      	ldr	r3, [pc, #128]	; (80068d8 <USB_CoreInit+0xac>)
 8006856:	4013      	ands	r3, r2
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800686a:	2b01      	cmp	r3, #1
 800686c:	d105      	bne.n	800687a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fa96 	bl	8006dac <USB_CoreReset>
 8006880:	4603      	mov	r3, r0
 8006882:	73fb      	strb	r3, [r7, #15]
 8006884:	e010      	b.n	80068a8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fa8a 	bl	8006dac <USB_CoreReset>
 8006898:	4603      	mov	r3, r0
 800689a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80068a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d10b      	bne.n	80068c6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f043 0206 	orr.w	r2, r3, #6
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f043 0220 	orr.w	r2, r3, #32
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068d2:	b004      	add	sp, #16
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	ffbdffbf 	.word	0xffbdffbf

080068dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f023 0201 	bic.w	r2, r3, #1
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b084      	sub	sp, #16
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	460b      	mov	r3, r1
 8006908:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800690a:	2300      	movs	r3, #0
 800690c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800691a:	78fb      	ldrb	r3, [r7, #3]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d115      	bne.n	800694c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800692c:	2001      	movs	r0, #1
 800692e:	f7fb fe97 	bl	8002660 <HAL_Delay>
      ms++;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3301      	adds	r3, #1
 8006936:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fa29 	bl	8006d90 <USB_GetMode>
 800693e:	4603      	mov	r3, r0
 8006940:	2b01      	cmp	r3, #1
 8006942:	d01e      	beq.n	8006982 <USB_SetCurrentMode+0x84>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2b31      	cmp	r3, #49	; 0x31
 8006948:	d9f0      	bls.n	800692c <USB_SetCurrentMode+0x2e>
 800694a:	e01a      	b.n	8006982 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800694c:	78fb      	ldrb	r3, [r7, #3]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d115      	bne.n	800697e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800695e:	2001      	movs	r0, #1
 8006960:	f7fb fe7e 	bl	8002660 <HAL_Delay>
      ms++;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	3301      	adds	r3, #1
 8006968:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fa10 	bl	8006d90 <USB_GetMode>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d005      	beq.n	8006982 <USB_SetCurrentMode+0x84>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2b31      	cmp	r3, #49	; 0x31
 800697a:	d9f0      	bls.n	800695e <USB_SetCurrentMode+0x60>
 800697c:	e001      	b.n	8006982 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e005      	b.n	800698e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2b32      	cmp	r3, #50	; 0x32
 8006986:	d101      	bne.n	800698c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e000      	b.n	800698e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
	...

08006998 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006998:	b084      	sub	sp, #16
 800699a:	b580      	push	{r7, lr}
 800699c:	b086      	sub	sp, #24
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80069a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80069b2:	2300      	movs	r3, #0
 80069b4:	613b      	str	r3, [r7, #16]
 80069b6:	e009      	b.n	80069cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	3340      	adds	r3, #64	; 0x40
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	2200      	movs	r2, #0
 80069c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	3301      	adds	r3, #1
 80069ca:	613b      	str	r3, [r7, #16]
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	2b0e      	cmp	r3, #14
 80069d0:	d9f2      	bls.n	80069b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80069d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d11c      	bne.n	8006a12 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069e6:	f043 0302 	orr.w	r3, r3, #2
 80069ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	e005      	b.n	8006a1e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a24:	461a      	mov	r2, r3
 8006a26:	2300      	movs	r3, #0
 8006a28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a30:	4619      	mov	r1, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a38:	461a      	mov	r2, r3
 8006a3a:	680b      	ldr	r3, [r1, #0]
 8006a3c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d10c      	bne.n	8006a5e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d104      	bne.n	8006a54 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 f965 	bl	8006d1c <USB_SetDevSpeed>
 8006a52:	e008      	b.n	8006a66 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006a54:	2101      	movs	r1, #1
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f960 	bl	8006d1c <USB_SetDevSpeed>
 8006a5c:	e003      	b.n	8006a66 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006a5e:	2103      	movs	r1, #3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f95b 	bl	8006d1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a66:	2110      	movs	r1, #16
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f8f3 	bl	8006c54 <USB_FlushTxFifo>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f91f 	bl	8006cbc <USB_FlushRxFifo>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d001      	beq.n	8006a88 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a8e:	461a      	mov	r2, r3
 8006a90:	2300      	movs	r3, #0
 8006a92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006aac:	2300      	movs	r3, #0
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	e043      	b.n	8006b3a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ac8:	d118      	bne.n	8006afc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10a      	bne.n	8006ae6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006adc:	461a      	mov	r2, r3
 8006ade:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ae2:	6013      	str	r3, [r2, #0]
 8006ae4:	e013      	b.n	8006b0e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	015a      	lsls	r2, r3, #5
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af2:	461a      	mov	r2, r3
 8006af4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006af8:	6013      	str	r3, [r2, #0]
 8006afa:	e008      	b.n	8006b0e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b08:	461a      	mov	r2, r3
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	015a      	lsls	r2, r3, #5
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	3301      	adds	r3, #1
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d3b7      	bcc.n	8006ab2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b42:	2300      	movs	r3, #0
 8006b44:	613b      	str	r3, [r7, #16]
 8006b46:	e043      	b.n	8006bd0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b5e:	d118      	bne.n	8006b92 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10a      	bne.n	8006b7c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	015a      	lsls	r2, r3, #5
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b72:	461a      	mov	r2, r3
 8006b74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b78:	6013      	str	r3, [r2, #0]
 8006b7a:	e013      	b.n	8006ba4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	015a      	lsls	r2, r3, #5
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	4413      	add	r3, r2
 8006b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b88:	461a      	mov	r2, r3
 8006b8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b8e:	6013      	str	r3, [r2, #0]
 8006b90:	e008      	b.n	8006ba4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	015a      	lsls	r2, r3, #5
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	015a      	lsls	r2, r3, #5
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006bc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	613b      	str	r3, [r7, #16]
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d3b7      	bcc.n	8006b48 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006be6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006bf8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d105      	bne.n	8006c0c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	f043 0210 	orr.w	r2, r3, #16
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	699a      	ldr	r2, [r3, #24]
 8006c10:	4b0e      	ldr	r3, [pc, #56]	; (8006c4c <USB_DevInit+0x2b4>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d005      	beq.n	8006c2a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	f043 0208 	orr.w	r2, r3, #8
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d105      	bne.n	8006c3c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	699a      	ldr	r2, [r3, #24]
 8006c34:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <USB_DevInit+0x2b8>)
 8006c36:	4313      	orrs	r3, r2
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3718      	adds	r7, #24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c48:	b004      	add	sp, #16
 8006c4a:	4770      	bx	lr
 8006c4c:	803c3800 	.word	0x803c3800
 8006c50:	40000004 	.word	0x40000004

08006c54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	3301      	adds	r3, #1
 8006c66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4a13      	ldr	r2, [pc, #76]	; (8006cb8 <USB_FlushTxFifo+0x64>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d901      	bls.n	8006c74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e01b      	b.n	8006cac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	daf2      	bge.n	8006c62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	019b      	lsls	r3, r3, #6
 8006c84:	f043 0220 	orr.w	r2, r3, #32
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	4a08      	ldr	r2, [pc, #32]	; (8006cb8 <USB_FlushTxFifo+0x64>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d901      	bls.n	8006c9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e006      	b.n	8006cac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f003 0320 	and.w	r3, r3, #32
 8006ca6:	2b20      	cmp	r3, #32
 8006ca8:	d0f0      	beq.n	8006c8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	00030d40 	.word	0x00030d40

08006cbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	4a11      	ldr	r2, [pc, #68]	; (8006d18 <USB_FlushRxFifo+0x5c>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d901      	bls.n	8006cda <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e018      	b.n	8006d0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	daf2      	bge.n	8006cc8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2210      	movs	r2, #16
 8006cea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	4a08      	ldr	r2, [pc, #32]	; (8006d18 <USB_FlushRxFifo+0x5c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d901      	bls.n	8006cfe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e006      	b.n	8006d0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	f003 0310 	and.w	r3, r3, #16
 8006d06:	2b10      	cmp	r3, #16
 8006d08:	d0f0      	beq.n	8006cec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	00030d40 	.word	0x00030d40

08006d1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	78fb      	ldrb	r3, [r7, #3]
 8006d36:	68f9      	ldr	r1, [r7, #12]
 8006d38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3714      	adds	r7, #20
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b085      	sub	sp, #20
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d68:	f023 0303 	bic.w	r3, r3, #3
 8006d6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d7c:	f043 0302 	orr.w	r3, r3, #2
 8006d80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	f003 0301 	and.w	r3, r3, #1
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006db4:	2300      	movs	r3, #0
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	4a13      	ldr	r2, [pc, #76]	; (8006e10 <USB_CoreReset+0x64>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d901      	bls.n	8006dca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e01b      	b.n	8006e02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	daf2      	bge.n	8006db8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	f043 0201 	orr.w	r2, r3, #1
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	3301      	adds	r3, #1
 8006de6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4a09      	ldr	r2, [pc, #36]	; (8006e10 <USB_CoreReset+0x64>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d901      	bls.n	8006df4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e006      	b.n	8006e02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d0f0      	beq.n	8006de2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	00030d40 	.word	0x00030d40

08006e14 <__errno>:
 8006e14:	4b01      	ldr	r3, [pc, #4]	; (8006e1c <__errno+0x8>)
 8006e16:	6818      	ldr	r0, [r3, #0]
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	2000000c 	.word	0x2000000c

08006e20 <__libc_init_array>:
 8006e20:	b570      	push	{r4, r5, r6, lr}
 8006e22:	4d0d      	ldr	r5, [pc, #52]	; (8006e58 <__libc_init_array+0x38>)
 8006e24:	4c0d      	ldr	r4, [pc, #52]	; (8006e5c <__libc_init_array+0x3c>)
 8006e26:	1b64      	subs	r4, r4, r5
 8006e28:	10a4      	asrs	r4, r4, #2
 8006e2a:	2600      	movs	r6, #0
 8006e2c:	42a6      	cmp	r6, r4
 8006e2e:	d109      	bne.n	8006e44 <__libc_init_array+0x24>
 8006e30:	4d0b      	ldr	r5, [pc, #44]	; (8006e60 <__libc_init_array+0x40>)
 8006e32:	4c0c      	ldr	r4, [pc, #48]	; (8006e64 <__libc_init_array+0x44>)
 8006e34:	f002 ff18 	bl	8009c68 <_init>
 8006e38:	1b64      	subs	r4, r4, r5
 8006e3a:	10a4      	asrs	r4, r4, #2
 8006e3c:	2600      	movs	r6, #0
 8006e3e:	42a6      	cmp	r6, r4
 8006e40:	d105      	bne.n	8006e4e <__libc_init_array+0x2e>
 8006e42:	bd70      	pop	{r4, r5, r6, pc}
 8006e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e48:	4798      	blx	r3
 8006e4a:	3601      	adds	r6, #1
 8006e4c:	e7ee      	b.n	8006e2c <__libc_init_array+0xc>
 8006e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e52:	4798      	blx	r3
 8006e54:	3601      	adds	r6, #1
 8006e56:	e7f2      	b.n	8006e3e <__libc_init_array+0x1e>
 8006e58:	0800a094 	.word	0x0800a094
 8006e5c:	0800a094 	.word	0x0800a094
 8006e60:	0800a094 	.word	0x0800a094
 8006e64:	0800a098 	.word	0x0800a098

08006e68 <memset>:
 8006e68:	4402      	add	r2, r0
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d100      	bne.n	8006e72 <memset+0xa>
 8006e70:	4770      	bx	lr
 8006e72:	f803 1b01 	strb.w	r1, [r3], #1
 8006e76:	e7f9      	b.n	8006e6c <memset+0x4>

08006e78 <__cvt>:
 8006e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e7c:	ec55 4b10 	vmov	r4, r5, d0
 8006e80:	2d00      	cmp	r5, #0
 8006e82:	460e      	mov	r6, r1
 8006e84:	4619      	mov	r1, r3
 8006e86:	462b      	mov	r3, r5
 8006e88:	bfbb      	ittet	lt
 8006e8a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006e8e:	461d      	movlt	r5, r3
 8006e90:	2300      	movge	r3, #0
 8006e92:	232d      	movlt	r3, #45	; 0x2d
 8006e94:	700b      	strb	r3, [r1, #0]
 8006e96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e98:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006e9c:	4691      	mov	r9, r2
 8006e9e:	f023 0820 	bic.w	r8, r3, #32
 8006ea2:	bfbc      	itt	lt
 8006ea4:	4622      	movlt	r2, r4
 8006ea6:	4614      	movlt	r4, r2
 8006ea8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006eac:	d005      	beq.n	8006eba <__cvt+0x42>
 8006eae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006eb2:	d100      	bne.n	8006eb6 <__cvt+0x3e>
 8006eb4:	3601      	adds	r6, #1
 8006eb6:	2102      	movs	r1, #2
 8006eb8:	e000      	b.n	8006ebc <__cvt+0x44>
 8006eba:	2103      	movs	r1, #3
 8006ebc:	ab03      	add	r3, sp, #12
 8006ebe:	9301      	str	r3, [sp, #4]
 8006ec0:	ab02      	add	r3, sp, #8
 8006ec2:	9300      	str	r3, [sp, #0]
 8006ec4:	ec45 4b10 	vmov	d0, r4, r5
 8006ec8:	4653      	mov	r3, sl
 8006eca:	4632      	mov	r2, r6
 8006ecc:	f000 fd00 	bl	80078d0 <_dtoa_r>
 8006ed0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ed4:	4607      	mov	r7, r0
 8006ed6:	d102      	bne.n	8006ede <__cvt+0x66>
 8006ed8:	f019 0f01 	tst.w	r9, #1
 8006edc:	d022      	beq.n	8006f24 <__cvt+0xac>
 8006ede:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ee2:	eb07 0906 	add.w	r9, r7, r6
 8006ee6:	d110      	bne.n	8006f0a <__cvt+0x92>
 8006ee8:	783b      	ldrb	r3, [r7, #0]
 8006eea:	2b30      	cmp	r3, #48	; 0x30
 8006eec:	d10a      	bne.n	8006f04 <__cvt+0x8c>
 8006eee:	2200      	movs	r2, #0
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	4629      	mov	r1, r5
 8006ef6:	f7f9 fe07 	bl	8000b08 <__aeabi_dcmpeq>
 8006efa:	b918      	cbnz	r0, 8006f04 <__cvt+0x8c>
 8006efc:	f1c6 0601 	rsb	r6, r6, #1
 8006f00:	f8ca 6000 	str.w	r6, [sl]
 8006f04:	f8da 3000 	ldr.w	r3, [sl]
 8006f08:	4499      	add	r9, r3
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	4620      	mov	r0, r4
 8006f10:	4629      	mov	r1, r5
 8006f12:	f7f9 fdf9 	bl	8000b08 <__aeabi_dcmpeq>
 8006f16:	b108      	cbz	r0, 8006f1c <__cvt+0xa4>
 8006f18:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f1c:	2230      	movs	r2, #48	; 0x30
 8006f1e:	9b03      	ldr	r3, [sp, #12]
 8006f20:	454b      	cmp	r3, r9
 8006f22:	d307      	bcc.n	8006f34 <__cvt+0xbc>
 8006f24:	9b03      	ldr	r3, [sp, #12]
 8006f26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f28:	1bdb      	subs	r3, r3, r7
 8006f2a:	4638      	mov	r0, r7
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	b004      	add	sp, #16
 8006f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f34:	1c59      	adds	r1, r3, #1
 8006f36:	9103      	str	r1, [sp, #12]
 8006f38:	701a      	strb	r2, [r3, #0]
 8006f3a:	e7f0      	b.n	8006f1e <__cvt+0xa6>

08006f3c <__exponent>:
 8006f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2900      	cmp	r1, #0
 8006f42:	bfb8      	it	lt
 8006f44:	4249      	neglt	r1, r1
 8006f46:	f803 2b02 	strb.w	r2, [r3], #2
 8006f4a:	bfb4      	ite	lt
 8006f4c:	222d      	movlt	r2, #45	; 0x2d
 8006f4e:	222b      	movge	r2, #43	; 0x2b
 8006f50:	2909      	cmp	r1, #9
 8006f52:	7042      	strb	r2, [r0, #1]
 8006f54:	dd2a      	ble.n	8006fac <__exponent+0x70>
 8006f56:	f10d 0407 	add.w	r4, sp, #7
 8006f5a:	46a4      	mov	ip, r4
 8006f5c:	270a      	movs	r7, #10
 8006f5e:	46a6      	mov	lr, r4
 8006f60:	460a      	mov	r2, r1
 8006f62:	fb91 f6f7 	sdiv	r6, r1, r7
 8006f66:	fb07 1516 	mls	r5, r7, r6, r1
 8006f6a:	3530      	adds	r5, #48	; 0x30
 8006f6c:	2a63      	cmp	r2, #99	; 0x63
 8006f6e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006f72:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006f76:	4631      	mov	r1, r6
 8006f78:	dcf1      	bgt.n	8006f5e <__exponent+0x22>
 8006f7a:	3130      	adds	r1, #48	; 0x30
 8006f7c:	f1ae 0502 	sub.w	r5, lr, #2
 8006f80:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006f84:	1c44      	adds	r4, r0, #1
 8006f86:	4629      	mov	r1, r5
 8006f88:	4561      	cmp	r1, ip
 8006f8a:	d30a      	bcc.n	8006fa2 <__exponent+0x66>
 8006f8c:	f10d 0209 	add.w	r2, sp, #9
 8006f90:	eba2 020e 	sub.w	r2, r2, lr
 8006f94:	4565      	cmp	r5, ip
 8006f96:	bf88      	it	hi
 8006f98:	2200      	movhi	r2, #0
 8006f9a:	4413      	add	r3, r2
 8006f9c:	1a18      	subs	r0, r3, r0
 8006f9e:	b003      	add	sp, #12
 8006fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fa6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006faa:	e7ed      	b.n	8006f88 <__exponent+0x4c>
 8006fac:	2330      	movs	r3, #48	; 0x30
 8006fae:	3130      	adds	r1, #48	; 0x30
 8006fb0:	7083      	strb	r3, [r0, #2]
 8006fb2:	70c1      	strb	r1, [r0, #3]
 8006fb4:	1d03      	adds	r3, r0, #4
 8006fb6:	e7f1      	b.n	8006f9c <__exponent+0x60>

08006fb8 <_printf_float>:
 8006fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fbc:	ed2d 8b02 	vpush	{d8}
 8006fc0:	b08d      	sub	sp, #52	; 0x34
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006fc8:	4616      	mov	r6, r2
 8006fca:	461f      	mov	r7, r3
 8006fcc:	4605      	mov	r5, r0
 8006fce:	f001 fa6d 	bl	80084ac <_localeconv_r>
 8006fd2:	f8d0 a000 	ldr.w	sl, [r0]
 8006fd6:	4650      	mov	r0, sl
 8006fd8:	f7f9 f91a 	bl	8000210 <strlen>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	930a      	str	r3, [sp, #40]	; 0x28
 8006fe0:	6823      	ldr	r3, [r4, #0]
 8006fe2:	9305      	str	r3, [sp, #20]
 8006fe4:	f8d8 3000 	ldr.w	r3, [r8]
 8006fe8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006fec:	3307      	adds	r3, #7
 8006fee:	f023 0307 	bic.w	r3, r3, #7
 8006ff2:	f103 0208 	add.w	r2, r3, #8
 8006ff6:	f8c8 2000 	str.w	r2, [r8]
 8006ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007002:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007006:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800700a:	9307      	str	r3, [sp, #28]
 800700c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007010:	ee08 0a10 	vmov	s16, r0
 8007014:	4b9f      	ldr	r3, [pc, #636]	; (8007294 <_printf_float+0x2dc>)
 8007016:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800701a:	f04f 32ff 	mov.w	r2, #4294967295
 800701e:	f7f9 fda5 	bl	8000b6c <__aeabi_dcmpun>
 8007022:	bb88      	cbnz	r0, 8007088 <_printf_float+0xd0>
 8007024:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007028:	4b9a      	ldr	r3, [pc, #616]	; (8007294 <_printf_float+0x2dc>)
 800702a:	f04f 32ff 	mov.w	r2, #4294967295
 800702e:	f7f9 fd7f 	bl	8000b30 <__aeabi_dcmple>
 8007032:	bb48      	cbnz	r0, 8007088 <_printf_float+0xd0>
 8007034:	2200      	movs	r2, #0
 8007036:	2300      	movs	r3, #0
 8007038:	4640      	mov	r0, r8
 800703a:	4649      	mov	r1, r9
 800703c:	f7f9 fd6e 	bl	8000b1c <__aeabi_dcmplt>
 8007040:	b110      	cbz	r0, 8007048 <_printf_float+0x90>
 8007042:	232d      	movs	r3, #45	; 0x2d
 8007044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007048:	4b93      	ldr	r3, [pc, #588]	; (8007298 <_printf_float+0x2e0>)
 800704a:	4894      	ldr	r0, [pc, #592]	; (800729c <_printf_float+0x2e4>)
 800704c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007050:	bf94      	ite	ls
 8007052:	4698      	movls	r8, r3
 8007054:	4680      	movhi	r8, r0
 8007056:	2303      	movs	r3, #3
 8007058:	6123      	str	r3, [r4, #16]
 800705a:	9b05      	ldr	r3, [sp, #20]
 800705c:	f023 0204 	bic.w	r2, r3, #4
 8007060:	6022      	str	r2, [r4, #0]
 8007062:	f04f 0900 	mov.w	r9, #0
 8007066:	9700      	str	r7, [sp, #0]
 8007068:	4633      	mov	r3, r6
 800706a:	aa0b      	add	r2, sp, #44	; 0x2c
 800706c:	4621      	mov	r1, r4
 800706e:	4628      	mov	r0, r5
 8007070:	f000 f9d8 	bl	8007424 <_printf_common>
 8007074:	3001      	adds	r0, #1
 8007076:	f040 8090 	bne.w	800719a <_printf_float+0x1e2>
 800707a:	f04f 30ff 	mov.w	r0, #4294967295
 800707e:	b00d      	add	sp, #52	; 0x34
 8007080:	ecbd 8b02 	vpop	{d8}
 8007084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007088:	4642      	mov	r2, r8
 800708a:	464b      	mov	r3, r9
 800708c:	4640      	mov	r0, r8
 800708e:	4649      	mov	r1, r9
 8007090:	f7f9 fd6c 	bl	8000b6c <__aeabi_dcmpun>
 8007094:	b140      	cbz	r0, 80070a8 <_printf_float+0xf0>
 8007096:	464b      	mov	r3, r9
 8007098:	2b00      	cmp	r3, #0
 800709a:	bfbc      	itt	lt
 800709c:	232d      	movlt	r3, #45	; 0x2d
 800709e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80070a2:	487f      	ldr	r0, [pc, #508]	; (80072a0 <_printf_float+0x2e8>)
 80070a4:	4b7f      	ldr	r3, [pc, #508]	; (80072a4 <_printf_float+0x2ec>)
 80070a6:	e7d1      	b.n	800704c <_printf_float+0x94>
 80070a8:	6863      	ldr	r3, [r4, #4]
 80070aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80070ae:	9206      	str	r2, [sp, #24]
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	d13f      	bne.n	8007134 <_printf_float+0x17c>
 80070b4:	2306      	movs	r3, #6
 80070b6:	6063      	str	r3, [r4, #4]
 80070b8:	9b05      	ldr	r3, [sp, #20]
 80070ba:	6861      	ldr	r1, [r4, #4]
 80070bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80070c0:	2300      	movs	r3, #0
 80070c2:	9303      	str	r3, [sp, #12]
 80070c4:	ab0a      	add	r3, sp, #40	; 0x28
 80070c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80070ca:	ab09      	add	r3, sp, #36	; 0x24
 80070cc:	ec49 8b10 	vmov	d0, r8, r9
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	6022      	str	r2, [r4, #0]
 80070d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80070d8:	4628      	mov	r0, r5
 80070da:	f7ff fecd 	bl	8006e78 <__cvt>
 80070de:	9b06      	ldr	r3, [sp, #24]
 80070e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070e2:	2b47      	cmp	r3, #71	; 0x47
 80070e4:	4680      	mov	r8, r0
 80070e6:	d108      	bne.n	80070fa <_printf_float+0x142>
 80070e8:	1cc8      	adds	r0, r1, #3
 80070ea:	db02      	blt.n	80070f2 <_printf_float+0x13a>
 80070ec:	6863      	ldr	r3, [r4, #4]
 80070ee:	4299      	cmp	r1, r3
 80070f0:	dd41      	ble.n	8007176 <_printf_float+0x1be>
 80070f2:	f1ab 0b02 	sub.w	fp, fp, #2
 80070f6:	fa5f fb8b 	uxtb.w	fp, fp
 80070fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80070fe:	d820      	bhi.n	8007142 <_printf_float+0x18a>
 8007100:	3901      	subs	r1, #1
 8007102:	465a      	mov	r2, fp
 8007104:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007108:	9109      	str	r1, [sp, #36]	; 0x24
 800710a:	f7ff ff17 	bl	8006f3c <__exponent>
 800710e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007110:	1813      	adds	r3, r2, r0
 8007112:	2a01      	cmp	r2, #1
 8007114:	4681      	mov	r9, r0
 8007116:	6123      	str	r3, [r4, #16]
 8007118:	dc02      	bgt.n	8007120 <_printf_float+0x168>
 800711a:	6822      	ldr	r2, [r4, #0]
 800711c:	07d2      	lsls	r2, r2, #31
 800711e:	d501      	bpl.n	8007124 <_printf_float+0x16c>
 8007120:	3301      	adds	r3, #1
 8007122:	6123      	str	r3, [r4, #16]
 8007124:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007128:	2b00      	cmp	r3, #0
 800712a:	d09c      	beq.n	8007066 <_printf_float+0xae>
 800712c:	232d      	movs	r3, #45	; 0x2d
 800712e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007132:	e798      	b.n	8007066 <_printf_float+0xae>
 8007134:	9a06      	ldr	r2, [sp, #24]
 8007136:	2a47      	cmp	r2, #71	; 0x47
 8007138:	d1be      	bne.n	80070b8 <_printf_float+0x100>
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1bc      	bne.n	80070b8 <_printf_float+0x100>
 800713e:	2301      	movs	r3, #1
 8007140:	e7b9      	b.n	80070b6 <_printf_float+0xfe>
 8007142:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007146:	d118      	bne.n	800717a <_printf_float+0x1c2>
 8007148:	2900      	cmp	r1, #0
 800714a:	6863      	ldr	r3, [r4, #4]
 800714c:	dd0b      	ble.n	8007166 <_printf_float+0x1ae>
 800714e:	6121      	str	r1, [r4, #16]
 8007150:	b913      	cbnz	r3, 8007158 <_printf_float+0x1a0>
 8007152:	6822      	ldr	r2, [r4, #0]
 8007154:	07d0      	lsls	r0, r2, #31
 8007156:	d502      	bpl.n	800715e <_printf_float+0x1a6>
 8007158:	3301      	adds	r3, #1
 800715a:	440b      	add	r3, r1
 800715c:	6123      	str	r3, [r4, #16]
 800715e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007160:	f04f 0900 	mov.w	r9, #0
 8007164:	e7de      	b.n	8007124 <_printf_float+0x16c>
 8007166:	b913      	cbnz	r3, 800716e <_printf_float+0x1b6>
 8007168:	6822      	ldr	r2, [r4, #0]
 800716a:	07d2      	lsls	r2, r2, #31
 800716c:	d501      	bpl.n	8007172 <_printf_float+0x1ba>
 800716e:	3302      	adds	r3, #2
 8007170:	e7f4      	b.n	800715c <_printf_float+0x1a4>
 8007172:	2301      	movs	r3, #1
 8007174:	e7f2      	b.n	800715c <_printf_float+0x1a4>
 8007176:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800717a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800717c:	4299      	cmp	r1, r3
 800717e:	db05      	blt.n	800718c <_printf_float+0x1d4>
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	6121      	str	r1, [r4, #16]
 8007184:	07d8      	lsls	r0, r3, #31
 8007186:	d5ea      	bpl.n	800715e <_printf_float+0x1a6>
 8007188:	1c4b      	adds	r3, r1, #1
 800718a:	e7e7      	b.n	800715c <_printf_float+0x1a4>
 800718c:	2900      	cmp	r1, #0
 800718e:	bfd4      	ite	le
 8007190:	f1c1 0202 	rsble	r2, r1, #2
 8007194:	2201      	movgt	r2, #1
 8007196:	4413      	add	r3, r2
 8007198:	e7e0      	b.n	800715c <_printf_float+0x1a4>
 800719a:	6823      	ldr	r3, [r4, #0]
 800719c:	055a      	lsls	r2, r3, #21
 800719e:	d407      	bmi.n	80071b0 <_printf_float+0x1f8>
 80071a0:	6923      	ldr	r3, [r4, #16]
 80071a2:	4642      	mov	r2, r8
 80071a4:	4631      	mov	r1, r6
 80071a6:	4628      	mov	r0, r5
 80071a8:	47b8      	blx	r7
 80071aa:	3001      	adds	r0, #1
 80071ac:	d12c      	bne.n	8007208 <_printf_float+0x250>
 80071ae:	e764      	b.n	800707a <_printf_float+0xc2>
 80071b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80071b4:	f240 80e0 	bls.w	8007378 <_printf_float+0x3c0>
 80071b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071bc:	2200      	movs	r2, #0
 80071be:	2300      	movs	r3, #0
 80071c0:	f7f9 fca2 	bl	8000b08 <__aeabi_dcmpeq>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	d034      	beq.n	8007232 <_printf_float+0x27a>
 80071c8:	4a37      	ldr	r2, [pc, #220]	; (80072a8 <_printf_float+0x2f0>)
 80071ca:	2301      	movs	r3, #1
 80071cc:	4631      	mov	r1, r6
 80071ce:	4628      	mov	r0, r5
 80071d0:	47b8      	blx	r7
 80071d2:	3001      	adds	r0, #1
 80071d4:	f43f af51 	beq.w	800707a <_printf_float+0xc2>
 80071d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071dc:	429a      	cmp	r2, r3
 80071de:	db02      	blt.n	80071e6 <_printf_float+0x22e>
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	07d8      	lsls	r0, r3, #31
 80071e4:	d510      	bpl.n	8007208 <_printf_float+0x250>
 80071e6:	ee18 3a10 	vmov	r3, s16
 80071ea:	4652      	mov	r2, sl
 80071ec:	4631      	mov	r1, r6
 80071ee:	4628      	mov	r0, r5
 80071f0:	47b8      	blx	r7
 80071f2:	3001      	adds	r0, #1
 80071f4:	f43f af41 	beq.w	800707a <_printf_float+0xc2>
 80071f8:	f04f 0800 	mov.w	r8, #0
 80071fc:	f104 091a 	add.w	r9, r4, #26
 8007200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007202:	3b01      	subs	r3, #1
 8007204:	4543      	cmp	r3, r8
 8007206:	dc09      	bgt.n	800721c <_printf_float+0x264>
 8007208:	6823      	ldr	r3, [r4, #0]
 800720a:	079b      	lsls	r3, r3, #30
 800720c:	f100 8105 	bmi.w	800741a <_printf_float+0x462>
 8007210:	68e0      	ldr	r0, [r4, #12]
 8007212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007214:	4298      	cmp	r0, r3
 8007216:	bfb8      	it	lt
 8007218:	4618      	movlt	r0, r3
 800721a:	e730      	b.n	800707e <_printf_float+0xc6>
 800721c:	2301      	movs	r3, #1
 800721e:	464a      	mov	r2, r9
 8007220:	4631      	mov	r1, r6
 8007222:	4628      	mov	r0, r5
 8007224:	47b8      	blx	r7
 8007226:	3001      	adds	r0, #1
 8007228:	f43f af27 	beq.w	800707a <_printf_float+0xc2>
 800722c:	f108 0801 	add.w	r8, r8, #1
 8007230:	e7e6      	b.n	8007200 <_printf_float+0x248>
 8007232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007234:	2b00      	cmp	r3, #0
 8007236:	dc39      	bgt.n	80072ac <_printf_float+0x2f4>
 8007238:	4a1b      	ldr	r2, [pc, #108]	; (80072a8 <_printf_float+0x2f0>)
 800723a:	2301      	movs	r3, #1
 800723c:	4631      	mov	r1, r6
 800723e:	4628      	mov	r0, r5
 8007240:	47b8      	blx	r7
 8007242:	3001      	adds	r0, #1
 8007244:	f43f af19 	beq.w	800707a <_printf_float+0xc2>
 8007248:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800724c:	4313      	orrs	r3, r2
 800724e:	d102      	bne.n	8007256 <_printf_float+0x29e>
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	07d9      	lsls	r1, r3, #31
 8007254:	d5d8      	bpl.n	8007208 <_printf_float+0x250>
 8007256:	ee18 3a10 	vmov	r3, s16
 800725a:	4652      	mov	r2, sl
 800725c:	4631      	mov	r1, r6
 800725e:	4628      	mov	r0, r5
 8007260:	47b8      	blx	r7
 8007262:	3001      	adds	r0, #1
 8007264:	f43f af09 	beq.w	800707a <_printf_float+0xc2>
 8007268:	f04f 0900 	mov.w	r9, #0
 800726c:	f104 0a1a 	add.w	sl, r4, #26
 8007270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007272:	425b      	negs	r3, r3
 8007274:	454b      	cmp	r3, r9
 8007276:	dc01      	bgt.n	800727c <_printf_float+0x2c4>
 8007278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800727a:	e792      	b.n	80071a2 <_printf_float+0x1ea>
 800727c:	2301      	movs	r3, #1
 800727e:	4652      	mov	r2, sl
 8007280:	4631      	mov	r1, r6
 8007282:	4628      	mov	r0, r5
 8007284:	47b8      	blx	r7
 8007286:	3001      	adds	r0, #1
 8007288:	f43f aef7 	beq.w	800707a <_printf_float+0xc2>
 800728c:	f109 0901 	add.w	r9, r9, #1
 8007290:	e7ee      	b.n	8007270 <_printf_float+0x2b8>
 8007292:	bf00      	nop
 8007294:	7fefffff 	.word	0x7fefffff
 8007298:	08009cb4 	.word	0x08009cb4
 800729c:	08009cb8 	.word	0x08009cb8
 80072a0:	08009cc0 	.word	0x08009cc0
 80072a4:	08009cbc 	.word	0x08009cbc
 80072a8:	08009cc4 	.word	0x08009cc4
 80072ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072b0:	429a      	cmp	r2, r3
 80072b2:	bfa8      	it	ge
 80072b4:	461a      	movge	r2, r3
 80072b6:	2a00      	cmp	r2, #0
 80072b8:	4691      	mov	r9, r2
 80072ba:	dc37      	bgt.n	800732c <_printf_float+0x374>
 80072bc:	f04f 0b00 	mov.w	fp, #0
 80072c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072c4:	f104 021a 	add.w	r2, r4, #26
 80072c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072ca:	9305      	str	r3, [sp, #20]
 80072cc:	eba3 0309 	sub.w	r3, r3, r9
 80072d0:	455b      	cmp	r3, fp
 80072d2:	dc33      	bgt.n	800733c <_printf_float+0x384>
 80072d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072d8:	429a      	cmp	r2, r3
 80072da:	db3b      	blt.n	8007354 <_printf_float+0x39c>
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	07da      	lsls	r2, r3, #31
 80072e0:	d438      	bmi.n	8007354 <_printf_float+0x39c>
 80072e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e4:	9a05      	ldr	r2, [sp, #20]
 80072e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072e8:	1a9a      	subs	r2, r3, r2
 80072ea:	eba3 0901 	sub.w	r9, r3, r1
 80072ee:	4591      	cmp	r9, r2
 80072f0:	bfa8      	it	ge
 80072f2:	4691      	movge	r9, r2
 80072f4:	f1b9 0f00 	cmp.w	r9, #0
 80072f8:	dc35      	bgt.n	8007366 <_printf_float+0x3ae>
 80072fa:	f04f 0800 	mov.w	r8, #0
 80072fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007302:	f104 0a1a 	add.w	sl, r4, #26
 8007306:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800730a:	1a9b      	subs	r3, r3, r2
 800730c:	eba3 0309 	sub.w	r3, r3, r9
 8007310:	4543      	cmp	r3, r8
 8007312:	f77f af79 	ble.w	8007208 <_printf_float+0x250>
 8007316:	2301      	movs	r3, #1
 8007318:	4652      	mov	r2, sl
 800731a:	4631      	mov	r1, r6
 800731c:	4628      	mov	r0, r5
 800731e:	47b8      	blx	r7
 8007320:	3001      	adds	r0, #1
 8007322:	f43f aeaa 	beq.w	800707a <_printf_float+0xc2>
 8007326:	f108 0801 	add.w	r8, r8, #1
 800732a:	e7ec      	b.n	8007306 <_printf_float+0x34e>
 800732c:	4613      	mov	r3, r2
 800732e:	4631      	mov	r1, r6
 8007330:	4642      	mov	r2, r8
 8007332:	4628      	mov	r0, r5
 8007334:	47b8      	blx	r7
 8007336:	3001      	adds	r0, #1
 8007338:	d1c0      	bne.n	80072bc <_printf_float+0x304>
 800733a:	e69e      	b.n	800707a <_printf_float+0xc2>
 800733c:	2301      	movs	r3, #1
 800733e:	4631      	mov	r1, r6
 8007340:	4628      	mov	r0, r5
 8007342:	9205      	str	r2, [sp, #20]
 8007344:	47b8      	blx	r7
 8007346:	3001      	adds	r0, #1
 8007348:	f43f ae97 	beq.w	800707a <_printf_float+0xc2>
 800734c:	9a05      	ldr	r2, [sp, #20]
 800734e:	f10b 0b01 	add.w	fp, fp, #1
 8007352:	e7b9      	b.n	80072c8 <_printf_float+0x310>
 8007354:	ee18 3a10 	vmov	r3, s16
 8007358:	4652      	mov	r2, sl
 800735a:	4631      	mov	r1, r6
 800735c:	4628      	mov	r0, r5
 800735e:	47b8      	blx	r7
 8007360:	3001      	adds	r0, #1
 8007362:	d1be      	bne.n	80072e2 <_printf_float+0x32a>
 8007364:	e689      	b.n	800707a <_printf_float+0xc2>
 8007366:	9a05      	ldr	r2, [sp, #20]
 8007368:	464b      	mov	r3, r9
 800736a:	4442      	add	r2, r8
 800736c:	4631      	mov	r1, r6
 800736e:	4628      	mov	r0, r5
 8007370:	47b8      	blx	r7
 8007372:	3001      	adds	r0, #1
 8007374:	d1c1      	bne.n	80072fa <_printf_float+0x342>
 8007376:	e680      	b.n	800707a <_printf_float+0xc2>
 8007378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800737a:	2a01      	cmp	r2, #1
 800737c:	dc01      	bgt.n	8007382 <_printf_float+0x3ca>
 800737e:	07db      	lsls	r3, r3, #31
 8007380:	d538      	bpl.n	80073f4 <_printf_float+0x43c>
 8007382:	2301      	movs	r3, #1
 8007384:	4642      	mov	r2, r8
 8007386:	4631      	mov	r1, r6
 8007388:	4628      	mov	r0, r5
 800738a:	47b8      	blx	r7
 800738c:	3001      	adds	r0, #1
 800738e:	f43f ae74 	beq.w	800707a <_printf_float+0xc2>
 8007392:	ee18 3a10 	vmov	r3, s16
 8007396:	4652      	mov	r2, sl
 8007398:	4631      	mov	r1, r6
 800739a:	4628      	mov	r0, r5
 800739c:	47b8      	blx	r7
 800739e:	3001      	adds	r0, #1
 80073a0:	f43f ae6b 	beq.w	800707a <_printf_float+0xc2>
 80073a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073a8:	2200      	movs	r2, #0
 80073aa:	2300      	movs	r3, #0
 80073ac:	f7f9 fbac 	bl	8000b08 <__aeabi_dcmpeq>
 80073b0:	b9d8      	cbnz	r0, 80073ea <_printf_float+0x432>
 80073b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073b4:	f108 0201 	add.w	r2, r8, #1
 80073b8:	3b01      	subs	r3, #1
 80073ba:	4631      	mov	r1, r6
 80073bc:	4628      	mov	r0, r5
 80073be:	47b8      	blx	r7
 80073c0:	3001      	adds	r0, #1
 80073c2:	d10e      	bne.n	80073e2 <_printf_float+0x42a>
 80073c4:	e659      	b.n	800707a <_printf_float+0xc2>
 80073c6:	2301      	movs	r3, #1
 80073c8:	4652      	mov	r2, sl
 80073ca:	4631      	mov	r1, r6
 80073cc:	4628      	mov	r0, r5
 80073ce:	47b8      	blx	r7
 80073d0:	3001      	adds	r0, #1
 80073d2:	f43f ae52 	beq.w	800707a <_printf_float+0xc2>
 80073d6:	f108 0801 	add.w	r8, r8, #1
 80073da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073dc:	3b01      	subs	r3, #1
 80073de:	4543      	cmp	r3, r8
 80073e0:	dcf1      	bgt.n	80073c6 <_printf_float+0x40e>
 80073e2:	464b      	mov	r3, r9
 80073e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80073e8:	e6dc      	b.n	80071a4 <_printf_float+0x1ec>
 80073ea:	f04f 0800 	mov.w	r8, #0
 80073ee:	f104 0a1a 	add.w	sl, r4, #26
 80073f2:	e7f2      	b.n	80073da <_printf_float+0x422>
 80073f4:	2301      	movs	r3, #1
 80073f6:	4642      	mov	r2, r8
 80073f8:	e7df      	b.n	80073ba <_printf_float+0x402>
 80073fa:	2301      	movs	r3, #1
 80073fc:	464a      	mov	r2, r9
 80073fe:	4631      	mov	r1, r6
 8007400:	4628      	mov	r0, r5
 8007402:	47b8      	blx	r7
 8007404:	3001      	adds	r0, #1
 8007406:	f43f ae38 	beq.w	800707a <_printf_float+0xc2>
 800740a:	f108 0801 	add.w	r8, r8, #1
 800740e:	68e3      	ldr	r3, [r4, #12]
 8007410:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007412:	1a5b      	subs	r3, r3, r1
 8007414:	4543      	cmp	r3, r8
 8007416:	dcf0      	bgt.n	80073fa <_printf_float+0x442>
 8007418:	e6fa      	b.n	8007210 <_printf_float+0x258>
 800741a:	f04f 0800 	mov.w	r8, #0
 800741e:	f104 0919 	add.w	r9, r4, #25
 8007422:	e7f4      	b.n	800740e <_printf_float+0x456>

08007424 <_printf_common>:
 8007424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007428:	4616      	mov	r6, r2
 800742a:	4699      	mov	r9, r3
 800742c:	688a      	ldr	r2, [r1, #8]
 800742e:	690b      	ldr	r3, [r1, #16]
 8007430:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007434:	4293      	cmp	r3, r2
 8007436:	bfb8      	it	lt
 8007438:	4613      	movlt	r3, r2
 800743a:	6033      	str	r3, [r6, #0]
 800743c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007440:	4607      	mov	r7, r0
 8007442:	460c      	mov	r4, r1
 8007444:	b10a      	cbz	r2, 800744a <_printf_common+0x26>
 8007446:	3301      	adds	r3, #1
 8007448:	6033      	str	r3, [r6, #0]
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	0699      	lsls	r1, r3, #26
 800744e:	bf42      	ittt	mi
 8007450:	6833      	ldrmi	r3, [r6, #0]
 8007452:	3302      	addmi	r3, #2
 8007454:	6033      	strmi	r3, [r6, #0]
 8007456:	6825      	ldr	r5, [r4, #0]
 8007458:	f015 0506 	ands.w	r5, r5, #6
 800745c:	d106      	bne.n	800746c <_printf_common+0x48>
 800745e:	f104 0a19 	add.w	sl, r4, #25
 8007462:	68e3      	ldr	r3, [r4, #12]
 8007464:	6832      	ldr	r2, [r6, #0]
 8007466:	1a9b      	subs	r3, r3, r2
 8007468:	42ab      	cmp	r3, r5
 800746a:	dc26      	bgt.n	80074ba <_printf_common+0x96>
 800746c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007470:	1e13      	subs	r3, r2, #0
 8007472:	6822      	ldr	r2, [r4, #0]
 8007474:	bf18      	it	ne
 8007476:	2301      	movne	r3, #1
 8007478:	0692      	lsls	r2, r2, #26
 800747a:	d42b      	bmi.n	80074d4 <_printf_common+0xb0>
 800747c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007480:	4649      	mov	r1, r9
 8007482:	4638      	mov	r0, r7
 8007484:	47c0      	blx	r8
 8007486:	3001      	adds	r0, #1
 8007488:	d01e      	beq.n	80074c8 <_printf_common+0xa4>
 800748a:	6823      	ldr	r3, [r4, #0]
 800748c:	68e5      	ldr	r5, [r4, #12]
 800748e:	6832      	ldr	r2, [r6, #0]
 8007490:	f003 0306 	and.w	r3, r3, #6
 8007494:	2b04      	cmp	r3, #4
 8007496:	bf08      	it	eq
 8007498:	1aad      	subeq	r5, r5, r2
 800749a:	68a3      	ldr	r3, [r4, #8]
 800749c:	6922      	ldr	r2, [r4, #16]
 800749e:	bf0c      	ite	eq
 80074a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074a4:	2500      	movne	r5, #0
 80074a6:	4293      	cmp	r3, r2
 80074a8:	bfc4      	itt	gt
 80074aa:	1a9b      	subgt	r3, r3, r2
 80074ac:	18ed      	addgt	r5, r5, r3
 80074ae:	2600      	movs	r6, #0
 80074b0:	341a      	adds	r4, #26
 80074b2:	42b5      	cmp	r5, r6
 80074b4:	d11a      	bne.n	80074ec <_printf_common+0xc8>
 80074b6:	2000      	movs	r0, #0
 80074b8:	e008      	b.n	80074cc <_printf_common+0xa8>
 80074ba:	2301      	movs	r3, #1
 80074bc:	4652      	mov	r2, sl
 80074be:	4649      	mov	r1, r9
 80074c0:	4638      	mov	r0, r7
 80074c2:	47c0      	blx	r8
 80074c4:	3001      	adds	r0, #1
 80074c6:	d103      	bne.n	80074d0 <_printf_common+0xac>
 80074c8:	f04f 30ff 	mov.w	r0, #4294967295
 80074cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074d0:	3501      	adds	r5, #1
 80074d2:	e7c6      	b.n	8007462 <_printf_common+0x3e>
 80074d4:	18e1      	adds	r1, r4, r3
 80074d6:	1c5a      	adds	r2, r3, #1
 80074d8:	2030      	movs	r0, #48	; 0x30
 80074da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074de:	4422      	add	r2, r4
 80074e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074e8:	3302      	adds	r3, #2
 80074ea:	e7c7      	b.n	800747c <_printf_common+0x58>
 80074ec:	2301      	movs	r3, #1
 80074ee:	4622      	mov	r2, r4
 80074f0:	4649      	mov	r1, r9
 80074f2:	4638      	mov	r0, r7
 80074f4:	47c0      	blx	r8
 80074f6:	3001      	adds	r0, #1
 80074f8:	d0e6      	beq.n	80074c8 <_printf_common+0xa4>
 80074fa:	3601      	adds	r6, #1
 80074fc:	e7d9      	b.n	80074b2 <_printf_common+0x8e>
	...

08007500 <_printf_i>:
 8007500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007504:	7e0f      	ldrb	r7, [r1, #24]
 8007506:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007508:	2f78      	cmp	r7, #120	; 0x78
 800750a:	4691      	mov	r9, r2
 800750c:	4680      	mov	r8, r0
 800750e:	460c      	mov	r4, r1
 8007510:	469a      	mov	sl, r3
 8007512:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007516:	d807      	bhi.n	8007528 <_printf_i+0x28>
 8007518:	2f62      	cmp	r7, #98	; 0x62
 800751a:	d80a      	bhi.n	8007532 <_printf_i+0x32>
 800751c:	2f00      	cmp	r7, #0
 800751e:	f000 80d8 	beq.w	80076d2 <_printf_i+0x1d2>
 8007522:	2f58      	cmp	r7, #88	; 0x58
 8007524:	f000 80a3 	beq.w	800766e <_printf_i+0x16e>
 8007528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800752c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007530:	e03a      	b.n	80075a8 <_printf_i+0xa8>
 8007532:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007536:	2b15      	cmp	r3, #21
 8007538:	d8f6      	bhi.n	8007528 <_printf_i+0x28>
 800753a:	a101      	add	r1, pc, #4	; (adr r1, 8007540 <_printf_i+0x40>)
 800753c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007540:	08007599 	.word	0x08007599
 8007544:	080075ad 	.word	0x080075ad
 8007548:	08007529 	.word	0x08007529
 800754c:	08007529 	.word	0x08007529
 8007550:	08007529 	.word	0x08007529
 8007554:	08007529 	.word	0x08007529
 8007558:	080075ad 	.word	0x080075ad
 800755c:	08007529 	.word	0x08007529
 8007560:	08007529 	.word	0x08007529
 8007564:	08007529 	.word	0x08007529
 8007568:	08007529 	.word	0x08007529
 800756c:	080076b9 	.word	0x080076b9
 8007570:	080075dd 	.word	0x080075dd
 8007574:	0800769b 	.word	0x0800769b
 8007578:	08007529 	.word	0x08007529
 800757c:	08007529 	.word	0x08007529
 8007580:	080076db 	.word	0x080076db
 8007584:	08007529 	.word	0x08007529
 8007588:	080075dd 	.word	0x080075dd
 800758c:	08007529 	.word	0x08007529
 8007590:	08007529 	.word	0x08007529
 8007594:	080076a3 	.word	0x080076a3
 8007598:	682b      	ldr	r3, [r5, #0]
 800759a:	1d1a      	adds	r2, r3, #4
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	602a      	str	r2, [r5, #0]
 80075a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075a8:	2301      	movs	r3, #1
 80075aa:	e0a3      	b.n	80076f4 <_printf_i+0x1f4>
 80075ac:	6820      	ldr	r0, [r4, #0]
 80075ae:	6829      	ldr	r1, [r5, #0]
 80075b0:	0606      	lsls	r6, r0, #24
 80075b2:	f101 0304 	add.w	r3, r1, #4
 80075b6:	d50a      	bpl.n	80075ce <_printf_i+0xce>
 80075b8:	680e      	ldr	r6, [r1, #0]
 80075ba:	602b      	str	r3, [r5, #0]
 80075bc:	2e00      	cmp	r6, #0
 80075be:	da03      	bge.n	80075c8 <_printf_i+0xc8>
 80075c0:	232d      	movs	r3, #45	; 0x2d
 80075c2:	4276      	negs	r6, r6
 80075c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075c8:	485e      	ldr	r0, [pc, #376]	; (8007744 <_printf_i+0x244>)
 80075ca:	230a      	movs	r3, #10
 80075cc:	e019      	b.n	8007602 <_printf_i+0x102>
 80075ce:	680e      	ldr	r6, [r1, #0]
 80075d0:	602b      	str	r3, [r5, #0]
 80075d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80075d6:	bf18      	it	ne
 80075d8:	b236      	sxthne	r6, r6
 80075da:	e7ef      	b.n	80075bc <_printf_i+0xbc>
 80075dc:	682b      	ldr	r3, [r5, #0]
 80075de:	6820      	ldr	r0, [r4, #0]
 80075e0:	1d19      	adds	r1, r3, #4
 80075e2:	6029      	str	r1, [r5, #0]
 80075e4:	0601      	lsls	r1, r0, #24
 80075e6:	d501      	bpl.n	80075ec <_printf_i+0xec>
 80075e8:	681e      	ldr	r6, [r3, #0]
 80075ea:	e002      	b.n	80075f2 <_printf_i+0xf2>
 80075ec:	0646      	lsls	r6, r0, #25
 80075ee:	d5fb      	bpl.n	80075e8 <_printf_i+0xe8>
 80075f0:	881e      	ldrh	r6, [r3, #0]
 80075f2:	4854      	ldr	r0, [pc, #336]	; (8007744 <_printf_i+0x244>)
 80075f4:	2f6f      	cmp	r7, #111	; 0x6f
 80075f6:	bf0c      	ite	eq
 80075f8:	2308      	moveq	r3, #8
 80075fa:	230a      	movne	r3, #10
 80075fc:	2100      	movs	r1, #0
 80075fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007602:	6865      	ldr	r5, [r4, #4]
 8007604:	60a5      	str	r5, [r4, #8]
 8007606:	2d00      	cmp	r5, #0
 8007608:	bfa2      	ittt	ge
 800760a:	6821      	ldrge	r1, [r4, #0]
 800760c:	f021 0104 	bicge.w	r1, r1, #4
 8007610:	6021      	strge	r1, [r4, #0]
 8007612:	b90e      	cbnz	r6, 8007618 <_printf_i+0x118>
 8007614:	2d00      	cmp	r5, #0
 8007616:	d04d      	beq.n	80076b4 <_printf_i+0x1b4>
 8007618:	4615      	mov	r5, r2
 800761a:	fbb6 f1f3 	udiv	r1, r6, r3
 800761e:	fb03 6711 	mls	r7, r3, r1, r6
 8007622:	5dc7      	ldrb	r7, [r0, r7]
 8007624:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007628:	4637      	mov	r7, r6
 800762a:	42bb      	cmp	r3, r7
 800762c:	460e      	mov	r6, r1
 800762e:	d9f4      	bls.n	800761a <_printf_i+0x11a>
 8007630:	2b08      	cmp	r3, #8
 8007632:	d10b      	bne.n	800764c <_printf_i+0x14c>
 8007634:	6823      	ldr	r3, [r4, #0]
 8007636:	07de      	lsls	r6, r3, #31
 8007638:	d508      	bpl.n	800764c <_printf_i+0x14c>
 800763a:	6923      	ldr	r3, [r4, #16]
 800763c:	6861      	ldr	r1, [r4, #4]
 800763e:	4299      	cmp	r1, r3
 8007640:	bfde      	ittt	le
 8007642:	2330      	movle	r3, #48	; 0x30
 8007644:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007648:	f105 35ff 	addle.w	r5, r5, #4294967295
 800764c:	1b52      	subs	r2, r2, r5
 800764e:	6122      	str	r2, [r4, #16]
 8007650:	f8cd a000 	str.w	sl, [sp]
 8007654:	464b      	mov	r3, r9
 8007656:	aa03      	add	r2, sp, #12
 8007658:	4621      	mov	r1, r4
 800765a:	4640      	mov	r0, r8
 800765c:	f7ff fee2 	bl	8007424 <_printf_common>
 8007660:	3001      	adds	r0, #1
 8007662:	d14c      	bne.n	80076fe <_printf_i+0x1fe>
 8007664:	f04f 30ff 	mov.w	r0, #4294967295
 8007668:	b004      	add	sp, #16
 800766a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800766e:	4835      	ldr	r0, [pc, #212]	; (8007744 <_printf_i+0x244>)
 8007670:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007674:	6829      	ldr	r1, [r5, #0]
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	f851 6b04 	ldr.w	r6, [r1], #4
 800767c:	6029      	str	r1, [r5, #0]
 800767e:	061d      	lsls	r5, r3, #24
 8007680:	d514      	bpl.n	80076ac <_printf_i+0x1ac>
 8007682:	07df      	lsls	r7, r3, #31
 8007684:	bf44      	itt	mi
 8007686:	f043 0320 	orrmi.w	r3, r3, #32
 800768a:	6023      	strmi	r3, [r4, #0]
 800768c:	b91e      	cbnz	r6, 8007696 <_printf_i+0x196>
 800768e:	6823      	ldr	r3, [r4, #0]
 8007690:	f023 0320 	bic.w	r3, r3, #32
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	2310      	movs	r3, #16
 8007698:	e7b0      	b.n	80075fc <_printf_i+0xfc>
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	f043 0320 	orr.w	r3, r3, #32
 80076a0:	6023      	str	r3, [r4, #0]
 80076a2:	2378      	movs	r3, #120	; 0x78
 80076a4:	4828      	ldr	r0, [pc, #160]	; (8007748 <_printf_i+0x248>)
 80076a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076aa:	e7e3      	b.n	8007674 <_printf_i+0x174>
 80076ac:	0659      	lsls	r1, r3, #25
 80076ae:	bf48      	it	mi
 80076b0:	b2b6      	uxthmi	r6, r6
 80076b2:	e7e6      	b.n	8007682 <_printf_i+0x182>
 80076b4:	4615      	mov	r5, r2
 80076b6:	e7bb      	b.n	8007630 <_printf_i+0x130>
 80076b8:	682b      	ldr	r3, [r5, #0]
 80076ba:	6826      	ldr	r6, [r4, #0]
 80076bc:	6961      	ldr	r1, [r4, #20]
 80076be:	1d18      	adds	r0, r3, #4
 80076c0:	6028      	str	r0, [r5, #0]
 80076c2:	0635      	lsls	r5, r6, #24
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	d501      	bpl.n	80076cc <_printf_i+0x1cc>
 80076c8:	6019      	str	r1, [r3, #0]
 80076ca:	e002      	b.n	80076d2 <_printf_i+0x1d2>
 80076cc:	0670      	lsls	r0, r6, #25
 80076ce:	d5fb      	bpl.n	80076c8 <_printf_i+0x1c8>
 80076d0:	8019      	strh	r1, [r3, #0]
 80076d2:	2300      	movs	r3, #0
 80076d4:	6123      	str	r3, [r4, #16]
 80076d6:	4615      	mov	r5, r2
 80076d8:	e7ba      	b.n	8007650 <_printf_i+0x150>
 80076da:	682b      	ldr	r3, [r5, #0]
 80076dc:	1d1a      	adds	r2, r3, #4
 80076de:	602a      	str	r2, [r5, #0]
 80076e0:	681d      	ldr	r5, [r3, #0]
 80076e2:	6862      	ldr	r2, [r4, #4]
 80076e4:	2100      	movs	r1, #0
 80076e6:	4628      	mov	r0, r5
 80076e8:	f7f8 fd9a 	bl	8000220 <memchr>
 80076ec:	b108      	cbz	r0, 80076f2 <_printf_i+0x1f2>
 80076ee:	1b40      	subs	r0, r0, r5
 80076f0:	6060      	str	r0, [r4, #4]
 80076f2:	6863      	ldr	r3, [r4, #4]
 80076f4:	6123      	str	r3, [r4, #16]
 80076f6:	2300      	movs	r3, #0
 80076f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076fc:	e7a8      	b.n	8007650 <_printf_i+0x150>
 80076fe:	6923      	ldr	r3, [r4, #16]
 8007700:	462a      	mov	r2, r5
 8007702:	4649      	mov	r1, r9
 8007704:	4640      	mov	r0, r8
 8007706:	47d0      	blx	sl
 8007708:	3001      	adds	r0, #1
 800770a:	d0ab      	beq.n	8007664 <_printf_i+0x164>
 800770c:	6823      	ldr	r3, [r4, #0]
 800770e:	079b      	lsls	r3, r3, #30
 8007710:	d413      	bmi.n	800773a <_printf_i+0x23a>
 8007712:	68e0      	ldr	r0, [r4, #12]
 8007714:	9b03      	ldr	r3, [sp, #12]
 8007716:	4298      	cmp	r0, r3
 8007718:	bfb8      	it	lt
 800771a:	4618      	movlt	r0, r3
 800771c:	e7a4      	b.n	8007668 <_printf_i+0x168>
 800771e:	2301      	movs	r3, #1
 8007720:	4632      	mov	r2, r6
 8007722:	4649      	mov	r1, r9
 8007724:	4640      	mov	r0, r8
 8007726:	47d0      	blx	sl
 8007728:	3001      	adds	r0, #1
 800772a:	d09b      	beq.n	8007664 <_printf_i+0x164>
 800772c:	3501      	adds	r5, #1
 800772e:	68e3      	ldr	r3, [r4, #12]
 8007730:	9903      	ldr	r1, [sp, #12]
 8007732:	1a5b      	subs	r3, r3, r1
 8007734:	42ab      	cmp	r3, r5
 8007736:	dcf2      	bgt.n	800771e <_printf_i+0x21e>
 8007738:	e7eb      	b.n	8007712 <_printf_i+0x212>
 800773a:	2500      	movs	r5, #0
 800773c:	f104 0619 	add.w	r6, r4, #25
 8007740:	e7f5      	b.n	800772e <_printf_i+0x22e>
 8007742:	bf00      	nop
 8007744:	08009cc6 	.word	0x08009cc6
 8007748:	08009cd7 	.word	0x08009cd7

0800774c <sniprintf>:
 800774c:	b40c      	push	{r2, r3}
 800774e:	b530      	push	{r4, r5, lr}
 8007750:	4b17      	ldr	r3, [pc, #92]	; (80077b0 <sniprintf+0x64>)
 8007752:	1e0c      	subs	r4, r1, #0
 8007754:	681d      	ldr	r5, [r3, #0]
 8007756:	b09d      	sub	sp, #116	; 0x74
 8007758:	da08      	bge.n	800776c <sniprintf+0x20>
 800775a:	238b      	movs	r3, #139	; 0x8b
 800775c:	602b      	str	r3, [r5, #0]
 800775e:	f04f 30ff 	mov.w	r0, #4294967295
 8007762:	b01d      	add	sp, #116	; 0x74
 8007764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007768:	b002      	add	sp, #8
 800776a:	4770      	bx	lr
 800776c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007770:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007774:	bf14      	ite	ne
 8007776:	f104 33ff 	addne.w	r3, r4, #4294967295
 800777a:	4623      	moveq	r3, r4
 800777c:	9304      	str	r3, [sp, #16]
 800777e:	9307      	str	r3, [sp, #28]
 8007780:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007784:	9002      	str	r0, [sp, #8]
 8007786:	9006      	str	r0, [sp, #24]
 8007788:	f8ad 3016 	strh.w	r3, [sp, #22]
 800778c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800778e:	ab21      	add	r3, sp, #132	; 0x84
 8007790:	a902      	add	r1, sp, #8
 8007792:	4628      	mov	r0, r5
 8007794:	9301      	str	r3, [sp, #4]
 8007796:	f001 fb79 	bl	8008e8c <_svfiprintf_r>
 800779a:	1c43      	adds	r3, r0, #1
 800779c:	bfbc      	itt	lt
 800779e:	238b      	movlt	r3, #139	; 0x8b
 80077a0:	602b      	strlt	r3, [r5, #0]
 80077a2:	2c00      	cmp	r4, #0
 80077a4:	d0dd      	beq.n	8007762 <sniprintf+0x16>
 80077a6:	9b02      	ldr	r3, [sp, #8]
 80077a8:	2200      	movs	r2, #0
 80077aa:	701a      	strb	r2, [r3, #0]
 80077ac:	e7d9      	b.n	8007762 <sniprintf+0x16>
 80077ae:	bf00      	nop
 80077b0:	2000000c 	.word	0x2000000c

080077b4 <quorem>:
 80077b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b8:	6903      	ldr	r3, [r0, #16]
 80077ba:	690c      	ldr	r4, [r1, #16]
 80077bc:	42a3      	cmp	r3, r4
 80077be:	4607      	mov	r7, r0
 80077c0:	f2c0 8081 	blt.w	80078c6 <quorem+0x112>
 80077c4:	3c01      	subs	r4, #1
 80077c6:	f101 0814 	add.w	r8, r1, #20
 80077ca:	f100 0514 	add.w	r5, r0, #20
 80077ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077d2:	9301      	str	r3, [sp, #4]
 80077d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80077d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077dc:	3301      	adds	r3, #1
 80077de:	429a      	cmp	r2, r3
 80077e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80077e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80077e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80077ec:	d331      	bcc.n	8007852 <quorem+0x9e>
 80077ee:	f04f 0e00 	mov.w	lr, #0
 80077f2:	4640      	mov	r0, r8
 80077f4:	46ac      	mov	ip, r5
 80077f6:	46f2      	mov	sl, lr
 80077f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80077fc:	b293      	uxth	r3, r2
 80077fe:	fb06 e303 	mla	r3, r6, r3, lr
 8007802:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007806:	b29b      	uxth	r3, r3
 8007808:	ebaa 0303 	sub.w	r3, sl, r3
 800780c:	f8dc a000 	ldr.w	sl, [ip]
 8007810:	0c12      	lsrs	r2, r2, #16
 8007812:	fa13 f38a 	uxtah	r3, r3, sl
 8007816:	fb06 e202 	mla	r2, r6, r2, lr
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	9b00      	ldr	r3, [sp, #0]
 800781e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007822:	b292      	uxth	r2, r2
 8007824:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007828:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800782c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007830:	4581      	cmp	r9, r0
 8007832:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007836:	f84c 3b04 	str.w	r3, [ip], #4
 800783a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800783e:	d2db      	bcs.n	80077f8 <quorem+0x44>
 8007840:	f855 300b 	ldr.w	r3, [r5, fp]
 8007844:	b92b      	cbnz	r3, 8007852 <quorem+0x9e>
 8007846:	9b01      	ldr	r3, [sp, #4]
 8007848:	3b04      	subs	r3, #4
 800784a:	429d      	cmp	r5, r3
 800784c:	461a      	mov	r2, r3
 800784e:	d32e      	bcc.n	80078ae <quorem+0xfa>
 8007850:	613c      	str	r4, [r7, #16]
 8007852:	4638      	mov	r0, r7
 8007854:	f001 f8c6 	bl	80089e4 <__mcmp>
 8007858:	2800      	cmp	r0, #0
 800785a:	db24      	blt.n	80078a6 <quorem+0xf2>
 800785c:	3601      	adds	r6, #1
 800785e:	4628      	mov	r0, r5
 8007860:	f04f 0c00 	mov.w	ip, #0
 8007864:	f858 2b04 	ldr.w	r2, [r8], #4
 8007868:	f8d0 e000 	ldr.w	lr, [r0]
 800786c:	b293      	uxth	r3, r2
 800786e:	ebac 0303 	sub.w	r3, ip, r3
 8007872:	0c12      	lsrs	r2, r2, #16
 8007874:	fa13 f38e 	uxtah	r3, r3, lr
 8007878:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800787c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007880:	b29b      	uxth	r3, r3
 8007882:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007886:	45c1      	cmp	r9, r8
 8007888:	f840 3b04 	str.w	r3, [r0], #4
 800788c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007890:	d2e8      	bcs.n	8007864 <quorem+0xb0>
 8007892:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007896:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800789a:	b922      	cbnz	r2, 80078a6 <quorem+0xf2>
 800789c:	3b04      	subs	r3, #4
 800789e:	429d      	cmp	r5, r3
 80078a0:	461a      	mov	r2, r3
 80078a2:	d30a      	bcc.n	80078ba <quorem+0x106>
 80078a4:	613c      	str	r4, [r7, #16]
 80078a6:	4630      	mov	r0, r6
 80078a8:	b003      	add	sp, #12
 80078aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ae:	6812      	ldr	r2, [r2, #0]
 80078b0:	3b04      	subs	r3, #4
 80078b2:	2a00      	cmp	r2, #0
 80078b4:	d1cc      	bne.n	8007850 <quorem+0x9c>
 80078b6:	3c01      	subs	r4, #1
 80078b8:	e7c7      	b.n	800784a <quorem+0x96>
 80078ba:	6812      	ldr	r2, [r2, #0]
 80078bc:	3b04      	subs	r3, #4
 80078be:	2a00      	cmp	r2, #0
 80078c0:	d1f0      	bne.n	80078a4 <quorem+0xf0>
 80078c2:	3c01      	subs	r4, #1
 80078c4:	e7eb      	b.n	800789e <quorem+0xea>
 80078c6:	2000      	movs	r0, #0
 80078c8:	e7ee      	b.n	80078a8 <quorem+0xf4>
 80078ca:	0000      	movs	r0, r0
 80078cc:	0000      	movs	r0, r0
	...

080078d0 <_dtoa_r>:
 80078d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d4:	ed2d 8b04 	vpush	{d8-d9}
 80078d8:	ec57 6b10 	vmov	r6, r7, d0
 80078dc:	b093      	sub	sp, #76	; 0x4c
 80078de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80078e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80078e4:	9106      	str	r1, [sp, #24]
 80078e6:	ee10 aa10 	vmov	sl, s0
 80078ea:	4604      	mov	r4, r0
 80078ec:	9209      	str	r2, [sp, #36]	; 0x24
 80078ee:	930c      	str	r3, [sp, #48]	; 0x30
 80078f0:	46bb      	mov	fp, r7
 80078f2:	b975      	cbnz	r5, 8007912 <_dtoa_r+0x42>
 80078f4:	2010      	movs	r0, #16
 80078f6:	f000 fddd 	bl	80084b4 <malloc>
 80078fa:	4602      	mov	r2, r0
 80078fc:	6260      	str	r0, [r4, #36]	; 0x24
 80078fe:	b920      	cbnz	r0, 800790a <_dtoa_r+0x3a>
 8007900:	4ba7      	ldr	r3, [pc, #668]	; (8007ba0 <_dtoa_r+0x2d0>)
 8007902:	21ea      	movs	r1, #234	; 0xea
 8007904:	48a7      	ldr	r0, [pc, #668]	; (8007ba4 <_dtoa_r+0x2d4>)
 8007906:	f001 fbd1 	bl	80090ac <__assert_func>
 800790a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800790e:	6005      	str	r5, [r0, #0]
 8007910:	60c5      	str	r5, [r0, #12]
 8007912:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007914:	6819      	ldr	r1, [r3, #0]
 8007916:	b151      	cbz	r1, 800792e <_dtoa_r+0x5e>
 8007918:	685a      	ldr	r2, [r3, #4]
 800791a:	604a      	str	r2, [r1, #4]
 800791c:	2301      	movs	r3, #1
 800791e:	4093      	lsls	r3, r2
 8007920:	608b      	str	r3, [r1, #8]
 8007922:	4620      	mov	r0, r4
 8007924:	f000 fe1c 	bl	8008560 <_Bfree>
 8007928:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800792a:	2200      	movs	r2, #0
 800792c:	601a      	str	r2, [r3, #0]
 800792e:	1e3b      	subs	r3, r7, #0
 8007930:	bfaa      	itet	ge
 8007932:	2300      	movge	r3, #0
 8007934:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007938:	f8c8 3000 	strge.w	r3, [r8]
 800793c:	4b9a      	ldr	r3, [pc, #616]	; (8007ba8 <_dtoa_r+0x2d8>)
 800793e:	bfbc      	itt	lt
 8007940:	2201      	movlt	r2, #1
 8007942:	f8c8 2000 	strlt.w	r2, [r8]
 8007946:	ea33 030b 	bics.w	r3, r3, fp
 800794a:	d11b      	bne.n	8007984 <_dtoa_r+0xb4>
 800794c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800794e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007952:	6013      	str	r3, [r2, #0]
 8007954:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007958:	4333      	orrs	r3, r6
 800795a:	f000 8592 	beq.w	8008482 <_dtoa_r+0xbb2>
 800795e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007960:	b963      	cbnz	r3, 800797c <_dtoa_r+0xac>
 8007962:	4b92      	ldr	r3, [pc, #584]	; (8007bac <_dtoa_r+0x2dc>)
 8007964:	e022      	b.n	80079ac <_dtoa_r+0xdc>
 8007966:	4b92      	ldr	r3, [pc, #584]	; (8007bb0 <_dtoa_r+0x2e0>)
 8007968:	9301      	str	r3, [sp, #4]
 800796a:	3308      	adds	r3, #8
 800796c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800796e:	6013      	str	r3, [r2, #0]
 8007970:	9801      	ldr	r0, [sp, #4]
 8007972:	b013      	add	sp, #76	; 0x4c
 8007974:	ecbd 8b04 	vpop	{d8-d9}
 8007978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800797c:	4b8b      	ldr	r3, [pc, #556]	; (8007bac <_dtoa_r+0x2dc>)
 800797e:	9301      	str	r3, [sp, #4]
 8007980:	3303      	adds	r3, #3
 8007982:	e7f3      	b.n	800796c <_dtoa_r+0x9c>
 8007984:	2200      	movs	r2, #0
 8007986:	2300      	movs	r3, #0
 8007988:	4650      	mov	r0, sl
 800798a:	4659      	mov	r1, fp
 800798c:	f7f9 f8bc 	bl	8000b08 <__aeabi_dcmpeq>
 8007990:	ec4b ab19 	vmov	d9, sl, fp
 8007994:	4680      	mov	r8, r0
 8007996:	b158      	cbz	r0, 80079b0 <_dtoa_r+0xe0>
 8007998:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800799a:	2301      	movs	r3, #1
 800799c:	6013      	str	r3, [r2, #0]
 800799e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f000 856b 	beq.w	800847c <_dtoa_r+0xbac>
 80079a6:	4883      	ldr	r0, [pc, #524]	; (8007bb4 <_dtoa_r+0x2e4>)
 80079a8:	6018      	str	r0, [r3, #0]
 80079aa:	1e43      	subs	r3, r0, #1
 80079ac:	9301      	str	r3, [sp, #4]
 80079ae:	e7df      	b.n	8007970 <_dtoa_r+0xa0>
 80079b0:	ec4b ab10 	vmov	d0, sl, fp
 80079b4:	aa10      	add	r2, sp, #64	; 0x40
 80079b6:	a911      	add	r1, sp, #68	; 0x44
 80079b8:	4620      	mov	r0, r4
 80079ba:	f001 f8b9 	bl	8008b30 <__d2b>
 80079be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80079c2:	ee08 0a10 	vmov	s16, r0
 80079c6:	2d00      	cmp	r5, #0
 80079c8:	f000 8084 	beq.w	8007ad4 <_dtoa_r+0x204>
 80079cc:	ee19 3a90 	vmov	r3, s19
 80079d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80079d8:	4656      	mov	r6, sl
 80079da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80079de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80079e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80079e6:	4b74      	ldr	r3, [pc, #464]	; (8007bb8 <_dtoa_r+0x2e8>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	4630      	mov	r0, r6
 80079ec:	4639      	mov	r1, r7
 80079ee:	f7f8 fc6b 	bl	80002c8 <__aeabi_dsub>
 80079f2:	a365      	add	r3, pc, #404	; (adr r3, 8007b88 <_dtoa_r+0x2b8>)
 80079f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f8:	f7f8 fe1e 	bl	8000638 <__aeabi_dmul>
 80079fc:	a364      	add	r3, pc, #400	; (adr r3, 8007b90 <_dtoa_r+0x2c0>)
 80079fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a02:	f7f8 fc63 	bl	80002cc <__adddf3>
 8007a06:	4606      	mov	r6, r0
 8007a08:	4628      	mov	r0, r5
 8007a0a:	460f      	mov	r7, r1
 8007a0c:	f7f8 fdaa 	bl	8000564 <__aeabi_i2d>
 8007a10:	a361      	add	r3, pc, #388	; (adr r3, 8007b98 <_dtoa_r+0x2c8>)
 8007a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a16:	f7f8 fe0f 	bl	8000638 <__aeabi_dmul>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	4630      	mov	r0, r6
 8007a20:	4639      	mov	r1, r7
 8007a22:	f7f8 fc53 	bl	80002cc <__adddf3>
 8007a26:	4606      	mov	r6, r0
 8007a28:	460f      	mov	r7, r1
 8007a2a:	f7f9 f8b5 	bl	8000b98 <__aeabi_d2iz>
 8007a2e:	2200      	movs	r2, #0
 8007a30:	9000      	str	r0, [sp, #0]
 8007a32:	2300      	movs	r3, #0
 8007a34:	4630      	mov	r0, r6
 8007a36:	4639      	mov	r1, r7
 8007a38:	f7f9 f870 	bl	8000b1c <__aeabi_dcmplt>
 8007a3c:	b150      	cbz	r0, 8007a54 <_dtoa_r+0x184>
 8007a3e:	9800      	ldr	r0, [sp, #0]
 8007a40:	f7f8 fd90 	bl	8000564 <__aeabi_i2d>
 8007a44:	4632      	mov	r2, r6
 8007a46:	463b      	mov	r3, r7
 8007a48:	f7f9 f85e 	bl	8000b08 <__aeabi_dcmpeq>
 8007a4c:	b910      	cbnz	r0, 8007a54 <_dtoa_r+0x184>
 8007a4e:	9b00      	ldr	r3, [sp, #0]
 8007a50:	3b01      	subs	r3, #1
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	9b00      	ldr	r3, [sp, #0]
 8007a56:	2b16      	cmp	r3, #22
 8007a58:	d85a      	bhi.n	8007b10 <_dtoa_r+0x240>
 8007a5a:	9a00      	ldr	r2, [sp, #0]
 8007a5c:	4b57      	ldr	r3, [pc, #348]	; (8007bbc <_dtoa_r+0x2ec>)
 8007a5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a66:	ec51 0b19 	vmov	r0, r1, d9
 8007a6a:	f7f9 f857 	bl	8000b1c <__aeabi_dcmplt>
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	d050      	beq.n	8007b14 <_dtoa_r+0x244>
 8007a72:	9b00      	ldr	r3, [sp, #0]
 8007a74:	3b01      	subs	r3, #1
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	2300      	movs	r3, #0
 8007a7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a7e:	1b5d      	subs	r5, r3, r5
 8007a80:	1e6b      	subs	r3, r5, #1
 8007a82:	9305      	str	r3, [sp, #20]
 8007a84:	bf45      	ittet	mi
 8007a86:	f1c5 0301 	rsbmi	r3, r5, #1
 8007a8a:	9304      	strmi	r3, [sp, #16]
 8007a8c:	2300      	movpl	r3, #0
 8007a8e:	2300      	movmi	r3, #0
 8007a90:	bf4c      	ite	mi
 8007a92:	9305      	strmi	r3, [sp, #20]
 8007a94:	9304      	strpl	r3, [sp, #16]
 8007a96:	9b00      	ldr	r3, [sp, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	db3d      	blt.n	8007b18 <_dtoa_r+0x248>
 8007a9c:	9b05      	ldr	r3, [sp, #20]
 8007a9e:	9a00      	ldr	r2, [sp, #0]
 8007aa0:	920a      	str	r2, [sp, #40]	; 0x28
 8007aa2:	4413      	add	r3, r2
 8007aa4:	9305      	str	r3, [sp, #20]
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	9307      	str	r3, [sp, #28]
 8007aaa:	9b06      	ldr	r3, [sp, #24]
 8007aac:	2b09      	cmp	r3, #9
 8007aae:	f200 8089 	bhi.w	8007bc4 <_dtoa_r+0x2f4>
 8007ab2:	2b05      	cmp	r3, #5
 8007ab4:	bfc4      	itt	gt
 8007ab6:	3b04      	subgt	r3, #4
 8007ab8:	9306      	strgt	r3, [sp, #24]
 8007aba:	9b06      	ldr	r3, [sp, #24]
 8007abc:	f1a3 0302 	sub.w	r3, r3, #2
 8007ac0:	bfcc      	ite	gt
 8007ac2:	2500      	movgt	r5, #0
 8007ac4:	2501      	movle	r5, #1
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	f200 8087 	bhi.w	8007bda <_dtoa_r+0x30a>
 8007acc:	e8df f003 	tbb	[pc, r3]
 8007ad0:	59383a2d 	.word	0x59383a2d
 8007ad4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007ad8:	441d      	add	r5, r3
 8007ada:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007ade:	2b20      	cmp	r3, #32
 8007ae0:	bfc1      	itttt	gt
 8007ae2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ae6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007aea:	fa0b f303 	lslgt.w	r3, fp, r3
 8007aee:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007af2:	bfda      	itte	le
 8007af4:	f1c3 0320 	rsble	r3, r3, #32
 8007af8:	fa06 f003 	lslle.w	r0, r6, r3
 8007afc:	4318      	orrgt	r0, r3
 8007afe:	f7f8 fd21 	bl	8000544 <__aeabi_ui2d>
 8007b02:	2301      	movs	r3, #1
 8007b04:	4606      	mov	r6, r0
 8007b06:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007b0a:	3d01      	subs	r5, #1
 8007b0c:	930e      	str	r3, [sp, #56]	; 0x38
 8007b0e:	e76a      	b.n	80079e6 <_dtoa_r+0x116>
 8007b10:	2301      	movs	r3, #1
 8007b12:	e7b2      	b.n	8007a7a <_dtoa_r+0x1aa>
 8007b14:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b16:	e7b1      	b.n	8007a7c <_dtoa_r+0x1ac>
 8007b18:	9b04      	ldr	r3, [sp, #16]
 8007b1a:	9a00      	ldr	r2, [sp, #0]
 8007b1c:	1a9b      	subs	r3, r3, r2
 8007b1e:	9304      	str	r3, [sp, #16]
 8007b20:	4253      	negs	r3, r2
 8007b22:	9307      	str	r3, [sp, #28]
 8007b24:	2300      	movs	r3, #0
 8007b26:	930a      	str	r3, [sp, #40]	; 0x28
 8007b28:	e7bf      	b.n	8007aaa <_dtoa_r+0x1da>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	9308      	str	r3, [sp, #32]
 8007b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	dc55      	bgt.n	8007be0 <_dtoa_r+0x310>
 8007b34:	2301      	movs	r3, #1
 8007b36:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b3e:	e00c      	b.n	8007b5a <_dtoa_r+0x28a>
 8007b40:	2301      	movs	r3, #1
 8007b42:	e7f3      	b.n	8007b2c <_dtoa_r+0x25c>
 8007b44:	2300      	movs	r3, #0
 8007b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b48:	9308      	str	r3, [sp, #32]
 8007b4a:	9b00      	ldr	r3, [sp, #0]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	9302      	str	r3, [sp, #8]
 8007b50:	3301      	adds	r3, #1
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	9303      	str	r3, [sp, #12]
 8007b56:	bfb8      	it	lt
 8007b58:	2301      	movlt	r3, #1
 8007b5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	6042      	str	r2, [r0, #4]
 8007b60:	2204      	movs	r2, #4
 8007b62:	f102 0614 	add.w	r6, r2, #20
 8007b66:	429e      	cmp	r6, r3
 8007b68:	6841      	ldr	r1, [r0, #4]
 8007b6a:	d93d      	bls.n	8007be8 <_dtoa_r+0x318>
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f000 fcb7 	bl	80084e0 <_Balloc>
 8007b72:	9001      	str	r0, [sp, #4]
 8007b74:	2800      	cmp	r0, #0
 8007b76:	d13b      	bne.n	8007bf0 <_dtoa_r+0x320>
 8007b78:	4b11      	ldr	r3, [pc, #68]	; (8007bc0 <_dtoa_r+0x2f0>)
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007b80:	e6c0      	b.n	8007904 <_dtoa_r+0x34>
 8007b82:	2301      	movs	r3, #1
 8007b84:	e7df      	b.n	8007b46 <_dtoa_r+0x276>
 8007b86:	bf00      	nop
 8007b88:	636f4361 	.word	0x636f4361
 8007b8c:	3fd287a7 	.word	0x3fd287a7
 8007b90:	8b60c8b3 	.word	0x8b60c8b3
 8007b94:	3fc68a28 	.word	0x3fc68a28
 8007b98:	509f79fb 	.word	0x509f79fb
 8007b9c:	3fd34413 	.word	0x3fd34413
 8007ba0:	08009cf5 	.word	0x08009cf5
 8007ba4:	08009d0c 	.word	0x08009d0c
 8007ba8:	7ff00000 	.word	0x7ff00000
 8007bac:	08009cf1 	.word	0x08009cf1
 8007bb0:	08009ce8 	.word	0x08009ce8
 8007bb4:	08009cc5 	.word	0x08009cc5
 8007bb8:	3ff80000 	.word	0x3ff80000
 8007bbc:	08009e00 	.word	0x08009e00
 8007bc0:	08009d67 	.word	0x08009d67
 8007bc4:	2501      	movs	r5, #1
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	9306      	str	r3, [sp, #24]
 8007bca:	9508      	str	r5, [sp, #32]
 8007bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8007bd0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	2312      	movs	r3, #18
 8007bd8:	e7b0      	b.n	8007b3c <_dtoa_r+0x26c>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	9308      	str	r3, [sp, #32]
 8007bde:	e7f5      	b.n	8007bcc <_dtoa_r+0x2fc>
 8007be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007be2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007be6:	e7b8      	b.n	8007b5a <_dtoa_r+0x28a>
 8007be8:	3101      	adds	r1, #1
 8007bea:	6041      	str	r1, [r0, #4]
 8007bec:	0052      	lsls	r2, r2, #1
 8007bee:	e7b8      	b.n	8007b62 <_dtoa_r+0x292>
 8007bf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bf2:	9a01      	ldr	r2, [sp, #4]
 8007bf4:	601a      	str	r2, [r3, #0]
 8007bf6:	9b03      	ldr	r3, [sp, #12]
 8007bf8:	2b0e      	cmp	r3, #14
 8007bfa:	f200 809d 	bhi.w	8007d38 <_dtoa_r+0x468>
 8007bfe:	2d00      	cmp	r5, #0
 8007c00:	f000 809a 	beq.w	8007d38 <_dtoa_r+0x468>
 8007c04:	9b00      	ldr	r3, [sp, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	dd32      	ble.n	8007c70 <_dtoa_r+0x3a0>
 8007c0a:	4ab7      	ldr	r2, [pc, #732]	; (8007ee8 <_dtoa_r+0x618>)
 8007c0c:	f003 030f 	and.w	r3, r3, #15
 8007c10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007c14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c18:	9b00      	ldr	r3, [sp, #0]
 8007c1a:	05d8      	lsls	r0, r3, #23
 8007c1c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007c20:	d516      	bpl.n	8007c50 <_dtoa_r+0x380>
 8007c22:	4bb2      	ldr	r3, [pc, #712]	; (8007eec <_dtoa_r+0x61c>)
 8007c24:	ec51 0b19 	vmov	r0, r1, d9
 8007c28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c2c:	f7f8 fe2e 	bl	800088c <__aeabi_ddiv>
 8007c30:	f007 070f 	and.w	r7, r7, #15
 8007c34:	4682      	mov	sl, r0
 8007c36:	468b      	mov	fp, r1
 8007c38:	2503      	movs	r5, #3
 8007c3a:	4eac      	ldr	r6, [pc, #688]	; (8007eec <_dtoa_r+0x61c>)
 8007c3c:	b957      	cbnz	r7, 8007c54 <_dtoa_r+0x384>
 8007c3e:	4642      	mov	r2, r8
 8007c40:	464b      	mov	r3, r9
 8007c42:	4650      	mov	r0, sl
 8007c44:	4659      	mov	r1, fp
 8007c46:	f7f8 fe21 	bl	800088c <__aeabi_ddiv>
 8007c4a:	4682      	mov	sl, r0
 8007c4c:	468b      	mov	fp, r1
 8007c4e:	e028      	b.n	8007ca2 <_dtoa_r+0x3d2>
 8007c50:	2502      	movs	r5, #2
 8007c52:	e7f2      	b.n	8007c3a <_dtoa_r+0x36a>
 8007c54:	07f9      	lsls	r1, r7, #31
 8007c56:	d508      	bpl.n	8007c6a <_dtoa_r+0x39a>
 8007c58:	4640      	mov	r0, r8
 8007c5a:	4649      	mov	r1, r9
 8007c5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c60:	f7f8 fcea 	bl	8000638 <__aeabi_dmul>
 8007c64:	3501      	adds	r5, #1
 8007c66:	4680      	mov	r8, r0
 8007c68:	4689      	mov	r9, r1
 8007c6a:	107f      	asrs	r7, r7, #1
 8007c6c:	3608      	adds	r6, #8
 8007c6e:	e7e5      	b.n	8007c3c <_dtoa_r+0x36c>
 8007c70:	f000 809b 	beq.w	8007daa <_dtoa_r+0x4da>
 8007c74:	9b00      	ldr	r3, [sp, #0]
 8007c76:	4f9d      	ldr	r7, [pc, #628]	; (8007eec <_dtoa_r+0x61c>)
 8007c78:	425e      	negs	r6, r3
 8007c7a:	4b9b      	ldr	r3, [pc, #620]	; (8007ee8 <_dtoa_r+0x618>)
 8007c7c:	f006 020f 	and.w	r2, r6, #15
 8007c80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c88:	ec51 0b19 	vmov	r0, r1, d9
 8007c8c:	f7f8 fcd4 	bl	8000638 <__aeabi_dmul>
 8007c90:	1136      	asrs	r6, r6, #4
 8007c92:	4682      	mov	sl, r0
 8007c94:	468b      	mov	fp, r1
 8007c96:	2300      	movs	r3, #0
 8007c98:	2502      	movs	r5, #2
 8007c9a:	2e00      	cmp	r6, #0
 8007c9c:	d17a      	bne.n	8007d94 <_dtoa_r+0x4c4>
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1d3      	bne.n	8007c4a <_dtoa_r+0x37a>
 8007ca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f000 8082 	beq.w	8007dae <_dtoa_r+0x4de>
 8007caa:	4b91      	ldr	r3, [pc, #580]	; (8007ef0 <_dtoa_r+0x620>)
 8007cac:	2200      	movs	r2, #0
 8007cae:	4650      	mov	r0, sl
 8007cb0:	4659      	mov	r1, fp
 8007cb2:	f7f8 ff33 	bl	8000b1c <__aeabi_dcmplt>
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	d079      	beq.n	8007dae <_dtoa_r+0x4de>
 8007cba:	9b03      	ldr	r3, [sp, #12]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d076      	beq.n	8007dae <_dtoa_r+0x4de>
 8007cc0:	9b02      	ldr	r3, [sp, #8]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	dd36      	ble.n	8007d34 <_dtoa_r+0x464>
 8007cc6:	9b00      	ldr	r3, [sp, #0]
 8007cc8:	4650      	mov	r0, sl
 8007cca:	4659      	mov	r1, fp
 8007ccc:	1e5f      	subs	r7, r3, #1
 8007cce:	2200      	movs	r2, #0
 8007cd0:	4b88      	ldr	r3, [pc, #544]	; (8007ef4 <_dtoa_r+0x624>)
 8007cd2:	f7f8 fcb1 	bl	8000638 <__aeabi_dmul>
 8007cd6:	9e02      	ldr	r6, [sp, #8]
 8007cd8:	4682      	mov	sl, r0
 8007cda:	468b      	mov	fp, r1
 8007cdc:	3501      	adds	r5, #1
 8007cde:	4628      	mov	r0, r5
 8007ce0:	f7f8 fc40 	bl	8000564 <__aeabi_i2d>
 8007ce4:	4652      	mov	r2, sl
 8007ce6:	465b      	mov	r3, fp
 8007ce8:	f7f8 fca6 	bl	8000638 <__aeabi_dmul>
 8007cec:	4b82      	ldr	r3, [pc, #520]	; (8007ef8 <_dtoa_r+0x628>)
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f7f8 faec 	bl	80002cc <__adddf3>
 8007cf4:	46d0      	mov	r8, sl
 8007cf6:	46d9      	mov	r9, fp
 8007cf8:	4682      	mov	sl, r0
 8007cfa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007cfe:	2e00      	cmp	r6, #0
 8007d00:	d158      	bne.n	8007db4 <_dtoa_r+0x4e4>
 8007d02:	4b7e      	ldr	r3, [pc, #504]	; (8007efc <_dtoa_r+0x62c>)
 8007d04:	2200      	movs	r2, #0
 8007d06:	4640      	mov	r0, r8
 8007d08:	4649      	mov	r1, r9
 8007d0a:	f7f8 fadd 	bl	80002c8 <__aeabi_dsub>
 8007d0e:	4652      	mov	r2, sl
 8007d10:	465b      	mov	r3, fp
 8007d12:	4680      	mov	r8, r0
 8007d14:	4689      	mov	r9, r1
 8007d16:	f7f8 ff1f 	bl	8000b58 <__aeabi_dcmpgt>
 8007d1a:	2800      	cmp	r0, #0
 8007d1c:	f040 8295 	bne.w	800824a <_dtoa_r+0x97a>
 8007d20:	4652      	mov	r2, sl
 8007d22:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007d26:	4640      	mov	r0, r8
 8007d28:	4649      	mov	r1, r9
 8007d2a:	f7f8 fef7 	bl	8000b1c <__aeabi_dcmplt>
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	f040 8289 	bne.w	8008246 <_dtoa_r+0x976>
 8007d34:	ec5b ab19 	vmov	sl, fp, d9
 8007d38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f2c0 8148 	blt.w	8007fd0 <_dtoa_r+0x700>
 8007d40:	9a00      	ldr	r2, [sp, #0]
 8007d42:	2a0e      	cmp	r2, #14
 8007d44:	f300 8144 	bgt.w	8007fd0 <_dtoa_r+0x700>
 8007d48:	4b67      	ldr	r3, [pc, #412]	; (8007ee8 <_dtoa_r+0x618>)
 8007d4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f280 80d5 	bge.w	8007f04 <_dtoa_r+0x634>
 8007d5a:	9b03      	ldr	r3, [sp, #12]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f300 80d1 	bgt.w	8007f04 <_dtoa_r+0x634>
 8007d62:	f040 826f 	bne.w	8008244 <_dtoa_r+0x974>
 8007d66:	4b65      	ldr	r3, [pc, #404]	; (8007efc <_dtoa_r+0x62c>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	4640      	mov	r0, r8
 8007d6c:	4649      	mov	r1, r9
 8007d6e:	f7f8 fc63 	bl	8000638 <__aeabi_dmul>
 8007d72:	4652      	mov	r2, sl
 8007d74:	465b      	mov	r3, fp
 8007d76:	f7f8 fee5 	bl	8000b44 <__aeabi_dcmpge>
 8007d7a:	9e03      	ldr	r6, [sp, #12]
 8007d7c:	4637      	mov	r7, r6
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	f040 8245 	bne.w	800820e <_dtoa_r+0x93e>
 8007d84:	9d01      	ldr	r5, [sp, #4]
 8007d86:	2331      	movs	r3, #49	; 0x31
 8007d88:	f805 3b01 	strb.w	r3, [r5], #1
 8007d8c:	9b00      	ldr	r3, [sp, #0]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	e240      	b.n	8008216 <_dtoa_r+0x946>
 8007d94:	07f2      	lsls	r2, r6, #31
 8007d96:	d505      	bpl.n	8007da4 <_dtoa_r+0x4d4>
 8007d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d9c:	f7f8 fc4c 	bl	8000638 <__aeabi_dmul>
 8007da0:	3501      	adds	r5, #1
 8007da2:	2301      	movs	r3, #1
 8007da4:	1076      	asrs	r6, r6, #1
 8007da6:	3708      	adds	r7, #8
 8007da8:	e777      	b.n	8007c9a <_dtoa_r+0x3ca>
 8007daa:	2502      	movs	r5, #2
 8007dac:	e779      	b.n	8007ca2 <_dtoa_r+0x3d2>
 8007dae:	9f00      	ldr	r7, [sp, #0]
 8007db0:	9e03      	ldr	r6, [sp, #12]
 8007db2:	e794      	b.n	8007cde <_dtoa_r+0x40e>
 8007db4:	9901      	ldr	r1, [sp, #4]
 8007db6:	4b4c      	ldr	r3, [pc, #304]	; (8007ee8 <_dtoa_r+0x618>)
 8007db8:	4431      	add	r1, r6
 8007dba:	910d      	str	r1, [sp, #52]	; 0x34
 8007dbc:	9908      	ldr	r1, [sp, #32]
 8007dbe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007dc2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007dc6:	2900      	cmp	r1, #0
 8007dc8:	d043      	beq.n	8007e52 <_dtoa_r+0x582>
 8007dca:	494d      	ldr	r1, [pc, #308]	; (8007f00 <_dtoa_r+0x630>)
 8007dcc:	2000      	movs	r0, #0
 8007dce:	f7f8 fd5d 	bl	800088c <__aeabi_ddiv>
 8007dd2:	4652      	mov	r2, sl
 8007dd4:	465b      	mov	r3, fp
 8007dd6:	f7f8 fa77 	bl	80002c8 <__aeabi_dsub>
 8007dda:	9d01      	ldr	r5, [sp, #4]
 8007ddc:	4682      	mov	sl, r0
 8007dde:	468b      	mov	fp, r1
 8007de0:	4649      	mov	r1, r9
 8007de2:	4640      	mov	r0, r8
 8007de4:	f7f8 fed8 	bl	8000b98 <__aeabi_d2iz>
 8007de8:	4606      	mov	r6, r0
 8007dea:	f7f8 fbbb 	bl	8000564 <__aeabi_i2d>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	4640      	mov	r0, r8
 8007df4:	4649      	mov	r1, r9
 8007df6:	f7f8 fa67 	bl	80002c8 <__aeabi_dsub>
 8007dfa:	3630      	adds	r6, #48	; 0x30
 8007dfc:	f805 6b01 	strb.w	r6, [r5], #1
 8007e00:	4652      	mov	r2, sl
 8007e02:	465b      	mov	r3, fp
 8007e04:	4680      	mov	r8, r0
 8007e06:	4689      	mov	r9, r1
 8007e08:	f7f8 fe88 	bl	8000b1c <__aeabi_dcmplt>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	d163      	bne.n	8007ed8 <_dtoa_r+0x608>
 8007e10:	4642      	mov	r2, r8
 8007e12:	464b      	mov	r3, r9
 8007e14:	4936      	ldr	r1, [pc, #216]	; (8007ef0 <_dtoa_r+0x620>)
 8007e16:	2000      	movs	r0, #0
 8007e18:	f7f8 fa56 	bl	80002c8 <__aeabi_dsub>
 8007e1c:	4652      	mov	r2, sl
 8007e1e:	465b      	mov	r3, fp
 8007e20:	f7f8 fe7c 	bl	8000b1c <__aeabi_dcmplt>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	f040 80b5 	bne.w	8007f94 <_dtoa_r+0x6c4>
 8007e2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e2c:	429d      	cmp	r5, r3
 8007e2e:	d081      	beq.n	8007d34 <_dtoa_r+0x464>
 8007e30:	4b30      	ldr	r3, [pc, #192]	; (8007ef4 <_dtoa_r+0x624>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	4650      	mov	r0, sl
 8007e36:	4659      	mov	r1, fp
 8007e38:	f7f8 fbfe 	bl	8000638 <__aeabi_dmul>
 8007e3c:	4b2d      	ldr	r3, [pc, #180]	; (8007ef4 <_dtoa_r+0x624>)
 8007e3e:	4682      	mov	sl, r0
 8007e40:	468b      	mov	fp, r1
 8007e42:	4640      	mov	r0, r8
 8007e44:	4649      	mov	r1, r9
 8007e46:	2200      	movs	r2, #0
 8007e48:	f7f8 fbf6 	bl	8000638 <__aeabi_dmul>
 8007e4c:	4680      	mov	r8, r0
 8007e4e:	4689      	mov	r9, r1
 8007e50:	e7c6      	b.n	8007de0 <_dtoa_r+0x510>
 8007e52:	4650      	mov	r0, sl
 8007e54:	4659      	mov	r1, fp
 8007e56:	f7f8 fbef 	bl	8000638 <__aeabi_dmul>
 8007e5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e5c:	9d01      	ldr	r5, [sp, #4]
 8007e5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e60:	4682      	mov	sl, r0
 8007e62:	468b      	mov	fp, r1
 8007e64:	4649      	mov	r1, r9
 8007e66:	4640      	mov	r0, r8
 8007e68:	f7f8 fe96 	bl	8000b98 <__aeabi_d2iz>
 8007e6c:	4606      	mov	r6, r0
 8007e6e:	f7f8 fb79 	bl	8000564 <__aeabi_i2d>
 8007e72:	3630      	adds	r6, #48	; 0x30
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	4640      	mov	r0, r8
 8007e7a:	4649      	mov	r1, r9
 8007e7c:	f7f8 fa24 	bl	80002c8 <__aeabi_dsub>
 8007e80:	f805 6b01 	strb.w	r6, [r5], #1
 8007e84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e86:	429d      	cmp	r5, r3
 8007e88:	4680      	mov	r8, r0
 8007e8a:	4689      	mov	r9, r1
 8007e8c:	f04f 0200 	mov.w	r2, #0
 8007e90:	d124      	bne.n	8007edc <_dtoa_r+0x60c>
 8007e92:	4b1b      	ldr	r3, [pc, #108]	; (8007f00 <_dtoa_r+0x630>)
 8007e94:	4650      	mov	r0, sl
 8007e96:	4659      	mov	r1, fp
 8007e98:	f7f8 fa18 	bl	80002cc <__adddf3>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	4640      	mov	r0, r8
 8007ea2:	4649      	mov	r1, r9
 8007ea4:	f7f8 fe58 	bl	8000b58 <__aeabi_dcmpgt>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d173      	bne.n	8007f94 <_dtoa_r+0x6c4>
 8007eac:	4652      	mov	r2, sl
 8007eae:	465b      	mov	r3, fp
 8007eb0:	4913      	ldr	r1, [pc, #76]	; (8007f00 <_dtoa_r+0x630>)
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	f7f8 fa08 	bl	80002c8 <__aeabi_dsub>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	460b      	mov	r3, r1
 8007ebc:	4640      	mov	r0, r8
 8007ebe:	4649      	mov	r1, r9
 8007ec0:	f7f8 fe2c 	bl	8000b1c <__aeabi_dcmplt>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	f43f af35 	beq.w	8007d34 <_dtoa_r+0x464>
 8007eca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007ecc:	1e6b      	subs	r3, r5, #1
 8007ece:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ed0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ed4:	2b30      	cmp	r3, #48	; 0x30
 8007ed6:	d0f8      	beq.n	8007eca <_dtoa_r+0x5fa>
 8007ed8:	9700      	str	r7, [sp, #0]
 8007eda:	e049      	b.n	8007f70 <_dtoa_r+0x6a0>
 8007edc:	4b05      	ldr	r3, [pc, #20]	; (8007ef4 <_dtoa_r+0x624>)
 8007ede:	f7f8 fbab 	bl	8000638 <__aeabi_dmul>
 8007ee2:	4680      	mov	r8, r0
 8007ee4:	4689      	mov	r9, r1
 8007ee6:	e7bd      	b.n	8007e64 <_dtoa_r+0x594>
 8007ee8:	08009e00 	.word	0x08009e00
 8007eec:	08009dd8 	.word	0x08009dd8
 8007ef0:	3ff00000 	.word	0x3ff00000
 8007ef4:	40240000 	.word	0x40240000
 8007ef8:	401c0000 	.word	0x401c0000
 8007efc:	40140000 	.word	0x40140000
 8007f00:	3fe00000 	.word	0x3fe00000
 8007f04:	9d01      	ldr	r5, [sp, #4]
 8007f06:	4656      	mov	r6, sl
 8007f08:	465f      	mov	r7, fp
 8007f0a:	4642      	mov	r2, r8
 8007f0c:	464b      	mov	r3, r9
 8007f0e:	4630      	mov	r0, r6
 8007f10:	4639      	mov	r1, r7
 8007f12:	f7f8 fcbb 	bl	800088c <__aeabi_ddiv>
 8007f16:	f7f8 fe3f 	bl	8000b98 <__aeabi_d2iz>
 8007f1a:	4682      	mov	sl, r0
 8007f1c:	f7f8 fb22 	bl	8000564 <__aeabi_i2d>
 8007f20:	4642      	mov	r2, r8
 8007f22:	464b      	mov	r3, r9
 8007f24:	f7f8 fb88 	bl	8000638 <__aeabi_dmul>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	4630      	mov	r0, r6
 8007f2e:	4639      	mov	r1, r7
 8007f30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007f34:	f7f8 f9c8 	bl	80002c8 <__aeabi_dsub>
 8007f38:	f805 6b01 	strb.w	r6, [r5], #1
 8007f3c:	9e01      	ldr	r6, [sp, #4]
 8007f3e:	9f03      	ldr	r7, [sp, #12]
 8007f40:	1bae      	subs	r6, r5, r6
 8007f42:	42b7      	cmp	r7, r6
 8007f44:	4602      	mov	r2, r0
 8007f46:	460b      	mov	r3, r1
 8007f48:	d135      	bne.n	8007fb6 <_dtoa_r+0x6e6>
 8007f4a:	f7f8 f9bf 	bl	80002cc <__adddf3>
 8007f4e:	4642      	mov	r2, r8
 8007f50:	464b      	mov	r3, r9
 8007f52:	4606      	mov	r6, r0
 8007f54:	460f      	mov	r7, r1
 8007f56:	f7f8 fdff 	bl	8000b58 <__aeabi_dcmpgt>
 8007f5a:	b9d0      	cbnz	r0, 8007f92 <_dtoa_r+0x6c2>
 8007f5c:	4642      	mov	r2, r8
 8007f5e:	464b      	mov	r3, r9
 8007f60:	4630      	mov	r0, r6
 8007f62:	4639      	mov	r1, r7
 8007f64:	f7f8 fdd0 	bl	8000b08 <__aeabi_dcmpeq>
 8007f68:	b110      	cbz	r0, 8007f70 <_dtoa_r+0x6a0>
 8007f6a:	f01a 0f01 	tst.w	sl, #1
 8007f6e:	d110      	bne.n	8007f92 <_dtoa_r+0x6c2>
 8007f70:	4620      	mov	r0, r4
 8007f72:	ee18 1a10 	vmov	r1, s16
 8007f76:	f000 faf3 	bl	8008560 <_Bfree>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	9800      	ldr	r0, [sp, #0]
 8007f7e:	702b      	strb	r3, [r5, #0]
 8007f80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f82:	3001      	adds	r0, #1
 8007f84:	6018      	str	r0, [r3, #0]
 8007f86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f43f acf1 	beq.w	8007970 <_dtoa_r+0xa0>
 8007f8e:	601d      	str	r5, [r3, #0]
 8007f90:	e4ee      	b.n	8007970 <_dtoa_r+0xa0>
 8007f92:	9f00      	ldr	r7, [sp, #0]
 8007f94:	462b      	mov	r3, r5
 8007f96:	461d      	mov	r5, r3
 8007f98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f9c:	2a39      	cmp	r2, #57	; 0x39
 8007f9e:	d106      	bne.n	8007fae <_dtoa_r+0x6de>
 8007fa0:	9a01      	ldr	r2, [sp, #4]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d1f7      	bne.n	8007f96 <_dtoa_r+0x6c6>
 8007fa6:	9901      	ldr	r1, [sp, #4]
 8007fa8:	2230      	movs	r2, #48	; 0x30
 8007faa:	3701      	adds	r7, #1
 8007fac:	700a      	strb	r2, [r1, #0]
 8007fae:	781a      	ldrb	r2, [r3, #0]
 8007fb0:	3201      	adds	r2, #1
 8007fb2:	701a      	strb	r2, [r3, #0]
 8007fb4:	e790      	b.n	8007ed8 <_dtoa_r+0x608>
 8007fb6:	4ba6      	ldr	r3, [pc, #664]	; (8008250 <_dtoa_r+0x980>)
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f7f8 fb3d 	bl	8000638 <__aeabi_dmul>
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	4606      	mov	r6, r0
 8007fc4:	460f      	mov	r7, r1
 8007fc6:	f7f8 fd9f 	bl	8000b08 <__aeabi_dcmpeq>
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d09d      	beq.n	8007f0a <_dtoa_r+0x63a>
 8007fce:	e7cf      	b.n	8007f70 <_dtoa_r+0x6a0>
 8007fd0:	9a08      	ldr	r2, [sp, #32]
 8007fd2:	2a00      	cmp	r2, #0
 8007fd4:	f000 80d7 	beq.w	8008186 <_dtoa_r+0x8b6>
 8007fd8:	9a06      	ldr	r2, [sp, #24]
 8007fda:	2a01      	cmp	r2, #1
 8007fdc:	f300 80ba 	bgt.w	8008154 <_dtoa_r+0x884>
 8007fe0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fe2:	2a00      	cmp	r2, #0
 8007fe4:	f000 80b2 	beq.w	800814c <_dtoa_r+0x87c>
 8007fe8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007fec:	9e07      	ldr	r6, [sp, #28]
 8007fee:	9d04      	ldr	r5, [sp, #16]
 8007ff0:	9a04      	ldr	r2, [sp, #16]
 8007ff2:	441a      	add	r2, r3
 8007ff4:	9204      	str	r2, [sp, #16]
 8007ff6:	9a05      	ldr	r2, [sp, #20]
 8007ff8:	2101      	movs	r1, #1
 8007ffa:	441a      	add	r2, r3
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	9205      	str	r2, [sp, #20]
 8008000:	f000 fb66 	bl	80086d0 <__i2b>
 8008004:	4607      	mov	r7, r0
 8008006:	2d00      	cmp	r5, #0
 8008008:	dd0c      	ble.n	8008024 <_dtoa_r+0x754>
 800800a:	9b05      	ldr	r3, [sp, #20]
 800800c:	2b00      	cmp	r3, #0
 800800e:	dd09      	ble.n	8008024 <_dtoa_r+0x754>
 8008010:	42ab      	cmp	r3, r5
 8008012:	9a04      	ldr	r2, [sp, #16]
 8008014:	bfa8      	it	ge
 8008016:	462b      	movge	r3, r5
 8008018:	1ad2      	subs	r2, r2, r3
 800801a:	9204      	str	r2, [sp, #16]
 800801c:	9a05      	ldr	r2, [sp, #20]
 800801e:	1aed      	subs	r5, r5, r3
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	9305      	str	r3, [sp, #20]
 8008024:	9b07      	ldr	r3, [sp, #28]
 8008026:	b31b      	cbz	r3, 8008070 <_dtoa_r+0x7a0>
 8008028:	9b08      	ldr	r3, [sp, #32]
 800802a:	2b00      	cmp	r3, #0
 800802c:	f000 80af 	beq.w	800818e <_dtoa_r+0x8be>
 8008030:	2e00      	cmp	r6, #0
 8008032:	dd13      	ble.n	800805c <_dtoa_r+0x78c>
 8008034:	4639      	mov	r1, r7
 8008036:	4632      	mov	r2, r6
 8008038:	4620      	mov	r0, r4
 800803a:	f000 fc09 	bl	8008850 <__pow5mult>
 800803e:	ee18 2a10 	vmov	r2, s16
 8008042:	4601      	mov	r1, r0
 8008044:	4607      	mov	r7, r0
 8008046:	4620      	mov	r0, r4
 8008048:	f000 fb58 	bl	80086fc <__multiply>
 800804c:	ee18 1a10 	vmov	r1, s16
 8008050:	4680      	mov	r8, r0
 8008052:	4620      	mov	r0, r4
 8008054:	f000 fa84 	bl	8008560 <_Bfree>
 8008058:	ee08 8a10 	vmov	s16, r8
 800805c:	9b07      	ldr	r3, [sp, #28]
 800805e:	1b9a      	subs	r2, r3, r6
 8008060:	d006      	beq.n	8008070 <_dtoa_r+0x7a0>
 8008062:	ee18 1a10 	vmov	r1, s16
 8008066:	4620      	mov	r0, r4
 8008068:	f000 fbf2 	bl	8008850 <__pow5mult>
 800806c:	ee08 0a10 	vmov	s16, r0
 8008070:	2101      	movs	r1, #1
 8008072:	4620      	mov	r0, r4
 8008074:	f000 fb2c 	bl	80086d0 <__i2b>
 8008078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800807a:	2b00      	cmp	r3, #0
 800807c:	4606      	mov	r6, r0
 800807e:	f340 8088 	ble.w	8008192 <_dtoa_r+0x8c2>
 8008082:	461a      	mov	r2, r3
 8008084:	4601      	mov	r1, r0
 8008086:	4620      	mov	r0, r4
 8008088:	f000 fbe2 	bl	8008850 <__pow5mult>
 800808c:	9b06      	ldr	r3, [sp, #24]
 800808e:	2b01      	cmp	r3, #1
 8008090:	4606      	mov	r6, r0
 8008092:	f340 8081 	ble.w	8008198 <_dtoa_r+0x8c8>
 8008096:	f04f 0800 	mov.w	r8, #0
 800809a:	6933      	ldr	r3, [r6, #16]
 800809c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80080a0:	6918      	ldr	r0, [r3, #16]
 80080a2:	f000 fac5 	bl	8008630 <__hi0bits>
 80080a6:	f1c0 0020 	rsb	r0, r0, #32
 80080aa:	9b05      	ldr	r3, [sp, #20]
 80080ac:	4418      	add	r0, r3
 80080ae:	f010 001f 	ands.w	r0, r0, #31
 80080b2:	f000 8092 	beq.w	80081da <_dtoa_r+0x90a>
 80080b6:	f1c0 0320 	rsb	r3, r0, #32
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	f340 808a 	ble.w	80081d4 <_dtoa_r+0x904>
 80080c0:	f1c0 001c 	rsb	r0, r0, #28
 80080c4:	9b04      	ldr	r3, [sp, #16]
 80080c6:	4403      	add	r3, r0
 80080c8:	9304      	str	r3, [sp, #16]
 80080ca:	9b05      	ldr	r3, [sp, #20]
 80080cc:	4403      	add	r3, r0
 80080ce:	4405      	add	r5, r0
 80080d0:	9305      	str	r3, [sp, #20]
 80080d2:	9b04      	ldr	r3, [sp, #16]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	dd07      	ble.n	80080e8 <_dtoa_r+0x818>
 80080d8:	ee18 1a10 	vmov	r1, s16
 80080dc:	461a      	mov	r2, r3
 80080de:	4620      	mov	r0, r4
 80080e0:	f000 fc10 	bl	8008904 <__lshift>
 80080e4:	ee08 0a10 	vmov	s16, r0
 80080e8:	9b05      	ldr	r3, [sp, #20]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	dd05      	ble.n	80080fa <_dtoa_r+0x82a>
 80080ee:	4631      	mov	r1, r6
 80080f0:	461a      	mov	r2, r3
 80080f2:	4620      	mov	r0, r4
 80080f4:	f000 fc06 	bl	8008904 <__lshift>
 80080f8:	4606      	mov	r6, r0
 80080fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d06e      	beq.n	80081de <_dtoa_r+0x90e>
 8008100:	ee18 0a10 	vmov	r0, s16
 8008104:	4631      	mov	r1, r6
 8008106:	f000 fc6d 	bl	80089e4 <__mcmp>
 800810a:	2800      	cmp	r0, #0
 800810c:	da67      	bge.n	80081de <_dtoa_r+0x90e>
 800810e:	9b00      	ldr	r3, [sp, #0]
 8008110:	3b01      	subs	r3, #1
 8008112:	ee18 1a10 	vmov	r1, s16
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	220a      	movs	r2, #10
 800811a:	2300      	movs	r3, #0
 800811c:	4620      	mov	r0, r4
 800811e:	f000 fa41 	bl	80085a4 <__multadd>
 8008122:	9b08      	ldr	r3, [sp, #32]
 8008124:	ee08 0a10 	vmov	s16, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 81b1 	beq.w	8008490 <_dtoa_r+0xbc0>
 800812e:	2300      	movs	r3, #0
 8008130:	4639      	mov	r1, r7
 8008132:	220a      	movs	r2, #10
 8008134:	4620      	mov	r0, r4
 8008136:	f000 fa35 	bl	80085a4 <__multadd>
 800813a:	9b02      	ldr	r3, [sp, #8]
 800813c:	2b00      	cmp	r3, #0
 800813e:	4607      	mov	r7, r0
 8008140:	f300 808e 	bgt.w	8008260 <_dtoa_r+0x990>
 8008144:	9b06      	ldr	r3, [sp, #24]
 8008146:	2b02      	cmp	r3, #2
 8008148:	dc51      	bgt.n	80081ee <_dtoa_r+0x91e>
 800814a:	e089      	b.n	8008260 <_dtoa_r+0x990>
 800814c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800814e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008152:	e74b      	b.n	8007fec <_dtoa_r+0x71c>
 8008154:	9b03      	ldr	r3, [sp, #12]
 8008156:	1e5e      	subs	r6, r3, #1
 8008158:	9b07      	ldr	r3, [sp, #28]
 800815a:	42b3      	cmp	r3, r6
 800815c:	bfbf      	itttt	lt
 800815e:	9b07      	ldrlt	r3, [sp, #28]
 8008160:	9607      	strlt	r6, [sp, #28]
 8008162:	1af2      	sublt	r2, r6, r3
 8008164:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008166:	bfb6      	itet	lt
 8008168:	189b      	addlt	r3, r3, r2
 800816a:	1b9e      	subge	r6, r3, r6
 800816c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800816e:	9b03      	ldr	r3, [sp, #12]
 8008170:	bfb8      	it	lt
 8008172:	2600      	movlt	r6, #0
 8008174:	2b00      	cmp	r3, #0
 8008176:	bfb7      	itett	lt
 8008178:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800817c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008180:	1a9d      	sublt	r5, r3, r2
 8008182:	2300      	movlt	r3, #0
 8008184:	e734      	b.n	8007ff0 <_dtoa_r+0x720>
 8008186:	9e07      	ldr	r6, [sp, #28]
 8008188:	9d04      	ldr	r5, [sp, #16]
 800818a:	9f08      	ldr	r7, [sp, #32]
 800818c:	e73b      	b.n	8008006 <_dtoa_r+0x736>
 800818e:	9a07      	ldr	r2, [sp, #28]
 8008190:	e767      	b.n	8008062 <_dtoa_r+0x792>
 8008192:	9b06      	ldr	r3, [sp, #24]
 8008194:	2b01      	cmp	r3, #1
 8008196:	dc18      	bgt.n	80081ca <_dtoa_r+0x8fa>
 8008198:	f1ba 0f00 	cmp.w	sl, #0
 800819c:	d115      	bne.n	80081ca <_dtoa_r+0x8fa>
 800819e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081a2:	b993      	cbnz	r3, 80081ca <_dtoa_r+0x8fa>
 80081a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80081a8:	0d1b      	lsrs	r3, r3, #20
 80081aa:	051b      	lsls	r3, r3, #20
 80081ac:	b183      	cbz	r3, 80081d0 <_dtoa_r+0x900>
 80081ae:	9b04      	ldr	r3, [sp, #16]
 80081b0:	3301      	adds	r3, #1
 80081b2:	9304      	str	r3, [sp, #16]
 80081b4:	9b05      	ldr	r3, [sp, #20]
 80081b6:	3301      	adds	r3, #1
 80081b8:	9305      	str	r3, [sp, #20]
 80081ba:	f04f 0801 	mov.w	r8, #1
 80081be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f47f af6a 	bne.w	800809a <_dtoa_r+0x7ca>
 80081c6:	2001      	movs	r0, #1
 80081c8:	e76f      	b.n	80080aa <_dtoa_r+0x7da>
 80081ca:	f04f 0800 	mov.w	r8, #0
 80081ce:	e7f6      	b.n	80081be <_dtoa_r+0x8ee>
 80081d0:	4698      	mov	r8, r3
 80081d2:	e7f4      	b.n	80081be <_dtoa_r+0x8ee>
 80081d4:	f43f af7d 	beq.w	80080d2 <_dtoa_r+0x802>
 80081d8:	4618      	mov	r0, r3
 80081da:	301c      	adds	r0, #28
 80081dc:	e772      	b.n	80080c4 <_dtoa_r+0x7f4>
 80081de:	9b03      	ldr	r3, [sp, #12]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	dc37      	bgt.n	8008254 <_dtoa_r+0x984>
 80081e4:	9b06      	ldr	r3, [sp, #24]
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	dd34      	ble.n	8008254 <_dtoa_r+0x984>
 80081ea:	9b03      	ldr	r3, [sp, #12]
 80081ec:	9302      	str	r3, [sp, #8]
 80081ee:	9b02      	ldr	r3, [sp, #8]
 80081f0:	b96b      	cbnz	r3, 800820e <_dtoa_r+0x93e>
 80081f2:	4631      	mov	r1, r6
 80081f4:	2205      	movs	r2, #5
 80081f6:	4620      	mov	r0, r4
 80081f8:	f000 f9d4 	bl	80085a4 <__multadd>
 80081fc:	4601      	mov	r1, r0
 80081fe:	4606      	mov	r6, r0
 8008200:	ee18 0a10 	vmov	r0, s16
 8008204:	f000 fbee 	bl	80089e4 <__mcmp>
 8008208:	2800      	cmp	r0, #0
 800820a:	f73f adbb 	bgt.w	8007d84 <_dtoa_r+0x4b4>
 800820e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008210:	9d01      	ldr	r5, [sp, #4]
 8008212:	43db      	mvns	r3, r3
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	f04f 0800 	mov.w	r8, #0
 800821a:	4631      	mov	r1, r6
 800821c:	4620      	mov	r0, r4
 800821e:	f000 f99f 	bl	8008560 <_Bfree>
 8008222:	2f00      	cmp	r7, #0
 8008224:	f43f aea4 	beq.w	8007f70 <_dtoa_r+0x6a0>
 8008228:	f1b8 0f00 	cmp.w	r8, #0
 800822c:	d005      	beq.n	800823a <_dtoa_r+0x96a>
 800822e:	45b8      	cmp	r8, r7
 8008230:	d003      	beq.n	800823a <_dtoa_r+0x96a>
 8008232:	4641      	mov	r1, r8
 8008234:	4620      	mov	r0, r4
 8008236:	f000 f993 	bl	8008560 <_Bfree>
 800823a:	4639      	mov	r1, r7
 800823c:	4620      	mov	r0, r4
 800823e:	f000 f98f 	bl	8008560 <_Bfree>
 8008242:	e695      	b.n	8007f70 <_dtoa_r+0x6a0>
 8008244:	2600      	movs	r6, #0
 8008246:	4637      	mov	r7, r6
 8008248:	e7e1      	b.n	800820e <_dtoa_r+0x93e>
 800824a:	9700      	str	r7, [sp, #0]
 800824c:	4637      	mov	r7, r6
 800824e:	e599      	b.n	8007d84 <_dtoa_r+0x4b4>
 8008250:	40240000 	.word	0x40240000
 8008254:	9b08      	ldr	r3, [sp, #32]
 8008256:	2b00      	cmp	r3, #0
 8008258:	f000 80ca 	beq.w	80083f0 <_dtoa_r+0xb20>
 800825c:	9b03      	ldr	r3, [sp, #12]
 800825e:	9302      	str	r3, [sp, #8]
 8008260:	2d00      	cmp	r5, #0
 8008262:	dd05      	ble.n	8008270 <_dtoa_r+0x9a0>
 8008264:	4639      	mov	r1, r7
 8008266:	462a      	mov	r2, r5
 8008268:	4620      	mov	r0, r4
 800826a:	f000 fb4b 	bl	8008904 <__lshift>
 800826e:	4607      	mov	r7, r0
 8008270:	f1b8 0f00 	cmp.w	r8, #0
 8008274:	d05b      	beq.n	800832e <_dtoa_r+0xa5e>
 8008276:	6879      	ldr	r1, [r7, #4]
 8008278:	4620      	mov	r0, r4
 800827a:	f000 f931 	bl	80084e0 <_Balloc>
 800827e:	4605      	mov	r5, r0
 8008280:	b928      	cbnz	r0, 800828e <_dtoa_r+0x9be>
 8008282:	4b87      	ldr	r3, [pc, #540]	; (80084a0 <_dtoa_r+0xbd0>)
 8008284:	4602      	mov	r2, r0
 8008286:	f240 21ea 	movw	r1, #746	; 0x2ea
 800828a:	f7ff bb3b 	b.w	8007904 <_dtoa_r+0x34>
 800828e:	693a      	ldr	r2, [r7, #16]
 8008290:	3202      	adds	r2, #2
 8008292:	0092      	lsls	r2, r2, #2
 8008294:	f107 010c 	add.w	r1, r7, #12
 8008298:	300c      	adds	r0, #12
 800829a:	f000 f913 	bl	80084c4 <memcpy>
 800829e:	2201      	movs	r2, #1
 80082a0:	4629      	mov	r1, r5
 80082a2:	4620      	mov	r0, r4
 80082a4:	f000 fb2e 	bl	8008904 <__lshift>
 80082a8:	9b01      	ldr	r3, [sp, #4]
 80082aa:	f103 0901 	add.w	r9, r3, #1
 80082ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80082b2:	4413      	add	r3, r2
 80082b4:	9305      	str	r3, [sp, #20]
 80082b6:	f00a 0301 	and.w	r3, sl, #1
 80082ba:	46b8      	mov	r8, r7
 80082bc:	9304      	str	r3, [sp, #16]
 80082be:	4607      	mov	r7, r0
 80082c0:	4631      	mov	r1, r6
 80082c2:	ee18 0a10 	vmov	r0, s16
 80082c6:	f7ff fa75 	bl	80077b4 <quorem>
 80082ca:	4641      	mov	r1, r8
 80082cc:	9002      	str	r0, [sp, #8]
 80082ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80082d2:	ee18 0a10 	vmov	r0, s16
 80082d6:	f000 fb85 	bl	80089e4 <__mcmp>
 80082da:	463a      	mov	r2, r7
 80082dc:	9003      	str	r0, [sp, #12]
 80082de:	4631      	mov	r1, r6
 80082e0:	4620      	mov	r0, r4
 80082e2:	f000 fb9b 	bl	8008a1c <__mdiff>
 80082e6:	68c2      	ldr	r2, [r0, #12]
 80082e8:	f109 3bff 	add.w	fp, r9, #4294967295
 80082ec:	4605      	mov	r5, r0
 80082ee:	bb02      	cbnz	r2, 8008332 <_dtoa_r+0xa62>
 80082f0:	4601      	mov	r1, r0
 80082f2:	ee18 0a10 	vmov	r0, s16
 80082f6:	f000 fb75 	bl	80089e4 <__mcmp>
 80082fa:	4602      	mov	r2, r0
 80082fc:	4629      	mov	r1, r5
 80082fe:	4620      	mov	r0, r4
 8008300:	9207      	str	r2, [sp, #28]
 8008302:	f000 f92d 	bl	8008560 <_Bfree>
 8008306:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800830a:	ea43 0102 	orr.w	r1, r3, r2
 800830e:	9b04      	ldr	r3, [sp, #16]
 8008310:	430b      	orrs	r3, r1
 8008312:	464d      	mov	r5, r9
 8008314:	d10f      	bne.n	8008336 <_dtoa_r+0xa66>
 8008316:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800831a:	d02a      	beq.n	8008372 <_dtoa_r+0xaa2>
 800831c:	9b03      	ldr	r3, [sp, #12]
 800831e:	2b00      	cmp	r3, #0
 8008320:	dd02      	ble.n	8008328 <_dtoa_r+0xa58>
 8008322:	9b02      	ldr	r3, [sp, #8]
 8008324:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008328:	f88b a000 	strb.w	sl, [fp]
 800832c:	e775      	b.n	800821a <_dtoa_r+0x94a>
 800832e:	4638      	mov	r0, r7
 8008330:	e7ba      	b.n	80082a8 <_dtoa_r+0x9d8>
 8008332:	2201      	movs	r2, #1
 8008334:	e7e2      	b.n	80082fc <_dtoa_r+0xa2c>
 8008336:	9b03      	ldr	r3, [sp, #12]
 8008338:	2b00      	cmp	r3, #0
 800833a:	db04      	blt.n	8008346 <_dtoa_r+0xa76>
 800833c:	9906      	ldr	r1, [sp, #24]
 800833e:	430b      	orrs	r3, r1
 8008340:	9904      	ldr	r1, [sp, #16]
 8008342:	430b      	orrs	r3, r1
 8008344:	d122      	bne.n	800838c <_dtoa_r+0xabc>
 8008346:	2a00      	cmp	r2, #0
 8008348:	ddee      	ble.n	8008328 <_dtoa_r+0xa58>
 800834a:	ee18 1a10 	vmov	r1, s16
 800834e:	2201      	movs	r2, #1
 8008350:	4620      	mov	r0, r4
 8008352:	f000 fad7 	bl	8008904 <__lshift>
 8008356:	4631      	mov	r1, r6
 8008358:	ee08 0a10 	vmov	s16, r0
 800835c:	f000 fb42 	bl	80089e4 <__mcmp>
 8008360:	2800      	cmp	r0, #0
 8008362:	dc03      	bgt.n	800836c <_dtoa_r+0xa9c>
 8008364:	d1e0      	bne.n	8008328 <_dtoa_r+0xa58>
 8008366:	f01a 0f01 	tst.w	sl, #1
 800836a:	d0dd      	beq.n	8008328 <_dtoa_r+0xa58>
 800836c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008370:	d1d7      	bne.n	8008322 <_dtoa_r+0xa52>
 8008372:	2339      	movs	r3, #57	; 0x39
 8008374:	f88b 3000 	strb.w	r3, [fp]
 8008378:	462b      	mov	r3, r5
 800837a:	461d      	mov	r5, r3
 800837c:	3b01      	subs	r3, #1
 800837e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008382:	2a39      	cmp	r2, #57	; 0x39
 8008384:	d071      	beq.n	800846a <_dtoa_r+0xb9a>
 8008386:	3201      	adds	r2, #1
 8008388:	701a      	strb	r2, [r3, #0]
 800838a:	e746      	b.n	800821a <_dtoa_r+0x94a>
 800838c:	2a00      	cmp	r2, #0
 800838e:	dd07      	ble.n	80083a0 <_dtoa_r+0xad0>
 8008390:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008394:	d0ed      	beq.n	8008372 <_dtoa_r+0xaa2>
 8008396:	f10a 0301 	add.w	r3, sl, #1
 800839a:	f88b 3000 	strb.w	r3, [fp]
 800839e:	e73c      	b.n	800821a <_dtoa_r+0x94a>
 80083a0:	9b05      	ldr	r3, [sp, #20]
 80083a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80083a6:	4599      	cmp	r9, r3
 80083a8:	d047      	beq.n	800843a <_dtoa_r+0xb6a>
 80083aa:	ee18 1a10 	vmov	r1, s16
 80083ae:	2300      	movs	r3, #0
 80083b0:	220a      	movs	r2, #10
 80083b2:	4620      	mov	r0, r4
 80083b4:	f000 f8f6 	bl	80085a4 <__multadd>
 80083b8:	45b8      	cmp	r8, r7
 80083ba:	ee08 0a10 	vmov	s16, r0
 80083be:	f04f 0300 	mov.w	r3, #0
 80083c2:	f04f 020a 	mov.w	r2, #10
 80083c6:	4641      	mov	r1, r8
 80083c8:	4620      	mov	r0, r4
 80083ca:	d106      	bne.n	80083da <_dtoa_r+0xb0a>
 80083cc:	f000 f8ea 	bl	80085a4 <__multadd>
 80083d0:	4680      	mov	r8, r0
 80083d2:	4607      	mov	r7, r0
 80083d4:	f109 0901 	add.w	r9, r9, #1
 80083d8:	e772      	b.n	80082c0 <_dtoa_r+0x9f0>
 80083da:	f000 f8e3 	bl	80085a4 <__multadd>
 80083de:	4639      	mov	r1, r7
 80083e0:	4680      	mov	r8, r0
 80083e2:	2300      	movs	r3, #0
 80083e4:	220a      	movs	r2, #10
 80083e6:	4620      	mov	r0, r4
 80083e8:	f000 f8dc 	bl	80085a4 <__multadd>
 80083ec:	4607      	mov	r7, r0
 80083ee:	e7f1      	b.n	80083d4 <_dtoa_r+0xb04>
 80083f0:	9b03      	ldr	r3, [sp, #12]
 80083f2:	9302      	str	r3, [sp, #8]
 80083f4:	9d01      	ldr	r5, [sp, #4]
 80083f6:	ee18 0a10 	vmov	r0, s16
 80083fa:	4631      	mov	r1, r6
 80083fc:	f7ff f9da 	bl	80077b4 <quorem>
 8008400:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008404:	9b01      	ldr	r3, [sp, #4]
 8008406:	f805 ab01 	strb.w	sl, [r5], #1
 800840a:	1aea      	subs	r2, r5, r3
 800840c:	9b02      	ldr	r3, [sp, #8]
 800840e:	4293      	cmp	r3, r2
 8008410:	dd09      	ble.n	8008426 <_dtoa_r+0xb56>
 8008412:	ee18 1a10 	vmov	r1, s16
 8008416:	2300      	movs	r3, #0
 8008418:	220a      	movs	r2, #10
 800841a:	4620      	mov	r0, r4
 800841c:	f000 f8c2 	bl	80085a4 <__multadd>
 8008420:	ee08 0a10 	vmov	s16, r0
 8008424:	e7e7      	b.n	80083f6 <_dtoa_r+0xb26>
 8008426:	9b02      	ldr	r3, [sp, #8]
 8008428:	2b00      	cmp	r3, #0
 800842a:	bfc8      	it	gt
 800842c:	461d      	movgt	r5, r3
 800842e:	9b01      	ldr	r3, [sp, #4]
 8008430:	bfd8      	it	le
 8008432:	2501      	movle	r5, #1
 8008434:	441d      	add	r5, r3
 8008436:	f04f 0800 	mov.w	r8, #0
 800843a:	ee18 1a10 	vmov	r1, s16
 800843e:	2201      	movs	r2, #1
 8008440:	4620      	mov	r0, r4
 8008442:	f000 fa5f 	bl	8008904 <__lshift>
 8008446:	4631      	mov	r1, r6
 8008448:	ee08 0a10 	vmov	s16, r0
 800844c:	f000 faca 	bl	80089e4 <__mcmp>
 8008450:	2800      	cmp	r0, #0
 8008452:	dc91      	bgt.n	8008378 <_dtoa_r+0xaa8>
 8008454:	d102      	bne.n	800845c <_dtoa_r+0xb8c>
 8008456:	f01a 0f01 	tst.w	sl, #1
 800845a:	d18d      	bne.n	8008378 <_dtoa_r+0xaa8>
 800845c:	462b      	mov	r3, r5
 800845e:	461d      	mov	r5, r3
 8008460:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008464:	2a30      	cmp	r2, #48	; 0x30
 8008466:	d0fa      	beq.n	800845e <_dtoa_r+0xb8e>
 8008468:	e6d7      	b.n	800821a <_dtoa_r+0x94a>
 800846a:	9a01      	ldr	r2, [sp, #4]
 800846c:	429a      	cmp	r2, r3
 800846e:	d184      	bne.n	800837a <_dtoa_r+0xaaa>
 8008470:	9b00      	ldr	r3, [sp, #0]
 8008472:	3301      	adds	r3, #1
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	2331      	movs	r3, #49	; 0x31
 8008478:	7013      	strb	r3, [r2, #0]
 800847a:	e6ce      	b.n	800821a <_dtoa_r+0x94a>
 800847c:	4b09      	ldr	r3, [pc, #36]	; (80084a4 <_dtoa_r+0xbd4>)
 800847e:	f7ff ba95 	b.w	80079ac <_dtoa_r+0xdc>
 8008482:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008484:	2b00      	cmp	r3, #0
 8008486:	f47f aa6e 	bne.w	8007966 <_dtoa_r+0x96>
 800848a:	4b07      	ldr	r3, [pc, #28]	; (80084a8 <_dtoa_r+0xbd8>)
 800848c:	f7ff ba8e 	b.w	80079ac <_dtoa_r+0xdc>
 8008490:	9b02      	ldr	r3, [sp, #8]
 8008492:	2b00      	cmp	r3, #0
 8008494:	dcae      	bgt.n	80083f4 <_dtoa_r+0xb24>
 8008496:	9b06      	ldr	r3, [sp, #24]
 8008498:	2b02      	cmp	r3, #2
 800849a:	f73f aea8 	bgt.w	80081ee <_dtoa_r+0x91e>
 800849e:	e7a9      	b.n	80083f4 <_dtoa_r+0xb24>
 80084a0:	08009d67 	.word	0x08009d67
 80084a4:	08009cc4 	.word	0x08009cc4
 80084a8:	08009ce8 	.word	0x08009ce8

080084ac <_localeconv_r>:
 80084ac:	4800      	ldr	r0, [pc, #0]	; (80084b0 <_localeconv_r+0x4>)
 80084ae:	4770      	bx	lr
 80084b0:	20000160 	.word	0x20000160

080084b4 <malloc>:
 80084b4:	4b02      	ldr	r3, [pc, #8]	; (80084c0 <malloc+0xc>)
 80084b6:	4601      	mov	r1, r0
 80084b8:	6818      	ldr	r0, [r3, #0]
 80084ba:	f000 bc17 	b.w	8008cec <_malloc_r>
 80084be:	bf00      	nop
 80084c0:	2000000c 	.word	0x2000000c

080084c4 <memcpy>:
 80084c4:	440a      	add	r2, r1
 80084c6:	4291      	cmp	r1, r2
 80084c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80084cc:	d100      	bne.n	80084d0 <memcpy+0xc>
 80084ce:	4770      	bx	lr
 80084d0:	b510      	push	{r4, lr}
 80084d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084da:	4291      	cmp	r1, r2
 80084dc:	d1f9      	bne.n	80084d2 <memcpy+0xe>
 80084de:	bd10      	pop	{r4, pc}

080084e0 <_Balloc>:
 80084e0:	b570      	push	{r4, r5, r6, lr}
 80084e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084e4:	4604      	mov	r4, r0
 80084e6:	460d      	mov	r5, r1
 80084e8:	b976      	cbnz	r6, 8008508 <_Balloc+0x28>
 80084ea:	2010      	movs	r0, #16
 80084ec:	f7ff ffe2 	bl	80084b4 <malloc>
 80084f0:	4602      	mov	r2, r0
 80084f2:	6260      	str	r0, [r4, #36]	; 0x24
 80084f4:	b920      	cbnz	r0, 8008500 <_Balloc+0x20>
 80084f6:	4b18      	ldr	r3, [pc, #96]	; (8008558 <_Balloc+0x78>)
 80084f8:	4818      	ldr	r0, [pc, #96]	; (800855c <_Balloc+0x7c>)
 80084fa:	2166      	movs	r1, #102	; 0x66
 80084fc:	f000 fdd6 	bl	80090ac <__assert_func>
 8008500:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008504:	6006      	str	r6, [r0, #0]
 8008506:	60c6      	str	r6, [r0, #12]
 8008508:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800850a:	68f3      	ldr	r3, [r6, #12]
 800850c:	b183      	cbz	r3, 8008530 <_Balloc+0x50>
 800850e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008516:	b9b8      	cbnz	r0, 8008548 <_Balloc+0x68>
 8008518:	2101      	movs	r1, #1
 800851a:	fa01 f605 	lsl.w	r6, r1, r5
 800851e:	1d72      	adds	r2, r6, #5
 8008520:	0092      	lsls	r2, r2, #2
 8008522:	4620      	mov	r0, r4
 8008524:	f000 fb60 	bl	8008be8 <_calloc_r>
 8008528:	b160      	cbz	r0, 8008544 <_Balloc+0x64>
 800852a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800852e:	e00e      	b.n	800854e <_Balloc+0x6e>
 8008530:	2221      	movs	r2, #33	; 0x21
 8008532:	2104      	movs	r1, #4
 8008534:	4620      	mov	r0, r4
 8008536:	f000 fb57 	bl	8008be8 <_calloc_r>
 800853a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800853c:	60f0      	str	r0, [r6, #12]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1e4      	bne.n	800850e <_Balloc+0x2e>
 8008544:	2000      	movs	r0, #0
 8008546:	bd70      	pop	{r4, r5, r6, pc}
 8008548:	6802      	ldr	r2, [r0, #0]
 800854a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800854e:	2300      	movs	r3, #0
 8008550:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008554:	e7f7      	b.n	8008546 <_Balloc+0x66>
 8008556:	bf00      	nop
 8008558:	08009cf5 	.word	0x08009cf5
 800855c:	08009d78 	.word	0x08009d78

08008560 <_Bfree>:
 8008560:	b570      	push	{r4, r5, r6, lr}
 8008562:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008564:	4605      	mov	r5, r0
 8008566:	460c      	mov	r4, r1
 8008568:	b976      	cbnz	r6, 8008588 <_Bfree+0x28>
 800856a:	2010      	movs	r0, #16
 800856c:	f7ff ffa2 	bl	80084b4 <malloc>
 8008570:	4602      	mov	r2, r0
 8008572:	6268      	str	r0, [r5, #36]	; 0x24
 8008574:	b920      	cbnz	r0, 8008580 <_Bfree+0x20>
 8008576:	4b09      	ldr	r3, [pc, #36]	; (800859c <_Bfree+0x3c>)
 8008578:	4809      	ldr	r0, [pc, #36]	; (80085a0 <_Bfree+0x40>)
 800857a:	218a      	movs	r1, #138	; 0x8a
 800857c:	f000 fd96 	bl	80090ac <__assert_func>
 8008580:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008584:	6006      	str	r6, [r0, #0]
 8008586:	60c6      	str	r6, [r0, #12]
 8008588:	b13c      	cbz	r4, 800859a <_Bfree+0x3a>
 800858a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800858c:	6862      	ldr	r2, [r4, #4]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008594:	6021      	str	r1, [r4, #0]
 8008596:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	08009cf5 	.word	0x08009cf5
 80085a0:	08009d78 	.word	0x08009d78

080085a4 <__multadd>:
 80085a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085a8:	690d      	ldr	r5, [r1, #16]
 80085aa:	4607      	mov	r7, r0
 80085ac:	460c      	mov	r4, r1
 80085ae:	461e      	mov	r6, r3
 80085b0:	f101 0c14 	add.w	ip, r1, #20
 80085b4:	2000      	movs	r0, #0
 80085b6:	f8dc 3000 	ldr.w	r3, [ip]
 80085ba:	b299      	uxth	r1, r3
 80085bc:	fb02 6101 	mla	r1, r2, r1, r6
 80085c0:	0c1e      	lsrs	r6, r3, #16
 80085c2:	0c0b      	lsrs	r3, r1, #16
 80085c4:	fb02 3306 	mla	r3, r2, r6, r3
 80085c8:	b289      	uxth	r1, r1
 80085ca:	3001      	adds	r0, #1
 80085cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085d0:	4285      	cmp	r5, r0
 80085d2:	f84c 1b04 	str.w	r1, [ip], #4
 80085d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085da:	dcec      	bgt.n	80085b6 <__multadd+0x12>
 80085dc:	b30e      	cbz	r6, 8008622 <__multadd+0x7e>
 80085de:	68a3      	ldr	r3, [r4, #8]
 80085e0:	42ab      	cmp	r3, r5
 80085e2:	dc19      	bgt.n	8008618 <__multadd+0x74>
 80085e4:	6861      	ldr	r1, [r4, #4]
 80085e6:	4638      	mov	r0, r7
 80085e8:	3101      	adds	r1, #1
 80085ea:	f7ff ff79 	bl	80084e0 <_Balloc>
 80085ee:	4680      	mov	r8, r0
 80085f0:	b928      	cbnz	r0, 80085fe <__multadd+0x5a>
 80085f2:	4602      	mov	r2, r0
 80085f4:	4b0c      	ldr	r3, [pc, #48]	; (8008628 <__multadd+0x84>)
 80085f6:	480d      	ldr	r0, [pc, #52]	; (800862c <__multadd+0x88>)
 80085f8:	21b5      	movs	r1, #181	; 0xb5
 80085fa:	f000 fd57 	bl	80090ac <__assert_func>
 80085fe:	6922      	ldr	r2, [r4, #16]
 8008600:	3202      	adds	r2, #2
 8008602:	f104 010c 	add.w	r1, r4, #12
 8008606:	0092      	lsls	r2, r2, #2
 8008608:	300c      	adds	r0, #12
 800860a:	f7ff ff5b 	bl	80084c4 <memcpy>
 800860e:	4621      	mov	r1, r4
 8008610:	4638      	mov	r0, r7
 8008612:	f7ff ffa5 	bl	8008560 <_Bfree>
 8008616:	4644      	mov	r4, r8
 8008618:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800861c:	3501      	adds	r5, #1
 800861e:	615e      	str	r6, [r3, #20]
 8008620:	6125      	str	r5, [r4, #16]
 8008622:	4620      	mov	r0, r4
 8008624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008628:	08009d67 	.word	0x08009d67
 800862c:	08009d78 	.word	0x08009d78

08008630 <__hi0bits>:
 8008630:	0c03      	lsrs	r3, r0, #16
 8008632:	041b      	lsls	r3, r3, #16
 8008634:	b9d3      	cbnz	r3, 800866c <__hi0bits+0x3c>
 8008636:	0400      	lsls	r0, r0, #16
 8008638:	2310      	movs	r3, #16
 800863a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800863e:	bf04      	itt	eq
 8008640:	0200      	lsleq	r0, r0, #8
 8008642:	3308      	addeq	r3, #8
 8008644:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008648:	bf04      	itt	eq
 800864a:	0100      	lsleq	r0, r0, #4
 800864c:	3304      	addeq	r3, #4
 800864e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008652:	bf04      	itt	eq
 8008654:	0080      	lsleq	r0, r0, #2
 8008656:	3302      	addeq	r3, #2
 8008658:	2800      	cmp	r0, #0
 800865a:	db05      	blt.n	8008668 <__hi0bits+0x38>
 800865c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008660:	f103 0301 	add.w	r3, r3, #1
 8008664:	bf08      	it	eq
 8008666:	2320      	moveq	r3, #32
 8008668:	4618      	mov	r0, r3
 800866a:	4770      	bx	lr
 800866c:	2300      	movs	r3, #0
 800866e:	e7e4      	b.n	800863a <__hi0bits+0xa>

08008670 <__lo0bits>:
 8008670:	6803      	ldr	r3, [r0, #0]
 8008672:	f013 0207 	ands.w	r2, r3, #7
 8008676:	4601      	mov	r1, r0
 8008678:	d00b      	beq.n	8008692 <__lo0bits+0x22>
 800867a:	07da      	lsls	r2, r3, #31
 800867c:	d423      	bmi.n	80086c6 <__lo0bits+0x56>
 800867e:	0798      	lsls	r0, r3, #30
 8008680:	bf49      	itett	mi
 8008682:	085b      	lsrmi	r3, r3, #1
 8008684:	089b      	lsrpl	r3, r3, #2
 8008686:	2001      	movmi	r0, #1
 8008688:	600b      	strmi	r3, [r1, #0]
 800868a:	bf5c      	itt	pl
 800868c:	600b      	strpl	r3, [r1, #0]
 800868e:	2002      	movpl	r0, #2
 8008690:	4770      	bx	lr
 8008692:	b298      	uxth	r0, r3
 8008694:	b9a8      	cbnz	r0, 80086c2 <__lo0bits+0x52>
 8008696:	0c1b      	lsrs	r3, r3, #16
 8008698:	2010      	movs	r0, #16
 800869a:	b2da      	uxtb	r2, r3
 800869c:	b90a      	cbnz	r2, 80086a2 <__lo0bits+0x32>
 800869e:	3008      	adds	r0, #8
 80086a0:	0a1b      	lsrs	r3, r3, #8
 80086a2:	071a      	lsls	r2, r3, #28
 80086a4:	bf04      	itt	eq
 80086a6:	091b      	lsreq	r3, r3, #4
 80086a8:	3004      	addeq	r0, #4
 80086aa:	079a      	lsls	r2, r3, #30
 80086ac:	bf04      	itt	eq
 80086ae:	089b      	lsreq	r3, r3, #2
 80086b0:	3002      	addeq	r0, #2
 80086b2:	07da      	lsls	r2, r3, #31
 80086b4:	d403      	bmi.n	80086be <__lo0bits+0x4e>
 80086b6:	085b      	lsrs	r3, r3, #1
 80086b8:	f100 0001 	add.w	r0, r0, #1
 80086bc:	d005      	beq.n	80086ca <__lo0bits+0x5a>
 80086be:	600b      	str	r3, [r1, #0]
 80086c0:	4770      	bx	lr
 80086c2:	4610      	mov	r0, r2
 80086c4:	e7e9      	b.n	800869a <__lo0bits+0x2a>
 80086c6:	2000      	movs	r0, #0
 80086c8:	4770      	bx	lr
 80086ca:	2020      	movs	r0, #32
 80086cc:	4770      	bx	lr
	...

080086d0 <__i2b>:
 80086d0:	b510      	push	{r4, lr}
 80086d2:	460c      	mov	r4, r1
 80086d4:	2101      	movs	r1, #1
 80086d6:	f7ff ff03 	bl	80084e0 <_Balloc>
 80086da:	4602      	mov	r2, r0
 80086dc:	b928      	cbnz	r0, 80086ea <__i2b+0x1a>
 80086de:	4b05      	ldr	r3, [pc, #20]	; (80086f4 <__i2b+0x24>)
 80086e0:	4805      	ldr	r0, [pc, #20]	; (80086f8 <__i2b+0x28>)
 80086e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80086e6:	f000 fce1 	bl	80090ac <__assert_func>
 80086ea:	2301      	movs	r3, #1
 80086ec:	6144      	str	r4, [r0, #20]
 80086ee:	6103      	str	r3, [r0, #16]
 80086f0:	bd10      	pop	{r4, pc}
 80086f2:	bf00      	nop
 80086f4:	08009d67 	.word	0x08009d67
 80086f8:	08009d78 	.word	0x08009d78

080086fc <__multiply>:
 80086fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008700:	4691      	mov	r9, r2
 8008702:	690a      	ldr	r2, [r1, #16]
 8008704:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008708:	429a      	cmp	r2, r3
 800870a:	bfb8      	it	lt
 800870c:	460b      	movlt	r3, r1
 800870e:	460c      	mov	r4, r1
 8008710:	bfbc      	itt	lt
 8008712:	464c      	movlt	r4, r9
 8008714:	4699      	movlt	r9, r3
 8008716:	6927      	ldr	r7, [r4, #16]
 8008718:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800871c:	68a3      	ldr	r3, [r4, #8]
 800871e:	6861      	ldr	r1, [r4, #4]
 8008720:	eb07 060a 	add.w	r6, r7, sl
 8008724:	42b3      	cmp	r3, r6
 8008726:	b085      	sub	sp, #20
 8008728:	bfb8      	it	lt
 800872a:	3101      	addlt	r1, #1
 800872c:	f7ff fed8 	bl	80084e0 <_Balloc>
 8008730:	b930      	cbnz	r0, 8008740 <__multiply+0x44>
 8008732:	4602      	mov	r2, r0
 8008734:	4b44      	ldr	r3, [pc, #272]	; (8008848 <__multiply+0x14c>)
 8008736:	4845      	ldr	r0, [pc, #276]	; (800884c <__multiply+0x150>)
 8008738:	f240 115d 	movw	r1, #349	; 0x15d
 800873c:	f000 fcb6 	bl	80090ac <__assert_func>
 8008740:	f100 0514 	add.w	r5, r0, #20
 8008744:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008748:	462b      	mov	r3, r5
 800874a:	2200      	movs	r2, #0
 800874c:	4543      	cmp	r3, r8
 800874e:	d321      	bcc.n	8008794 <__multiply+0x98>
 8008750:	f104 0314 	add.w	r3, r4, #20
 8008754:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008758:	f109 0314 	add.w	r3, r9, #20
 800875c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008760:	9202      	str	r2, [sp, #8]
 8008762:	1b3a      	subs	r2, r7, r4
 8008764:	3a15      	subs	r2, #21
 8008766:	f022 0203 	bic.w	r2, r2, #3
 800876a:	3204      	adds	r2, #4
 800876c:	f104 0115 	add.w	r1, r4, #21
 8008770:	428f      	cmp	r7, r1
 8008772:	bf38      	it	cc
 8008774:	2204      	movcc	r2, #4
 8008776:	9201      	str	r2, [sp, #4]
 8008778:	9a02      	ldr	r2, [sp, #8]
 800877a:	9303      	str	r3, [sp, #12]
 800877c:	429a      	cmp	r2, r3
 800877e:	d80c      	bhi.n	800879a <__multiply+0x9e>
 8008780:	2e00      	cmp	r6, #0
 8008782:	dd03      	ble.n	800878c <__multiply+0x90>
 8008784:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008788:	2b00      	cmp	r3, #0
 800878a:	d05a      	beq.n	8008842 <__multiply+0x146>
 800878c:	6106      	str	r6, [r0, #16]
 800878e:	b005      	add	sp, #20
 8008790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008794:	f843 2b04 	str.w	r2, [r3], #4
 8008798:	e7d8      	b.n	800874c <__multiply+0x50>
 800879a:	f8b3 a000 	ldrh.w	sl, [r3]
 800879e:	f1ba 0f00 	cmp.w	sl, #0
 80087a2:	d024      	beq.n	80087ee <__multiply+0xf2>
 80087a4:	f104 0e14 	add.w	lr, r4, #20
 80087a8:	46a9      	mov	r9, r5
 80087aa:	f04f 0c00 	mov.w	ip, #0
 80087ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80087b2:	f8d9 1000 	ldr.w	r1, [r9]
 80087b6:	fa1f fb82 	uxth.w	fp, r2
 80087ba:	b289      	uxth	r1, r1
 80087bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80087c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80087c4:	f8d9 2000 	ldr.w	r2, [r9]
 80087c8:	4461      	add	r1, ip
 80087ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80087d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80087d6:	b289      	uxth	r1, r1
 80087d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80087dc:	4577      	cmp	r7, lr
 80087de:	f849 1b04 	str.w	r1, [r9], #4
 80087e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087e6:	d8e2      	bhi.n	80087ae <__multiply+0xb2>
 80087e8:	9a01      	ldr	r2, [sp, #4]
 80087ea:	f845 c002 	str.w	ip, [r5, r2]
 80087ee:	9a03      	ldr	r2, [sp, #12]
 80087f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80087f4:	3304      	adds	r3, #4
 80087f6:	f1b9 0f00 	cmp.w	r9, #0
 80087fa:	d020      	beq.n	800883e <__multiply+0x142>
 80087fc:	6829      	ldr	r1, [r5, #0]
 80087fe:	f104 0c14 	add.w	ip, r4, #20
 8008802:	46ae      	mov	lr, r5
 8008804:	f04f 0a00 	mov.w	sl, #0
 8008808:	f8bc b000 	ldrh.w	fp, [ip]
 800880c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008810:	fb09 220b 	mla	r2, r9, fp, r2
 8008814:	4492      	add	sl, r2
 8008816:	b289      	uxth	r1, r1
 8008818:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800881c:	f84e 1b04 	str.w	r1, [lr], #4
 8008820:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008824:	f8be 1000 	ldrh.w	r1, [lr]
 8008828:	0c12      	lsrs	r2, r2, #16
 800882a:	fb09 1102 	mla	r1, r9, r2, r1
 800882e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008832:	4567      	cmp	r7, ip
 8008834:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008838:	d8e6      	bhi.n	8008808 <__multiply+0x10c>
 800883a:	9a01      	ldr	r2, [sp, #4]
 800883c:	50a9      	str	r1, [r5, r2]
 800883e:	3504      	adds	r5, #4
 8008840:	e79a      	b.n	8008778 <__multiply+0x7c>
 8008842:	3e01      	subs	r6, #1
 8008844:	e79c      	b.n	8008780 <__multiply+0x84>
 8008846:	bf00      	nop
 8008848:	08009d67 	.word	0x08009d67
 800884c:	08009d78 	.word	0x08009d78

08008850 <__pow5mult>:
 8008850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008854:	4615      	mov	r5, r2
 8008856:	f012 0203 	ands.w	r2, r2, #3
 800885a:	4606      	mov	r6, r0
 800885c:	460f      	mov	r7, r1
 800885e:	d007      	beq.n	8008870 <__pow5mult+0x20>
 8008860:	4c25      	ldr	r4, [pc, #148]	; (80088f8 <__pow5mult+0xa8>)
 8008862:	3a01      	subs	r2, #1
 8008864:	2300      	movs	r3, #0
 8008866:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800886a:	f7ff fe9b 	bl	80085a4 <__multadd>
 800886e:	4607      	mov	r7, r0
 8008870:	10ad      	asrs	r5, r5, #2
 8008872:	d03d      	beq.n	80088f0 <__pow5mult+0xa0>
 8008874:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008876:	b97c      	cbnz	r4, 8008898 <__pow5mult+0x48>
 8008878:	2010      	movs	r0, #16
 800887a:	f7ff fe1b 	bl	80084b4 <malloc>
 800887e:	4602      	mov	r2, r0
 8008880:	6270      	str	r0, [r6, #36]	; 0x24
 8008882:	b928      	cbnz	r0, 8008890 <__pow5mult+0x40>
 8008884:	4b1d      	ldr	r3, [pc, #116]	; (80088fc <__pow5mult+0xac>)
 8008886:	481e      	ldr	r0, [pc, #120]	; (8008900 <__pow5mult+0xb0>)
 8008888:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800888c:	f000 fc0e 	bl	80090ac <__assert_func>
 8008890:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008894:	6004      	str	r4, [r0, #0]
 8008896:	60c4      	str	r4, [r0, #12]
 8008898:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800889c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088a0:	b94c      	cbnz	r4, 80088b6 <__pow5mult+0x66>
 80088a2:	f240 2171 	movw	r1, #625	; 0x271
 80088a6:	4630      	mov	r0, r6
 80088a8:	f7ff ff12 	bl	80086d0 <__i2b>
 80088ac:	2300      	movs	r3, #0
 80088ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80088b2:	4604      	mov	r4, r0
 80088b4:	6003      	str	r3, [r0, #0]
 80088b6:	f04f 0900 	mov.w	r9, #0
 80088ba:	07eb      	lsls	r3, r5, #31
 80088bc:	d50a      	bpl.n	80088d4 <__pow5mult+0x84>
 80088be:	4639      	mov	r1, r7
 80088c0:	4622      	mov	r2, r4
 80088c2:	4630      	mov	r0, r6
 80088c4:	f7ff ff1a 	bl	80086fc <__multiply>
 80088c8:	4639      	mov	r1, r7
 80088ca:	4680      	mov	r8, r0
 80088cc:	4630      	mov	r0, r6
 80088ce:	f7ff fe47 	bl	8008560 <_Bfree>
 80088d2:	4647      	mov	r7, r8
 80088d4:	106d      	asrs	r5, r5, #1
 80088d6:	d00b      	beq.n	80088f0 <__pow5mult+0xa0>
 80088d8:	6820      	ldr	r0, [r4, #0]
 80088da:	b938      	cbnz	r0, 80088ec <__pow5mult+0x9c>
 80088dc:	4622      	mov	r2, r4
 80088de:	4621      	mov	r1, r4
 80088e0:	4630      	mov	r0, r6
 80088e2:	f7ff ff0b 	bl	80086fc <__multiply>
 80088e6:	6020      	str	r0, [r4, #0]
 80088e8:	f8c0 9000 	str.w	r9, [r0]
 80088ec:	4604      	mov	r4, r0
 80088ee:	e7e4      	b.n	80088ba <__pow5mult+0x6a>
 80088f0:	4638      	mov	r0, r7
 80088f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088f6:	bf00      	nop
 80088f8:	08009ec8 	.word	0x08009ec8
 80088fc:	08009cf5 	.word	0x08009cf5
 8008900:	08009d78 	.word	0x08009d78

08008904 <__lshift>:
 8008904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008908:	460c      	mov	r4, r1
 800890a:	6849      	ldr	r1, [r1, #4]
 800890c:	6923      	ldr	r3, [r4, #16]
 800890e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008912:	68a3      	ldr	r3, [r4, #8]
 8008914:	4607      	mov	r7, r0
 8008916:	4691      	mov	r9, r2
 8008918:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800891c:	f108 0601 	add.w	r6, r8, #1
 8008920:	42b3      	cmp	r3, r6
 8008922:	db0b      	blt.n	800893c <__lshift+0x38>
 8008924:	4638      	mov	r0, r7
 8008926:	f7ff fddb 	bl	80084e0 <_Balloc>
 800892a:	4605      	mov	r5, r0
 800892c:	b948      	cbnz	r0, 8008942 <__lshift+0x3e>
 800892e:	4602      	mov	r2, r0
 8008930:	4b2a      	ldr	r3, [pc, #168]	; (80089dc <__lshift+0xd8>)
 8008932:	482b      	ldr	r0, [pc, #172]	; (80089e0 <__lshift+0xdc>)
 8008934:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008938:	f000 fbb8 	bl	80090ac <__assert_func>
 800893c:	3101      	adds	r1, #1
 800893e:	005b      	lsls	r3, r3, #1
 8008940:	e7ee      	b.n	8008920 <__lshift+0x1c>
 8008942:	2300      	movs	r3, #0
 8008944:	f100 0114 	add.w	r1, r0, #20
 8008948:	f100 0210 	add.w	r2, r0, #16
 800894c:	4618      	mov	r0, r3
 800894e:	4553      	cmp	r3, sl
 8008950:	db37      	blt.n	80089c2 <__lshift+0xbe>
 8008952:	6920      	ldr	r0, [r4, #16]
 8008954:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008958:	f104 0314 	add.w	r3, r4, #20
 800895c:	f019 091f 	ands.w	r9, r9, #31
 8008960:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008964:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008968:	d02f      	beq.n	80089ca <__lshift+0xc6>
 800896a:	f1c9 0e20 	rsb	lr, r9, #32
 800896e:	468a      	mov	sl, r1
 8008970:	f04f 0c00 	mov.w	ip, #0
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	fa02 f209 	lsl.w	r2, r2, r9
 800897a:	ea42 020c 	orr.w	r2, r2, ip
 800897e:	f84a 2b04 	str.w	r2, [sl], #4
 8008982:	f853 2b04 	ldr.w	r2, [r3], #4
 8008986:	4298      	cmp	r0, r3
 8008988:	fa22 fc0e 	lsr.w	ip, r2, lr
 800898c:	d8f2      	bhi.n	8008974 <__lshift+0x70>
 800898e:	1b03      	subs	r3, r0, r4
 8008990:	3b15      	subs	r3, #21
 8008992:	f023 0303 	bic.w	r3, r3, #3
 8008996:	3304      	adds	r3, #4
 8008998:	f104 0215 	add.w	r2, r4, #21
 800899c:	4290      	cmp	r0, r2
 800899e:	bf38      	it	cc
 80089a0:	2304      	movcc	r3, #4
 80089a2:	f841 c003 	str.w	ip, [r1, r3]
 80089a6:	f1bc 0f00 	cmp.w	ip, #0
 80089aa:	d001      	beq.n	80089b0 <__lshift+0xac>
 80089ac:	f108 0602 	add.w	r6, r8, #2
 80089b0:	3e01      	subs	r6, #1
 80089b2:	4638      	mov	r0, r7
 80089b4:	612e      	str	r6, [r5, #16]
 80089b6:	4621      	mov	r1, r4
 80089b8:	f7ff fdd2 	bl	8008560 <_Bfree>
 80089bc:	4628      	mov	r0, r5
 80089be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80089c6:	3301      	adds	r3, #1
 80089c8:	e7c1      	b.n	800894e <__lshift+0x4a>
 80089ca:	3904      	subs	r1, #4
 80089cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80089d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80089d4:	4298      	cmp	r0, r3
 80089d6:	d8f9      	bhi.n	80089cc <__lshift+0xc8>
 80089d8:	e7ea      	b.n	80089b0 <__lshift+0xac>
 80089da:	bf00      	nop
 80089dc:	08009d67 	.word	0x08009d67
 80089e0:	08009d78 	.word	0x08009d78

080089e4 <__mcmp>:
 80089e4:	b530      	push	{r4, r5, lr}
 80089e6:	6902      	ldr	r2, [r0, #16]
 80089e8:	690c      	ldr	r4, [r1, #16]
 80089ea:	1b12      	subs	r2, r2, r4
 80089ec:	d10e      	bne.n	8008a0c <__mcmp+0x28>
 80089ee:	f100 0314 	add.w	r3, r0, #20
 80089f2:	3114      	adds	r1, #20
 80089f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80089f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80089fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008a00:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008a04:	42a5      	cmp	r5, r4
 8008a06:	d003      	beq.n	8008a10 <__mcmp+0x2c>
 8008a08:	d305      	bcc.n	8008a16 <__mcmp+0x32>
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	4610      	mov	r0, r2
 8008a0e:	bd30      	pop	{r4, r5, pc}
 8008a10:	4283      	cmp	r3, r0
 8008a12:	d3f3      	bcc.n	80089fc <__mcmp+0x18>
 8008a14:	e7fa      	b.n	8008a0c <__mcmp+0x28>
 8008a16:	f04f 32ff 	mov.w	r2, #4294967295
 8008a1a:	e7f7      	b.n	8008a0c <__mcmp+0x28>

08008a1c <__mdiff>:
 8008a1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a20:	460c      	mov	r4, r1
 8008a22:	4606      	mov	r6, r0
 8008a24:	4611      	mov	r1, r2
 8008a26:	4620      	mov	r0, r4
 8008a28:	4690      	mov	r8, r2
 8008a2a:	f7ff ffdb 	bl	80089e4 <__mcmp>
 8008a2e:	1e05      	subs	r5, r0, #0
 8008a30:	d110      	bne.n	8008a54 <__mdiff+0x38>
 8008a32:	4629      	mov	r1, r5
 8008a34:	4630      	mov	r0, r6
 8008a36:	f7ff fd53 	bl	80084e0 <_Balloc>
 8008a3a:	b930      	cbnz	r0, 8008a4a <__mdiff+0x2e>
 8008a3c:	4b3a      	ldr	r3, [pc, #232]	; (8008b28 <__mdiff+0x10c>)
 8008a3e:	4602      	mov	r2, r0
 8008a40:	f240 2132 	movw	r1, #562	; 0x232
 8008a44:	4839      	ldr	r0, [pc, #228]	; (8008b2c <__mdiff+0x110>)
 8008a46:	f000 fb31 	bl	80090ac <__assert_func>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a54:	bfa4      	itt	ge
 8008a56:	4643      	movge	r3, r8
 8008a58:	46a0      	movge	r8, r4
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008a60:	bfa6      	itte	ge
 8008a62:	461c      	movge	r4, r3
 8008a64:	2500      	movge	r5, #0
 8008a66:	2501      	movlt	r5, #1
 8008a68:	f7ff fd3a 	bl	80084e0 <_Balloc>
 8008a6c:	b920      	cbnz	r0, 8008a78 <__mdiff+0x5c>
 8008a6e:	4b2e      	ldr	r3, [pc, #184]	; (8008b28 <__mdiff+0x10c>)
 8008a70:	4602      	mov	r2, r0
 8008a72:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008a76:	e7e5      	b.n	8008a44 <__mdiff+0x28>
 8008a78:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008a7c:	6926      	ldr	r6, [r4, #16]
 8008a7e:	60c5      	str	r5, [r0, #12]
 8008a80:	f104 0914 	add.w	r9, r4, #20
 8008a84:	f108 0514 	add.w	r5, r8, #20
 8008a88:	f100 0e14 	add.w	lr, r0, #20
 8008a8c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008a90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a94:	f108 0210 	add.w	r2, r8, #16
 8008a98:	46f2      	mov	sl, lr
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008aa0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008aa4:	fa1f f883 	uxth.w	r8, r3
 8008aa8:	fa11 f18b 	uxtah	r1, r1, fp
 8008aac:	0c1b      	lsrs	r3, r3, #16
 8008aae:	eba1 0808 	sub.w	r8, r1, r8
 8008ab2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008ab6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008aba:	fa1f f888 	uxth.w	r8, r8
 8008abe:	1419      	asrs	r1, r3, #16
 8008ac0:	454e      	cmp	r6, r9
 8008ac2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ac6:	f84a 3b04 	str.w	r3, [sl], #4
 8008aca:	d8e7      	bhi.n	8008a9c <__mdiff+0x80>
 8008acc:	1b33      	subs	r3, r6, r4
 8008ace:	3b15      	subs	r3, #21
 8008ad0:	f023 0303 	bic.w	r3, r3, #3
 8008ad4:	3304      	adds	r3, #4
 8008ad6:	3415      	adds	r4, #21
 8008ad8:	42a6      	cmp	r6, r4
 8008ada:	bf38      	it	cc
 8008adc:	2304      	movcc	r3, #4
 8008ade:	441d      	add	r5, r3
 8008ae0:	4473      	add	r3, lr
 8008ae2:	469e      	mov	lr, r3
 8008ae4:	462e      	mov	r6, r5
 8008ae6:	4566      	cmp	r6, ip
 8008ae8:	d30e      	bcc.n	8008b08 <__mdiff+0xec>
 8008aea:	f10c 0203 	add.w	r2, ip, #3
 8008aee:	1b52      	subs	r2, r2, r5
 8008af0:	f022 0203 	bic.w	r2, r2, #3
 8008af4:	3d03      	subs	r5, #3
 8008af6:	45ac      	cmp	ip, r5
 8008af8:	bf38      	it	cc
 8008afa:	2200      	movcc	r2, #0
 8008afc:	441a      	add	r2, r3
 8008afe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008b02:	b17b      	cbz	r3, 8008b24 <__mdiff+0x108>
 8008b04:	6107      	str	r7, [r0, #16]
 8008b06:	e7a3      	b.n	8008a50 <__mdiff+0x34>
 8008b08:	f856 8b04 	ldr.w	r8, [r6], #4
 8008b0c:	fa11 f288 	uxtah	r2, r1, r8
 8008b10:	1414      	asrs	r4, r2, #16
 8008b12:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b16:	b292      	uxth	r2, r2
 8008b18:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008b1c:	f84e 2b04 	str.w	r2, [lr], #4
 8008b20:	1421      	asrs	r1, r4, #16
 8008b22:	e7e0      	b.n	8008ae6 <__mdiff+0xca>
 8008b24:	3f01      	subs	r7, #1
 8008b26:	e7ea      	b.n	8008afe <__mdiff+0xe2>
 8008b28:	08009d67 	.word	0x08009d67
 8008b2c:	08009d78 	.word	0x08009d78

08008b30 <__d2b>:
 8008b30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b34:	4689      	mov	r9, r1
 8008b36:	2101      	movs	r1, #1
 8008b38:	ec57 6b10 	vmov	r6, r7, d0
 8008b3c:	4690      	mov	r8, r2
 8008b3e:	f7ff fccf 	bl	80084e0 <_Balloc>
 8008b42:	4604      	mov	r4, r0
 8008b44:	b930      	cbnz	r0, 8008b54 <__d2b+0x24>
 8008b46:	4602      	mov	r2, r0
 8008b48:	4b25      	ldr	r3, [pc, #148]	; (8008be0 <__d2b+0xb0>)
 8008b4a:	4826      	ldr	r0, [pc, #152]	; (8008be4 <__d2b+0xb4>)
 8008b4c:	f240 310a 	movw	r1, #778	; 0x30a
 8008b50:	f000 faac 	bl	80090ac <__assert_func>
 8008b54:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008b58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008b5c:	bb35      	cbnz	r5, 8008bac <__d2b+0x7c>
 8008b5e:	2e00      	cmp	r6, #0
 8008b60:	9301      	str	r3, [sp, #4]
 8008b62:	d028      	beq.n	8008bb6 <__d2b+0x86>
 8008b64:	4668      	mov	r0, sp
 8008b66:	9600      	str	r6, [sp, #0]
 8008b68:	f7ff fd82 	bl	8008670 <__lo0bits>
 8008b6c:	9900      	ldr	r1, [sp, #0]
 8008b6e:	b300      	cbz	r0, 8008bb2 <__d2b+0x82>
 8008b70:	9a01      	ldr	r2, [sp, #4]
 8008b72:	f1c0 0320 	rsb	r3, r0, #32
 8008b76:	fa02 f303 	lsl.w	r3, r2, r3
 8008b7a:	430b      	orrs	r3, r1
 8008b7c:	40c2      	lsrs	r2, r0
 8008b7e:	6163      	str	r3, [r4, #20]
 8008b80:	9201      	str	r2, [sp, #4]
 8008b82:	9b01      	ldr	r3, [sp, #4]
 8008b84:	61a3      	str	r3, [r4, #24]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	bf14      	ite	ne
 8008b8a:	2202      	movne	r2, #2
 8008b8c:	2201      	moveq	r2, #1
 8008b8e:	6122      	str	r2, [r4, #16]
 8008b90:	b1d5      	cbz	r5, 8008bc8 <__d2b+0x98>
 8008b92:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b96:	4405      	add	r5, r0
 8008b98:	f8c9 5000 	str.w	r5, [r9]
 8008b9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ba0:	f8c8 0000 	str.w	r0, [r8]
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	b003      	add	sp, #12
 8008ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bb0:	e7d5      	b.n	8008b5e <__d2b+0x2e>
 8008bb2:	6161      	str	r1, [r4, #20]
 8008bb4:	e7e5      	b.n	8008b82 <__d2b+0x52>
 8008bb6:	a801      	add	r0, sp, #4
 8008bb8:	f7ff fd5a 	bl	8008670 <__lo0bits>
 8008bbc:	9b01      	ldr	r3, [sp, #4]
 8008bbe:	6163      	str	r3, [r4, #20]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	6122      	str	r2, [r4, #16]
 8008bc4:	3020      	adds	r0, #32
 8008bc6:	e7e3      	b.n	8008b90 <__d2b+0x60>
 8008bc8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008bcc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008bd0:	f8c9 0000 	str.w	r0, [r9]
 8008bd4:	6918      	ldr	r0, [r3, #16]
 8008bd6:	f7ff fd2b 	bl	8008630 <__hi0bits>
 8008bda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008bde:	e7df      	b.n	8008ba0 <__d2b+0x70>
 8008be0:	08009d67 	.word	0x08009d67
 8008be4:	08009d78 	.word	0x08009d78

08008be8 <_calloc_r>:
 8008be8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bea:	fba1 2402 	umull	r2, r4, r1, r2
 8008bee:	b94c      	cbnz	r4, 8008c04 <_calloc_r+0x1c>
 8008bf0:	4611      	mov	r1, r2
 8008bf2:	9201      	str	r2, [sp, #4]
 8008bf4:	f000 f87a 	bl	8008cec <_malloc_r>
 8008bf8:	9a01      	ldr	r2, [sp, #4]
 8008bfa:	4605      	mov	r5, r0
 8008bfc:	b930      	cbnz	r0, 8008c0c <_calloc_r+0x24>
 8008bfe:	4628      	mov	r0, r5
 8008c00:	b003      	add	sp, #12
 8008c02:	bd30      	pop	{r4, r5, pc}
 8008c04:	220c      	movs	r2, #12
 8008c06:	6002      	str	r2, [r0, #0]
 8008c08:	2500      	movs	r5, #0
 8008c0a:	e7f8      	b.n	8008bfe <_calloc_r+0x16>
 8008c0c:	4621      	mov	r1, r4
 8008c0e:	f7fe f92b 	bl	8006e68 <memset>
 8008c12:	e7f4      	b.n	8008bfe <_calloc_r+0x16>

08008c14 <_free_r>:
 8008c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c16:	2900      	cmp	r1, #0
 8008c18:	d044      	beq.n	8008ca4 <_free_r+0x90>
 8008c1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c1e:	9001      	str	r0, [sp, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f1a1 0404 	sub.w	r4, r1, #4
 8008c26:	bfb8      	it	lt
 8008c28:	18e4      	addlt	r4, r4, r3
 8008c2a:	f000 fa9b 	bl	8009164 <__malloc_lock>
 8008c2e:	4a1e      	ldr	r2, [pc, #120]	; (8008ca8 <_free_r+0x94>)
 8008c30:	9801      	ldr	r0, [sp, #4]
 8008c32:	6813      	ldr	r3, [r2, #0]
 8008c34:	b933      	cbnz	r3, 8008c44 <_free_r+0x30>
 8008c36:	6063      	str	r3, [r4, #4]
 8008c38:	6014      	str	r4, [r2, #0]
 8008c3a:	b003      	add	sp, #12
 8008c3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c40:	f000 ba96 	b.w	8009170 <__malloc_unlock>
 8008c44:	42a3      	cmp	r3, r4
 8008c46:	d908      	bls.n	8008c5a <_free_r+0x46>
 8008c48:	6825      	ldr	r5, [r4, #0]
 8008c4a:	1961      	adds	r1, r4, r5
 8008c4c:	428b      	cmp	r3, r1
 8008c4e:	bf01      	itttt	eq
 8008c50:	6819      	ldreq	r1, [r3, #0]
 8008c52:	685b      	ldreq	r3, [r3, #4]
 8008c54:	1949      	addeq	r1, r1, r5
 8008c56:	6021      	streq	r1, [r4, #0]
 8008c58:	e7ed      	b.n	8008c36 <_free_r+0x22>
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	b10b      	cbz	r3, 8008c64 <_free_r+0x50>
 8008c60:	42a3      	cmp	r3, r4
 8008c62:	d9fa      	bls.n	8008c5a <_free_r+0x46>
 8008c64:	6811      	ldr	r1, [r2, #0]
 8008c66:	1855      	adds	r5, r2, r1
 8008c68:	42a5      	cmp	r5, r4
 8008c6a:	d10b      	bne.n	8008c84 <_free_r+0x70>
 8008c6c:	6824      	ldr	r4, [r4, #0]
 8008c6e:	4421      	add	r1, r4
 8008c70:	1854      	adds	r4, r2, r1
 8008c72:	42a3      	cmp	r3, r4
 8008c74:	6011      	str	r1, [r2, #0]
 8008c76:	d1e0      	bne.n	8008c3a <_free_r+0x26>
 8008c78:	681c      	ldr	r4, [r3, #0]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	6053      	str	r3, [r2, #4]
 8008c7e:	4421      	add	r1, r4
 8008c80:	6011      	str	r1, [r2, #0]
 8008c82:	e7da      	b.n	8008c3a <_free_r+0x26>
 8008c84:	d902      	bls.n	8008c8c <_free_r+0x78>
 8008c86:	230c      	movs	r3, #12
 8008c88:	6003      	str	r3, [r0, #0]
 8008c8a:	e7d6      	b.n	8008c3a <_free_r+0x26>
 8008c8c:	6825      	ldr	r5, [r4, #0]
 8008c8e:	1961      	adds	r1, r4, r5
 8008c90:	428b      	cmp	r3, r1
 8008c92:	bf04      	itt	eq
 8008c94:	6819      	ldreq	r1, [r3, #0]
 8008c96:	685b      	ldreq	r3, [r3, #4]
 8008c98:	6063      	str	r3, [r4, #4]
 8008c9a:	bf04      	itt	eq
 8008c9c:	1949      	addeq	r1, r1, r5
 8008c9e:	6021      	streq	r1, [r4, #0]
 8008ca0:	6054      	str	r4, [r2, #4]
 8008ca2:	e7ca      	b.n	8008c3a <_free_r+0x26>
 8008ca4:	b003      	add	sp, #12
 8008ca6:	bd30      	pop	{r4, r5, pc}
 8008ca8:	20000af0 	.word	0x20000af0

08008cac <sbrk_aligned>:
 8008cac:	b570      	push	{r4, r5, r6, lr}
 8008cae:	4e0e      	ldr	r6, [pc, #56]	; (8008ce8 <sbrk_aligned+0x3c>)
 8008cb0:	460c      	mov	r4, r1
 8008cb2:	6831      	ldr	r1, [r6, #0]
 8008cb4:	4605      	mov	r5, r0
 8008cb6:	b911      	cbnz	r1, 8008cbe <sbrk_aligned+0x12>
 8008cb8:	f000 f9e8 	bl	800908c <_sbrk_r>
 8008cbc:	6030      	str	r0, [r6, #0]
 8008cbe:	4621      	mov	r1, r4
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	f000 f9e3 	bl	800908c <_sbrk_r>
 8008cc6:	1c43      	adds	r3, r0, #1
 8008cc8:	d00a      	beq.n	8008ce0 <sbrk_aligned+0x34>
 8008cca:	1cc4      	adds	r4, r0, #3
 8008ccc:	f024 0403 	bic.w	r4, r4, #3
 8008cd0:	42a0      	cmp	r0, r4
 8008cd2:	d007      	beq.n	8008ce4 <sbrk_aligned+0x38>
 8008cd4:	1a21      	subs	r1, r4, r0
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	f000 f9d8 	bl	800908c <_sbrk_r>
 8008cdc:	3001      	adds	r0, #1
 8008cde:	d101      	bne.n	8008ce4 <sbrk_aligned+0x38>
 8008ce0:	f04f 34ff 	mov.w	r4, #4294967295
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	bd70      	pop	{r4, r5, r6, pc}
 8008ce8:	20000af4 	.word	0x20000af4

08008cec <_malloc_r>:
 8008cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf0:	1ccd      	adds	r5, r1, #3
 8008cf2:	f025 0503 	bic.w	r5, r5, #3
 8008cf6:	3508      	adds	r5, #8
 8008cf8:	2d0c      	cmp	r5, #12
 8008cfa:	bf38      	it	cc
 8008cfc:	250c      	movcc	r5, #12
 8008cfe:	2d00      	cmp	r5, #0
 8008d00:	4607      	mov	r7, r0
 8008d02:	db01      	blt.n	8008d08 <_malloc_r+0x1c>
 8008d04:	42a9      	cmp	r1, r5
 8008d06:	d905      	bls.n	8008d14 <_malloc_r+0x28>
 8008d08:	230c      	movs	r3, #12
 8008d0a:	603b      	str	r3, [r7, #0]
 8008d0c:	2600      	movs	r6, #0
 8008d0e:	4630      	mov	r0, r6
 8008d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d14:	4e2e      	ldr	r6, [pc, #184]	; (8008dd0 <_malloc_r+0xe4>)
 8008d16:	f000 fa25 	bl	8009164 <__malloc_lock>
 8008d1a:	6833      	ldr	r3, [r6, #0]
 8008d1c:	461c      	mov	r4, r3
 8008d1e:	bb34      	cbnz	r4, 8008d6e <_malloc_r+0x82>
 8008d20:	4629      	mov	r1, r5
 8008d22:	4638      	mov	r0, r7
 8008d24:	f7ff ffc2 	bl	8008cac <sbrk_aligned>
 8008d28:	1c43      	adds	r3, r0, #1
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	d14d      	bne.n	8008dca <_malloc_r+0xde>
 8008d2e:	6834      	ldr	r4, [r6, #0]
 8008d30:	4626      	mov	r6, r4
 8008d32:	2e00      	cmp	r6, #0
 8008d34:	d140      	bne.n	8008db8 <_malloc_r+0xcc>
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	4631      	mov	r1, r6
 8008d3a:	4638      	mov	r0, r7
 8008d3c:	eb04 0803 	add.w	r8, r4, r3
 8008d40:	f000 f9a4 	bl	800908c <_sbrk_r>
 8008d44:	4580      	cmp	r8, r0
 8008d46:	d13a      	bne.n	8008dbe <_malloc_r+0xd2>
 8008d48:	6821      	ldr	r1, [r4, #0]
 8008d4a:	3503      	adds	r5, #3
 8008d4c:	1a6d      	subs	r5, r5, r1
 8008d4e:	f025 0503 	bic.w	r5, r5, #3
 8008d52:	3508      	adds	r5, #8
 8008d54:	2d0c      	cmp	r5, #12
 8008d56:	bf38      	it	cc
 8008d58:	250c      	movcc	r5, #12
 8008d5a:	4629      	mov	r1, r5
 8008d5c:	4638      	mov	r0, r7
 8008d5e:	f7ff ffa5 	bl	8008cac <sbrk_aligned>
 8008d62:	3001      	adds	r0, #1
 8008d64:	d02b      	beq.n	8008dbe <_malloc_r+0xd2>
 8008d66:	6823      	ldr	r3, [r4, #0]
 8008d68:	442b      	add	r3, r5
 8008d6a:	6023      	str	r3, [r4, #0]
 8008d6c:	e00e      	b.n	8008d8c <_malloc_r+0xa0>
 8008d6e:	6822      	ldr	r2, [r4, #0]
 8008d70:	1b52      	subs	r2, r2, r5
 8008d72:	d41e      	bmi.n	8008db2 <_malloc_r+0xc6>
 8008d74:	2a0b      	cmp	r2, #11
 8008d76:	d916      	bls.n	8008da6 <_malloc_r+0xba>
 8008d78:	1961      	adds	r1, r4, r5
 8008d7a:	42a3      	cmp	r3, r4
 8008d7c:	6025      	str	r5, [r4, #0]
 8008d7e:	bf18      	it	ne
 8008d80:	6059      	strne	r1, [r3, #4]
 8008d82:	6863      	ldr	r3, [r4, #4]
 8008d84:	bf08      	it	eq
 8008d86:	6031      	streq	r1, [r6, #0]
 8008d88:	5162      	str	r2, [r4, r5]
 8008d8a:	604b      	str	r3, [r1, #4]
 8008d8c:	4638      	mov	r0, r7
 8008d8e:	f104 060b 	add.w	r6, r4, #11
 8008d92:	f000 f9ed 	bl	8009170 <__malloc_unlock>
 8008d96:	f026 0607 	bic.w	r6, r6, #7
 8008d9a:	1d23      	adds	r3, r4, #4
 8008d9c:	1af2      	subs	r2, r6, r3
 8008d9e:	d0b6      	beq.n	8008d0e <_malloc_r+0x22>
 8008da0:	1b9b      	subs	r3, r3, r6
 8008da2:	50a3      	str	r3, [r4, r2]
 8008da4:	e7b3      	b.n	8008d0e <_malloc_r+0x22>
 8008da6:	6862      	ldr	r2, [r4, #4]
 8008da8:	42a3      	cmp	r3, r4
 8008daa:	bf0c      	ite	eq
 8008dac:	6032      	streq	r2, [r6, #0]
 8008dae:	605a      	strne	r2, [r3, #4]
 8008db0:	e7ec      	b.n	8008d8c <_malloc_r+0xa0>
 8008db2:	4623      	mov	r3, r4
 8008db4:	6864      	ldr	r4, [r4, #4]
 8008db6:	e7b2      	b.n	8008d1e <_malloc_r+0x32>
 8008db8:	4634      	mov	r4, r6
 8008dba:	6876      	ldr	r6, [r6, #4]
 8008dbc:	e7b9      	b.n	8008d32 <_malloc_r+0x46>
 8008dbe:	230c      	movs	r3, #12
 8008dc0:	603b      	str	r3, [r7, #0]
 8008dc2:	4638      	mov	r0, r7
 8008dc4:	f000 f9d4 	bl	8009170 <__malloc_unlock>
 8008dc8:	e7a1      	b.n	8008d0e <_malloc_r+0x22>
 8008dca:	6025      	str	r5, [r4, #0]
 8008dcc:	e7de      	b.n	8008d8c <_malloc_r+0xa0>
 8008dce:	bf00      	nop
 8008dd0:	20000af0 	.word	0x20000af0

08008dd4 <__ssputs_r>:
 8008dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd8:	688e      	ldr	r6, [r1, #8]
 8008dda:	429e      	cmp	r6, r3
 8008ddc:	4682      	mov	sl, r0
 8008dde:	460c      	mov	r4, r1
 8008de0:	4690      	mov	r8, r2
 8008de2:	461f      	mov	r7, r3
 8008de4:	d838      	bhi.n	8008e58 <__ssputs_r+0x84>
 8008de6:	898a      	ldrh	r2, [r1, #12]
 8008de8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008dec:	d032      	beq.n	8008e54 <__ssputs_r+0x80>
 8008dee:	6825      	ldr	r5, [r4, #0]
 8008df0:	6909      	ldr	r1, [r1, #16]
 8008df2:	eba5 0901 	sub.w	r9, r5, r1
 8008df6:	6965      	ldr	r5, [r4, #20]
 8008df8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e00:	3301      	adds	r3, #1
 8008e02:	444b      	add	r3, r9
 8008e04:	106d      	asrs	r5, r5, #1
 8008e06:	429d      	cmp	r5, r3
 8008e08:	bf38      	it	cc
 8008e0a:	461d      	movcc	r5, r3
 8008e0c:	0553      	lsls	r3, r2, #21
 8008e0e:	d531      	bpl.n	8008e74 <__ssputs_r+0xa0>
 8008e10:	4629      	mov	r1, r5
 8008e12:	f7ff ff6b 	bl	8008cec <_malloc_r>
 8008e16:	4606      	mov	r6, r0
 8008e18:	b950      	cbnz	r0, 8008e30 <__ssputs_r+0x5c>
 8008e1a:	230c      	movs	r3, #12
 8008e1c:	f8ca 3000 	str.w	r3, [sl]
 8008e20:	89a3      	ldrh	r3, [r4, #12]
 8008e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e26:	81a3      	strh	r3, [r4, #12]
 8008e28:	f04f 30ff 	mov.w	r0, #4294967295
 8008e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e30:	6921      	ldr	r1, [r4, #16]
 8008e32:	464a      	mov	r2, r9
 8008e34:	f7ff fb46 	bl	80084c4 <memcpy>
 8008e38:	89a3      	ldrh	r3, [r4, #12]
 8008e3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e42:	81a3      	strh	r3, [r4, #12]
 8008e44:	6126      	str	r6, [r4, #16]
 8008e46:	6165      	str	r5, [r4, #20]
 8008e48:	444e      	add	r6, r9
 8008e4a:	eba5 0509 	sub.w	r5, r5, r9
 8008e4e:	6026      	str	r6, [r4, #0]
 8008e50:	60a5      	str	r5, [r4, #8]
 8008e52:	463e      	mov	r6, r7
 8008e54:	42be      	cmp	r6, r7
 8008e56:	d900      	bls.n	8008e5a <__ssputs_r+0x86>
 8008e58:	463e      	mov	r6, r7
 8008e5a:	6820      	ldr	r0, [r4, #0]
 8008e5c:	4632      	mov	r2, r6
 8008e5e:	4641      	mov	r1, r8
 8008e60:	f000 f966 	bl	8009130 <memmove>
 8008e64:	68a3      	ldr	r3, [r4, #8]
 8008e66:	1b9b      	subs	r3, r3, r6
 8008e68:	60a3      	str	r3, [r4, #8]
 8008e6a:	6823      	ldr	r3, [r4, #0]
 8008e6c:	4433      	add	r3, r6
 8008e6e:	6023      	str	r3, [r4, #0]
 8008e70:	2000      	movs	r0, #0
 8008e72:	e7db      	b.n	8008e2c <__ssputs_r+0x58>
 8008e74:	462a      	mov	r2, r5
 8008e76:	f000 f981 	bl	800917c <_realloc_r>
 8008e7a:	4606      	mov	r6, r0
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	d1e1      	bne.n	8008e44 <__ssputs_r+0x70>
 8008e80:	6921      	ldr	r1, [r4, #16]
 8008e82:	4650      	mov	r0, sl
 8008e84:	f7ff fec6 	bl	8008c14 <_free_r>
 8008e88:	e7c7      	b.n	8008e1a <__ssputs_r+0x46>
	...

08008e8c <_svfiprintf_r>:
 8008e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e90:	4698      	mov	r8, r3
 8008e92:	898b      	ldrh	r3, [r1, #12]
 8008e94:	061b      	lsls	r3, r3, #24
 8008e96:	b09d      	sub	sp, #116	; 0x74
 8008e98:	4607      	mov	r7, r0
 8008e9a:	460d      	mov	r5, r1
 8008e9c:	4614      	mov	r4, r2
 8008e9e:	d50e      	bpl.n	8008ebe <_svfiprintf_r+0x32>
 8008ea0:	690b      	ldr	r3, [r1, #16]
 8008ea2:	b963      	cbnz	r3, 8008ebe <_svfiprintf_r+0x32>
 8008ea4:	2140      	movs	r1, #64	; 0x40
 8008ea6:	f7ff ff21 	bl	8008cec <_malloc_r>
 8008eaa:	6028      	str	r0, [r5, #0]
 8008eac:	6128      	str	r0, [r5, #16]
 8008eae:	b920      	cbnz	r0, 8008eba <_svfiprintf_r+0x2e>
 8008eb0:	230c      	movs	r3, #12
 8008eb2:	603b      	str	r3, [r7, #0]
 8008eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb8:	e0d1      	b.n	800905e <_svfiprintf_r+0x1d2>
 8008eba:	2340      	movs	r3, #64	; 0x40
 8008ebc:	616b      	str	r3, [r5, #20]
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ec2:	2320      	movs	r3, #32
 8008ec4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ec8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ecc:	2330      	movs	r3, #48	; 0x30
 8008ece:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009078 <_svfiprintf_r+0x1ec>
 8008ed2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ed6:	f04f 0901 	mov.w	r9, #1
 8008eda:	4623      	mov	r3, r4
 8008edc:	469a      	mov	sl, r3
 8008ede:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ee2:	b10a      	cbz	r2, 8008ee8 <_svfiprintf_r+0x5c>
 8008ee4:	2a25      	cmp	r2, #37	; 0x25
 8008ee6:	d1f9      	bne.n	8008edc <_svfiprintf_r+0x50>
 8008ee8:	ebba 0b04 	subs.w	fp, sl, r4
 8008eec:	d00b      	beq.n	8008f06 <_svfiprintf_r+0x7a>
 8008eee:	465b      	mov	r3, fp
 8008ef0:	4622      	mov	r2, r4
 8008ef2:	4629      	mov	r1, r5
 8008ef4:	4638      	mov	r0, r7
 8008ef6:	f7ff ff6d 	bl	8008dd4 <__ssputs_r>
 8008efa:	3001      	adds	r0, #1
 8008efc:	f000 80aa 	beq.w	8009054 <_svfiprintf_r+0x1c8>
 8008f00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f02:	445a      	add	r2, fp
 8008f04:	9209      	str	r2, [sp, #36]	; 0x24
 8008f06:	f89a 3000 	ldrb.w	r3, [sl]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f000 80a2 	beq.w	8009054 <_svfiprintf_r+0x1c8>
 8008f10:	2300      	movs	r3, #0
 8008f12:	f04f 32ff 	mov.w	r2, #4294967295
 8008f16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f1a:	f10a 0a01 	add.w	sl, sl, #1
 8008f1e:	9304      	str	r3, [sp, #16]
 8008f20:	9307      	str	r3, [sp, #28]
 8008f22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f26:	931a      	str	r3, [sp, #104]	; 0x68
 8008f28:	4654      	mov	r4, sl
 8008f2a:	2205      	movs	r2, #5
 8008f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f30:	4851      	ldr	r0, [pc, #324]	; (8009078 <_svfiprintf_r+0x1ec>)
 8008f32:	f7f7 f975 	bl	8000220 <memchr>
 8008f36:	9a04      	ldr	r2, [sp, #16]
 8008f38:	b9d8      	cbnz	r0, 8008f72 <_svfiprintf_r+0xe6>
 8008f3a:	06d0      	lsls	r0, r2, #27
 8008f3c:	bf44      	itt	mi
 8008f3e:	2320      	movmi	r3, #32
 8008f40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f44:	0711      	lsls	r1, r2, #28
 8008f46:	bf44      	itt	mi
 8008f48:	232b      	movmi	r3, #43	; 0x2b
 8008f4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f4e:	f89a 3000 	ldrb.w	r3, [sl]
 8008f52:	2b2a      	cmp	r3, #42	; 0x2a
 8008f54:	d015      	beq.n	8008f82 <_svfiprintf_r+0xf6>
 8008f56:	9a07      	ldr	r2, [sp, #28]
 8008f58:	4654      	mov	r4, sl
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	f04f 0c0a 	mov.w	ip, #10
 8008f60:	4621      	mov	r1, r4
 8008f62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f66:	3b30      	subs	r3, #48	; 0x30
 8008f68:	2b09      	cmp	r3, #9
 8008f6a:	d94e      	bls.n	800900a <_svfiprintf_r+0x17e>
 8008f6c:	b1b0      	cbz	r0, 8008f9c <_svfiprintf_r+0x110>
 8008f6e:	9207      	str	r2, [sp, #28]
 8008f70:	e014      	b.n	8008f9c <_svfiprintf_r+0x110>
 8008f72:	eba0 0308 	sub.w	r3, r0, r8
 8008f76:	fa09 f303 	lsl.w	r3, r9, r3
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	9304      	str	r3, [sp, #16]
 8008f7e:	46a2      	mov	sl, r4
 8008f80:	e7d2      	b.n	8008f28 <_svfiprintf_r+0x9c>
 8008f82:	9b03      	ldr	r3, [sp, #12]
 8008f84:	1d19      	adds	r1, r3, #4
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	9103      	str	r1, [sp, #12]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	bfbb      	ittet	lt
 8008f8e:	425b      	neglt	r3, r3
 8008f90:	f042 0202 	orrlt.w	r2, r2, #2
 8008f94:	9307      	strge	r3, [sp, #28]
 8008f96:	9307      	strlt	r3, [sp, #28]
 8008f98:	bfb8      	it	lt
 8008f9a:	9204      	strlt	r2, [sp, #16]
 8008f9c:	7823      	ldrb	r3, [r4, #0]
 8008f9e:	2b2e      	cmp	r3, #46	; 0x2e
 8008fa0:	d10c      	bne.n	8008fbc <_svfiprintf_r+0x130>
 8008fa2:	7863      	ldrb	r3, [r4, #1]
 8008fa4:	2b2a      	cmp	r3, #42	; 0x2a
 8008fa6:	d135      	bne.n	8009014 <_svfiprintf_r+0x188>
 8008fa8:	9b03      	ldr	r3, [sp, #12]
 8008faa:	1d1a      	adds	r2, r3, #4
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	9203      	str	r2, [sp, #12]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	bfb8      	it	lt
 8008fb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fb8:	3402      	adds	r4, #2
 8008fba:	9305      	str	r3, [sp, #20]
 8008fbc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009088 <_svfiprintf_r+0x1fc>
 8008fc0:	7821      	ldrb	r1, [r4, #0]
 8008fc2:	2203      	movs	r2, #3
 8008fc4:	4650      	mov	r0, sl
 8008fc6:	f7f7 f92b 	bl	8000220 <memchr>
 8008fca:	b140      	cbz	r0, 8008fde <_svfiprintf_r+0x152>
 8008fcc:	2340      	movs	r3, #64	; 0x40
 8008fce:	eba0 000a 	sub.w	r0, r0, sl
 8008fd2:	fa03 f000 	lsl.w	r0, r3, r0
 8008fd6:	9b04      	ldr	r3, [sp, #16]
 8008fd8:	4303      	orrs	r3, r0
 8008fda:	3401      	adds	r4, #1
 8008fdc:	9304      	str	r3, [sp, #16]
 8008fde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fe2:	4826      	ldr	r0, [pc, #152]	; (800907c <_svfiprintf_r+0x1f0>)
 8008fe4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fe8:	2206      	movs	r2, #6
 8008fea:	f7f7 f919 	bl	8000220 <memchr>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	d038      	beq.n	8009064 <_svfiprintf_r+0x1d8>
 8008ff2:	4b23      	ldr	r3, [pc, #140]	; (8009080 <_svfiprintf_r+0x1f4>)
 8008ff4:	bb1b      	cbnz	r3, 800903e <_svfiprintf_r+0x1b2>
 8008ff6:	9b03      	ldr	r3, [sp, #12]
 8008ff8:	3307      	adds	r3, #7
 8008ffa:	f023 0307 	bic.w	r3, r3, #7
 8008ffe:	3308      	adds	r3, #8
 8009000:	9303      	str	r3, [sp, #12]
 8009002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009004:	4433      	add	r3, r6
 8009006:	9309      	str	r3, [sp, #36]	; 0x24
 8009008:	e767      	b.n	8008eda <_svfiprintf_r+0x4e>
 800900a:	fb0c 3202 	mla	r2, ip, r2, r3
 800900e:	460c      	mov	r4, r1
 8009010:	2001      	movs	r0, #1
 8009012:	e7a5      	b.n	8008f60 <_svfiprintf_r+0xd4>
 8009014:	2300      	movs	r3, #0
 8009016:	3401      	adds	r4, #1
 8009018:	9305      	str	r3, [sp, #20]
 800901a:	4619      	mov	r1, r3
 800901c:	f04f 0c0a 	mov.w	ip, #10
 8009020:	4620      	mov	r0, r4
 8009022:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009026:	3a30      	subs	r2, #48	; 0x30
 8009028:	2a09      	cmp	r2, #9
 800902a:	d903      	bls.n	8009034 <_svfiprintf_r+0x1a8>
 800902c:	2b00      	cmp	r3, #0
 800902e:	d0c5      	beq.n	8008fbc <_svfiprintf_r+0x130>
 8009030:	9105      	str	r1, [sp, #20]
 8009032:	e7c3      	b.n	8008fbc <_svfiprintf_r+0x130>
 8009034:	fb0c 2101 	mla	r1, ip, r1, r2
 8009038:	4604      	mov	r4, r0
 800903a:	2301      	movs	r3, #1
 800903c:	e7f0      	b.n	8009020 <_svfiprintf_r+0x194>
 800903e:	ab03      	add	r3, sp, #12
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	462a      	mov	r2, r5
 8009044:	4b0f      	ldr	r3, [pc, #60]	; (8009084 <_svfiprintf_r+0x1f8>)
 8009046:	a904      	add	r1, sp, #16
 8009048:	4638      	mov	r0, r7
 800904a:	f7fd ffb5 	bl	8006fb8 <_printf_float>
 800904e:	1c42      	adds	r2, r0, #1
 8009050:	4606      	mov	r6, r0
 8009052:	d1d6      	bne.n	8009002 <_svfiprintf_r+0x176>
 8009054:	89ab      	ldrh	r3, [r5, #12]
 8009056:	065b      	lsls	r3, r3, #25
 8009058:	f53f af2c 	bmi.w	8008eb4 <_svfiprintf_r+0x28>
 800905c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800905e:	b01d      	add	sp, #116	; 0x74
 8009060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009064:	ab03      	add	r3, sp, #12
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	462a      	mov	r2, r5
 800906a:	4b06      	ldr	r3, [pc, #24]	; (8009084 <_svfiprintf_r+0x1f8>)
 800906c:	a904      	add	r1, sp, #16
 800906e:	4638      	mov	r0, r7
 8009070:	f7fe fa46 	bl	8007500 <_printf_i>
 8009074:	e7eb      	b.n	800904e <_svfiprintf_r+0x1c2>
 8009076:	bf00      	nop
 8009078:	08009ed4 	.word	0x08009ed4
 800907c:	08009ede 	.word	0x08009ede
 8009080:	08006fb9 	.word	0x08006fb9
 8009084:	08008dd5 	.word	0x08008dd5
 8009088:	08009eda 	.word	0x08009eda

0800908c <_sbrk_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	4d06      	ldr	r5, [pc, #24]	; (80090a8 <_sbrk_r+0x1c>)
 8009090:	2300      	movs	r3, #0
 8009092:	4604      	mov	r4, r0
 8009094:	4608      	mov	r0, r1
 8009096:	602b      	str	r3, [r5, #0]
 8009098:	f7f9 fa14 	bl	80024c4 <_sbrk>
 800909c:	1c43      	adds	r3, r0, #1
 800909e:	d102      	bne.n	80090a6 <_sbrk_r+0x1a>
 80090a0:	682b      	ldr	r3, [r5, #0]
 80090a2:	b103      	cbz	r3, 80090a6 <_sbrk_r+0x1a>
 80090a4:	6023      	str	r3, [r4, #0]
 80090a6:	bd38      	pop	{r3, r4, r5, pc}
 80090a8:	20000af8 	.word	0x20000af8

080090ac <__assert_func>:
 80090ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090ae:	4614      	mov	r4, r2
 80090b0:	461a      	mov	r2, r3
 80090b2:	4b09      	ldr	r3, [pc, #36]	; (80090d8 <__assert_func+0x2c>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4605      	mov	r5, r0
 80090b8:	68d8      	ldr	r0, [r3, #12]
 80090ba:	b14c      	cbz	r4, 80090d0 <__assert_func+0x24>
 80090bc:	4b07      	ldr	r3, [pc, #28]	; (80090dc <__assert_func+0x30>)
 80090be:	9100      	str	r1, [sp, #0]
 80090c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090c4:	4906      	ldr	r1, [pc, #24]	; (80090e0 <__assert_func+0x34>)
 80090c6:	462b      	mov	r3, r5
 80090c8:	f000 f80e 	bl	80090e8 <fiprintf>
 80090cc:	f000 faac 	bl	8009628 <abort>
 80090d0:	4b04      	ldr	r3, [pc, #16]	; (80090e4 <__assert_func+0x38>)
 80090d2:	461c      	mov	r4, r3
 80090d4:	e7f3      	b.n	80090be <__assert_func+0x12>
 80090d6:	bf00      	nop
 80090d8:	2000000c 	.word	0x2000000c
 80090dc:	08009ee5 	.word	0x08009ee5
 80090e0:	08009ef2 	.word	0x08009ef2
 80090e4:	08009f20 	.word	0x08009f20

080090e8 <fiprintf>:
 80090e8:	b40e      	push	{r1, r2, r3}
 80090ea:	b503      	push	{r0, r1, lr}
 80090ec:	4601      	mov	r1, r0
 80090ee:	ab03      	add	r3, sp, #12
 80090f0:	4805      	ldr	r0, [pc, #20]	; (8009108 <fiprintf+0x20>)
 80090f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80090f6:	6800      	ldr	r0, [r0, #0]
 80090f8:	9301      	str	r3, [sp, #4]
 80090fa:	f000 f897 	bl	800922c <_vfiprintf_r>
 80090fe:	b002      	add	sp, #8
 8009100:	f85d eb04 	ldr.w	lr, [sp], #4
 8009104:	b003      	add	sp, #12
 8009106:	4770      	bx	lr
 8009108:	2000000c 	.word	0x2000000c

0800910c <__ascii_mbtowc>:
 800910c:	b082      	sub	sp, #8
 800910e:	b901      	cbnz	r1, 8009112 <__ascii_mbtowc+0x6>
 8009110:	a901      	add	r1, sp, #4
 8009112:	b142      	cbz	r2, 8009126 <__ascii_mbtowc+0x1a>
 8009114:	b14b      	cbz	r3, 800912a <__ascii_mbtowc+0x1e>
 8009116:	7813      	ldrb	r3, [r2, #0]
 8009118:	600b      	str	r3, [r1, #0]
 800911a:	7812      	ldrb	r2, [r2, #0]
 800911c:	1e10      	subs	r0, r2, #0
 800911e:	bf18      	it	ne
 8009120:	2001      	movne	r0, #1
 8009122:	b002      	add	sp, #8
 8009124:	4770      	bx	lr
 8009126:	4610      	mov	r0, r2
 8009128:	e7fb      	b.n	8009122 <__ascii_mbtowc+0x16>
 800912a:	f06f 0001 	mvn.w	r0, #1
 800912e:	e7f8      	b.n	8009122 <__ascii_mbtowc+0x16>

08009130 <memmove>:
 8009130:	4288      	cmp	r0, r1
 8009132:	b510      	push	{r4, lr}
 8009134:	eb01 0402 	add.w	r4, r1, r2
 8009138:	d902      	bls.n	8009140 <memmove+0x10>
 800913a:	4284      	cmp	r4, r0
 800913c:	4623      	mov	r3, r4
 800913e:	d807      	bhi.n	8009150 <memmove+0x20>
 8009140:	1e43      	subs	r3, r0, #1
 8009142:	42a1      	cmp	r1, r4
 8009144:	d008      	beq.n	8009158 <memmove+0x28>
 8009146:	f811 2b01 	ldrb.w	r2, [r1], #1
 800914a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800914e:	e7f8      	b.n	8009142 <memmove+0x12>
 8009150:	4402      	add	r2, r0
 8009152:	4601      	mov	r1, r0
 8009154:	428a      	cmp	r2, r1
 8009156:	d100      	bne.n	800915a <memmove+0x2a>
 8009158:	bd10      	pop	{r4, pc}
 800915a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800915e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009162:	e7f7      	b.n	8009154 <memmove+0x24>

08009164 <__malloc_lock>:
 8009164:	4801      	ldr	r0, [pc, #4]	; (800916c <__malloc_lock+0x8>)
 8009166:	f000 bc1f 	b.w	80099a8 <__retarget_lock_acquire_recursive>
 800916a:	bf00      	nop
 800916c:	20000afc 	.word	0x20000afc

08009170 <__malloc_unlock>:
 8009170:	4801      	ldr	r0, [pc, #4]	; (8009178 <__malloc_unlock+0x8>)
 8009172:	f000 bc1a 	b.w	80099aa <__retarget_lock_release_recursive>
 8009176:	bf00      	nop
 8009178:	20000afc 	.word	0x20000afc

0800917c <_realloc_r>:
 800917c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009180:	4680      	mov	r8, r0
 8009182:	4614      	mov	r4, r2
 8009184:	460e      	mov	r6, r1
 8009186:	b921      	cbnz	r1, 8009192 <_realloc_r+0x16>
 8009188:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800918c:	4611      	mov	r1, r2
 800918e:	f7ff bdad 	b.w	8008cec <_malloc_r>
 8009192:	b92a      	cbnz	r2, 80091a0 <_realloc_r+0x24>
 8009194:	f7ff fd3e 	bl	8008c14 <_free_r>
 8009198:	4625      	mov	r5, r4
 800919a:	4628      	mov	r0, r5
 800919c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a0:	f000 fc6a 	bl	8009a78 <_malloc_usable_size_r>
 80091a4:	4284      	cmp	r4, r0
 80091a6:	4607      	mov	r7, r0
 80091a8:	d802      	bhi.n	80091b0 <_realloc_r+0x34>
 80091aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80091ae:	d812      	bhi.n	80091d6 <_realloc_r+0x5a>
 80091b0:	4621      	mov	r1, r4
 80091b2:	4640      	mov	r0, r8
 80091b4:	f7ff fd9a 	bl	8008cec <_malloc_r>
 80091b8:	4605      	mov	r5, r0
 80091ba:	2800      	cmp	r0, #0
 80091bc:	d0ed      	beq.n	800919a <_realloc_r+0x1e>
 80091be:	42bc      	cmp	r4, r7
 80091c0:	4622      	mov	r2, r4
 80091c2:	4631      	mov	r1, r6
 80091c4:	bf28      	it	cs
 80091c6:	463a      	movcs	r2, r7
 80091c8:	f7ff f97c 	bl	80084c4 <memcpy>
 80091cc:	4631      	mov	r1, r6
 80091ce:	4640      	mov	r0, r8
 80091d0:	f7ff fd20 	bl	8008c14 <_free_r>
 80091d4:	e7e1      	b.n	800919a <_realloc_r+0x1e>
 80091d6:	4635      	mov	r5, r6
 80091d8:	e7df      	b.n	800919a <_realloc_r+0x1e>

080091da <__sfputc_r>:
 80091da:	6893      	ldr	r3, [r2, #8]
 80091dc:	3b01      	subs	r3, #1
 80091de:	2b00      	cmp	r3, #0
 80091e0:	b410      	push	{r4}
 80091e2:	6093      	str	r3, [r2, #8]
 80091e4:	da08      	bge.n	80091f8 <__sfputc_r+0x1e>
 80091e6:	6994      	ldr	r4, [r2, #24]
 80091e8:	42a3      	cmp	r3, r4
 80091ea:	db01      	blt.n	80091f0 <__sfputc_r+0x16>
 80091ec:	290a      	cmp	r1, #10
 80091ee:	d103      	bne.n	80091f8 <__sfputc_r+0x1e>
 80091f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091f4:	f000 b94a 	b.w	800948c <__swbuf_r>
 80091f8:	6813      	ldr	r3, [r2, #0]
 80091fa:	1c58      	adds	r0, r3, #1
 80091fc:	6010      	str	r0, [r2, #0]
 80091fe:	7019      	strb	r1, [r3, #0]
 8009200:	4608      	mov	r0, r1
 8009202:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009206:	4770      	bx	lr

08009208 <__sfputs_r>:
 8009208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920a:	4606      	mov	r6, r0
 800920c:	460f      	mov	r7, r1
 800920e:	4614      	mov	r4, r2
 8009210:	18d5      	adds	r5, r2, r3
 8009212:	42ac      	cmp	r4, r5
 8009214:	d101      	bne.n	800921a <__sfputs_r+0x12>
 8009216:	2000      	movs	r0, #0
 8009218:	e007      	b.n	800922a <__sfputs_r+0x22>
 800921a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800921e:	463a      	mov	r2, r7
 8009220:	4630      	mov	r0, r6
 8009222:	f7ff ffda 	bl	80091da <__sfputc_r>
 8009226:	1c43      	adds	r3, r0, #1
 8009228:	d1f3      	bne.n	8009212 <__sfputs_r+0xa>
 800922a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800922c <_vfiprintf_r>:
 800922c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009230:	460d      	mov	r5, r1
 8009232:	b09d      	sub	sp, #116	; 0x74
 8009234:	4614      	mov	r4, r2
 8009236:	4698      	mov	r8, r3
 8009238:	4606      	mov	r6, r0
 800923a:	b118      	cbz	r0, 8009244 <_vfiprintf_r+0x18>
 800923c:	6983      	ldr	r3, [r0, #24]
 800923e:	b90b      	cbnz	r3, 8009244 <_vfiprintf_r+0x18>
 8009240:	f000 fb14 	bl	800986c <__sinit>
 8009244:	4b89      	ldr	r3, [pc, #548]	; (800946c <_vfiprintf_r+0x240>)
 8009246:	429d      	cmp	r5, r3
 8009248:	d11b      	bne.n	8009282 <_vfiprintf_r+0x56>
 800924a:	6875      	ldr	r5, [r6, #4]
 800924c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800924e:	07d9      	lsls	r1, r3, #31
 8009250:	d405      	bmi.n	800925e <_vfiprintf_r+0x32>
 8009252:	89ab      	ldrh	r3, [r5, #12]
 8009254:	059a      	lsls	r2, r3, #22
 8009256:	d402      	bmi.n	800925e <_vfiprintf_r+0x32>
 8009258:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800925a:	f000 fba5 	bl	80099a8 <__retarget_lock_acquire_recursive>
 800925e:	89ab      	ldrh	r3, [r5, #12]
 8009260:	071b      	lsls	r3, r3, #28
 8009262:	d501      	bpl.n	8009268 <_vfiprintf_r+0x3c>
 8009264:	692b      	ldr	r3, [r5, #16]
 8009266:	b9eb      	cbnz	r3, 80092a4 <_vfiprintf_r+0x78>
 8009268:	4629      	mov	r1, r5
 800926a:	4630      	mov	r0, r6
 800926c:	f000 f96e 	bl	800954c <__swsetup_r>
 8009270:	b1c0      	cbz	r0, 80092a4 <_vfiprintf_r+0x78>
 8009272:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009274:	07dc      	lsls	r4, r3, #31
 8009276:	d50e      	bpl.n	8009296 <_vfiprintf_r+0x6a>
 8009278:	f04f 30ff 	mov.w	r0, #4294967295
 800927c:	b01d      	add	sp, #116	; 0x74
 800927e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009282:	4b7b      	ldr	r3, [pc, #492]	; (8009470 <_vfiprintf_r+0x244>)
 8009284:	429d      	cmp	r5, r3
 8009286:	d101      	bne.n	800928c <_vfiprintf_r+0x60>
 8009288:	68b5      	ldr	r5, [r6, #8]
 800928a:	e7df      	b.n	800924c <_vfiprintf_r+0x20>
 800928c:	4b79      	ldr	r3, [pc, #484]	; (8009474 <_vfiprintf_r+0x248>)
 800928e:	429d      	cmp	r5, r3
 8009290:	bf08      	it	eq
 8009292:	68f5      	ldreq	r5, [r6, #12]
 8009294:	e7da      	b.n	800924c <_vfiprintf_r+0x20>
 8009296:	89ab      	ldrh	r3, [r5, #12]
 8009298:	0598      	lsls	r0, r3, #22
 800929a:	d4ed      	bmi.n	8009278 <_vfiprintf_r+0x4c>
 800929c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800929e:	f000 fb84 	bl	80099aa <__retarget_lock_release_recursive>
 80092a2:	e7e9      	b.n	8009278 <_vfiprintf_r+0x4c>
 80092a4:	2300      	movs	r3, #0
 80092a6:	9309      	str	r3, [sp, #36]	; 0x24
 80092a8:	2320      	movs	r3, #32
 80092aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80092b2:	2330      	movs	r3, #48	; 0x30
 80092b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009478 <_vfiprintf_r+0x24c>
 80092b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092bc:	f04f 0901 	mov.w	r9, #1
 80092c0:	4623      	mov	r3, r4
 80092c2:	469a      	mov	sl, r3
 80092c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092c8:	b10a      	cbz	r2, 80092ce <_vfiprintf_r+0xa2>
 80092ca:	2a25      	cmp	r2, #37	; 0x25
 80092cc:	d1f9      	bne.n	80092c2 <_vfiprintf_r+0x96>
 80092ce:	ebba 0b04 	subs.w	fp, sl, r4
 80092d2:	d00b      	beq.n	80092ec <_vfiprintf_r+0xc0>
 80092d4:	465b      	mov	r3, fp
 80092d6:	4622      	mov	r2, r4
 80092d8:	4629      	mov	r1, r5
 80092da:	4630      	mov	r0, r6
 80092dc:	f7ff ff94 	bl	8009208 <__sfputs_r>
 80092e0:	3001      	adds	r0, #1
 80092e2:	f000 80aa 	beq.w	800943a <_vfiprintf_r+0x20e>
 80092e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092e8:	445a      	add	r2, fp
 80092ea:	9209      	str	r2, [sp, #36]	; 0x24
 80092ec:	f89a 3000 	ldrb.w	r3, [sl]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f000 80a2 	beq.w	800943a <_vfiprintf_r+0x20e>
 80092f6:	2300      	movs	r3, #0
 80092f8:	f04f 32ff 	mov.w	r2, #4294967295
 80092fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009300:	f10a 0a01 	add.w	sl, sl, #1
 8009304:	9304      	str	r3, [sp, #16]
 8009306:	9307      	str	r3, [sp, #28]
 8009308:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800930c:	931a      	str	r3, [sp, #104]	; 0x68
 800930e:	4654      	mov	r4, sl
 8009310:	2205      	movs	r2, #5
 8009312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009316:	4858      	ldr	r0, [pc, #352]	; (8009478 <_vfiprintf_r+0x24c>)
 8009318:	f7f6 ff82 	bl	8000220 <memchr>
 800931c:	9a04      	ldr	r2, [sp, #16]
 800931e:	b9d8      	cbnz	r0, 8009358 <_vfiprintf_r+0x12c>
 8009320:	06d1      	lsls	r1, r2, #27
 8009322:	bf44      	itt	mi
 8009324:	2320      	movmi	r3, #32
 8009326:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800932a:	0713      	lsls	r3, r2, #28
 800932c:	bf44      	itt	mi
 800932e:	232b      	movmi	r3, #43	; 0x2b
 8009330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009334:	f89a 3000 	ldrb.w	r3, [sl]
 8009338:	2b2a      	cmp	r3, #42	; 0x2a
 800933a:	d015      	beq.n	8009368 <_vfiprintf_r+0x13c>
 800933c:	9a07      	ldr	r2, [sp, #28]
 800933e:	4654      	mov	r4, sl
 8009340:	2000      	movs	r0, #0
 8009342:	f04f 0c0a 	mov.w	ip, #10
 8009346:	4621      	mov	r1, r4
 8009348:	f811 3b01 	ldrb.w	r3, [r1], #1
 800934c:	3b30      	subs	r3, #48	; 0x30
 800934e:	2b09      	cmp	r3, #9
 8009350:	d94e      	bls.n	80093f0 <_vfiprintf_r+0x1c4>
 8009352:	b1b0      	cbz	r0, 8009382 <_vfiprintf_r+0x156>
 8009354:	9207      	str	r2, [sp, #28]
 8009356:	e014      	b.n	8009382 <_vfiprintf_r+0x156>
 8009358:	eba0 0308 	sub.w	r3, r0, r8
 800935c:	fa09 f303 	lsl.w	r3, r9, r3
 8009360:	4313      	orrs	r3, r2
 8009362:	9304      	str	r3, [sp, #16]
 8009364:	46a2      	mov	sl, r4
 8009366:	e7d2      	b.n	800930e <_vfiprintf_r+0xe2>
 8009368:	9b03      	ldr	r3, [sp, #12]
 800936a:	1d19      	adds	r1, r3, #4
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	9103      	str	r1, [sp, #12]
 8009370:	2b00      	cmp	r3, #0
 8009372:	bfbb      	ittet	lt
 8009374:	425b      	neglt	r3, r3
 8009376:	f042 0202 	orrlt.w	r2, r2, #2
 800937a:	9307      	strge	r3, [sp, #28]
 800937c:	9307      	strlt	r3, [sp, #28]
 800937e:	bfb8      	it	lt
 8009380:	9204      	strlt	r2, [sp, #16]
 8009382:	7823      	ldrb	r3, [r4, #0]
 8009384:	2b2e      	cmp	r3, #46	; 0x2e
 8009386:	d10c      	bne.n	80093a2 <_vfiprintf_r+0x176>
 8009388:	7863      	ldrb	r3, [r4, #1]
 800938a:	2b2a      	cmp	r3, #42	; 0x2a
 800938c:	d135      	bne.n	80093fa <_vfiprintf_r+0x1ce>
 800938e:	9b03      	ldr	r3, [sp, #12]
 8009390:	1d1a      	adds	r2, r3, #4
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	9203      	str	r2, [sp, #12]
 8009396:	2b00      	cmp	r3, #0
 8009398:	bfb8      	it	lt
 800939a:	f04f 33ff 	movlt.w	r3, #4294967295
 800939e:	3402      	adds	r4, #2
 80093a0:	9305      	str	r3, [sp, #20]
 80093a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009488 <_vfiprintf_r+0x25c>
 80093a6:	7821      	ldrb	r1, [r4, #0]
 80093a8:	2203      	movs	r2, #3
 80093aa:	4650      	mov	r0, sl
 80093ac:	f7f6 ff38 	bl	8000220 <memchr>
 80093b0:	b140      	cbz	r0, 80093c4 <_vfiprintf_r+0x198>
 80093b2:	2340      	movs	r3, #64	; 0x40
 80093b4:	eba0 000a 	sub.w	r0, r0, sl
 80093b8:	fa03 f000 	lsl.w	r0, r3, r0
 80093bc:	9b04      	ldr	r3, [sp, #16]
 80093be:	4303      	orrs	r3, r0
 80093c0:	3401      	adds	r4, #1
 80093c2:	9304      	str	r3, [sp, #16]
 80093c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093c8:	482c      	ldr	r0, [pc, #176]	; (800947c <_vfiprintf_r+0x250>)
 80093ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093ce:	2206      	movs	r2, #6
 80093d0:	f7f6 ff26 	bl	8000220 <memchr>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	d03f      	beq.n	8009458 <_vfiprintf_r+0x22c>
 80093d8:	4b29      	ldr	r3, [pc, #164]	; (8009480 <_vfiprintf_r+0x254>)
 80093da:	bb1b      	cbnz	r3, 8009424 <_vfiprintf_r+0x1f8>
 80093dc:	9b03      	ldr	r3, [sp, #12]
 80093de:	3307      	adds	r3, #7
 80093e0:	f023 0307 	bic.w	r3, r3, #7
 80093e4:	3308      	adds	r3, #8
 80093e6:	9303      	str	r3, [sp, #12]
 80093e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ea:	443b      	add	r3, r7
 80093ec:	9309      	str	r3, [sp, #36]	; 0x24
 80093ee:	e767      	b.n	80092c0 <_vfiprintf_r+0x94>
 80093f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80093f4:	460c      	mov	r4, r1
 80093f6:	2001      	movs	r0, #1
 80093f8:	e7a5      	b.n	8009346 <_vfiprintf_r+0x11a>
 80093fa:	2300      	movs	r3, #0
 80093fc:	3401      	adds	r4, #1
 80093fe:	9305      	str	r3, [sp, #20]
 8009400:	4619      	mov	r1, r3
 8009402:	f04f 0c0a 	mov.w	ip, #10
 8009406:	4620      	mov	r0, r4
 8009408:	f810 2b01 	ldrb.w	r2, [r0], #1
 800940c:	3a30      	subs	r2, #48	; 0x30
 800940e:	2a09      	cmp	r2, #9
 8009410:	d903      	bls.n	800941a <_vfiprintf_r+0x1ee>
 8009412:	2b00      	cmp	r3, #0
 8009414:	d0c5      	beq.n	80093a2 <_vfiprintf_r+0x176>
 8009416:	9105      	str	r1, [sp, #20]
 8009418:	e7c3      	b.n	80093a2 <_vfiprintf_r+0x176>
 800941a:	fb0c 2101 	mla	r1, ip, r1, r2
 800941e:	4604      	mov	r4, r0
 8009420:	2301      	movs	r3, #1
 8009422:	e7f0      	b.n	8009406 <_vfiprintf_r+0x1da>
 8009424:	ab03      	add	r3, sp, #12
 8009426:	9300      	str	r3, [sp, #0]
 8009428:	462a      	mov	r2, r5
 800942a:	4b16      	ldr	r3, [pc, #88]	; (8009484 <_vfiprintf_r+0x258>)
 800942c:	a904      	add	r1, sp, #16
 800942e:	4630      	mov	r0, r6
 8009430:	f7fd fdc2 	bl	8006fb8 <_printf_float>
 8009434:	4607      	mov	r7, r0
 8009436:	1c78      	adds	r0, r7, #1
 8009438:	d1d6      	bne.n	80093e8 <_vfiprintf_r+0x1bc>
 800943a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800943c:	07d9      	lsls	r1, r3, #31
 800943e:	d405      	bmi.n	800944c <_vfiprintf_r+0x220>
 8009440:	89ab      	ldrh	r3, [r5, #12]
 8009442:	059a      	lsls	r2, r3, #22
 8009444:	d402      	bmi.n	800944c <_vfiprintf_r+0x220>
 8009446:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009448:	f000 faaf 	bl	80099aa <__retarget_lock_release_recursive>
 800944c:	89ab      	ldrh	r3, [r5, #12]
 800944e:	065b      	lsls	r3, r3, #25
 8009450:	f53f af12 	bmi.w	8009278 <_vfiprintf_r+0x4c>
 8009454:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009456:	e711      	b.n	800927c <_vfiprintf_r+0x50>
 8009458:	ab03      	add	r3, sp, #12
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	462a      	mov	r2, r5
 800945e:	4b09      	ldr	r3, [pc, #36]	; (8009484 <_vfiprintf_r+0x258>)
 8009460:	a904      	add	r1, sp, #16
 8009462:	4630      	mov	r0, r6
 8009464:	f7fe f84c 	bl	8007500 <_printf_i>
 8009468:	e7e4      	b.n	8009434 <_vfiprintf_r+0x208>
 800946a:	bf00      	nop
 800946c:	0800a04c 	.word	0x0800a04c
 8009470:	0800a06c 	.word	0x0800a06c
 8009474:	0800a02c 	.word	0x0800a02c
 8009478:	08009ed4 	.word	0x08009ed4
 800947c:	08009ede 	.word	0x08009ede
 8009480:	08006fb9 	.word	0x08006fb9
 8009484:	08009209 	.word	0x08009209
 8009488:	08009eda 	.word	0x08009eda

0800948c <__swbuf_r>:
 800948c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948e:	460e      	mov	r6, r1
 8009490:	4614      	mov	r4, r2
 8009492:	4605      	mov	r5, r0
 8009494:	b118      	cbz	r0, 800949e <__swbuf_r+0x12>
 8009496:	6983      	ldr	r3, [r0, #24]
 8009498:	b90b      	cbnz	r3, 800949e <__swbuf_r+0x12>
 800949a:	f000 f9e7 	bl	800986c <__sinit>
 800949e:	4b21      	ldr	r3, [pc, #132]	; (8009524 <__swbuf_r+0x98>)
 80094a0:	429c      	cmp	r4, r3
 80094a2:	d12b      	bne.n	80094fc <__swbuf_r+0x70>
 80094a4:	686c      	ldr	r4, [r5, #4]
 80094a6:	69a3      	ldr	r3, [r4, #24]
 80094a8:	60a3      	str	r3, [r4, #8]
 80094aa:	89a3      	ldrh	r3, [r4, #12]
 80094ac:	071a      	lsls	r2, r3, #28
 80094ae:	d52f      	bpl.n	8009510 <__swbuf_r+0x84>
 80094b0:	6923      	ldr	r3, [r4, #16]
 80094b2:	b36b      	cbz	r3, 8009510 <__swbuf_r+0x84>
 80094b4:	6923      	ldr	r3, [r4, #16]
 80094b6:	6820      	ldr	r0, [r4, #0]
 80094b8:	1ac0      	subs	r0, r0, r3
 80094ba:	6963      	ldr	r3, [r4, #20]
 80094bc:	b2f6      	uxtb	r6, r6
 80094be:	4283      	cmp	r3, r0
 80094c0:	4637      	mov	r7, r6
 80094c2:	dc04      	bgt.n	80094ce <__swbuf_r+0x42>
 80094c4:	4621      	mov	r1, r4
 80094c6:	4628      	mov	r0, r5
 80094c8:	f000 f93c 	bl	8009744 <_fflush_r>
 80094cc:	bb30      	cbnz	r0, 800951c <__swbuf_r+0x90>
 80094ce:	68a3      	ldr	r3, [r4, #8]
 80094d0:	3b01      	subs	r3, #1
 80094d2:	60a3      	str	r3, [r4, #8]
 80094d4:	6823      	ldr	r3, [r4, #0]
 80094d6:	1c5a      	adds	r2, r3, #1
 80094d8:	6022      	str	r2, [r4, #0]
 80094da:	701e      	strb	r6, [r3, #0]
 80094dc:	6963      	ldr	r3, [r4, #20]
 80094de:	3001      	adds	r0, #1
 80094e0:	4283      	cmp	r3, r0
 80094e2:	d004      	beq.n	80094ee <__swbuf_r+0x62>
 80094e4:	89a3      	ldrh	r3, [r4, #12]
 80094e6:	07db      	lsls	r3, r3, #31
 80094e8:	d506      	bpl.n	80094f8 <__swbuf_r+0x6c>
 80094ea:	2e0a      	cmp	r6, #10
 80094ec:	d104      	bne.n	80094f8 <__swbuf_r+0x6c>
 80094ee:	4621      	mov	r1, r4
 80094f0:	4628      	mov	r0, r5
 80094f2:	f000 f927 	bl	8009744 <_fflush_r>
 80094f6:	b988      	cbnz	r0, 800951c <__swbuf_r+0x90>
 80094f8:	4638      	mov	r0, r7
 80094fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094fc:	4b0a      	ldr	r3, [pc, #40]	; (8009528 <__swbuf_r+0x9c>)
 80094fe:	429c      	cmp	r4, r3
 8009500:	d101      	bne.n	8009506 <__swbuf_r+0x7a>
 8009502:	68ac      	ldr	r4, [r5, #8]
 8009504:	e7cf      	b.n	80094a6 <__swbuf_r+0x1a>
 8009506:	4b09      	ldr	r3, [pc, #36]	; (800952c <__swbuf_r+0xa0>)
 8009508:	429c      	cmp	r4, r3
 800950a:	bf08      	it	eq
 800950c:	68ec      	ldreq	r4, [r5, #12]
 800950e:	e7ca      	b.n	80094a6 <__swbuf_r+0x1a>
 8009510:	4621      	mov	r1, r4
 8009512:	4628      	mov	r0, r5
 8009514:	f000 f81a 	bl	800954c <__swsetup_r>
 8009518:	2800      	cmp	r0, #0
 800951a:	d0cb      	beq.n	80094b4 <__swbuf_r+0x28>
 800951c:	f04f 37ff 	mov.w	r7, #4294967295
 8009520:	e7ea      	b.n	80094f8 <__swbuf_r+0x6c>
 8009522:	bf00      	nop
 8009524:	0800a04c 	.word	0x0800a04c
 8009528:	0800a06c 	.word	0x0800a06c
 800952c:	0800a02c 	.word	0x0800a02c

08009530 <__ascii_wctomb>:
 8009530:	b149      	cbz	r1, 8009546 <__ascii_wctomb+0x16>
 8009532:	2aff      	cmp	r2, #255	; 0xff
 8009534:	bf85      	ittet	hi
 8009536:	238a      	movhi	r3, #138	; 0x8a
 8009538:	6003      	strhi	r3, [r0, #0]
 800953a:	700a      	strbls	r2, [r1, #0]
 800953c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009540:	bf98      	it	ls
 8009542:	2001      	movls	r0, #1
 8009544:	4770      	bx	lr
 8009546:	4608      	mov	r0, r1
 8009548:	4770      	bx	lr
	...

0800954c <__swsetup_r>:
 800954c:	4b32      	ldr	r3, [pc, #200]	; (8009618 <__swsetup_r+0xcc>)
 800954e:	b570      	push	{r4, r5, r6, lr}
 8009550:	681d      	ldr	r5, [r3, #0]
 8009552:	4606      	mov	r6, r0
 8009554:	460c      	mov	r4, r1
 8009556:	b125      	cbz	r5, 8009562 <__swsetup_r+0x16>
 8009558:	69ab      	ldr	r3, [r5, #24]
 800955a:	b913      	cbnz	r3, 8009562 <__swsetup_r+0x16>
 800955c:	4628      	mov	r0, r5
 800955e:	f000 f985 	bl	800986c <__sinit>
 8009562:	4b2e      	ldr	r3, [pc, #184]	; (800961c <__swsetup_r+0xd0>)
 8009564:	429c      	cmp	r4, r3
 8009566:	d10f      	bne.n	8009588 <__swsetup_r+0x3c>
 8009568:	686c      	ldr	r4, [r5, #4]
 800956a:	89a3      	ldrh	r3, [r4, #12]
 800956c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009570:	0719      	lsls	r1, r3, #28
 8009572:	d42c      	bmi.n	80095ce <__swsetup_r+0x82>
 8009574:	06dd      	lsls	r5, r3, #27
 8009576:	d411      	bmi.n	800959c <__swsetup_r+0x50>
 8009578:	2309      	movs	r3, #9
 800957a:	6033      	str	r3, [r6, #0]
 800957c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009580:	81a3      	strh	r3, [r4, #12]
 8009582:	f04f 30ff 	mov.w	r0, #4294967295
 8009586:	e03e      	b.n	8009606 <__swsetup_r+0xba>
 8009588:	4b25      	ldr	r3, [pc, #148]	; (8009620 <__swsetup_r+0xd4>)
 800958a:	429c      	cmp	r4, r3
 800958c:	d101      	bne.n	8009592 <__swsetup_r+0x46>
 800958e:	68ac      	ldr	r4, [r5, #8]
 8009590:	e7eb      	b.n	800956a <__swsetup_r+0x1e>
 8009592:	4b24      	ldr	r3, [pc, #144]	; (8009624 <__swsetup_r+0xd8>)
 8009594:	429c      	cmp	r4, r3
 8009596:	bf08      	it	eq
 8009598:	68ec      	ldreq	r4, [r5, #12]
 800959a:	e7e6      	b.n	800956a <__swsetup_r+0x1e>
 800959c:	0758      	lsls	r0, r3, #29
 800959e:	d512      	bpl.n	80095c6 <__swsetup_r+0x7a>
 80095a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095a2:	b141      	cbz	r1, 80095b6 <__swsetup_r+0x6a>
 80095a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095a8:	4299      	cmp	r1, r3
 80095aa:	d002      	beq.n	80095b2 <__swsetup_r+0x66>
 80095ac:	4630      	mov	r0, r6
 80095ae:	f7ff fb31 	bl	8008c14 <_free_r>
 80095b2:	2300      	movs	r3, #0
 80095b4:	6363      	str	r3, [r4, #52]	; 0x34
 80095b6:	89a3      	ldrh	r3, [r4, #12]
 80095b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80095bc:	81a3      	strh	r3, [r4, #12]
 80095be:	2300      	movs	r3, #0
 80095c0:	6063      	str	r3, [r4, #4]
 80095c2:	6923      	ldr	r3, [r4, #16]
 80095c4:	6023      	str	r3, [r4, #0]
 80095c6:	89a3      	ldrh	r3, [r4, #12]
 80095c8:	f043 0308 	orr.w	r3, r3, #8
 80095cc:	81a3      	strh	r3, [r4, #12]
 80095ce:	6923      	ldr	r3, [r4, #16]
 80095d0:	b94b      	cbnz	r3, 80095e6 <__swsetup_r+0x9a>
 80095d2:	89a3      	ldrh	r3, [r4, #12]
 80095d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80095d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095dc:	d003      	beq.n	80095e6 <__swsetup_r+0x9a>
 80095de:	4621      	mov	r1, r4
 80095e0:	4630      	mov	r0, r6
 80095e2:	f000 fa09 	bl	80099f8 <__smakebuf_r>
 80095e6:	89a0      	ldrh	r0, [r4, #12]
 80095e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095ec:	f010 0301 	ands.w	r3, r0, #1
 80095f0:	d00a      	beq.n	8009608 <__swsetup_r+0xbc>
 80095f2:	2300      	movs	r3, #0
 80095f4:	60a3      	str	r3, [r4, #8]
 80095f6:	6963      	ldr	r3, [r4, #20]
 80095f8:	425b      	negs	r3, r3
 80095fa:	61a3      	str	r3, [r4, #24]
 80095fc:	6923      	ldr	r3, [r4, #16]
 80095fe:	b943      	cbnz	r3, 8009612 <__swsetup_r+0xc6>
 8009600:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009604:	d1ba      	bne.n	800957c <__swsetup_r+0x30>
 8009606:	bd70      	pop	{r4, r5, r6, pc}
 8009608:	0781      	lsls	r1, r0, #30
 800960a:	bf58      	it	pl
 800960c:	6963      	ldrpl	r3, [r4, #20]
 800960e:	60a3      	str	r3, [r4, #8]
 8009610:	e7f4      	b.n	80095fc <__swsetup_r+0xb0>
 8009612:	2000      	movs	r0, #0
 8009614:	e7f7      	b.n	8009606 <__swsetup_r+0xba>
 8009616:	bf00      	nop
 8009618:	2000000c 	.word	0x2000000c
 800961c:	0800a04c 	.word	0x0800a04c
 8009620:	0800a06c 	.word	0x0800a06c
 8009624:	0800a02c 	.word	0x0800a02c

08009628 <abort>:
 8009628:	b508      	push	{r3, lr}
 800962a:	2006      	movs	r0, #6
 800962c:	f000 fa54 	bl	8009ad8 <raise>
 8009630:	2001      	movs	r0, #1
 8009632:	f7f8 fecf 	bl	80023d4 <_exit>
	...

08009638 <__sflush_r>:
 8009638:	898a      	ldrh	r2, [r1, #12]
 800963a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800963e:	4605      	mov	r5, r0
 8009640:	0710      	lsls	r0, r2, #28
 8009642:	460c      	mov	r4, r1
 8009644:	d458      	bmi.n	80096f8 <__sflush_r+0xc0>
 8009646:	684b      	ldr	r3, [r1, #4]
 8009648:	2b00      	cmp	r3, #0
 800964a:	dc05      	bgt.n	8009658 <__sflush_r+0x20>
 800964c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800964e:	2b00      	cmp	r3, #0
 8009650:	dc02      	bgt.n	8009658 <__sflush_r+0x20>
 8009652:	2000      	movs	r0, #0
 8009654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800965a:	2e00      	cmp	r6, #0
 800965c:	d0f9      	beq.n	8009652 <__sflush_r+0x1a>
 800965e:	2300      	movs	r3, #0
 8009660:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009664:	682f      	ldr	r7, [r5, #0]
 8009666:	602b      	str	r3, [r5, #0]
 8009668:	d032      	beq.n	80096d0 <__sflush_r+0x98>
 800966a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800966c:	89a3      	ldrh	r3, [r4, #12]
 800966e:	075a      	lsls	r2, r3, #29
 8009670:	d505      	bpl.n	800967e <__sflush_r+0x46>
 8009672:	6863      	ldr	r3, [r4, #4]
 8009674:	1ac0      	subs	r0, r0, r3
 8009676:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009678:	b10b      	cbz	r3, 800967e <__sflush_r+0x46>
 800967a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800967c:	1ac0      	subs	r0, r0, r3
 800967e:	2300      	movs	r3, #0
 8009680:	4602      	mov	r2, r0
 8009682:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009684:	6a21      	ldr	r1, [r4, #32]
 8009686:	4628      	mov	r0, r5
 8009688:	47b0      	blx	r6
 800968a:	1c43      	adds	r3, r0, #1
 800968c:	89a3      	ldrh	r3, [r4, #12]
 800968e:	d106      	bne.n	800969e <__sflush_r+0x66>
 8009690:	6829      	ldr	r1, [r5, #0]
 8009692:	291d      	cmp	r1, #29
 8009694:	d82c      	bhi.n	80096f0 <__sflush_r+0xb8>
 8009696:	4a2a      	ldr	r2, [pc, #168]	; (8009740 <__sflush_r+0x108>)
 8009698:	40ca      	lsrs	r2, r1
 800969a:	07d6      	lsls	r6, r2, #31
 800969c:	d528      	bpl.n	80096f0 <__sflush_r+0xb8>
 800969e:	2200      	movs	r2, #0
 80096a0:	6062      	str	r2, [r4, #4]
 80096a2:	04d9      	lsls	r1, r3, #19
 80096a4:	6922      	ldr	r2, [r4, #16]
 80096a6:	6022      	str	r2, [r4, #0]
 80096a8:	d504      	bpl.n	80096b4 <__sflush_r+0x7c>
 80096aa:	1c42      	adds	r2, r0, #1
 80096ac:	d101      	bne.n	80096b2 <__sflush_r+0x7a>
 80096ae:	682b      	ldr	r3, [r5, #0]
 80096b0:	b903      	cbnz	r3, 80096b4 <__sflush_r+0x7c>
 80096b2:	6560      	str	r0, [r4, #84]	; 0x54
 80096b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096b6:	602f      	str	r7, [r5, #0]
 80096b8:	2900      	cmp	r1, #0
 80096ba:	d0ca      	beq.n	8009652 <__sflush_r+0x1a>
 80096bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096c0:	4299      	cmp	r1, r3
 80096c2:	d002      	beq.n	80096ca <__sflush_r+0x92>
 80096c4:	4628      	mov	r0, r5
 80096c6:	f7ff faa5 	bl	8008c14 <_free_r>
 80096ca:	2000      	movs	r0, #0
 80096cc:	6360      	str	r0, [r4, #52]	; 0x34
 80096ce:	e7c1      	b.n	8009654 <__sflush_r+0x1c>
 80096d0:	6a21      	ldr	r1, [r4, #32]
 80096d2:	2301      	movs	r3, #1
 80096d4:	4628      	mov	r0, r5
 80096d6:	47b0      	blx	r6
 80096d8:	1c41      	adds	r1, r0, #1
 80096da:	d1c7      	bne.n	800966c <__sflush_r+0x34>
 80096dc:	682b      	ldr	r3, [r5, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d0c4      	beq.n	800966c <__sflush_r+0x34>
 80096e2:	2b1d      	cmp	r3, #29
 80096e4:	d001      	beq.n	80096ea <__sflush_r+0xb2>
 80096e6:	2b16      	cmp	r3, #22
 80096e8:	d101      	bne.n	80096ee <__sflush_r+0xb6>
 80096ea:	602f      	str	r7, [r5, #0]
 80096ec:	e7b1      	b.n	8009652 <__sflush_r+0x1a>
 80096ee:	89a3      	ldrh	r3, [r4, #12]
 80096f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096f4:	81a3      	strh	r3, [r4, #12]
 80096f6:	e7ad      	b.n	8009654 <__sflush_r+0x1c>
 80096f8:	690f      	ldr	r7, [r1, #16]
 80096fa:	2f00      	cmp	r7, #0
 80096fc:	d0a9      	beq.n	8009652 <__sflush_r+0x1a>
 80096fe:	0793      	lsls	r3, r2, #30
 8009700:	680e      	ldr	r6, [r1, #0]
 8009702:	bf08      	it	eq
 8009704:	694b      	ldreq	r3, [r1, #20]
 8009706:	600f      	str	r7, [r1, #0]
 8009708:	bf18      	it	ne
 800970a:	2300      	movne	r3, #0
 800970c:	eba6 0807 	sub.w	r8, r6, r7
 8009710:	608b      	str	r3, [r1, #8]
 8009712:	f1b8 0f00 	cmp.w	r8, #0
 8009716:	dd9c      	ble.n	8009652 <__sflush_r+0x1a>
 8009718:	6a21      	ldr	r1, [r4, #32]
 800971a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800971c:	4643      	mov	r3, r8
 800971e:	463a      	mov	r2, r7
 8009720:	4628      	mov	r0, r5
 8009722:	47b0      	blx	r6
 8009724:	2800      	cmp	r0, #0
 8009726:	dc06      	bgt.n	8009736 <__sflush_r+0xfe>
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800972e:	81a3      	strh	r3, [r4, #12]
 8009730:	f04f 30ff 	mov.w	r0, #4294967295
 8009734:	e78e      	b.n	8009654 <__sflush_r+0x1c>
 8009736:	4407      	add	r7, r0
 8009738:	eba8 0800 	sub.w	r8, r8, r0
 800973c:	e7e9      	b.n	8009712 <__sflush_r+0xda>
 800973e:	bf00      	nop
 8009740:	20400001 	.word	0x20400001

08009744 <_fflush_r>:
 8009744:	b538      	push	{r3, r4, r5, lr}
 8009746:	690b      	ldr	r3, [r1, #16]
 8009748:	4605      	mov	r5, r0
 800974a:	460c      	mov	r4, r1
 800974c:	b913      	cbnz	r3, 8009754 <_fflush_r+0x10>
 800974e:	2500      	movs	r5, #0
 8009750:	4628      	mov	r0, r5
 8009752:	bd38      	pop	{r3, r4, r5, pc}
 8009754:	b118      	cbz	r0, 800975e <_fflush_r+0x1a>
 8009756:	6983      	ldr	r3, [r0, #24]
 8009758:	b90b      	cbnz	r3, 800975e <_fflush_r+0x1a>
 800975a:	f000 f887 	bl	800986c <__sinit>
 800975e:	4b14      	ldr	r3, [pc, #80]	; (80097b0 <_fflush_r+0x6c>)
 8009760:	429c      	cmp	r4, r3
 8009762:	d11b      	bne.n	800979c <_fflush_r+0x58>
 8009764:	686c      	ldr	r4, [r5, #4]
 8009766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d0ef      	beq.n	800974e <_fflush_r+0xa>
 800976e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009770:	07d0      	lsls	r0, r2, #31
 8009772:	d404      	bmi.n	800977e <_fflush_r+0x3a>
 8009774:	0599      	lsls	r1, r3, #22
 8009776:	d402      	bmi.n	800977e <_fflush_r+0x3a>
 8009778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800977a:	f000 f915 	bl	80099a8 <__retarget_lock_acquire_recursive>
 800977e:	4628      	mov	r0, r5
 8009780:	4621      	mov	r1, r4
 8009782:	f7ff ff59 	bl	8009638 <__sflush_r>
 8009786:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009788:	07da      	lsls	r2, r3, #31
 800978a:	4605      	mov	r5, r0
 800978c:	d4e0      	bmi.n	8009750 <_fflush_r+0xc>
 800978e:	89a3      	ldrh	r3, [r4, #12]
 8009790:	059b      	lsls	r3, r3, #22
 8009792:	d4dd      	bmi.n	8009750 <_fflush_r+0xc>
 8009794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009796:	f000 f908 	bl	80099aa <__retarget_lock_release_recursive>
 800979a:	e7d9      	b.n	8009750 <_fflush_r+0xc>
 800979c:	4b05      	ldr	r3, [pc, #20]	; (80097b4 <_fflush_r+0x70>)
 800979e:	429c      	cmp	r4, r3
 80097a0:	d101      	bne.n	80097a6 <_fflush_r+0x62>
 80097a2:	68ac      	ldr	r4, [r5, #8]
 80097a4:	e7df      	b.n	8009766 <_fflush_r+0x22>
 80097a6:	4b04      	ldr	r3, [pc, #16]	; (80097b8 <_fflush_r+0x74>)
 80097a8:	429c      	cmp	r4, r3
 80097aa:	bf08      	it	eq
 80097ac:	68ec      	ldreq	r4, [r5, #12]
 80097ae:	e7da      	b.n	8009766 <_fflush_r+0x22>
 80097b0:	0800a04c 	.word	0x0800a04c
 80097b4:	0800a06c 	.word	0x0800a06c
 80097b8:	0800a02c 	.word	0x0800a02c

080097bc <std>:
 80097bc:	2300      	movs	r3, #0
 80097be:	b510      	push	{r4, lr}
 80097c0:	4604      	mov	r4, r0
 80097c2:	e9c0 3300 	strd	r3, r3, [r0]
 80097c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097ca:	6083      	str	r3, [r0, #8]
 80097cc:	8181      	strh	r1, [r0, #12]
 80097ce:	6643      	str	r3, [r0, #100]	; 0x64
 80097d0:	81c2      	strh	r2, [r0, #14]
 80097d2:	6183      	str	r3, [r0, #24]
 80097d4:	4619      	mov	r1, r3
 80097d6:	2208      	movs	r2, #8
 80097d8:	305c      	adds	r0, #92	; 0x5c
 80097da:	f7fd fb45 	bl	8006e68 <memset>
 80097de:	4b05      	ldr	r3, [pc, #20]	; (80097f4 <std+0x38>)
 80097e0:	6263      	str	r3, [r4, #36]	; 0x24
 80097e2:	4b05      	ldr	r3, [pc, #20]	; (80097f8 <std+0x3c>)
 80097e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80097e6:	4b05      	ldr	r3, [pc, #20]	; (80097fc <std+0x40>)
 80097e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097ea:	4b05      	ldr	r3, [pc, #20]	; (8009800 <std+0x44>)
 80097ec:	6224      	str	r4, [r4, #32]
 80097ee:	6323      	str	r3, [r4, #48]	; 0x30
 80097f0:	bd10      	pop	{r4, pc}
 80097f2:	bf00      	nop
 80097f4:	08009b11 	.word	0x08009b11
 80097f8:	08009b33 	.word	0x08009b33
 80097fc:	08009b6b 	.word	0x08009b6b
 8009800:	08009b8f 	.word	0x08009b8f

08009804 <_cleanup_r>:
 8009804:	4901      	ldr	r1, [pc, #4]	; (800980c <_cleanup_r+0x8>)
 8009806:	f000 b8af 	b.w	8009968 <_fwalk_reent>
 800980a:	bf00      	nop
 800980c:	08009745 	.word	0x08009745

08009810 <__sfmoreglue>:
 8009810:	b570      	push	{r4, r5, r6, lr}
 8009812:	2268      	movs	r2, #104	; 0x68
 8009814:	1e4d      	subs	r5, r1, #1
 8009816:	4355      	muls	r5, r2
 8009818:	460e      	mov	r6, r1
 800981a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800981e:	f7ff fa65 	bl	8008cec <_malloc_r>
 8009822:	4604      	mov	r4, r0
 8009824:	b140      	cbz	r0, 8009838 <__sfmoreglue+0x28>
 8009826:	2100      	movs	r1, #0
 8009828:	e9c0 1600 	strd	r1, r6, [r0]
 800982c:	300c      	adds	r0, #12
 800982e:	60a0      	str	r0, [r4, #8]
 8009830:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009834:	f7fd fb18 	bl	8006e68 <memset>
 8009838:	4620      	mov	r0, r4
 800983a:	bd70      	pop	{r4, r5, r6, pc}

0800983c <__sfp_lock_acquire>:
 800983c:	4801      	ldr	r0, [pc, #4]	; (8009844 <__sfp_lock_acquire+0x8>)
 800983e:	f000 b8b3 	b.w	80099a8 <__retarget_lock_acquire_recursive>
 8009842:	bf00      	nop
 8009844:	20000afd 	.word	0x20000afd

08009848 <__sfp_lock_release>:
 8009848:	4801      	ldr	r0, [pc, #4]	; (8009850 <__sfp_lock_release+0x8>)
 800984a:	f000 b8ae 	b.w	80099aa <__retarget_lock_release_recursive>
 800984e:	bf00      	nop
 8009850:	20000afd 	.word	0x20000afd

08009854 <__sinit_lock_acquire>:
 8009854:	4801      	ldr	r0, [pc, #4]	; (800985c <__sinit_lock_acquire+0x8>)
 8009856:	f000 b8a7 	b.w	80099a8 <__retarget_lock_acquire_recursive>
 800985a:	bf00      	nop
 800985c:	20000afe 	.word	0x20000afe

08009860 <__sinit_lock_release>:
 8009860:	4801      	ldr	r0, [pc, #4]	; (8009868 <__sinit_lock_release+0x8>)
 8009862:	f000 b8a2 	b.w	80099aa <__retarget_lock_release_recursive>
 8009866:	bf00      	nop
 8009868:	20000afe 	.word	0x20000afe

0800986c <__sinit>:
 800986c:	b510      	push	{r4, lr}
 800986e:	4604      	mov	r4, r0
 8009870:	f7ff fff0 	bl	8009854 <__sinit_lock_acquire>
 8009874:	69a3      	ldr	r3, [r4, #24]
 8009876:	b11b      	cbz	r3, 8009880 <__sinit+0x14>
 8009878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800987c:	f7ff bff0 	b.w	8009860 <__sinit_lock_release>
 8009880:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009884:	6523      	str	r3, [r4, #80]	; 0x50
 8009886:	4b13      	ldr	r3, [pc, #76]	; (80098d4 <__sinit+0x68>)
 8009888:	4a13      	ldr	r2, [pc, #76]	; (80098d8 <__sinit+0x6c>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	62a2      	str	r2, [r4, #40]	; 0x28
 800988e:	42a3      	cmp	r3, r4
 8009890:	bf04      	itt	eq
 8009892:	2301      	moveq	r3, #1
 8009894:	61a3      	streq	r3, [r4, #24]
 8009896:	4620      	mov	r0, r4
 8009898:	f000 f820 	bl	80098dc <__sfp>
 800989c:	6060      	str	r0, [r4, #4]
 800989e:	4620      	mov	r0, r4
 80098a0:	f000 f81c 	bl	80098dc <__sfp>
 80098a4:	60a0      	str	r0, [r4, #8]
 80098a6:	4620      	mov	r0, r4
 80098a8:	f000 f818 	bl	80098dc <__sfp>
 80098ac:	2200      	movs	r2, #0
 80098ae:	60e0      	str	r0, [r4, #12]
 80098b0:	2104      	movs	r1, #4
 80098b2:	6860      	ldr	r0, [r4, #4]
 80098b4:	f7ff ff82 	bl	80097bc <std>
 80098b8:	68a0      	ldr	r0, [r4, #8]
 80098ba:	2201      	movs	r2, #1
 80098bc:	2109      	movs	r1, #9
 80098be:	f7ff ff7d 	bl	80097bc <std>
 80098c2:	68e0      	ldr	r0, [r4, #12]
 80098c4:	2202      	movs	r2, #2
 80098c6:	2112      	movs	r1, #18
 80098c8:	f7ff ff78 	bl	80097bc <std>
 80098cc:	2301      	movs	r3, #1
 80098ce:	61a3      	str	r3, [r4, #24]
 80098d0:	e7d2      	b.n	8009878 <__sinit+0xc>
 80098d2:	bf00      	nop
 80098d4:	08009cb0 	.word	0x08009cb0
 80098d8:	08009805 	.word	0x08009805

080098dc <__sfp>:
 80098dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098de:	4607      	mov	r7, r0
 80098e0:	f7ff ffac 	bl	800983c <__sfp_lock_acquire>
 80098e4:	4b1e      	ldr	r3, [pc, #120]	; (8009960 <__sfp+0x84>)
 80098e6:	681e      	ldr	r6, [r3, #0]
 80098e8:	69b3      	ldr	r3, [r6, #24]
 80098ea:	b913      	cbnz	r3, 80098f2 <__sfp+0x16>
 80098ec:	4630      	mov	r0, r6
 80098ee:	f7ff ffbd 	bl	800986c <__sinit>
 80098f2:	3648      	adds	r6, #72	; 0x48
 80098f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80098f8:	3b01      	subs	r3, #1
 80098fa:	d503      	bpl.n	8009904 <__sfp+0x28>
 80098fc:	6833      	ldr	r3, [r6, #0]
 80098fe:	b30b      	cbz	r3, 8009944 <__sfp+0x68>
 8009900:	6836      	ldr	r6, [r6, #0]
 8009902:	e7f7      	b.n	80098f4 <__sfp+0x18>
 8009904:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009908:	b9d5      	cbnz	r5, 8009940 <__sfp+0x64>
 800990a:	4b16      	ldr	r3, [pc, #88]	; (8009964 <__sfp+0x88>)
 800990c:	60e3      	str	r3, [r4, #12]
 800990e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009912:	6665      	str	r5, [r4, #100]	; 0x64
 8009914:	f000 f847 	bl	80099a6 <__retarget_lock_init_recursive>
 8009918:	f7ff ff96 	bl	8009848 <__sfp_lock_release>
 800991c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009920:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009924:	6025      	str	r5, [r4, #0]
 8009926:	61a5      	str	r5, [r4, #24]
 8009928:	2208      	movs	r2, #8
 800992a:	4629      	mov	r1, r5
 800992c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009930:	f7fd fa9a 	bl	8006e68 <memset>
 8009934:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009938:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800993c:	4620      	mov	r0, r4
 800993e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009940:	3468      	adds	r4, #104	; 0x68
 8009942:	e7d9      	b.n	80098f8 <__sfp+0x1c>
 8009944:	2104      	movs	r1, #4
 8009946:	4638      	mov	r0, r7
 8009948:	f7ff ff62 	bl	8009810 <__sfmoreglue>
 800994c:	4604      	mov	r4, r0
 800994e:	6030      	str	r0, [r6, #0]
 8009950:	2800      	cmp	r0, #0
 8009952:	d1d5      	bne.n	8009900 <__sfp+0x24>
 8009954:	f7ff ff78 	bl	8009848 <__sfp_lock_release>
 8009958:	230c      	movs	r3, #12
 800995a:	603b      	str	r3, [r7, #0]
 800995c:	e7ee      	b.n	800993c <__sfp+0x60>
 800995e:	bf00      	nop
 8009960:	08009cb0 	.word	0x08009cb0
 8009964:	ffff0001 	.word	0xffff0001

08009968 <_fwalk_reent>:
 8009968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800996c:	4606      	mov	r6, r0
 800996e:	4688      	mov	r8, r1
 8009970:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009974:	2700      	movs	r7, #0
 8009976:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800997a:	f1b9 0901 	subs.w	r9, r9, #1
 800997e:	d505      	bpl.n	800998c <_fwalk_reent+0x24>
 8009980:	6824      	ldr	r4, [r4, #0]
 8009982:	2c00      	cmp	r4, #0
 8009984:	d1f7      	bne.n	8009976 <_fwalk_reent+0xe>
 8009986:	4638      	mov	r0, r7
 8009988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800998c:	89ab      	ldrh	r3, [r5, #12]
 800998e:	2b01      	cmp	r3, #1
 8009990:	d907      	bls.n	80099a2 <_fwalk_reent+0x3a>
 8009992:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009996:	3301      	adds	r3, #1
 8009998:	d003      	beq.n	80099a2 <_fwalk_reent+0x3a>
 800999a:	4629      	mov	r1, r5
 800999c:	4630      	mov	r0, r6
 800999e:	47c0      	blx	r8
 80099a0:	4307      	orrs	r7, r0
 80099a2:	3568      	adds	r5, #104	; 0x68
 80099a4:	e7e9      	b.n	800997a <_fwalk_reent+0x12>

080099a6 <__retarget_lock_init_recursive>:
 80099a6:	4770      	bx	lr

080099a8 <__retarget_lock_acquire_recursive>:
 80099a8:	4770      	bx	lr

080099aa <__retarget_lock_release_recursive>:
 80099aa:	4770      	bx	lr

080099ac <__swhatbuf_r>:
 80099ac:	b570      	push	{r4, r5, r6, lr}
 80099ae:	460e      	mov	r6, r1
 80099b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099b4:	2900      	cmp	r1, #0
 80099b6:	b096      	sub	sp, #88	; 0x58
 80099b8:	4614      	mov	r4, r2
 80099ba:	461d      	mov	r5, r3
 80099bc:	da08      	bge.n	80099d0 <__swhatbuf_r+0x24>
 80099be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	602a      	str	r2, [r5, #0]
 80099c6:	061a      	lsls	r2, r3, #24
 80099c8:	d410      	bmi.n	80099ec <__swhatbuf_r+0x40>
 80099ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099ce:	e00e      	b.n	80099ee <__swhatbuf_r+0x42>
 80099d0:	466a      	mov	r2, sp
 80099d2:	f000 f903 	bl	8009bdc <_fstat_r>
 80099d6:	2800      	cmp	r0, #0
 80099d8:	dbf1      	blt.n	80099be <__swhatbuf_r+0x12>
 80099da:	9a01      	ldr	r2, [sp, #4]
 80099dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80099e4:	425a      	negs	r2, r3
 80099e6:	415a      	adcs	r2, r3
 80099e8:	602a      	str	r2, [r5, #0]
 80099ea:	e7ee      	b.n	80099ca <__swhatbuf_r+0x1e>
 80099ec:	2340      	movs	r3, #64	; 0x40
 80099ee:	2000      	movs	r0, #0
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	b016      	add	sp, #88	; 0x58
 80099f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080099f8 <__smakebuf_r>:
 80099f8:	898b      	ldrh	r3, [r1, #12]
 80099fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099fc:	079d      	lsls	r5, r3, #30
 80099fe:	4606      	mov	r6, r0
 8009a00:	460c      	mov	r4, r1
 8009a02:	d507      	bpl.n	8009a14 <__smakebuf_r+0x1c>
 8009a04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a08:	6023      	str	r3, [r4, #0]
 8009a0a:	6123      	str	r3, [r4, #16]
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	6163      	str	r3, [r4, #20]
 8009a10:	b002      	add	sp, #8
 8009a12:	bd70      	pop	{r4, r5, r6, pc}
 8009a14:	ab01      	add	r3, sp, #4
 8009a16:	466a      	mov	r2, sp
 8009a18:	f7ff ffc8 	bl	80099ac <__swhatbuf_r>
 8009a1c:	9900      	ldr	r1, [sp, #0]
 8009a1e:	4605      	mov	r5, r0
 8009a20:	4630      	mov	r0, r6
 8009a22:	f7ff f963 	bl	8008cec <_malloc_r>
 8009a26:	b948      	cbnz	r0, 8009a3c <__smakebuf_r+0x44>
 8009a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a2c:	059a      	lsls	r2, r3, #22
 8009a2e:	d4ef      	bmi.n	8009a10 <__smakebuf_r+0x18>
 8009a30:	f023 0303 	bic.w	r3, r3, #3
 8009a34:	f043 0302 	orr.w	r3, r3, #2
 8009a38:	81a3      	strh	r3, [r4, #12]
 8009a3a:	e7e3      	b.n	8009a04 <__smakebuf_r+0xc>
 8009a3c:	4b0d      	ldr	r3, [pc, #52]	; (8009a74 <__smakebuf_r+0x7c>)
 8009a3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a40:	89a3      	ldrh	r3, [r4, #12]
 8009a42:	6020      	str	r0, [r4, #0]
 8009a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a48:	81a3      	strh	r3, [r4, #12]
 8009a4a:	9b00      	ldr	r3, [sp, #0]
 8009a4c:	6163      	str	r3, [r4, #20]
 8009a4e:	9b01      	ldr	r3, [sp, #4]
 8009a50:	6120      	str	r0, [r4, #16]
 8009a52:	b15b      	cbz	r3, 8009a6c <__smakebuf_r+0x74>
 8009a54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a58:	4630      	mov	r0, r6
 8009a5a:	f000 f8d1 	bl	8009c00 <_isatty_r>
 8009a5e:	b128      	cbz	r0, 8009a6c <__smakebuf_r+0x74>
 8009a60:	89a3      	ldrh	r3, [r4, #12]
 8009a62:	f023 0303 	bic.w	r3, r3, #3
 8009a66:	f043 0301 	orr.w	r3, r3, #1
 8009a6a:	81a3      	strh	r3, [r4, #12]
 8009a6c:	89a0      	ldrh	r0, [r4, #12]
 8009a6e:	4305      	orrs	r5, r0
 8009a70:	81a5      	strh	r5, [r4, #12]
 8009a72:	e7cd      	b.n	8009a10 <__smakebuf_r+0x18>
 8009a74:	08009805 	.word	0x08009805

08009a78 <_malloc_usable_size_r>:
 8009a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a7c:	1f18      	subs	r0, r3, #4
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	bfbc      	itt	lt
 8009a82:	580b      	ldrlt	r3, [r1, r0]
 8009a84:	18c0      	addlt	r0, r0, r3
 8009a86:	4770      	bx	lr

08009a88 <_raise_r>:
 8009a88:	291f      	cmp	r1, #31
 8009a8a:	b538      	push	{r3, r4, r5, lr}
 8009a8c:	4604      	mov	r4, r0
 8009a8e:	460d      	mov	r5, r1
 8009a90:	d904      	bls.n	8009a9c <_raise_r+0x14>
 8009a92:	2316      	movs	r3, #22
 8009a94:	6003      	str	r3, [r0, #0]
 8009a96:	f04f 30ff 	mov.w	r0, #4294967295
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009a9e:	b112      	cbz	r2, 8009aa6 <_raise_r+0x1e>
 8009aa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009aa4:	b94b      	cbnz	r3, 8009aba <_raise_r+0x32>
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	f000 f830 	bl	8009b0c <_getpid_r>
 8009aac:	462a      	mov	r2, r5
 8009aae:	4601      	mov	r1, r0
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ab6:	f000 b817 	b.w	8009ae8 <_kill_r>
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d00a      	beq.n	8009ad4 <_raise_r+0x4c>
 8009abe:	1c59      	adds	r1, r3, #1
 8009ac0:	d103      	bne.n	8009aca <_raise_r+0x42>
 8009ac2:	2316      	movs	r3, #22
 8009ac4:	6003      	str	r3, [r0, #0]
 8009ac6:	2001      	movs	r0, #1
 8009ac8:	e7e7      	b.n	8009a9a <_raise_r+0x12>
 8009aca:	2400      	movs	r4, #0
 8009acc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	4798      	blx	r3
 8009ad4:	2000      	movs	r0, #0
 8009ad6:	e7e0      	b.n	8009a9a <_raise_r+0x12>

08009ad8 <raise>:
 8009ad8:	4b02      	ldr	r3, [pc, #8]	; (8009ae4 <raise+0xc>)
 8009ada:	4601      	mov	r1, r0
 8009adc:	6818      	ldr	r0, [r3, #0]
 8009ade:	f7ff bfd3 	b.w	8009a88 <_raise_r>
 8009ae2:	bf00      	nop
 8009ae4:	2000000c 	.word	0x2000000c

08009ae8 <_kill_r>:
 8009ae8:	b538      	push	{r3, r4, r5, lr}
 8009aea:	4d07      	ldr	r5, [pc, #28]	; (8009b08 <_kill_r+0x20>)
 8009aec:	2300      	movs	r3, #0
 8009aee:	4604      	mov	r4, r0
 8009af0:	4608      	mov	r0, r1
 8009af2:	4611      	mov	r1, r2
 8009af4:	602b      	str	r3, [r5, #0]
 8009af6:	f7f8 fc5d 	bl	80023b4 <_kill>
 8009afa:	1c43      	adds	r3, r0, #1
 8009afc:	d102      	bne.n	8009b04 <_kill_r+0x1c>
 8009afe:	682b      	ldr	r3, [r5, #0]
 8009b00:	b103      	cbz	r3, 8009b04 <_kill_r+0x1c>
 8009b02:	6023      	str	r3, [r4, #0]
 8009b04:	bd38      	pop	{r3, r4, r5, pc}
 8009b06:	bf00      	nop
 8009b08:	20000af8 	.word	0x20000af8

08009b0c <_getpid_r>:
 8009b0c:	f7f8 bc4a 	b.w	80023a4 <_getpid>

08009b10 <__sread>:
 8009b10:	b510      	push	{r4, lr}
 8009b12:	460c      	mov	r4, r1
 8009b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b18:	f000 f894 	bl	8009c44 <_read_r>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	bfab      	itete	ge
 8009b20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b22:	89a3      	ldrhlt	r3, [r4, #12]
 8009b24:	181b      	addge	r3, r3, r0
 8009b26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b2a:	bfac      	ite	ge
 8009b2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b2e:	81a3      	strhlt	r3, [r4, #12]
 8009b30:	bd10      	pop	{r4, pc}

08009b32 <__swrite>:
 8009b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b36:	461f      	mov	r7, r3
 8009b38:	898b      	ldrh	r3, [r1, #12]
 8009b3a:	05db      	lsls	r3, r3, #23
 8009b3c:	4605      	mov	r5, r0
 8009b3e:	460c      	mov	r4, r1
 8009b40:	4616      	mov	r6, r2
 8009b42:	d505      	bpl.n	8009b50 <__swrite+0x1e>
 8009b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b48:	2302      	movs	r3, #2
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f000 f868 	bl	8009c20 <_lseek_r>
 8009b50:	89a3      	ldrh	r3, [r4, #12]
 8009b52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b5a:	81a3      	strh	r3, [r4, #12]
 8009b5c:	4632      	mov	r2, r6
 8009b5e:	463b      	mov	r3, r7
 8009b60:	4628      	mov	r0, r5
 8009b62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b66:	f000 b817 	b.w	8009b98 <_write_r>

08009b6a <__sseek>:
 8009b6a:	b510      	push	{r4, lr}
 8009b6c:	460c      	mov	r4, r1
 8009b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b72:	f000 f855 	bl	8009c20 <_lseek_r>
 8009b76:	1c43      	adds	r3, r0, #1
 8009b78:	89a3      	ldrh	r3, [r4, #12]
 8009b7a:	bf15      	itete	ne
 8009b7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b86:	81a3      	strheq	r3, [r4, #12]
 8009b88:	bf18      	it	ne
 8009b8a:	81a3      	strhne	r3, [r4, #12]
 8009b8c:	bd10      	pop	{r4, pc}

08009b8e <__sclose>:
 8009b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b92:	f000 b813 	b.w	8009bbc <_close_r>
	...

08009b98 <_write_r>:
 8009b98:	b538      	push	{r3, r4, r5, lr}
 8009b9a:	4d07      	ldr	r5, [pc, #28]	; (8009bb8 <_write_r+0x20>)
 8009b9c:	4604      	mov	r4, r0
 8009b9e:	4608      	mov	r0, r1
 8009ba0:	4611      	mov	r1, r2
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	602a      	str	r2, [r5, #0]
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	f7f8 fc3b 	bl	8002422 <_write>
 8009bac:	1c43      	adds	r3, r0, #1
 8009bae:	d102      	bne.n	8009bb6 <_write_r+0x1e>
 8009bb0:	682b      	ldr	r3, [r5, #0]
 8009bb2:	b103      	cbz	r3, 8009bb6 <_write_r+0x1e>
 8009bb4:	6023      	str	r3, [r4, #0]
 8009bb6:	bd38      	pop	{r3, r4, r5, pc}
 8009bb8:	20000af8 	.word	0x20000af8

08009bbc <_close_r>:
 8009bbc:	b538      	push	{r3, r4, r5, lr}
 8009bbe:	4d06      	ldr	r5, [pc, #24]	; (8009bd8 <_close_r+0x1c>)
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	4604      	mov	r4, r0
 8009bc4:	4608      	mov	r0, r1
 8009bc6:	602b      	str	r3, [r5, #0]
 8009bc8:	f7f8 fc47 	bl	800245a <_close>
 8009bcc:	1c43      	adds	r3, r0, #1
 8009bce:	d102      	bne.n	8009bd6 <_close_r+0x1a>
 8009bd0:	682b      	ldr	r3, [r5, #0]
 8009bd2:	b103      	cbz	r3, 8009bd6 <_close_r+0x1a>
 8009bd4:	6023      	str	r3, [r4, #0]
 8009bd6:	bd38      	pop	{r3, r4, r5, pc}
 8009bd8:	20000af8 	.word	0x20000af8

08009bdc <_fstat_r>:
 8009bdc:	b538      	push	{r3, r4, r5, lr}
 8009bde:	4d07      	ldr	r5, [pc, #28]	; (8009bfc <_fstat_r+0x20>)
 8009be0:	2300      	movs	r3, #0
 8009be2:	4604      	mov	r4, r0
 8009be4:	4608      	mov	r0, r1
 8009be6:	4611      	mov	r1, r2
 8009be8:	602b      	str	r3, [r5, #0]
 8009bea:	f7f8 fc42 	bl	8002472 <_fstat>
 8009bee:	1c43      	adds	r3, r0, #1
 8009bf0:	d102      	bne.n	8009bf8 <_fstat_r+0x1c>
 8009bf2:	682b      	ldr	r3, [r5, #0]
 8009bf4:	b103      	cbz	r3, 8009bf8 <_fstat_r+0x1c>
 8009bf6:	6023      	str	r3, [r4, #0]
 8009bf8:	bd38      	pop	{r3, r4, r5, pc}
 8009bfa:	bf00      	nop
 8009bfc:	20000af8 	.word	0x20000af8

08009c00 <_isatty_r>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	4d06      	ldr	r5, [pc, #24]	; (8009c1c <_isatty_r+0x1c>)
 8009c04:	2300      	movs	r3, #0
 8009c06:	4604      	mov	r4, r0
 8009c08:	4608      	mov	r0, r1
 8009c0a:	602b      	str	r3, [r5, #0]
 8009c0c:	f7f8 fc41 	bl	8002492 <_isatty>
 8009c10:	1c43      	adds	r3, r0, #1
 8009c12:	d102      	bne.n	8009c1a <_isatty_r+0x1a>
 8009c14:	682b      	ldr	r3, [r5, #0]
 8009c16:	b103      	cbz	r3, 8009c1a <_isatty_r+0x1a>
 8009c18:	6023      	str	r3, [r4, #0]
 8009c1a:	bd38      	pop	{r3, r4, r5, pc}
 8009c1c:	20000af8 	.word	0x20000af8

08009c20 <_lseek_r>:
 8009c20:	b538      	push	{r3, r4, r5, lr}
 8009c22:	4d07      	ldr	r5, [pc, #28]	; (8009c40 <_lseek_r+0x20>)
 8009c24:	4604      	mov	r4, r0
 8009c26:	4608      	mov	r0, r1
 8009c28:	4611      	mov	r1, r2
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	602a      	str	r2, [r5, #0]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	f7f8 fc3a 	bl	80024a8 <_lseek>
 8009c34:	1c43      	adds	r3, r0, #1
 8009c36:	d102      	bne.n	8009c3e <_lseek_r+0x1e>
 8009c38:	682b      	ldr	r3, [r5, #0]
 8009c3a:	b103      	cbz	r3, 8009c3e <_lseek_r+0x1e>
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	bd38      	pop	{r3, r4, r5, pc}
 8009c40:	20000af8 	.word	0x20000af8

08009c44 <_read_r>:
 8009c44:	b538      	push	{r3, r4, r5, lr}
 8009c46:	4d07      	ldr	r5, [pc, #28]	; (8009c64 <_read_r+0x20>)
 8009c48:	4604      	mov	r4, r0
 8009c4a:	4608      	mov	r0, r1
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	2200      	movs	r2, #0
 8009c50:	602a      	str	r2, [r5, #0]
 8009c52:	461a      	mov	r2, r3
 8009c54:	f7f8 fbc8 	bl	80023e8 <_read>
 8009c58:	1c43      	adds	r3, r0, #1
 8009c5a:	d102      	bne.n	8009c62 <_read_r+0x1e>
 8009c5c:	682b      	ldr	r3, [r5, #0]
 8009c5e:	b103      	cbz	r3, 8009c62 <_read_r+0x1e>
 8009c60:	6023      	str	r3, [r4, #0]
 8009c62:	bd38      	pop	{r3, r4, r5, pc}
 8009c64:	20000af8 	.word	0x20000af8

08009c68 <_init>:
 8009c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6a:	bf00      	nop
 8009c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c6e:	bc08      	pop	{r3}
 8009c70:	469e      	mov	lr, r3
 8009c72:	4770      	bx	lr

08009c74 <_fini>:
 8009c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c76:	bf00      	nop
 8009c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c7a:	bc08      	pop	{r3}
 8009c7c:	469e      	mov	lr, r3
 8009c7e:	4770      	bx	lr
